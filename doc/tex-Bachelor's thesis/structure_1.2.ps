%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: thesis.dvi
%%CreationDate: Tue Feb 10 22:45:28 2015
%%Pages: 39
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: NimbusSanL-Bold NimbusSanL-Regu LMSans12-Regular
%%+ LMRoman12-Bold LMRoman10-Regular LMRoman10-Bold LMRoman17-Regular
%%+ LMMathSymbols10-Regular LMRoman8-Regular LMRoman6-Regular
%%+ LMRoman9-Regular LMRoman10-Italic
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o thesis.ps thesis.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2015.02.10:2244
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: LMRoman10-Italic
%!PS-AdobeFont-1.0: LMRoman10-Italic 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Italic known{/LMRoman10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Italic)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-458 -290 1386 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B30E8002A140BB230DF
940316C3A88DBAFEF249FA61B55B4B56C598D4266E12F7B0F006143F55F46681
A0E76FE1183A772016AF636A2B3034E12B12BBEB3C227DCEBB83986A004EBE89
2D913439F0E10163A557CA6657B435E52611E8404129383B1A6857EC4B4926FB
C6A2E74782F935A3FB0FDB05CB18FD8BCF8F1AAFAB72C03340EA56DF72DB59F2
1B103ADCC57B872E7AC079964DEDC0D0BA062E3909C7D7EA8407C5D92051EA96
76AE0F81896E3D4085CF47415EC18153AB906BFFC46DEDFC1CDC2ECDA3D07871
97F6B4A4B8935DAE4A24CF479E5F93A4D1C80CBF61ACAFAC97F4CB46501B7530
44421E3D88841F613D42612F738101469C10D7D537B0D4D39296A9AB3F132DA9
A3B459B0F850E2811A6A83947BD5840C06145EB2FB2F57809E120B983B414233
98E4973496CBD3ADA7B5AE09498C870396FAFBF91AE0ADB8695D003366F550E5
F5FF65E7D0109CCCCAB8C9822B2C46C3821C06EBF5FD03C11BE7C7C2DEA6D331
1306D1F3DF31BF4BA9D145448CCD5CE52177724C3C7A1B01D39848BAFBD45097
2F94109C077B406B8E33B274AD9FCEBEF0812AA149D3D37F02C28000206742E4
3D4297F0974755443E95B9967D2F3E5CFEF77E1BE7FF33FD7FB8B81465057DC2
2989D3ACF41AB2FDA0FEBAAADEC2A0730692B12652C2BB9F6E96601B1A789BE0
415F85CB8A653CDBAB242410D8AD167644497CD90BD0962D625F267AE2F88DF5
4D24666D0E11A19B0B169E1B130678D6AA963FDCAD53908D5B476BC8A568B56A
A17A718F13C71D70F35947F9268EF5D89E26850F4BC9BC2AB1BF8609D3A64D1C
43BBB187FC37B4DF600B1126F59D266F3957F3BF373448D14C24BB0AFFD92B76
CDBE1E10B3FC037552ED74045C08871D70C0C42D4A1026001EBE0BBD0D9D3FC0
0A5FDABCF029A45C23311338A2BF06BF5B745E117F0AE99E24AFE7490FEFC3FB
321996E0CA919B90DDBBBC078997A22A5B82111CCC05507DF980D3D9F2ED839C
CE9E2DBB0220DCD856DD1F9DB2E7721F5E87962FF4C8BEFB1D6361517C304840
39E4F06CF0EAAE9275559257FAED5A1C5B0054460EFF10D6184095A1FA285FBE
30356BF48C23BED908642404FC79F789D849F04C06573FF3B1C6FC0878C3644C
11B5DA264DF7A88FC29D413C23819E66AF92F0E82BBC208850A78558F60B40D0
CAF340B83A047FE949BF24C35C73E5EB43D4885785D4D1F07DDD373CB57A8F42
2670A179D7CAAB514DDC66C6966D943FC4A489C3155C5F24AEF93D86C1A0DA6B
A58119FCA2570964C9054AF98B16283B2BA3D713B0F7F2C1C58A7696168BFA1B
86033F16F94BC18DC911270C7B4E1ACEB5EC9B1DB24B21C9F3D6882E3E909D80
E0762C58ECC4E243C9403AE9B7678F96A4B3894FEA6D990549345DBD2BF8248D
D9CB93AFEBDCF50001F5A56EDC3630005730241A0662D1D1E9C9DF1DA7866A77
2E358CDEA9FBA4EF11A51C9F3EE6A9AF7CD4F34009615C025BFD7D46F32F574D
062226B47B9CB5B4647CAD084A51EDF2A7B5D38DE9EA553056C0CB82ECE81B59
64E65894E18636F9116674F20161A512ADE5004EAC1983C3A27BD79A2FA6D937
E6E2A081E618F0BCD559EE528669F903F2BD240BBCE9431576002D097A654FDB
4013212106D464B0FE966C9832860DB0603DC2B59108094C406EB457743043EB
EA32B09E4DBFD82D5167D7A4C7C44F78456C84DAF476A00A93A57ACB5ED28FA1
E9FCB1CE83942637B2A6BD6CF81E3DF6A99E9FFA2DB4113C12AB9C616F074276
C4840A550177794FB3DEBEBE9E4105AAD34FF119AB2483CBFE6656A0ED50B329
ED72DFFF1413E660A1ABCBB98417563E78A763B6F500FD4C32473D9875FCC119
196474BA66046AB43C9857D215690076BD235137B9775F82D28A9D37D1EB182F
0772719B6F398DB7B747DB4FFF831616C926D616D11FD3302153ECFA01B98320
5702919B918511D079AE85F0F152088362E431D578E60266B4559655442B7A3C
1BCA84112F5D3A5FDFDEA7FDE12DAE40F0E80F7C388E7F4D07DB3D4F16AE2503
13F149C32C312C7FE7A7AD55991FE366E1D0CBAEAC71646051A6578C304C2E54
00D00D4B13C28573A8F5DAE1FA2439F3AF1B989BD9CBB3BEF08265F3D767FA47
32869475BFACC5E95ABCF4E50F3F746C405422CA52C6F11D65E7B61ECADC9449
1C5FF034CEA604CDFE8EADB3B163252BEBF1BD3F2A2300B50392C923A508BE8C
7F280053479A3A8234D93B303EDBBE9C97735DDD9A132955A674C60D5774E77E
0ED24E62F5A85DCB4D443D680719B0A29D5F893697800D04A47D261D8DE4BE72
DB76EBDD3B6D382A015F745E9413590B9E23B4E8689F2965CCFBCA090FDC33F8
85179DAE71D90222FD61F346CAD55B0BEF461C749ACD6B2E995F9301A4A95110
94B7D2DB2C726B63EF3A983B84C7B062CE69CB0B93C351BCDB705B0820E139D5
5D686C7E96E655F40DFDEF78BD5B80F9D79C8F744F224DA5E87AC84122474C84
C7C3696AD83CA15099ECDF3A273E8CEB317C314B681131808C68CFCBCB920E8F
4E2836C05EE9FC4B58E6CD01B59C73A14DBFB287B7017F6AE0F2BF92081CC71C
6BAD6E8C7A2D807CD06926013E42466833F17030AAA7B0A2CEB87A0360124FD1
504C60D92A8180DADA2F10655BBF7564E8581E65A89F851C4F95DA49661EDD60
013B3B394283857632A3737C5327B33A00B6103D5F03C92D885953DF6CD1C03F
7CAFFAC3B9400B1B043A0929E777C5ED85D8B6502C2D4186F2382FA96B6F0FFC
435D2D40E42E62C5A18BC174F002F7FDE2D74F96310471B9A1B8341E49C62DDA
A700807D6C7BF995035406C64054DED8BC381236C47E47A051848099D1CAF25B
3F58A361F1B1C042E28A6DF988BC624BE0FF069DD3891222CDA54C7892F94C31
BE1D2D45C0D27D21F892B9AE92E8480F5B8A2AB1B87CA5358E0A1B05164210F4
453883898DE5BA430913471A1446687135708C6BE071B51FDE425A0AA5724981
C7C3CC23E1FD81849C040C7EE7BEFF04E2E860631D8B436EAFCAF9102A25E5F0
47CC8473EC2AC8E4B2C062E7A5833A6A4EE0E75EF619C1262B4249BA9ACCE869
E4A5D20F55666D0C1357B0953D8E9950803E1A5C804A6C25089ACB08A44D9816
73596D8A34E260B493A8D87F3FCEBF2730D812FDDDD016B803C38B89238489DF
6E4D672D1306407D69F633E5C7B79CE97EFA309FE8478DFF4DB502DBCCDBD61C
A5B5E20E1CFC04C19DC8833B330F1AAA69E59F399CB28CEBF1B460D76C114177
E51D621C2E0B050FDEB852D3A6F1748B19BEE96B71A0E91D39A856F11BE21F31
6D94ECBCAD9BD15D4C1DCB2C662679D6B692A04DA68DAFF042AFE03D6D0F7F9D
5AA9A6D6CF9E33C03F6150534D8A8DAC0887AEED675B468DC7D0FF1E4AD161C1
C1E17AF3203EF8D033328E197493A7D1C549F85657DABE84D440FF54F0E10321
CFA3BD96FE91366258A9FA8623ABA8C1AB7B6E448C5466EF81CE9A45857AFC40
09E803C723658112AF076F1F53CE092889EBC2E0FF72A920A5FEFD64E894D64D
1FE6765657EDB83C524664AE0AB89DF0865E14A2374BC9C5097DA1DE6D466F2D
1A2E8D3BBFE5B60766FC706C4DF71BA9C47F7D9A1E51138EB92AB182C382919D
53E6CF1DB0CF8E6559EE447E9903ECAEC93D5E9D3E18F4A0727C34F2A4EDC2F0
821009F568E615CE94158D9E0A162873E95EEF33772ADD6BD3ABC64F28E499B5
9DCBD8C691B6684152C6FDC5D5E551B989AE583C5305D7D016E544FC74D73AE1
98962F216A659922AEA3C438B882A9C12CC2D82DC135878B403FEF6D0969CAAF
54CD5F89FD89D153C58F0D6AA3F86B62B615D9AB5795D2A07F69473FD5CCC86D
416A32D3C5E85739E3FEDF0E5657C31D96285557B332CEE2959749E610D02D5E
C718FB751B46C7972BDAE3C044E0BBD0FFCFB0EAB9F3E41B0F3C4A5DD8B590DD
235A5E32DA7BA7C54F9F31633A7155A83360304FD4175BBC50F3077109AF0613
341E0F6D7F187CCE23C443CFA290D0F4FFEC4CA30BC9C73264E946226627968F
A8AD8EFA4530AD6B09F686FC1153C84590672247F6EB7DE01E820CF9FF3908D5
130ABAFB058534BF9B357739886C97C3459D8EC3797F3C98E8231D2093E84101
80C54A379DA75BB9DEAD6B1C598F5E312DB3A0237D88483418CF7B8F43A76951
C4DD780ADF604B1984ECB3208C2DC55AFC5016FB2C48AD15F1FBB3826AACF448
9BE80CB7BF3C1C1ECC107604BC4CDD5EB00E97B36FBEACA9674C78EA7E21DB0F
715316C8BECD3B9F74A6B21D04D33D8D6867E328F1F84E529AAF91FBFDBF163B
51D39167A93E61FD9B41053DB67BF4F129A0F681BB7C42AB16F3DC305839233A
6D79FF1EDDCD2025F12147C5C8D5E39937B03356D453D819AB09E625D0C88808
2F3DDEF6558D68EEE57DD7DE2478A2B21E4B9DC947825E74F20C7323A202E1BE
B50862F718C3FE7C00F952DBBB63C0DA21C717E348E0BE63120324CB09629072
7543507A36A01100B17076AE6C6FF5F775FB04329DB50233BD33443FEED6598C
EA99A13F65908941B7F397E1DF44AA50AA5B9B4F9093BD3FBFD3AF672D56C7DC
F54E6E96E97520EE266E21EE88740E10DE65574A924E4F10A6169F216684A46F
90DCBAE8DB96C15B184EC046359A700512C58E83F41C1EB95705A5F87B523A25
698E5A62966B7A6BA5E64FABE65A37E50D691811872368955901A885B611744B
36A8ABC80E5850F9C7257D03B1AB40618B23172EE2D3E6538CD9B1E12B834A6D
01E9F6A869968073AD979877DCDA412F63573818F678B24381288CB5E80FBFBA
2FFF1155EDDEFA2EF538083B9CB05A739CE41298E97164C1FF24BE58E856FE5E
BE3C809D3E8517DF8D8AE98E2882439FA81903941B363A7D8859EE81F22F4D29
ECF78540427039371C045B266FF717B838B52DA62F951C898CF665ABF045E743
79D67EC0B65AB4937A3C481BB8C9F53B99E7228ED76DAF61F3D5E2E11B5E08CE
84F249A1078F5584B2FCB41823CD2AD46270FC4A3867A0379D12D5B121847FE1
FE98E609E6BDF94EB3F9DB98327322342EEFC4AB610AAC8F27F0CB185D054196
CB6CFE89601B616B41EB7272665D7F17B86B4C6E8D68592FD96CD06B3C08959B
0B8708B2B6CC03D46CC19061365DC3211967EEE2D1AC50EAB6A0858F98FA558F
7C25EEE41EAC3D35A3AAF9348E13F1671DB099C4BA1566A6AF6DCD95E738A5F5
EA5A782D78190BE37B673D39C7AA8632A7FA88FA8B82A318E262231F0B515EB9
6D8FD813BCE35CB6D949F4FD9B13B4C057ED56911268DBF5B52E2CCF3FD58DD8
4C1D2B523C260B7426F1AF1262E77615C0834D098E20114903155F14A3D27477
386B661BB7F045BB8480972CF0DE416D863241758D0D5EA9018A7923DE82D085
8691207C805D468655AD998EBABC0D7580BC3EDBCDA51187777E14F63F0C62F4
0BC85D30FFDEDFA7FBCC751A7D639E32C569B568F112736EC85AE9325832B520
EA9464C8203C7331FB8C8BDCC3564A45CCC7F4B79D9F34F5BF921A7F042B8F51
E4F01551966A7BC1788CC25AF2E0C86F2AEEF587F7FF90E05A28234C71C626B4
CC8C61623AA82E7460074CD7A9D04043F8BCE2046C754226D66FF0FCDA9E9B8B
8CB59150CA66DB631E58B92CEE059687FE5220B6547F10E5C09F9E499346B2E3
78781FA773A0D9E6CE4B03172402C99D6B38EA429C48BD03DE58812E489159AC
CA2F8A11C5210AABCB55D2BF5457286FBD511C388D8E5A1679DE7B5B440C2431
8B26A7DAC7368B0E9ECE176300D5B23326DB319B1509B69AC1A037082F566E73
C4C3C500CD798E325C588B5B71AD5A81736D5D77B4E31498CAC8488794F91BFC
92F398E0CF97FE67E259717847836C58DA3892211F2C244EF9CCEDAF57665088
7883B3C9AC23E217F48154FD6CE1454CFBFE6EBCBA9042FA4AD9530EE7A9A7E1
1D9BD9AE3FB0BC9832442EA54F13E1BC55E428C82679BD8273610FD4323FB133
911F9592B816C7261AF3D9F5E1728F408B8C61614492CF417B218758F11DAAB9
D763A34A791B132555951ED93F797C02EA830678317452481FB78DFEFDB1A91A
66B70D7882E0121A128CF3F3B5E6428E1F6EBFFAFBA1EE929D0E702360464B8C
3411B12176D834E8F864EA1506998814CA2627286B956076BD1B11D1B68E3E2D
B5438964DB820841B614C43F5ACD9126970121B0F16C9030A51142D0472A01FE
93EA14C86DD2A5733EE316E3AD9F75D1C5F5E1FB4FD148E64CF19852131BB62A
2A76B2E669BB896CDFB90458597D353E7A482F28B2F7A90C8D6D6DEA84E1B5DE
BCE564DF26CDDC9B959BAF04E2C48F0E98632EF298B575E15A49B6A4BF69E5F0
436D389D76739FE90BFF7D52F00A7E7ABF13791DBC736652B56B1AE3DF83A780
80B2062E2E1AD9FFC02600E70CC1CA2B4D95400C6B3B578D65340CD7C735F609
6796EA386D23D5010586B5401F7DB427AB95F7F434610F1E7252A9FA46D1CCF7
C65C5A7C0199DD187D9380C1EEB2D261E28697D7A5CD5EC251989B3A3ED43282
FE43B2EE9546E5D777B0A250E6BD2467CF1B11E626D0372BEF4B91D638FC0387
C1FE0B3C6D4A4A49F234759B7A20EFECDF6B1C287FA48581CF4FB723E2238AB5
5835597139D2E27AE9B7B392D167B6B01F195ECA0196BB6A5AE238D299DB9001
5F0EFEE8DF6064B0380C1CB4D437F4A1851F8C5CA638A7240758060FA1502242
2F5408FE865EEC2DF85CAA1AB7D2CB1F9B09001D6996DAD869F26C29CBF65A07
CAFEB7B2FC07C80F37B12D4F0449DDED37AC8DCEB285FC28A3185D31EF019208
1241B251FD5B18CBA3943B5A799D37A7B542F12CC2A9297CFB97C90B49598F90
4635C6BE9D21B175E3840E6DBA020602DF3D6DC60ADA6FE8AA4028561578AFB7
01082F07867D53510FD4BD75C0111AF0B3AB8247951E5D7061A976EA355E68E0
87B7804751C9D5AFCC4F01D2D66280C4C91E7DEED1957C34B664536D87E8A1FB
50AA90A1A218FECA45ED56F8621200D9032B5A47FA14AC52BB55136BD61648E3
2BC0EDBFB2CFA982D1EC42F237D54A381060D006563769751AF1D807EEF58D47
7CD554DB9B81F03EBBDC8D15D8BB416CE1AAD26BF030A47D41B45EDCA48A90BD
FDC2DF625354D89E9CE8B8DEB7D210B66F2F3D76CFBC36763E402DA01C589645
051FB7136DA8ABCE33D0483542E2B29169816CB4D17198DD23563D6195ED6162
3AFA9663CF793A503270CA251580721BF0887FDACD5973571856880D282665C0
F4BF0B226FF260721FC2F906E3E443C78A0B2C1095C7969D00C7BB6E63C6A51F
B7249E24CDA2E82E746E284DA2479CD9605958211757C15A7F88B20DA453033D
407CE5EF0869EAD1A657A96E299C2636597D3A0E11575A6CEC2CC8C6331E7303
F3F2E5238204547B1C6C69E8C40551FDC72EDDF85141BA34C783D8B7162B0D09
4CB5DD44E6AE702FDC9D3D087FF68FD0DA482FE338FF7162B38E70ED0FA6771E
3D2F71504BD81147F35D8989D2CA44BEDE6B8BA09F51138CDCEBF80C88974D71
7C4539732DAD1226FE504620FE9C78A052190509727D8385E5F898B7E2847024
5FF44C7B9CE180DD7550442AE3E0F8C1178EFEEB5152EB5121212936CDCD9012
E7CD009AA2C7F4B7F5FEF971000D4C775E2CDDDA1B9D0AEDFAB6F57F201FC8A1
7375914CA5CB23E2E9F0E8087B19E3D919E6ABF41957BFFA1E8ECDBA47A9EB41
F458D0A5E168A03275BC7745933EF879FF9BC979EABCB45CC60DF1ADF45AAFA0
5038B8E63AEA98077A89314C62B1CC00A80E975099EF6D77208D21641F1C5CC5
C653FE27B6915D2484C6CF3A9F54BDA2577C0502EA5E75ACA61A76A3486B5E1A
832498E824B3A9CF9EEB373BFC72A68C0762D96B2E0A047CB0E0B9F75FD0CE16
2B16140CC281DB5F0D5511368489BAA6C9A1129DDC52A23DFEFE3BA0C6D5D30B
C360611A3EB724A03EE5489FB83C8BFD8203C4F0EBA2C58BA25EC241D17C19DF
574028247317FB22442B6DAAD517BF4696100289E9F9893042350E8125263CC2
590E96F36B3A6DEAFB46CCDBF3BF8728B329C272B484BC6C87E1CE85027068F1
EB4AF6F1A0F5AB35045206CCBF15D7BB3E72AA02E07F4BD33A5B73F29FA5F5E5
6103F351ACE17B98646F111B3F8A0613821A3EC00EB5E05693051C1E1BDDB86E
B56ADB584BC7F9BADD4F11C990F7BB95D300745957863304371F4FF206BE24E1
C86C6A18D93C6F1125C5276539BEAABB7F27E5BEC8340C6185D79F26342C9D05
E23F41B642D571D08153A212861BEEC95C883EC84E2C71DFE1D18AEF7D6314DB
AF6CFF5EC147ADBE213015AA079D84103817262B48A81B4EAAC3078F60590336
D2E1545D8D309EB999707A229E2E4D288FC7BEF7408FAEF9ADD616FD401C0ADE
2785304A6B7B93B4BAE89603CDE27383420C0216BB2B82FA33D58173A7F43742
816653195C20A414025BC1598705EBC4D8959193A26996272F4C591B5E564310
B432C8A75151A3664254A425DD8080C76ABA1B21DECF750298C350F7FE1F2B6A
54FD11E9F8587142167645014B60274426CEAB8AC0932B28864E0ED5C039683D
62ED1A784BE7A725C752223A11E2CAB85C1299262322E0BFDB48007BBC08390E
08EA687736C0B796DBDD078859AD5F861C206ADFFA3DA865B1D00F370FD94155
C69A2A2DA8B1CC520AB9DAD2459CB761BDA5A5FAD716B33B820BA74353B829F0
84D2544225045A6DCBDC95B5093395E397EC395B703E96381BDC449BD5E50AA8
1FAA7D8FACD9975BE38D59237D2F145812F8FBE71253F41C37FA2865A3121A7A
BAEE3CB273CF7D6E6ED5467E4866588A1097F1B2FCE5B06185DD6AE6D79FD044
B87DB3DC9D4CE666CEC3ABEF549494FE27AEAE63233ED548C3C75FFA6EB595C9
FE385B8B2E9DBE56966CF2F74714E97B8E331D655D1479EAAAFF7754D5B5C967
10BC0DCA38020F102C1BD192BA2A3C30020EA660F1380DBE92EF646DEA0D516C
63A90915394E0CB5E7933AB46D56FD61E71A23DA24A251AFE47CFE6CD3951EF9
1D1C18256BFDD3257320FBC6910C1606DDE3119DC5124EE61FC357754093C51E
BC67E1499C66E969C0D0ED56A9CE79A420946ADDFEE44DBE0218ABC12DD547B3
91444B2948011A3C3271F01ADF07174DAFCB0F18A3BAEACA35CE5EB0DD7D4148
C1D90B37EFF08F88D623A07287976AAE7E0A24BEA75FBB088E7AD6DEF7F3AD8A
C5952800B692C437C82A996FC74CAACB17C3E1B1166007BDB45F53526C8A12C8
60724B6848900AD0954EFD566B18D1E115D7297B62B63967ED5A196CAED5B70C
AC1600BA2F3C68825E3CE4403D02D8AD33DAE13A0ACD610B1CD8F254E152B27C
CB18C05FB76BBD598EEEDF2C87BEF163E373246D219DBF22A786F8942046F025
3443DABC519EAAB6C1214849E097A686D217BD4F65016A3A4DA23C22A3571F4A
72B4109526AB10ADFD70BBE543F9D05D576C3CEE5AE8C8DFAB261357899EA4D7
8BE191D58D0BF8530ABC4A8EFCFE0B0E04C9FE4EEE7FDD86D0996B5D111D556A
3A94DABD661B312D89212889A053C62AA1B3533B1E901B1E8D71487F82297BA7
530C44A0FC63E6AC12313C06F2E421743B10C85EEC0E699FBF3D04E222BAAC01
869567C357B7F57B941481FA8E8EEEB9A533538C929DEABF9F3428BAB45F5434
158CC22730299A622FD9CD84FA4E32143A91D96831AFB44FAE824339359454C0
27819CBA097E39171975D6A636711EEE59B0F26D61CA4362FCC240A1A0F5DDA5
4FF7540765FBAEBF1C238913F38ADC868EA4BEB53094A88741AE35A1FDD194DB
AC2B4F97F1C325A6877002BC32EC9274FDCB5559B47196326CEDD3B7907D443A
649E686AA5879E6143FE9533441F7D9098F7EC15B7E1E5F139C5C2ECD7B56E09
FD909488B3C1295FB30AC01CDAED847B19136681E6E080E210310A6C42BCB089
0EAE1541EECB1CE60C698921EAFC52947C61A703FF068EAD010D1240994AEC45
BFBACBC7510F6EE843975B9A4A1550562DB00C5EF625D025662443F71867BCEC
AE903B200EE70C3D99FC4827E17432BA76AD0FD99411155D6003FE2E12D820C0
DD411A41C5F82B59CE5213E0A2D27D5ABA01B77F9BCA80FFA1791823597C506F
3A42852B0EE9FD62F8F8B2847032CF08AC2D692231D97EA6D63CE31AE2E88664
B7E9AF27D346F03AD68D782C3DD8DA6B283426AE2E8B7B3C1EE890A6FD2ECD51
1CA97673EB665D8C4432AFFCBFB797F6832FAEC6291A9D1D2EFA9D7C25582609
15A67EBB06ED29B65CA7A700D064A9687978EE3F737A93A3FFF50D9E2A6E5437
8CAD0440FE313A26A00D89B7D9B19EEA3CCDCB3BB0BDB224A4E21E496A5FDB93
66D1BBB0F4BD1F16D773E9E9210A3286A05EF4BDE873BCC22490314D7E9E40D0
6C405AB40C687E091AED0C81CB4FD8C48D14058F9521D731CEC9E3065075ABAD
1557C4226E459254AC5ED07FCC8E1056576FC67ED437EF9D46E1AE02D1AFB61B
FD56212BE39F83753E5D016AE8BE1A4F71E296AB6369507CFF00E4885506CC27
B032C2A2B3543205DFF5A31866735EB1A931953CB0EDF31C332722AA0366719B
4BA72DA32AFA04692BDF509BEBFDDF698A328230D961386F3C0BEB0B8ED7C5B3
EFFFE860193674D98D9CA0148317A6565F906FD63BBD6D8A906BD7B61AA37F7B
CB85523F4FFC27BA1A456755E16409725FDA57367A5CA09EC2C18B28C31FB47E
7199DF937E095E15915026484BE76F5468DFC9EDCE3CF9FEEB27D85C723103B6
40887D225EAE30D20AADD8964677B7BF51B85B7920F00910C47E879D07C8B4D0
2BFEF9CFE2EA48D074B656BBED9CD1C499DC29A5342FD58CF2BDE2FBF25C5690
AA523EBB4E6E1C13BDA95CAA798540DFB873C2D52B3DE5380630A194F8DD60AD
0138F1A3425B0DD387C9FBBC3165C34863C9ED6C46D85A5EAD76FEA95619C698
CE06A8F09FE0D3E9AB19869F677B7E8B059819F0902C04D14C4C65A43095F7F0
BF8E2E5795683F27D4DE7CD08EF26C4153DA1EFE629624E41DF03FD882D54A42
E2F205BFC7F52C91B6135409DECC0CD61E9A1C4F67F12A781F578306D7430E82
5E5D53A6C8FC2C1D54219546ECB614494FC7BA3FAC8047F8574AD131712BD05B
5B32F2CE5C91065A33B082576CE1F9587B6FEBFD7EF4AEF9677CAB9A61CDF639
871A3C57999DB6910E478174004B131E71B50DE2351D9C5862338386363BEF96
7D7BC32DDE882891081E576E1120A0F8B466B4207557BF6535C861BBCD805CCD
A2BA3DD4A70B11E6EC47C5BB4A32A03A228FB2495F39992FF245D8FF0290BF7F
089FC602C3CF3BD5925C89ECF59372DCC9947F32A35B9472D0A7C4DAF08B5F99
CD7C646DD1FF0DDDF4B532D97C5C06F5297D96E42F39F2D734D83E2D46992FF1
B9E345168A6A5D1644CAF9B7A3C19D571799AC808BEE5DEDAA22E761CD8C2E72
06F0DA4102ED69424912EAEC49DD872A913E187993C8E0F0BC7990CF59E8225E
BF46F8EDFA28AC2F06B47DB54B1C550B7D0BD9450B17388671E1C1C0A489FFE0
987BFA8DF5BBC276EC96048F9878DBA6EC0BB98683F9E4E96A3B2B716FB86E2E
AC06DF05E78A15AEC09D8E2FD19584AA73C12210F5D1B593F982FB124AA3B617
4565886CC15820C1364D32CE290C1F3BF98BBDA7E4D8F38D88D8CAE990AA8B26
441324A228BF89C162EB68EA6DB153756DD02718144BA3805DB60EB9C5EA77DC
9C00A3E06137F49B75A62DDCC1AA095557C1946B8816BC21AEE4923523A0145A
52D64B65ACC6988CF0F82AB26570620D5DB57A964A73193F1ECA4B2A106307E6
84FD0EF9EC3D9AAFBD38DCE8FEC4BCA629236E6EA758605D7028C13B63D14471
4C63F865BCD128588AA364EF861F43F6477F7B9D6CDC6CE9500C1839DBF5DEF5
55132CA543D5306FAF754E44D1E507203C951C5A836B759F67BAA42FDE665740
148EEC79CDEBDF26A368423EE2021A2D8761ACD0F3321A691752F99FF290E843
86AD9DB4F540B151C080E53580A99B2BF1649D9844CC733B31AE0BC5E16C4167
3FDDD1459DDBAA22BBEC9B0EFD9743BA8A06F3192E76A69E960F0D43C76CFFBD
E7D3CE68BD459F28876A20499D8FC4CB3C946AA8142FD5CA1CAE00DAB39C3B2E
61C9D41C848B7FFA95D6A08621ABD653F136A602CE7296F3CEA27F000916431D
64F976C18BF65CD598B926602378780304CEB691FE0C190427D0AC9BF6DE974F
73BB3B9B4261E64CA2AA8B43D11F43A1CFB6F16B2A963B1763A02A0A044A04B2
6461C03FACEC58A5E575A1208F10F9A61C9B8F56EA13A501600AD6CDF4235C92
98EFA851B91D5A4FCD68E10339AF9D83B364A17F5C62AD9CA92366F5042EB04F
3B33120D0561C168D1FA6A06F5A5C87C1033EC671664AE854E36DDA75C0A6527
5BCFABF8071FCB82D67401064121EAB037686B72A676663199172DC9582CA4E2
76A995B9C7A5D80322375DBD026B20D93ED672A63D02D2497E00192B341B0E06
2F2BCAA3877BAC961F38EC47EEEFEEA95628CD38209EC8E4D8E3D4947728A2F7
9458372B06FE5397826698ADA3EE4D1FA842B12EF4E77DFA4275A3FBA68BCF8D
30CFEAA9B721D9FF11A43B415C7F76106692F34F0E2EBBEC84C9D839CF9231D4
DE942B7951DF1FE70F0BBBC7C633BAA6827DA4F97A8307C47400CCC6B99B2E25
DA44D48E34BC385780B837367A712F7A57D06403E6EB45CF83665514BED008E7
005D11B94337DBB258EA672BD9644AAD13B604732EC647BA3072DFA500CD81E9
D49DDE92E0F3C4ACAC58586E066A3E53C53225123718F69B3547211EE4C26D38
5E968D1108517DFDF255853AC51BC682BB127A303C1E86DDAC800359AD0EEEC3
476BCC6DF530CB3270AF7F125044758D21E337D96FAE1A35257BC94EAA440B29
7652D0F7C682DB84E18BC7B62B7790750A45F043EA5DB3F7FACCDC096F740EA5
905DC513BD830E3F7C0355A054265C371209764741365FA45862F1AD906786C0
1B60ED01CC39FD103B8659C9521F647D0328B97C475CE8C6ECB0DA74E6BAC64E
BD2A20A66DFA0041243133AB1D44E8FE0CDE983022B6F5F7BD6E77F1633DC31F
292ACD21B6715CBEFABD41703D9289847718B468E1E5A7777EA47280BA93E48F
33B8C6A0A11A52F740792A1F2986A338532E38094C9FF027D33105752D0610C3
16C125EB261FB316516228315CD010F28867B3C7B127D5958E814DA67749BB30
D3BB4DB9A78394884B93BA489C6FE57C524CF9CF7FBA2FA3454D54F893954DF7
9DC36C582C274D057A12726B4CB61CFFC872CA021275483A47BD72094EB955C6
359E8C94F436378B62A07B7359D0ACD2DEDDB1BED62041198E1B1B3ADB6F8448
2FD993F9942018DE1C05C04DB198DA7240C898204D4330583A20F82AEBE5F5CC
07BDAE4089DCDA3711D7054ECBFC8632693497F3030201940C432AB2F4B2C943
777F63F9721D1E74D8994B168BB53ECE532D115DAE778CC1B816C82542D52E2C
6C21CFDDB1FF629AF1CAFBB2D1C934AC767602AB3535A2AE38697B5F59D28CDE
453EF7A4E099B93580A51EC039AF5DA58C53421D968C241C486AEFA896DC05E7
9A4C0D6B71E487A1D6CE824F516B1C688CE2AE799CB5032F44D11D72BA017989
03DFFA60F6AC177F21578727B404136F691BE1541AE3E64BE682605CE4EFC6A1
C4DF5F224FADB6B5ABDA37F96A3F0CD14805EECE82ADA35E7A66FB4FA71CC5CF
F7636CABB9F91D61F277F7B7A70D79C8F6741029483392ED4482CE70FB65150F
0736A8B90AB72ABEFDA0613E1CC26A11C6A0C03067B5BA01FF3E414E7C1FC3B1
BA1868D0F40C82EFA94E2B56C833FF1F0DD0BE3CF87C597E9C8BA7D5B25BA336
2DFF78A8CD58766A0D3BAB6B271E50EDE021910B52DB114283981D6479B50F56
E27B0536224AF63239293F7AE677483606DFEE1793F359409B9ED0492552E373
EF5245111EE91BAE3F817824C681D76E276F96B3E3EDE678CDA42BB2D36C47D6
A5FB2847DF884959F762C80754E2EA42622F5977C4649D227D28BFB3F3D18303
FED31B83B25425BBE6EC15DC48D02F3C603D47E4F993FC033E09B3F0E8DFC525
AB64A9479E69F1253B67CEF6C3EC06481E03CC2E9B9D45DC37CD19CBA002404A
F028D4E4CDB002841CBBE61EA1570437A29634B1220C0A24A3A455A72AD43724
519C8DEBAAC96928341887475EFF3FFAC76F76F72F65DC58940C94A3F7C3D2D5
5DB73180DD776C7AB2623C583742E25C54C130375D335B1A481FE3DBBF55C163
B4560F32F6EAD1CD4F239B637C58988361A01304EBF4B77D0E05FFB2E6876B43
6AFB45C56574D6F3E46F14C0552364613B48C0BA52E4DA7AADDC4924D4A16191
FBC412C4EAE7C865F4589B4E2ECEDFE3A3037BBA5FD3DFAD29EB1C3D927EB4B0
5F576E0EE77A33D87EA7672E2D156AE383A2CE0B4A9CA07DE397EFDCD47B356A
3A8220AB6D6BE35D7462A83F4E24492C6C8B71A04218B5417D560A617A9C3067
235A2713C671931B1B43BA4B41CCC90982E28A8D951207D7C494A7B2784E050A
11FE8B1CC110AD96297DAE0F90750C0F2D3B286B540CD85D2F9AD993083BE0E6
7C1D138047E9722FFC3847505D7A7F6D8524C30F0E5B5FA146507131433D6445
CB7B33ACA557DCF47F86E80CCC3423BE0417F24C7B5490C05D5C9275CD3BBF9E
0CFAAB7E4D8CA4EE93519985950F77CEB8C563E9DDF5AB51B136BF7992A13446
F603876F685981130DDE8B671EE373BACC217A53880F2EBC9269A62F29D6FBC4
B19888FA5B942D07BA8ABF12EE51B82B755828A13DD4E05D7F2EB6C0B6E8717D
879751777A20E54A3F5D559E83D059ED0635D5874901DF6AE6CC86E8B493367C
1BAB3BC0C3405741CAD56DF0CBBB696B9FABF128FE2511732682261D9C1275A6
02FF7CE52D3B3D5FC7AC0FCF13FEB4DCE225448EBA01A94C8965191E1F18FF8A
D5C29CEC8083BC82C1C0338EE7D99ACE2FD6B0066189D25F9F6B5FE6C0512F93
F4A8C975A3188DD15429E3FE2C2D53E4AA3F307397C1BC9B97290B598C8C87FD
B2B119F0F563A8CF7DF85B6B2AEE5BEA5DF8F55E5609B4A402E960EF3741A81A
258AC623DB8B3C6141D971B019B5D13695840A4B561421E9AE5529B959614A53
8920A98C567CE9E614C15AAE795374568587F1FA4041C316F355EF1DB3FB32DC
3D04CC82057BF17C0B55A653E5AA8E1B1243CEFD1301F7040D6DDF06CC12A828
707F252C960076467970EBC4637E5A84420E3A879A5F8DF570FC1FFC934BCEF9
2F35810EB7C18764528FB46E2F7605219E3630146DF230614932543BBB70FA33
EB573F6163548FED2ED0D81F3DA85863D9936D652CF818ED3D21E158EDDA8877
2235D781043CED8B0E2A7A234945CAF148D23CD69F1FAA4250C5D279DDC6A77C
CCC8746706947EA3D36C9490F908F6C2F377FC638A112478D3C48A7C3CF2DB14
E5F7AF3FD66C492FA73FD7854FDD7C09A3A9C9B900C61BC9EAEF262E0B466CA9
A824EF8C1AC365ED729794B2C7969C535203BEB19329E6958A593211807E7241
3E77767706F32FDD01E374C26A10BEB2A13A7E39FC38625423D17CCDEAD03598
4922C8661BE65734E28F4E09F5D75C1A22FE803AFB2171803D07C345FF391866
238EB7B76D5D0854B79098617633FC950A1517DEF109F8ADE22AFCA92A202254
5F1A45A50D3D7DBC7FBC2E887EE08C8EC71194762AEE29D252EE3DA42F0AF253
82D1FDC667914F9E14E97439C5230E1AB65E1290DA8CB9E6C8FF776A57954895
CC3F29975C31FED473351B6B20C88F328351CA8A4BE8913C460CF07581D818F3
7E6343F3188BD9AB096CDD1A5CEDE93C96301E4AED065383A950EDC7CC019AF2
3CBD507627DA6492064023BD4928D1289619F88FFEC32877CD861D743151269D
3264E6F49154E49127C237B1CE16D3AFD370169596157845A99BAD0ABFC1EA8F
CCD5454D3B672C8C4981F06C033BCFCAEA48650140D9D2810B87E109ABDA636D
1F018491310860FF637075DA3737A253951DE600A6BE2E5E58680C6D928E9BB3
11BB891D12AFC401668E410D0CB967EF726F04ED099F46AD331AC05EF80BB893
80146F398B9FE829119A4ACEED02EBA65E3D0C33F16D5EC499EB5D0F829D8939
0D703AF1711C21699DEBE97147DD8808BB468B69A205720FA90829ABD6BD626C
E313F3DED77C8C2BB18CC57A03D1E255811693A37D73E79F5078264D79981591
F95B1CC979A7C591AB29368A2BE254608ACF90F6AEA6A4BAA9C2F7A8F7610428
59001EF8EF8BCB0F966D9D402DEE1D23B116F058A4CC821E25F05672EF488112
56FB83355CD9B560D06540E0C4A262B88C11FBF892BAC9C66833735D29B7B542
92C13226BA23D27FB37B08E03DB3C53BFE2144681E7CD633056BC77D95A916F5
429157593254B332984B0EB9ED9E66709402C4C0092FF1E54B3ECFBC1DB5473C
5BDB9E58DCBC21AEB3CA869613EFA1ADBD541E3F9A1432AB2A610C25B039720B
3780BD0299117E062E4F7C97657556E74215F3A5B60547CC920B98FB9ED638B1
FE92040B7480688BD4B08B5347148DABC4075A0B41FACACF17262E9D92CBD3FA
C49FE0D0A761BB2B2164361E2B6CA81587D58220275D29D95C2BFF6D6D1F49C1
D965D0F6CE0342AD2CFE20765CEBB31E73863967A4FF7FCCCD04CFD61476B449
5F94CB1AA6C250000C1A6741E56D793A36C7E340E5F8B2BE4E7FF4444ACBBC1B
607DB1D74E67F83BBD97FB0342B43305CDAD94B87092427327420930C7A6E760
BD7E59442E9904191D961E0CEDF1CE7B1CE3E588EB64782EEBDAB5E11FC9EE62
0070E56CE3FBA1AA54D32BB65FF8CE0FFCB106B25EFB66F87D9589145FA5C577
49D213AF137E8A02199489561AC711D36FD0A36484229AF51C8B6EA22077FDDC
F0DB34B834DB61A325BE0A37CEE6CC1D4C8F3B8D30312048BF76B2BFC244E222
CA480F1F2208118AC0157F09D334EC2B34DCFA374911D7A44396C05FA4B01C39
1107C06B644B4FDCAFB703033EF9A1ECEF9FA7DCE8A56B1B7077E6100159D206
4BB60F05E8639495C63313C92228F5AA94FD8673164F421AB3F6D02BF1ADF970
95A494EFA456B966106D3F2252B1D36A79BAC9CB9CCCDEEC9225B4F1536573C0
BC1FFC7B1B20C58F0BFD966D7C9FA16D74137C817FDF26B95211DDA7C94F4463
7ED9DB8797D61CA5C25A6290E4042CED3C6454DFCED9B63B920F383E05C95283
4CE7321243E53E1497256A3332EF1F057FDC2C4E51E4905631339DA17DAFC7C7
190D059FD994D2DFDB87D48F3BF7F01CB863D67D27399980BBD868D6BFC02FCC
01A9C460234598E234CF7C657299D4FDEC83FFDC6FD43BDFBF0E567797021361
C6D48252CABAE799C7604050700F1189021D60151759E53F1394173A30698384
9D58F69D4E040F5803854891E2485898580FF9E97229651AF29D0ABD49CF93AA
0CE47E742F80069E261FD119F3905D12BC1D293B5B1A572CD5BE2897A4843522
1ABC58E570B2DC70D87C5B723C7CEC20CB6DDD7C6F0F37C5EA9CFEE411AC9512
19AF66D8A6868F4C4B94E56B1470E190A55A7468AAB3B5385381BA079930DFF0
77702DA2EFE9865C20DB5930DB5CBBA6E20EA7F9427E859BD71981310F02B9DC
0EBAB1BD2E2D641174937DAA6306D8A1AFA3CF77E32E9583F5940E188601D48F
49272BDF2D8D1BCAFA088C798BB979E7FD02C5E33A4896CC2EC94A9F7D28594A
5477C3FDF8623D7D2D037352B124B5C7B8384DAADF60D4D9C718BE85B4010E71
3ACF8C265728E1E0F52E8A54E4B9BC6DA2A4C58BD17DEBB460AFE3D5F7A15C0A
561FEB3B6349FFED241A55BD10860EED4BF3E929DF288E1BB1BCCE88D89ADE52
E37ED8DB815E5996CA662DD5E4E73ABEBF96470ABC27D17D6A9EEA66CA2B7AD9
5DD25041BFFF7BFDC59C17CA72B46709B4C9743F13495A84547498102FC55A44
FFDC4F303235A5B3B5510A751C00C1ECD9C591FDDE7F77CB9569FDE8D86499DD
1A330C85C7163A074DE58525B2018A277DE108D8100E3EADF759B647FE7FA752
B018B07A6F08B221D1CA369C74C0C5ADB463783953A00D003043473B837E40F2
567D31B488B661F8C45EBD2FB0F0EE1D4A21068C286156FF059F996B83FBD151
1275A29FB284F38140FB731CCC7FE20FBBC297B1935A3A5DE94E8681FC684280
917795453D2F151439B2CE1C5D8B76218DE43DA4233277C997030D4647E13682
290EFFF7F72EA59BAEC0A4775785B5792FFE4B43314A58021F36A765FC2EA4BD
68A5B55E17F8DAC250A102E7404CA135B33DD66F8FF40D1B1B7F42F53DC0838C
1917ABDE57FE1D34CA143066E1000CFEF0AFFC64DCCC00076D10EBBBB4CE9D29
06389491A97CD8E4CB105242C6A06191AC59A131DE49FA627815D61DF6ED65B1
9A23B5DDDD50BF9C80A8F6093362CC5FF7CC5F5E419B8C1A32570FE4B63B234F
E81BEA6D9314ED848CE0E7951D180EC1E8A76F61D55EE0CFA8E2881498B06400
742D666AB87E7129FD6422ED36F313CDA0DBFA116F3DA6D053FE58FA2BC93BFB
9483209066724BC9A9A578B3BCE3D7A5C79FF57540B2C0039B5F16BC1348AC7D
53E1D4BA8AB18B7902DD8465FA7F814D2713EEE9647320E1D42A9A2793EF80AD
0BE2AAC64BD53AA796E2D8543C15A1A0CCB2329FAD7D73A31B78003AFD6961A4
ED9236B42BA43C792E259AB1E83A211815683F33633946D7FEEAF262F9DD28B0
CAFB9D3132911AB242C74F396ACA6565D302E05FE8343B5A47F44758445700E6
D1F858CE686804C3F119899F5BB3DC8DE39690B59C4C539F1C105B41F92F125E
3BEB0D110399CB8EADEC0CFEA06FD0EE22A88D9A1F1E0F81552BD0795515FAD3
F86E95E9EF9EDAEA2173C69C564A8BDA78F61B61AC987467D9D167AF3186D3D3
2879A5F54864FC8039DED691BF67CBEAD80F6112ABFEF34AE0B95E9C67B4826C
0D8EFA68913C5CA1AB3D60ACB802C027D61EB859FC1059CE3E0BF27E3B0D086E
C04048620349FB81265D1473AAD0D7110E1B821416567B2BF67DE1D091E36B9E
46FF3E935BD37B07DFE1FB4396AD4230A97A153125DADCEFC3A6FB8F4CBF1D9F
84A03D80D1B3F78C5A20EDE6744266CE245095B21421E755BECBE942D5F370C4
1EBDCB64471AA58488620156738617681E0A664D2286C51D56537B5AB9C65442
50D93214EE0589DB373F4DB852CE689CB338946FB4A502E885192CFB17F2EF59
D9DA37EB33AB4CBB8D377E376DEB9A4CBBD283ACF564AD8E646691B4FAD2C5D4
AAFBED1FC146BA3E3A20457887EDAA4ABB6F885C0C9D275E47A939F28EF99E22
00F5DDBA96D864B69FA349411FEB0DBF4AE58355E705915DE1C6031C4ED11204
A7533E567F1261D40112B6575DD72940FA21B5EC49785AEF2A8CB6BF17D3ED50
524F299B22D35A62C9FA520F60BC12355C3872CD092F77FE06EDC4E1678DDB19
60BA9D54EA09C0E2FCE8507F619CDA4BACFA4A94DB10DB1455F0BD5FFC7BF430
4713942BCE511A8D1D76E8FE85986E868A53B43FC51E84820FEA672BDB5BA9A1
06FE267772934E2A0C643BCF9365990B3C9A32A0B537ACDEA16AFC57C7D5B023
C047A3BD4D4EF55D2EE095E91D60C874B4E7EE3A8A30DB997012FE16D28F724F
FC7DAE38C8134939CD28AF21976B42B06A63719C44432BDA9E3FF06C046670BF
3272A4D0BE62811BBE508DC0A95B3892FDBCEF4BF28DD94C99136295744B6632
7E4D755772968293FEF7E667094888C4727B20698DA61FCA950CF6B372190C1E
D6C4E152F6AA936B59112A2A095370B494882A644B56D900F24DD56743344DC8
969A133789BDCF64DD53C3264464FCB88168ED814934A247C30339F27BF8ECB0
658FF099EE65B791C63EC6AF40656D93D61EF9A768BF76B742AFC3A23E150839
A9654E8B6B79FB4145B4975266138B7C516819F07C1F01EE32CDCE87348DE661
19CEB19407BCDF24BA4B41EEADDF8362B0D9120DFFAD66A4A91DDECCBC7A9D3B
03E90D8D317403588404CCB677A6EE307C9813684BDF7CF6F4EA83DAFC513171
67D25E9C0444DA162CD2C9FEC14942BBD026A5A0AAF9ECE260F2DE59BA94BF87
0B062EFC45B42DD7D14523EADF4FF17F94D4E67CCE7B5DCCEE3FBBC5266C552E
1FB2D410C3641A965C23C7DEFC85EDEF288A30EC5F205F4FB313397DEB41B383
2A02FC1FE6946D7034F92B9017C1C5EB508D33AF7F750938DD0BE7CAA4B22979
7C44F04F9C3F9BE4338DE9DEE7C3D50D35CFC146E7F045803001342A3E0C6F83
C4E5DD7F07B15BA28781C1F0EFEF95C1D54CFD50E9561DE6B014351A8DABE69F
2695D04D844E1D39319341D0F40B15EFC6B8101C4762D9ECDED1466870C3B0F9
F47FFE4EF9561A25F70102C8091D00E261DC74D6673DA37D8D9291E25AF27982
9F8D47B16272335C43B1B6FC95656ABECF22484EBB508F45A2D6210928ADA693
8F1BBF331D54AF9C627586F74CA84274B784ADE3F3BECE695865AE896BF66C01
AA5D9E3288451087E0C180641E8C2B608D98A273ABF96524385F03849FD158BD
7EA74633545ACC6E1B71BE8B2A1B33B22538522FCEC0257FD02D648B8B7494AE
3FB451970969910E39507D68E021DBF413C3F836F435A0711999AAFA81CEB65F
3E8D0B384171143DA1FD9F826EA37298AA66522E2C5A4D9921112DD5B38BD45B
3751ECFB97B1D7B7A331AF7237DCDC2483E367DD892F6347E5FC2121C191C7A1
0FD77A10F08ADDB19E494C72ED471DF04ED2DD3092097015E0C4F622C4B5080B
76BAA2635F36318C203A830BE79F5E0824AFB010DC809783AB31CB4CDD98D74A
5FFF03959033FCD255AE1A59643044E28E299036F0267772934E2A0C643BCF93
65990B3C9A32A0B537A2E79BA2B1D94596650639A3839F7D033BD7CED36CC3BD
48089F9E501F212C04DDCF1403E331A3D87C76999A395B69E019C7E721562AE4
E42051BD11F5221D40C1C4DE979DD9C74576EE84A8680AAE295EE08B31297E30
A192AA45DAABEF3A069C6307B24FEE66327E7F897CA6835311A76C5B5D57F356
EDEEFB9BB9C374B5FEADBC644F5DB80AD83E7792DE58F6F53C9862046476ADED
15087DA8D19A2C3B7260FB620ABB6F2EAAA1C54F2F501AA172055892C47614A9
035E7B1114FA540D2771073186E2284A9BCDE26A5D0B205867BB203D626433EA
BDD890E1D885B46B1D6801E39931F1870A1B4F8175E5232D6644A2260837F172
756F06AD289C8262A9ACE305733BF769E7EAE2D38EA22941B1A3B0A1A1DAB47D
1432492342364879CBBD2CE2FE7DD3445D26B0C19134AB3C692C6647FAB3612A
F3AEDFDA0706437AEE6A433BA72FDD1F106A1DCA830D55B2C51F74EF700BC525
0C666E0D8B344B3203E52324229DE14ACE49DC21470BA94449020976360EFCCA
72CE4537058139E105A5BD2831E41100D39AF1D42AA981ACEFE528D5E5B233C9
00DED31B9826B375CE974A8E805A25073CD30F0346E71ABC5B9F132635E835D2
D74CBBB259F1F07DC7F74A0D23A43926989D59C19520CBE7228870D2168A9930
3C380C1E697F226107EB7B31F81CF5A08D19B92EF0646D2E0262F821F8CD131E
2A211E0810D651C175A7E8184B1F05AF960F5252385EA3E898611BA9C4C8A5E0
A6AD4E40D2C722A9097AD89DB843535B0E35ABE92A93C34702F93FD0D9E111A0
00D42EBDFE2F1E19060E939D525F8D0112BA0E65F244704AE2B065259EE821CA
AD682B251DF56038FD81D89FFDEA459395AEB1FD2A2313C4619C3924D7F2BBB5
DFF1928CBB888F0C20A0CCE499532A4F584E72FF79A1E4F1DC3BFACCDAC376BD
C787DB99E288CD138D51230CF6899C1408383717EF90DC17BF84237002DCCB9F
DAB505034CB1ACC422FD77CAB0A76A24BA92CE6E80DA89E5A197177E27EFA2F2
6A639CF1C0042593DF513D3154E07738A2E39D6AC9429F1A3597CBF33A95AA78
AFBB5DC8948D0468E70A0DFECA93149AD995582E58C0C3E1A010DBEF44CB2CC4
58F45CC832FE2CB1E22C2CAFC254B52413A107BF5B596BAF902B8D65A4F6DA04
0476718A1CD9960D54B5CD8B092130C45D038168A1DEA6619C40E4178CEF270D
5986D24482EB2CB6C82122529FEB6AEB077F89974BC48DDD6A15B13982226DFC
F912F59BD78B394EB13D8AD0FB57C6EF30D8FF820B543F668A1C36B3A2D90D3E
D02A25C951454170C6FF303F9F66E866F1803F04C90F3D26690110FB4C10A2C1
38188BE70DF3D41C06F1F86EFDAC38DF10932D946102A2119A54FA0B1F4C17D2
D5E1FA2439F3AF1B989BD9CBB3BEF08265F3D767FA43E82B12BD1301F1248952
EE375832C57F9ECCF6D8C3FB1C8CEF273808B048A910329044B0344247E6C405
F0BCD6575F1D961697B5BAA693295F98AC07DFB9C648B0B888EDC71AAA864703
D23D07B54DC25FC77760FD5A7580D8EBFE48DCB5DC6BAA38B43805207BE1887D
C76025694589C7F3A03283BE32C9F7785F8E984220443B845B4FAB1569E1C970
503369C085644D1DB7FAA39EB5F85A3A1021BA229A1410ABFA2171432A1AA586
E65AAC52D63F07EA1CFB78F69F2F4C1262A94F8E3D2ACB0A383AF5137304EDDB
05D506686757C79C2ADE54B913F1ED476C45C308E5A1FA942A4E3E66EEDB334B
C61D9C644E3FC11E47BE476AFB688358F195BDCDEBAB71622D0A07E882F2D6A3
0D35C693B9AD261C3CF603FCB87651205D6CF7D1F9ED7B26992399F7151E5B56
F225D5F360452FA118168AA25FC81B91DDCE0CA3E5B551096DD5762189E8BB9C
CA3200C869DDC5AAE04253AC240F7A64999F24219104E2D8326E1A9D0DB17A1D
921E3306AB2B2A0EAE2EF0B1513A4B14DBD67299AE5B408F7C31A53640E45FAD
CC9D7077A0CB1994B8B6D5F3B8EDF9D4D1459A3A389B86EC584839AE3421349C
49878E3945DE280110D3161CCB6962C235D83B848E819175C4E9E5718AC24980
2208710480DAE24CA627F36025A4E08A62AD01EF1B7E9D687DF836D188A71059
DF2032E0E98C53617537FB915F2627AA4E086283F8942837CA994B05174A7EB1
0E2384825E3070B6A8F1FB454E9FB4B782858D42BCA7E5BC5F6C46DEAF25F28A
D6A30D5AE7013F99DFD464CEA9BF8F154E6C697C4308FB3C14CB6C3C656047FE
57B63F1F98B53DF639BCE58F07389718877DA7599DE0AFF6ABB520C27C4C793E
B332EE6B6EEAEFBB67BCA5DFC7BC2E11AA696E5AC5381F8AA02414C2FF62583D
166455F7821A44C27B7740B9AA26C0FA6F8742178B15884E33D4CE17497C2391
6A9F49A908F0C231A396B14B2C655BE5952539F63A90A3CA07D422DB05A9DDBA
D2E69B4AE827864CD1D0B3A3898DF214F09E29FF55CF49C204324D050BF5D846
C371749853E64D86EC95C0C49D08807696374A4A48ACA3A0C2628F9E83BDB1BD
A7D33486570449498552A59620D34BF87A10E9D566B4A07963E6186FC14FAEB6
26F320AB52777801BB46D6F315033E0FA4E0A4EF691E21A7F1D275CCCA5D312E
8E0B4078AC809300807CFE4BF7CAB616AE30D57BE5FC0575729CE67AF28F4C9B
C088F344818666E6DB06EB76A53B4D820B8886DB427375F9C430442CF5C3634D
481663848D6A71A62BF320C1819D083DCBF1FE8680698250F9CB0CC7F677D3E2
B31056F217B2BB9C6F38617CBEE762A48209CCC177EBF236B4D6F4854EFF595C
71E2BAF255314DC718B85642FBDCDA6E81214AEC9E7116C2B846D7BDB68F2C19
D703CA02A4300CBAFEEE8382D921A46D8186E6E19981F1AD5778B2FD0FC05CB4
C628A1F09377B85557E3831797C62154E0B91E213252C58D39514E9BF548403A
723556073465C30981210962424D9BC090DA2B27AB235D8F5B912FCD30E0A36D
1F72019A09393FD526BDE7C6A24F299EFE32DBF5035ABCB18BD682234879B242
A0ECB0EF200E16BA13E4A36F92147E38CD27171877780E4AC40E1B290E073B8A
067D595E12E31208F9C7E9B5DE605F69FA82D22266532F87CC8DBEF7EEBD5257
66E76F95352105B50534C875CE71554DE156E4428BA4CA6374AFD7EB3AF8B955
FD3EBD100CF8869DC7CCA5CF8B0C5A437546DDEE92C2C7EE93E4757C98C5E2C6
E2A74BE94F79517CB3A8C5321D3CBFE5655D0CD47033F6D25138EA2AC723699F
D4A5BA72587E32274197FF8C194008BE3EEA6284AE128906F7C735DB24AB4F96
77F888E53B98162BAE3A89D1D79F2B876A3017B70C6E41B33B67AA6517F60ACD
80B40A1D1BDEB7192045D6581689406DE2CFD6DAA7C041B06172198B32F99D58
E21B0A78302026FA3C2E5A2F8AC52BF30B0DB3B29E1A3CC98E1AF521B14320D6
C4834A5A1D1078DCC4444EE308B8A5AAAEEF347AE8934E5E7C8191F05CD57F6E
1CB8B076420CD682143664C7849178718824AB8E417CBBF6433BB9F2BF304D1D
6D7B9F161DFB8B5AA27428BD9B7EE532F45FE6CD98BCBCB0B0227232E6FEE461
134BDE0DF9A847490B82EE282EE4856D6433253D3165DC740B8FF333791EA89B
91754AB8B5D24ED5D673E26A25811D4BCA9D693EF8ABE786BA533E0817156095
8B89186135629085E3CDF5E18B9EF963D1DE1AF9CAE98A22582EBAA292A672EB
9C845CDEB130863434670C73DAA3D718A43F0AE5BE4ADCCEB13913ADBB1A948D
9A00E1930075F512AC73798C9668E38E4B93D0746AFB81B586841E70814B1258
131811877B96009E065BF36531104AA1BFA0254541A3FE4712B1D0739BEA5B05
86EDC6E0720B879B2580B2EA1F1F89CF5B195A9F164AA3649D1E58D50CD7AAC7
2A99F351D824F86D33CC89BD70DD41F308432FF4F71DC5AA368E0EA45AE3A0C9
A76C320DDC34011D0EE6C6B0EA56507C3D9DB10BA62284CC1676852E0E485C5A
20DF7A300E7DBA6370B48142B747B4373D2E88F9CF4D729D7E131335C212B30B
A91220BFB289D60229258DDD825D7E8041DCDA231DFB8E6ABD97BCDCA958BC00
C2CDA59A6C316D1BFC71656B6960D398E8FBE9114AED61A239212F05BA154584
A312D0DC1C199035B908D6D78224FE93C933C34C64E6009ACDE37643E89D5BE6
8138D2E01A6D58C4D46476815F98C8B106FD26F9594EBFDB6F997882FA2A418D
110C85A089269EDD6833F4E160171E21DDB239A8DDF7AB69F97D04BEE4C60FEA
1F44693C61C1922F7EA07F726576E02903A505A2737590A0A17D5D39D4A94755
133B3AB52F2E454991A62FB03473A98E06CC10BCA651117D0A2A97CCFC80A69C
974FB2CCB36DD6A8C51158C49D240F662BB23D7704D4E18B68FF3BD876A8278F
55E7A2915DAF3D8379BB7312E1C6950255DE162B124A07BB163A248F9A2052CB
8980119F3F2EFECCCF2A92FF7729277141C1DE33016126C2CAA9ADFC6DB67428
BA63329BF4F69E28C3F7A4B9E4BB5EF8BCC0ED71AE3CEE7704EEDF96D353F451
D9A5027FB887045C3BF765EFB08AF55E0C54691132BE1A965A3DC333680B3067
FD3324FA0F4CABB31D5E51339D70328ACF0B7BAB4EBCDBCEC7E5045467FC5DA3
56DFF298F0E2BF9E46CBE6493F76BE45CF303DFD961CD5057F44D52C1B5FCACF
66DB19F535CE74EA2B71F11EE71DCB66501BB4E9E340BFB3CA764FBCFDE143E3
9A8E59A9490DA325146D32B4798A5B495E3CD2107D819094CD8E14744B571776
B1D9BC9C5443F8FC382D720D3B24B4BE61C88E429815282D63236602D3538818
4F5E56B96A6754C18AD8D66B2BDFAD334AB87D056779D9CE0C778599803EE49E
BCAF6C6E111EDC907F71B735A1AD823BEF7DA8C97C9BD9E77B1AB73A861725A0
B738D1D74043CE4516FD7B4D197E8B12F5BE341479F31190D82063C7355706AB
EFEA80F4909E9EA106155C69C928F23D859C06FC39BB82E7D22728220939D444
38EDB997EAF6628D2CD29ECB63E979EF20A449909497CB5B4661218B4D73F8A9
77B5FB99EE2B460ABA372F98312E565E5F4F31F6F5213F161E22FC3B705E5CA6
F2A5F284E98394B4658D7461ED0CBB98470C94E619F483A2EB484D0FF08E19A9
0D217A141D4D6FF93F70169CCD34459F490A2C35AAD110BCBFEE6A59B9B37A51
26B9BA8FD0FFE0EA31D83EB055985CC72B2786711397D8BBBD24FC7AB1EFE56D
045F1202BFCA0A4596E198C189E49BCA5BD92B4A41ED0B93AD7386DBA98D2ABC
C590207F85B5C90C47DAF8FCF3766E51CB96E8561C648415A2D56D2823F41846
2E8516FDA95082FD8B6895DB632A9B2B3308C64113D921CE275784DD49813869
357DB8953DE809B4827C931E123437E7173B3106FBE6282E95B2285EFECE6A2F
BC9461A0FF3CEB5A78A39FB9CCE84F57DEB5F09DD9533BAD209A85213EF169C2
DB21F4E5C9CB23494F45B1A3783E0465E21B1B23303173ADD0FC52E27F0EC643
6BEF3E67C6E5B796DDF007696621405A331098546FA680958B148F13C410B7A1
47417239608EDFD858AD4C77CD8139FC6BAE4BB8570E87E958B79817EA2D16B8
17E3F136C02E5FC6659D7C25F1B7901D2703109307248195BC0EB4C0AD9657BD
8DC538FD27947B973667180588352D41F131800965C579577F0C3EE3218198AE
72783FF8027029BB6AD3838212D0966A6BCEA76687860A6D8B8EC4BE4836EF44
E1351C111069D0B3207FE8AE0782026D405BA7633BE176D950E63F804BEEA737
ADDEE4CD428A68BD62FAC58853C59F21B5653ADE5EE10EA00BEB432ACC503222
F08EE34ACEF03F2EC09790E105BD6610B4E822E8F6332FAC47CF7C79A8A595A4
86FD3FB16BAE30B1A0BCB4884247E852A53FE9567BF6214932D4383CC69DC246
964B5636B35C6D188FAC7E7B01968C68C7E33411FC66595539FEA682E0AE98A5
4498E4F46D9B1EB6354C6B9450D1118B7E267DD84B53466909C2C7CDF50D3E92
19F908CAEF937142C9204508B4AF3D267344E698B454C34CD579CCF3D403C899
2A07F1AECDDFC67346ACFC0DF9500229344E75BBA2BFE4FC8EADD4692AC17DF0
F58FD0031609AC5DFB5B7C744DB03C5B65CA5F53E8CBF5F1521CAE397EA2AD7D
02D3175C98123217E6EAF00FA6F9FCD4EF9A9D3234D19B993595F1CAE8A0079C
274BAA37ACEF2D0A20EE0372C4C8EEA2FBB963143A38E749176999DB46FDFA95
8F43068579C3C0E4B33E5B38601007CFBDAFBC880724B86F46D7EBF24D0C10A7
035A002BA3B1EC4D64C7E7DBD710134A47078CB3F375F6E1027AC6FDD919FF48
0227A73CCD3F16F8BC89C79087ABAED6EEBA8BA0732C13B85D87F0A1C8942EE0
83B95CF33017608A2E73EC36182BD85FD6FF9604C2FFED87E6511E6C4AF9366D
6588739F3580C2B5F67038F5D403518871BFDE3C57C754D8DFDCF8FF913DCA67
D08B0F2C7FC7B4B6FF6522EA8E529B40F6455FC524269FBF2775C774006733A0
A1A6A3449BE303EF8D11A4E0F2D07A01A005EEDAF3381BFEF3D47EC0C2E32776
CA31B1A9FD41F1DC8BF7D7541264844F39C8A463A399EFDFCF16EAC907407B5E
7FB1E8A0EF301CC9F0D297D5EFF51E900914EAA87281EF599BB7FB332F661184
72735065EE3FD1BA1CCCC9D2D480917571CC7FD265C20FF615BDE4C35E370D04
F1C747E56B5929533578A64F1539B2833C9DAF567F929880A4D3EFC09AB402E1
E9B27D216556EC255569C0F14E43979D2050F4FB3AADB5B36D22AED6B8753FBD
38CFC346F5E44EFFF94B7DF9F9E81159520DC497FB8141F0B45A6EA2B570EDAA
72EFD3CCF162D3A01DF51BB28AB0D4120B492C97BE557BB3B5090B84CA62E895
552498CAD8F5FA2F695DEE347D7FA94D9180456F87E63CF971C5D38073035D38
5B19B37D433DD16BF1B7ECD8BA899CD4958442E6969C0A1999E2F26BA27F0E89
E3AF66D4BC1EAEE49380E04A5F644CC2B14FE8D6CDD6478DB6C05AD0E29EE595
0528AA0A673E034C0BEA1612F9F693D459C15D4548E1D194B2C0353053DF2329
47F17155789AD1A4E6F56A1DFEC298B18993406798142CA50F95F80EAE75B129
C5A8201F7B6737897AF615E3001F5004C3E2EB9D829A5DE0EDBAF2DF961623B2
6C153B8EA2230E3F21E18D2E4739E062B2EA94196539526E4F9D58B07BB42B48
1372E5B0ACDA829DCC023A5C2070495680372EB8A34D97BC32DF619A60815B94
1B3569C943C33BAD83A9B8248F7C1A3D02F879CAA9665E376C26306B074AFC9A
A023E10F3459A9E1EA60829CA818EBEC7E63BA72675BC43575C96B485B980766
DF305928638ECB52BC3C3780782FA668A17BF3B1A4EC1B1287DEF0FB1FCAF3A7
E78308BF27482EE981183860B73238BC779091D87EA1AC512A31BD261DFA4341
5DE138154DD6F1B2F74C56F2CB2D4A7EB7317E531214E4D0A1EB0C50AEB5A4B6
B3C8C5B0D9A1D3913B86BF7179CC5A8B50FF7F4B905D88B0674D92A538654FCF
8836790EB16B34235D78D39CA218EB8492CF2DEB090785D520954056D18F3445
F45DE6475368038E650A989FC873D1753B3E648823FD830274D85F7D343B42BA
FA116D87FCD1C0E4A9C371362E10B6EFD2640E0081D2713E34561C5C025CC2F2
6A182BA1F78DC3966986E2253D57DDF635A322A62DB51A2C5CB2FE7920E0A41C
6BD49EA81BD1A4182ADFE89E56EA03005866293A56A8C12F30A8A3BEB9E46AEA
A9D908781900D7243DF60C6B54A0464FAF0D6C0299C765D58DA276AE29395323
25D3F4662AEB7CB14F2D5163CADE45AA7BE44CD262A05EB95DD3BD0B3E62B265
D0F8D1D0A8DCC804360FCB236B33EA858AF810ECA35E7C98D447265E9C499EE9
0A1210419E9A7E4A94A814D5D7B77A5589B0B5468D8753D2D5E62F4F0E1D3DD3
39DAAA5ADB1169DAC7E5B796DDF00769661F7308CA2B7723F0E1F96DE58E4CA0
4F5E022385CAC1CD315D433C72DFCD87AAC7FD5C789E01FF370ED7EFCFFD78B9
E0B926622C074AACCE6F047FF6BCA7D2B3E69A854B8468587D0DF5E5202C56C6
16CDA4A030ED495BB9A6339D5B4AFAE162880CD4F7EEBDC10D1B6609AFBDA660
274E7F02960AD8B7A6342E7FD23E1BFEE85BDD93A63532708238E2795F8E3468
C64F6D34452FA199C035FA0C7E4ABECACA28553BFBB185F0C7634E9F7E9F523B
E0BA40FFF10204B3E4F411ECD31D596331946F6F4523E3ACD94C2F0E98C1EC5F
61DB95D1B69C394BE78339E9C06E30C90FF2A116C57E832BE96B2A48BB6CF529
46AAA82161BB692BB9BCA3D982BC355ACEB528B2FFC5E370D67B1B7A869CC6C7
0585C6416C7693054DCBA1FD1AE2E84DD911A1C970BAC9A55BB5E531D2A07D50
D49F8FB8E645FF40BB069F2025A92D77EDB15FE055260C8F7CC58267460A13E5
E9BC1B05E733FE14FDE162959FDEA8F5958C3BCBD85747056C105777F9DB1322
458D9DDE895710561703C5974031785BDEABB52AFA9EDE9DE5034A674C2E52D1
6F9BB0904E8ABEB16B3448B1F7BB388AA364AEB17950B452F1B8FD0A6C2DABD5
7D6FA2180653F184C2F5B6E971E396ACBCCD7958BCEDC8F943CE804968F780A7
8E56CA9D8794F25F3844E41CAF0260223876D97FEB5F513D63AC73D73A57B664
9F18C0E5B831F1A476EFBA59C5026BD89521EDFA8BDBE063B0E204CDE88B8BAC
63A006738F39016208450F657504F5A9CAF37377C7D45E47001AEE71068C28F9
8AAC291AA6BCB5002038B512D3AEA31710570D63FA6FAE3CB7B7D8B24D39FE59
59BFBD1A91EF6A6E943C045E843D5D4986C30DCAB51168BF759EB7E2C6401ABA
E067E931C3E4073FD5BD9FE7BA79D3AFD16D2489C6239BA36286DFF3782CF010
7381FA9BB21056985365D6AC3B6F48619D26BF75EC933A51DDBCBAB84C440845
869689478CFBE230570CE751C4426CFF0909DCDBF75CEB9DB4BDA4A8DD942457
BBE93F7798FE112F0CFA14EF5E4A97080AE32BC9CD94AF38A6877847BF9545FE
00BB4820EF038C77844D8844D5F4EFC82BA31601AEE72735E8E862CCF284465A
F9ABA5EDB2B90DDEEC8E8AF2E8D90C642E299132BDC041D61C43F1FDD945BADF
AAACB3F05C96EC1F6F5E18F262E4A5DAEEC7FBB7E41762F8F9751B5FCEE39BAB
0D1369D4008385B4EB14943DE69F5B829BDFAC35535EFC6F334EBA14410BA960
EA072832F8B1A8D3C91F622CA0A9BF0787A0E3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBDF6B6D329ABCADAF9C19EAC5F36E1D210044B6EE67
81817CB502BE94904916531564BAB2A6BEE21B8195CA8C2C239AD3F5E6367118
DE229885DE2FF1F9AAEB59A728B7F0E9CD9B977E0FD77C2B28FD79C68B02B494
2C1BB525143CBC8BEF7F9831A0E0A137ECC98C66873C49DC522636D5B7FB6EF7
64097A17DA725C3AF90CF297872CFCE56CCE1582A3A05CBC51647CFF73CDB3B3
8CEDA174CA001B312141BA6CC5B99C850C4A730ED50DB3F2F775CFFA46A74C3A
092A7D5B7274DB52066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0E0AFD87C
47C937209B3DDB4F2FC6DDE67D9ECDCAEB8255FF96F06EA28A98D40DFF9A4EB0
9326163E0BE257546798FC4EF75EA4F294EA8496D032ABCB2D78109875A1E454
EF28C6D432330FEE56133F3C323F865B46D03457D17C81740DAFE000798A2787
814333C50AABB6966275AAE8D8CBE9ACD7740ECA4A47A985E2E16052A8C0A764
66650B00DCAF38B8C9332CA8DC2E6F45197653F5A7DB9D25F0BA34EA859BF991
D0354BCAB97DA3AD0210C33F871D66D40597E4F20CAD0CC21D2C3A11820AA663
1D8DAA61F415A48B0F77F4A231F76CF009FC101B4A0A95F9E4E435043FE03050
AC8844641B1DD28CF1325D3CDE7E16731A336535A8231320B310E52436CC4611
8131021402F19CF7286586D1DE7A371B537C1630B06C33F7273ADF8801A3A75A
21C5E44E033F2BF6960992A383636F6E73AA9410881AB9BEEE451A3871DE4536
ED469B863B655F084C94FC6DAAFFD6FC5D5B523FBF1058A8907ED4383E343147
A45701BB16F608B9148CA790F2B232A67E71C893B96FE305B9AAE0C5A246A6B1
8E275EB0CF680A06BB8AAA21828F98DA44728B485BE2CFB3AF841623A121D2D3
EA73BAB53FFD35C67AC9C3B91DF9A4D1BF35CA6A8CB8F15F9144E36E456648D7
54560459B7CEC323F8B488B6F5A8EF8D69FEF91E13323FAE6EAAC2E5ABF665AC
E1585E331A8F8B5AE06FF085C1F349215582AD71679D4266E65DE1A3A418E02A
8BE169C5D0B120623BDDDDDD4A4A3EA5B0A1FA84E55ECA7617A41124595DB723
ACE8B379456632E7FD1AA490E97EF1BD458DF08168DF0D73A1817FDF25DB83B2
72364E00602BE904C3104E28F1BC97F954526ED470061A1D580BF1F0BCC7FF3B
CFCDA3F50A2DCCE206FD51CD406098F09718B87F4D3D2A68B2366102ABAD3D8A
BE1CFB0A9DE45E663E52C1F8296D44549A5ACB293CCA55299C1B7FC3CF0FCB89
4D177FBBF1DA7D23111F9CE050A46D17DA14ACDBCBB6E7A547A5C29288C628E0
8F20AE2DDC41E023D259FAD3064DD668D016CD47C8D086A4C9BA264829CBBF81
E16EB49689E6DE0BEC9F0D0757DA536ACB2FBD7701DAF3BFA182C822EF32A610
14DCEE4C10D079E09DD023897E5C04A697AA57C90320E876A9D379C95DAA74A8
F55CCC78F29612225D642CEBA1ABCE8CA4C24E1C53AF1802803BAFA58499CB72
47A5FCB8A175ACC50198C8DC5B2B886C4663E744455F75F6CCDD17602B9DDA97
2C7CBDBB564F3975E4776C77C9E9CE600B868A5334480557187ECFC0EDF5C1A8
3578340AE2AC05CDA9853770CA04F646FB7704DFDF783B55A6821F7861B12877
C17CE7BF85A1A0F45C2285C8FD8AB16B1EC17403B22A336925DC1BCC1BC10458
CA6C4395659B0DB6B612C1515624B81B7733EEA500102E39529212B65E7565AC
5AF020369C09E15CB4DF774A63C6E75A7426A7632B8B4797AFF642E3EC779A51
7C4D6040629FA35ECF5F72BC11EC52FD875DAFA62094DDF19E30DAE8C4560205
1A73839EA18F58F04E7136EF4E084C43A6139EAD2930EE95ABAE64F7AAB44907
6E191A04CAADA5C99DAC0E8B0A955302C1729C903A7EB7450AA2BCC638BCB6D2
318C6E6FB8AABF774318AC445D88D9659B81A1793927F359319269D09D154B8E
1D84E1D1C15FA740A00EFAB0C19B7B6C6A3BFE86C94FCE2C16F58B8554679E85
DD52F3371D778B185CADC001476DC5CE792212AF26C201C8C824DBC23AAAEA2F
CE789CD18B3E16C95CE43E0C054CE99B9F75309C621F930D074D76A35F19891E
3842733F8AC91FDEBDF9FF0D5D177375CF02D031E0E8A39F334959E7F9B0AF89
23B28EE0F0C862742F9A5F889F5C57CDC1BCC32B6E3FC3BE530F1F6510D8F19A
CD02E04943BA7EC7F18E90B5CEF2130D6EF52F14202317FC40F6C9E49FEBC2B0
D191D9B7D1A52548E29D4DF19FB9DC0BCF64B60BCC727F951DC7EA3BC6CD1111
9603EE13A25D981B6802C7E63E7A22043E1C81416DB353A4EC3E8784399CE0C8
6BEE448E4120FFE9F98963FC566AE808AE20CAAE74590B3DD20E52FEC2425C26
A60178B8E8F81C48D8EC11E458D64A6E39D4EE42DAC31AF82047C67E36FDBF59
07D4CFFD67BA3FEE0A83169B6C371950D4454953E61B5A03B7A717E2549FA37F
2D0F72C1F50D22B1CA757C4964F4552D7DDE76E26C270781E833BF2E62AF339D
6C19FCC634E08E4E5E8175E8F3C861CB90E032EDBB29432AB3533DCA6D5343EE
D6B47F9998114BF92E9A4D8796FB9DBBA8CDF19D5CABCF3C6BA6E9934C391131
6220EFE0994552324559442F3A2379EE0E65314F93025CF98030242B34686881
B2ED80D5A156E3EF0EEA375E66905D49892B70588D776962D803F076030FFF8A
6E67975939A309E59A677A59CADA930F52A470C1E54DBDEB37700A3721BC3AD4
6EA86FA3C4DCE5C2E5BBBB62E18C43FAC309B1D08B75145802DA8B6E6B2C6D45
FFC106C37AC51D8688EE9373B2EFD14A1FF76CDB4883B98CE96563219F82D9EE
AFC6F78AF8033A6885457284ADE2BFE27697FF9C6A98C0F94E2411023F22CD29
80F7ED94D2EA2BF7995852A58B0CFAC2990DA3A1122651AC3199BD45A3407A47
7D1A7D972649F1E5AAA05720A6E020685F5E2937C95B50D07C6316ABC08495EF
3198AC1630F62DF3027C7E083EE4F51AB14E086217DC4B46BEAAFB923B5497EF
22BF3645D4AAE35E132D1CA61DA08745D02A196F9653441D5D99563AD6A01599
5764F5EFDC2BCE4082C1418C66C90D4AEB3FC1FC92FF7B00CE081E7600158978
ABC35805453F84CC5EEC991A5CDC8C304A240C77DD74D3948549355B2CE67FEC
2D4EEDD46512C33E3647AAB514D5094464C2C0E24094C30247BC40DDEC907CE0
F42652BE475208B5D9BD19B906C7D162217D273ECC3AD0C5EA2C6E6492815712
79CFF261C7D433B2ABE29D96E5720E9ED02B59C90AD14E7456D7C51CB856383D
1AABF0209B70104DD5760C7AE8A23C751014185DE9AFC917F2D783A0838DB4FF
A0CBCE159F7C9052074BE0959711884D54979C5CDEF2E4E3CB6EC9FC5C3CABF3
74685C35E1405C7EF583387FA265B2D50284860A8999BEF98BE5292433CCDCC1
68C0B1FAB486FE7BC2E431EE3F6186F857B2FB2F403BE8AB3B9D4AAD46370C76
C3162444F3AA3672C66C81B3B57AAC56032E6B45D0B3327DECC621D956927412
507700F7222CCB48CC57C8C32E97CDEB89CF5E0C032E81DE314FCBC9A2833660
3006289544091C3074E04673F0EF88773900553818527039AC74088A194CB25B
A1A334F4E505BDAC6F537AA03AB6FD0D5BF4C9BC3213A5BA19D27743D4009F15
549E0A5D45A0357FA8A5AC12E289CF2D955B500EA7D9EA5958819F5CE03BEF6B
59B669723240EF4809F05BD9039DFAE90751B085BDF6F5AA9A634B5BD8EE8D01
867D04D3D49F5F31B0A04AD8EAEE5761B51B310D8F6A41B74ACA861AAABDE118
79E3ADCF4CE6147FF7E06FF74BE92989C382E8FAC254F543E8D3E7146C9A0609
386D1C9239E6AACB28D629DE12C0CDF25A65582B0CD2180662D1D1E9C9DF1DA7
866A772E358CDEA9FBA4EF1D05428F54E69DDA2B4A1261CC47C1960A223B94F3
7843A6E820F9C89089D6E93E537B37AA80AC7DD11E95162BCCB3B7D78A82D9D6
D54932D5495476440B9864E746F74EF95F7E0B679C0D5FE02E0CF9AA45628844
A54275C7B0058172DED8AB858A3708405E2A42E5C47B6FB432465C746F94E090
DEEA37CAABBEDF919F519EC7B7BEDE7A89B5C99697A210FB5F43BA7DFA7A6B44
1D29E047314C6B8D665D7AD4D88D93C0C8AB119B54176F13818AD4F8567858D4
1F90D67EAC7EDB89A28AE4988715E24A126B37F2BC9D34718CFF0C7E964D2E3F
3F43F762533C0FD818F20C94ACB7915123B1432A6CFAFE75D3CB61E1F53BC41B
415182F40F5238A78CC9E05D7B24FADC2B172D329D0064066026BA32428AE3A2
D1A275297514E762C01CD9930799BDAA3C034E90D4DCA975DC5053D8E9AFB660
0B7E2D72C3661E55B755982F4503E3C6900F66C1307DE0DF1816E435F38A7E85
CF447A19D91B8CC30481B5C49B6ACB4DC451F9C5269B21549C942543FDE90924
C928F8765B13195FFFB2A604947E8E13C6096D51300215973091137858D03535
B52A6FECDFD361063AF95A3FC17209382DF4710CA42F96220CBA0979109E6E86
8A53B43FC51E78D0DF7B27A00CCAD497526AD773CC4FE56024AC9055FA65A4B8
5073FA7C705F9527661D60C77F7AA5A6087CA9889B31AA8B605C4C198149BD66
A3B6DFD76B5E867BDD69224006E844CD6D47F28C20CEB0F4E256C7E44CB159EB
A4444DDD09B396758316044F466381A28F5870230E9DA69ABC80788F2F72CEE5
F5594F75F33AAB8D92267B48EAF24CE73DF8D15F751098B89DA1A59081F7A1CB
7B7BDAC189A0568797D0A56138DE44E0ED963BFB70CCA5ED0FB14FFEC866A1B6
351BF489CF01F62FED8382CD07F6B122872E6A35F12379B1113D139B53217CA2
5701BB16F608B9140BDABF0C8C6CCFBB98BDE7B75E384FC1EC7D7E6B06D20C40
631420C685B7742DD1E5B287F5743B651296BFE910DA5459627D2B60C7A3E39A
4C63D2D22007153C11EC901A7C9BD2634ED9F6F2F7F847D39053135644CC3243
403EC4C62D25B1ED563C248ECE78A971F4AC9A21321D949E2E806F56EE5F2956
C660D58021CDA3929435CA9010D2DC807B6AA2AA2BBE06110745FF3797354D5C
7E6DA01FF8F441690E196B19402154F4AD4A1522545224628AA5581957F2D884
06940F199116B6FFB4B9510D4E4CB7B3EA0878BECA4DDA1739A4456E73347CC3
32BF17686EF5AB4E365F99A464A8CCB2BE827CF6452875B0E11DA78219F3F938
C186741CB1EC95FA761422D7F58BF5B4BA15AD718CC5E605CD6C3C5A46E85153
6CDDCB0F99C77811F2BB7C9625F4B09AAF52966B7742620E6E776B1E85F975BD
A746CFA13B270AB88AB1F7C5D0722FFD3218887D32CE599579BE99EBCC1B00E1
B2639487E3C56D4978D17EEB2C720C85A83E3233166382747B3503F6B4CA4588
D5430DD9943FA6EE299A4FDCB787EF4C3A8561874572940423E9A3E341367821
35AEB58BD2F572BB56C524FEC5C3D513E8B9306CB9F10D194D6E138D0BE636CD
DE883E1CB4ADF94B4DFFE102DB0B0B24075BDE031830C2A5366F8798F3FC0DD2
09FA74B219D4F0409E7A29A67C28ED4AB2CFDEDD14FD5753EEA4A7C3C21E322A
E6B60BB269B686B62A542BE6E146A2737590A0A17D5D3F88C67E19F74D596AF4
348A6DB3E10FEFFD5C307A7C83F336E0F562A8FE056259BFC7302C7B37A24544
943A94EC329007A31D2ABED531B1A7987236B8B5D9B2843FEB9B5A1D232D35EC
5F35D5AD07347B69DBC55E6DD283F0283E8F20F1709F6CBF8C3ECC3FCC369824
089657FC7433A8ED08636CE9ED580E2631176927E5A6C12109CA18909CA701C4
D2AD083467DFCEBE67E8A558650D61D9ED374D359A700512C58E83F41C1EB957
05A5F87B523A261F9EDBC3B5EA0EB4722F6C9DF6925B33E3CA232E5EC3ABC991
959A5C63CB6EE50CC3BF3D540CB6441B03DFC13B7C9F179EF01BFD7E637E171B
8F2C7547249332D8E6476E23E2EDF90AA077E3000EA2A3FC5A51D3C1504EA11C
2C333F98F57EEF40E66F956E98933A8C0E3DBB1D014B04876A61EE0592365D4A
01DC96667E2896098DC75295CAFFE245B4D5889C9730D6ACFB73B7ECF503EA4B
2FB26C62EFCA1E621ED2A65D66DFDB2098887BC845E63C3241D937A6C2DD7C23
20DC37841E76F57069E9178CAAC03B0CA22F253FE4E3D1E56E432F655A8C234A
301660D6B5D32C4A7B17865D9B7D0FC9DAFFF25889365D6071B11C033DFCDD91
45F8BE5CFC2D5864EEDB8AF0E5CF8B4731E368E2E4A8353EC4D8A78689002198
2F6C0B92D61DAF0588690AB98E5D6E0EC1F49E0464F79D515844779A1A298038
5DF1C5D1849CC811EFC463478E134BB12B1B9D06B6D6E9979556CFD400721EAC
67C16221ECCD02791C0F0845EA7DE0DB3C13B8C18440DA54557DA4B62DD43F55
A08337C9812303280228A1E6E048CC39F01871EEFF5A35FAF9EFA97C5FA81702
C04838B81829312A1BF0F2F24DBA3A77260179470E8E848777A845F6E4F585CE
0DDA3BD897156E72985C4E6BD2E7C6A96DC29BDE63C6C16C829A4A06AE648526
65BCA6B481C1830FFE95EFACBEBBEFA2E4FF24EBEB2BE5F40C3E4C80AAFA3F94
3A546E6DB7A569CFD68A4D2B22F8F3F72463D924B18415D6C57D2B872C05B9A7
9624DDF7164BD71FDC0C0EAFDFDB89CE8D1C20C2A159AA4B08E97B5BD346E251
8214324A5A072C3001425851637503A6265C8CA4640A103D37FC9D79F0E9A642
5428E02EEC2487B2258CB2D1A4F1198D1C09F4F974B984F2CCE516A901673B78
07A78F07A5578BA7BE6D9C5EA81A9FDC83AC5354B6611FB82D0B85C4629DCDCC
78451DC450426725D35E3E98AB46721C136745EEDD97DB9551B092C99FEB3435
C0885549ED37FA454ECC45F7763C6D8F71BEB6CC5282B28930426F3112E17476
602F3D7B5AA66AC7125730106DB8294A122D90C64FC0793B178018DB98ECBE34
ECC1CFCA81576319AE8FD72E288AB89F4ABD066FFA0C1E7468374BCEA3F4C904
C19B7456A83B17083469EE367CC1FB27246003209D30974A40872E176EC00523
370614897A50133353CD23FAC7E2B86EEE2936DCFD6F0539158D30F074E5349F
5A5A7C1A431486EF03E082C5C6A9F2D1D6DF266F39A572823382D6DBF390F031
21A932BFA4FA7BD8F1D28C1D8B0F466E3BE65CF18EE527FC661B1ED5A7576302
65D5C2215753A9F8B236D844566898041893C1CFD68D1E7A627C3FE5D8F062D7
FCBA5245B38B7B7C8295C671BA380EEC014CEBC4FB75DCE676DAC7827316D63B
5E79B7A7D6C45C305D4E5E329E91344E2B3EB75F1BCD5BE58257EFE60888332A
351304BF66B8F7A0E32EA4A5A358B5F754BC18087E728F16F95C6A212208CDE1
635F4E5271224CC19B6D417EAA26019EAF34A2B13634F55E964F8B7C21D93731
0770166AA466F61345D046731E6DA80678EC9916BB64EE7F04FD399BAAA3890E
4F95DAA83D88BC9BF79C0F2F5CE0A680F32B4934A768F89217A3DC055A807F57
BCD3B1A04D6B17623B63316E7F818E3D012DEE9A00F8F8EECDA6AE9F03077211
2A25AF16F68150C378455FDD227E63F7227EA777FFD62509810B87C55246B603
91D5CFBAB12CE2CDDA7BDCD03276CC54E1C9739E059F7BBC7ECEFACB23271D39
F5EFABE1C78064A1915AAA4E1B5A5B8FFA706F068F252FBF712D4F6AA9CA5171
4523FC48BFBA181AC58E7B6F9E6717A6A3E963595AEE2152145DF46035B7731E
FDC10CA164F462CA22DDA16EDFD6DB7692A30A74EF4A598350AF17E719738548
42AFEC3EB1B58E4D46907189A702EE7999C2A97A199035EAB7BD49EEFBEB6FF9
6CB364D1861F86EAACD43B75631AE31720BA31A6CECCB8A01770863B5FD1D6CD
AC9B9A1DAD5804ADBF5BFE0ACDDAC7BA8D326A49A911B39B929202AA5CBAE528
5A5959F93B6243FF6AD2C9659F602269475DE9B02E6A638D527B3C3A5E09A7D4
D6CAA68988C7BDFA12A30C42E02FD6C54AD1666090276C020D0983979A820095
07CA180E1FAD665ADBE9C5032A6D6EBB105FA5656E64E8E61C75D85B16F2BA8B
C75D30E26CCE6AA5DEB885D397C841BFDF856BE383ECBBF2719688DD2CE66583
F82EC2C243D312A3C091A04B5E38B50709CA21A207D8D60933654132F17D876D
E7D40EE0544D5492C33FA350F6787ABC2C230DC634549DB4DF0C90A4B15CCEB7
9085BE0B5CB46EB55CFF67E1BDD3F5A6455087145759F387B2E8551B43643A23
8A38E9CC93B9AE116342C253543D32885DF72D3070EC6E7EAF09FE209BA2AEEF
48E8FB33DCF83C12C7706B49F91E1C73DA70945B9BCC22483B0FCE601FBC0C34
80BC6DB7433B1B871A62E60353F613EC6187DCBF7DA3EB348C863EDE31E97ADF
14D9F180343DA29EB6D491B509FA5F7D6FC1E5AAE5C833E6B820F706BFB74203
5482962A7F5A8E1ECA63FC9A5ED285837271FAF6CC611DC1E0800708D97515CB
6CF112C2A89D2D44816E907417BAAF10E6C52BCD44A4F9A2E41B30E5C948FAB0
C8D1C12425FB175658468CD6ECA301D7DF996E76C827664C51A3055D47C25185
8AC5E400BC65AA6245C56915536944041E66B7894602CFA5EAE2D311DE01CEAC
8CDB7F2CADFCA105D41167FAAE9CB0493E6294AB427E68F6ECD6D8FEE82559F0
08F29690D07706D953C3C121D207815F79EEF626A126E8005FCA77ECB3172F55
EEFF346F67ADCABD02AD4126F724976A78C97BB968A995CFF201DCB485D18FBD
2E0FE571BD1EB145FE7CDB54CB44A4B29058841D9821D7F955D3824CB1754278
E8D765B59EF7E7FF54D1784AB514FAC0FDC8DEB8DE95405FF9E3FACF2FCAA194
285352A22B7CBC8E67D2D0BCEBFBFCAD3947E293CC426E38653A16E2A7EDF6D5
00E92370C90BE0491BB50ED4D6D27399B516B372D050288238F86F4C198542B0
93900F05F22DD65388E04D1B5B2FA351ADADF25169B17C27CC63FE88712F554B
62FF88E61625CF5FB14EC4BA6D11343AD3B5D2A864498651C5705B1F53C5214B
0C40D761DBE360876BF7709B1B6484862666B8724CF6A0B098A756AFB05D546D
F68D995036387E9014CD8A767EA6FE093E393C8ECEB3EE29DA78461BB8B5ECA8
81BAC0657475174496299457BECACD36404D977E2FA3A314692BED62E0FCE274
67A1D65E0577F470498B7A4FDAFFDBA8DB8B2C4487DE9EC1722AC14066A7B4D5
0AB434715251B19FBA354F49ECF6B7E76FA5EF4ED2D753ECA0DE65AE6D1C2CC3
23880D1B2E0EA015221EBEF61FDC5B10C476E24A4FB28E8DAB6E2F8437B384E2
3D01187BD068F646C9AC457A5099FA95167ACFED3C707D5D2CD2084346B2CEBE
6D979445443C3677D129837E6E77304DFE77CE8A5DC70938056E27E016861F03
71C24C71782416C5F3A19B15D7FC4116D60058945BA406934B0448FD97FBAC26
79BFDF3654981CAADA75574B2BDED2512E0DC2CDA59A6C316D1BFC71656B6960
D398E8FBE916B51D61C91E0D30CCA1C6F2D303F04E9793DA4587B0A026E464ED
9168357A5B6AB898B25FFC0ABEF43FC3D0E97A70C5C1747D467FB498E88120CC
CAF6A701DAC4FE7C4AB44E547F476AD6E7850D0E405AE6523DC0CBB36047F75B
371BD3F69A70793D051FFF5B94C59304876FAEF3A268C1A68E635E5768203B73
69DEDEF65254488F91AC9C0FA039B679F5830E4BDCCF9D19173BC1AC61864D26
0B49446DAA42FD34136C4017B3FA8DF19A3A4323DD352C6DFBDF1A183AB19418
74DBB0AB81350F9F2283A52BB5043E194AD04DA05B8585940B8B01DB390A6D14
15D8612D9F6A6966DE25D75B644AE2C16B463727A8AE10C3BFCFDB381F84343D
DB171D5983A2038DCF160C2BB20B157B11ECF7F492AB161F3ABE9789BD4033BC
F60A454743AEA87352E69E4370442D6CA86D083E18D9F88CF845DA7E9E3D9C36
68A71EA6E3A508B70E113C92688F8ECC677B725B3F51746691838E600146F6C8
8E1BE994C9BCAEBE4DC3402AA1DE45FC978490BB69153DA6D6161F780954E1CF
748CB6C0489438BE89DA50BFAC7999BE4A22BB95E4321F75C42A86C70CC8E4AE
8F6F84FC653EAE2C5FA6162CA84C7CE497E990FB3E7A41DCE80636D9349B8EB9
14D0E86241AB753C32214F6A8B3B924B6F0B44384D121783C3D81BA82AB06651
EE7211E9B621BD851AC5D52FACEF703E923B07E0D413F01A4FE35D08322098F1
7A6B49F91E1C73DA70945B9BCC22483B0FCE601FBC0C3EF0D495F7B532647689
F1F2136657C025AD24664C9C8926D4826480273F47C2A67F00C609E89DEE2711
803080DAEA56771C7B51FA8F32FB10CD06184AE9C94534495F8BBEA51FA99398
860E1C252C17EE576B7ED658ABFF2E89F3D0853660E2E82BE420C38F6B56168A
EB971AAAFF3EF2D5B1F79DBE83B6B7836E42C2E1AE0093867B0E69DC8F689751
1B2022AE9612796DEB9138059A4C12D4A4688BE52B95ECCF029A6B18A512D30C
EB0B6ADF80FF1B63FB0B7856D540B61473D5A112D1F716AE66126E3A19B4DC6E
9D17F30A893E24DBC1CB9645008E8990705B3D4F40958636673A031C4EB0CBCA
8FE2C5FA3DA9FACD14C8C8F94568E2E17613658DCF3506FD4770918757F7CACC
AF13D57C3164763BB0D9368246A81F791E89F128538153A849B60063FDCE90E2
ACA2D45B649DD784995FC582FAA0E3C33421B8006C3CD93617E6B0B1E0DFED73
19AC9B49ACFC71131694C405F36C8F710B467AB3742A8F12A5EF8237CA9D1773
21F9F6B14AF21276B0F2BA201C1F96EC8D2C2382F99AC70E64D36D236DC6CB62
1034C39C96842AF50BBED0BBE3BA0D089E11BD8BEC957383B4E2FACDF70F4ECA
4EC27770554DB296C79D6604875FD816063C790D6986F72167A7B5FCB735BE58
57F22DDCC9CA2B1CB4FEA12D19A76772C6F496EF2D2E5A6DE68CBE13527BB289
4802F6E0E5B3B0B42C4E29643EC14B404FD08CF74E739DE8C200F17990D35A36
80EB7E38BE26295AE34897555E41856D173CED91E77A8626A29B22D9CC0543E3
9ED8BD5649948DC2AB15DFD1E50FF5878496F776447E9A1B860E1085D81B878A
24E96D6E16583FAE77300D3768F4E5FDC99AAA25AD6822B22B9CC8A0E12301D3
C8461070445E6F16A2C5B87A779636760C9A55D588915F11356E462A7E818027
1AF307F9D7860592710140B0745478EBEEEAE799E3F0391DC6E5BA2C45BA3901
8074298B686E568B1585A8ACB82C2E1D2AC8AA4208BF0893AB71CC001A8D44DF
11ACEF4941B8E5598E11FD1442B39CBAB90443083A74742E895C8B2BB07DDA99
390DD353E0057A8D4EE1C5DB70F4B17B4DE35C678F54658F3B88D56A2AB3C4CE
836E99DEF32A5250765A9D4B4941DA4D844E1D39319341D0F40B15EFC6B8101C
4762D9EA7845A38E88BDCB7DE042AA827FE25755A808670251993C87BED6A5EF
82D27AC66A2F6F91819A23E4A229EC8118DC5B10C476E24A4FB28E8DAB6E2F84
37B384E23D0607A8089A8A29528E45C47F09C56AD5389C3EE8DFE85BD5E9801B
E77C27641D2C9EC25EE965F04F42B78D2357D70073B6292B78A04A801592C00A
3F5FCDE4C0AFC79C106FABEEEF7FA4EFCCA30C35F607F5C12CAB51089E2D1861
231D3B7E999C1166890D3F5F644F8AFCC6540A5246C6D6B20CEC70058D312D3E
154FEE43CC06FF89A82EB584D866683FD55DF3C029465AC5267B36561BBE6290
5B4AB447CBC5C99131B436E3695F522B3A9F1E34262AC4523872539DB46C17F1
DB0C4292D035FE3A7CC3A47698AAAC30DBEB733584203EFBBF997F0979A9764F
FEE0A755ECF44B9D06542B9F9833A1E36C15301FFDBAAECFA62AD90B7D89082D
383212838E3FFEBD5FBB076BD9BFEEB305862D14EAB6A99218B3F66F11EA2F34
5629C407A615FD57C4B2F686ADFB72757FEE03A5D4B906997D5034317EBD094C
8C2D415C6D4470DD8901269120B0F0764266035FE4CA3A87DADFAB3665957769
CCA3FD911D09A47A368C84661E8D470C8FCECF87E141E181D826EA07BFAFB573
EFAEEA5D8C588DE556745DA3E386BBD02541FCE5D83D5A2230B4673692A3A3E9
5A52591D79473418C460C1A68E635E5768203B7369DEDEF65254488F91ABE982
509E5CD1768470D8A13609B66B1B21C0668DEA8A8A9FB5655117DB31B989EC26
22635377629CAD8E550E17D9C480444449DB76A321ED1517E750F551AAC93465
ADDF2416870588344D7AF34CE6BC647478C7F346027DAD73434A3938E1970D8E
A3CD40C7B8FB4420589962698DB95F5E49D5A65A1BA3ACAF2773F285C68918DB
DBC221588B4C47FE961EED2A60C6C7AAF4C713ABB3BF00C77836B5502C46DF4A
11ACA54D221B44224932D25E0EB50E2D81825FD25359A10F84AD9A18706CC30F
6EC6119C08A8A95347F2DB16D3390FBDEFE059EC4B154FAC3E53D3A9B357EBAB
1A189F424831F6578541FB21A36E4C692D9226BADFAB299EAB77CC0EB53BDCF9
FC767A18B14D4D3C7234D59AB7D172BD52AC78D64457748E0DCA7FBD430994C9
4D9627E275FC30DD9DFF1BFE1921F975BFF7683CA2044B1C0EE6096E008AD672
26A9ABBB491C413B52E04A8A162BD9BB26137253BA8B581941E759A7CA7917C1
E33758D8990D8EE81BAE03AD70AF745817CA28E499504155A42F6626A6E7CFC8
49FBFFBB17679ABA8C32DF35617FA7942D47411ADA0246E296E2D20F02C44D68
84DBC608DE99FEE68796482566340746AE5C0A6C9F3BBE162346172F1CAFF7F8
5E5BE5AB201A23C3C162F1103A705408A1249F3175E659640825731A12F98C3C
20EDA25179E1FA1A18E90331A61AB63356E24E01E4993456141FABFC5730E478
369E2FC89F2F28C168E6B988F769AB03770A202E74519F043C7CD8FA2E6C749D
88789C50139FA0ECCDCD40CE7AC49715D8BD0A6803D8B14E7550644F8A8FFC2B
984B99A6CA7E077BA5CC45608100C7E9E249E86B58E28A9F5670A5A21ADC5159
077D035218E6725883351D10405C55F6EF17EE4D84198A9E10E11013E6A61EDB
84A77AC0ADBE695F365835E3C5F9582E3BD8DD935A79293EF846EB7DE76BE0D3
026F19A2F1C3406F949E3F88B9E7E3262FB036E1F51B26BFCAC3915932AC5C5B
D7FAE5D4A8967A0317329CFC4FDDAB7414D018CE8AA56FD0EE22A88D9A1F1E0F
81552BD0795515FAD3FE0A9ACDBB0B03AEC4A4A1155CD932A5D27518EC1912CE
3B38BF8F85E7AB078CED5FB3D4EC142C2A93322B838566981F20A240156D3E90
191DF32BFA9D348773ED53A9D205A98B52ED3A771FC9DFD831A7EB95F1FB6DF6
96B0A54469677C5FB3097E066CE9557FBF96C075C5E9D55D1C809A694BBEE36B
0EC83C0B0791E40DBB15C740AEE3F3D7261D828AE18973E51A231453B8C40870
18E6F61B18FD5FFAEC8F506C15B83B9140023D858926A04F035931716CB1B881
97EDC27E81DBD71F37055A21B33F8F41D1C85B0E081C465B2F0534183A7BC46F
DF3B5636F5BFD567D7A65C52482D6EAC2832100ACA61A30F9CEF371C04FB318E
1B55C7936FA910B1441329F8510468B30FDA0A129EF2C233939FBAD3AFA4341C
E0C6A5B230F788014CB920989A15228D281CFDAEAC5C05C818A02B8FBBD8DE91
120E47CAFE644EB2F25310D541C2799E1B0DCACACA34BC3B6B17CF9ABB513639
20C5608A01931761B7925B9C18AE9A1C6ED9AE1945585623506C49CC1E168F0F
A239868CD7063B2C9959FCEFFA29B656C132BE6EF693E779293A1C911AA94271
E703F5C659E58DA27EA4484013476F55C3A0330B5CC136C3CA5680F622117252
D1D72A6D9D057A413F73C8A13D1FEB7619A1F5C4B80629D712B328A736EBA019
295B747F69F16BA6EE46D97DDA8FD8ADD31C7CECBC9B7EF1336C0BEE77CB967E
5AC3E2E6EF576CDAC43EFA56EAAEA0A542EC30B4D222CF812454420647FE7BC4
686F274AA0A5B2B7FC1CA4C6E122F0D8FFACF9463CE05C4F57F502E2CE3447C8
E0F046C412C14A0E3227319CF8E5E857C91695C71A9C4C1B22BCC9DD8F3C5268
506889EFC9884219C040299E47F79D49DF2C43EDA900FA12DA40F657F1D9C30D
DA1B370AA405C1A2E7250CAD231AA68044B1746FF6148CE49015828E2C2CA02C
AE79C840B1EC2BDA93FC23F52CCEAF524983258D70D531DFFAF5B81BFB3BEF83
17CBC81FDFC8689A3C67CFB22FE6E26F0107EB70A6F5BB6B129FE0F578C8E6D2
322E57ED8C67D7D7A390B1E86C16C671D66F04BC8F0955FDCC0D076770913A14
9681DE94DF252891256DF2229E946208B31BE4D51743D6A21604A69D6EB9CA0D
411AE0970D8AC0F56DCA847B29FDA36300364E90345715545F9FF151B2D3528B
75E0F63F522CCE61687B8354A054DDF9291E678E20A5002152BD2BEA7DDDE1CD
88974988658FC42749B6A768E5A9F1EBDBA29587CF496635B780A4E2A1732B36
23CF780F91FD8AFA989EB8BA0CB3C5BDD0A24DDC0866A88263A693F7C422AE38
DAE2C990FD54BE878B4223DD8D5249FD1D96881C95C05D8654D1D562B4E1B528
A19A2BC3FF698579731C179BDC324DAE722F540F3AB31AD308D5B4DF5F832940
398AD26CEB6C416EE4C7A5E04286B14C8FF24389C724CB67376D31775504435F
FCE006C345EC3C71E181C6142ABCAAFDADD70E272620B2A987C3EF4531B1D482
1D7928B6C5BACBFC006E59A0268C4421CA68192F93DACFF714BF3AC45198539A
DE0A9C84BEF04AE00A1FA6AD4D668ABF35B183C03A0DF956AD36259BA2FBA3A9
1FA07182A2FE4A43BC33818B225926C6D354968689242638792E7DF60B48B174
EE47D4828BE85F3B7AF474F0BBB732C93AD6D52523129B93FE90B484A2F92A69
CAD3FFA9AE559D3043D71281733E2F73F7EA6FF0D7E382EB33B0736672469D96
3BC2C76165E1DDE26C2BFB99764613816DA3B3BF087D5EFF28E04333766B4EAD
90BA045499767100FED617DCD5D75CA16FBD1688CAD4E4517CCB7C19195D3C03
7835317B4693DF871B5F829D700208E7369D948DA5DA7DB37C6B79D8BC0D87E3
7DB60613CBAED3FEF7FB9F66E502797F29B1B5B3899B0691219B28B56B22AB49
FEE78EDD1780742049016DBF2EBE030D1428445FE783B229638E00847F7F2FA6
AEA16920988D2F401F2F75F2D14D1727C52E1551BA61FE113C7FF4DC13C896F2
1BD42B6807A69F8306DDEDD54782960AAFD9AA13DB395130660EB9359EEA1CE7
FE65B608C2D19F61B649BED7B26297A7FDA3C8B0DC96FDF28A57E772514FB953
AB383F4B19233927826B803B2FC545EE3E035A0E4F97EE7D38869D666EC67D80
9D5F85DAE2AAC9AC019659396EEF4B46097F60BF7AD9B59B8A9BB23D42180423
07E484EFC0157825F1BAC16B8672D6AD3E0F12CECB7595C5E680E31F06B8DF8D
2CA449DB028320F71C865A3C7B1BA8824E713FA90F79AAA0D2D02884D7E9379B
E8029FF16FACDBEA0A83154E2A34DA189876042245E3A3A935E922EBC2832423
26459F1036C5D8A3028C5AC6C441BB1B79F66DA74007607B3DA9E51563743682
60EF3F594D92CC1786796650E3122318258C9115555B221BD5039770E002C215
DB769FEE985D67CBB392FFCFED300E99F66B7C0D0D599C7D70F6876A3AA3EAA9
4F686169AC468472B745E30A90CF417B218758F11D2AE47F23E3D27CE967853A
D4BB286840440CD1DBF6F51A05E7FF34434EE33FD7D72884317B513C5E55121A
EF09F691109D8D7C5576DDF71995F935A1A70FF281CDEE56108280F43B28C962
F405DE7FD524824DB54A382D1AB250C4826FF1E962C8B3CEF2C359F450955BF8
BEA69A261AE4FAB3FFB24E6AE36B4FCC5B1E1B78FB92A8A32F408CD9208A66A1
4DD2BDC5FF941C09CE83D67D926816D58D4E2306026405D970EBE23DA62FF276
010D7AF738123415E277C62F8D923A4F242C6156FBDDB90AB57A17600467ADB2
AF8B3D1BBE9DD60855850F6F071F6A8B673F18BEB4E9F87D19AB6C7D85E08439
604146977677A5F8720DEF47EED1F19632029C3749D73E6887C8B4ABA2C7A8E1
F8E12BEC57E5A41D29590CE972AEE1B690BA43520F53C84580490C7290CA8771
6C5A366CD377D5F7E8F8FE943424F930DAA8B4265DBB1BA8141B5B61B4124C15
C04A0ECFD00C88A1E89884A0F9DEB367332280B51244DAD87F1B5F891013CBB9
F8BB1B131913D29467B318DD95373CB0F8C088F35F2CB696C516791002120268
04D49894C7BFBB36E142D94194E5FC2564ACD7935C774F55E1C30441451E00D5
A30B240DD1FB8177DF56958A7E5279E1ADDE1D278201E415CAD59624BD9A18C8
5C19EA43EC8C3DB8FC346A50372C5821F13C57E54AA740D72259E641A59A9DBE
BDDEBB88F875C9DEC252177A02764C28A85C53161E50CF0D7A355A6717AC380D
64F95B6FE97E3540896D8AAF63717D7A4BE1725DD1A1DB532573E93343D9AC4A
4CFFE675F05977F915C7CF32E6F72C8F1B154A5E4DB9CDC2DBDEAF1B32883D56
853E002ABC509706C00E045DC552B2E5EA0589FB34AB22827038D5E2DCF97D2A
B8EAEEF6071317CC3292CFBCF1F660E8262CD10AA45C67562303483314B5B0B4
51127E7C3854A718989D915D06CA34DB4A058B98CB93F911C842F9C4C039F8EA
5B13A3A9554E4F789CFE3BC35AB39FD39A4F6608EFBBBECF328C77FEBB5CFF6D
9262E839D6F54066C622A1BE65E3B4F4DB473701306579B7B49CD1832B9B31C9
799FB6AF8C2FECA922A3B2F592E6AE655F3F78820BB352AB723A71915A85DB6C
B9C0AD23955F47C3E468D3C5FF70258C6C437F4167EA4329AC0BDC1089CA97D0
8CD27E25F291314288E5FA9D1A4AF24A6805A1B3D401B4F17F2215D5981E87C3
A742B108A59AF7099A54304F98F1E30C448F2637D282F19E1370485AEC7B63B1
A6338767BF5E9E35FACA8D6289487AA1BC6FECEBA1F18028FA31D9FD812CBD0F
71305F78326279AF3F133BC3D160C6196D1DAE2741FEA58B59D15E6B52F2124C
5A51FFD8CEE57884C2BA25D1C75A581EF1BBB7363E52FB278EED573EAD880955
F6007ECB06F0BFA483EC2309A78FE18ECB388CF62D6D3390472B8AF734119B54
4F9E8440DC37D853338D19F08952BCC0AAB8BBFE5C889EDAF00C9C984618D80F
FA49216027C63FE9DA78EBF6575AB221C113F8E414A646897D621E2DB1313201
8A82A296B9149E23BB382F6A605CE29A80655224DD1C8EE6CB112F1F7545BE47
83A85F75B564C673A8CF72EBD8824882106A5C5925D9F28B37CFAAD6B7815410
CF08F206C30E3B7FDC5F90C01D1A7DEF65982448F953B4004B0300012A00EE2B
7BBF45A07081BF07E753156C93994992C526DCA4C1D1571D44ED014CB9CC49C5
FDF45FEA58F190043C68C402BB1A8598FC3ED021147E2BE3B76ED36626C93955
1DA9A0DC5A9EFB7130EE72EB3313510EDB1DF48D8CE63043403EC4C62D25B1ED
563C248ECE78A971F4AC9D4CB3C833C09B11CE4C3F21137710D3030789D653D4
AC5F13817830AF6C6F8270E086C4479B73909780FB44990A251C6D9441F263C0
7179074B2ABF2D7C0FA3EC95A66D3039CB6930A2B20AD8FA03F0398CD71F0ABD
E458768E33CFEC35D8E8A29E3C299373507A8613CAE97F2212BC74111AC6BB47
EB8D79C32E9ED3C53FA84A45B837F741DED73F6F37F6D6D55387C03EED109877
D78F851D34B6EECC77D163847E63D3C9AA412D14FDAB7B5C5DD25C2852914D32
25D07083B0BF8E4F1055416AD97294228125B95375FEED06844BBCD28E7EBD63
D1BB0E746720FBD6E9FF246F4B4B38D625E37EE01732F9BF554ADC8AC9E8AA53
9D7AFFE27423A0553053F1424FD1BE42DF0A310E1D1BAB3DB9D0E14A0CD4E9E4
F978604073003B9DE9A56ADF8979C2C77291A8E4A7715FF788491FC617BBFD0D
9AC8B0FA7CD4D5E91996B337D1639B616A81B2E18349C55F794B95622CF981B4
6CAD27AC7E1E20250E3AAB09E78E7F66CB3CC2F5893246F299FEE825564902EF
D08EAC7E4963AEB783E6DA6BEFDF18AF1A3116A2B49D5D8BC25730028D35672C
6686C40A772B781BB67248AAAC976C0DC2A32533B258F866924821ECC2FFBE79
252F071496F534A5FACEE3FC6C5021E83D0FA04DE72EBE83B10AE95DDB232FAF
E284BDFBF5D98B82709C47085EF271C3F2EEF9E467B1768E3DA7EE8BE688A5A7
EC6A2B7054C126B8826B2D1C82E7B5835D260632FB3EC64CA6A201EA0B8EF704
AB1A036AF93031FC617013BEB770BACCB715337CE02BBA326E19AEFA29D66588
5E10326F296927D10D4F1855386004E4A3CC561A423FB723392E3F9D8225299A
D32E960DE2CF2E3C9CA94D43E219F06892F75948B1B12A15889917716A54910E
71FB6278604A400504F6F7A81CEACDF18E5C4289867EFEF7237D0E6DFD36CD9D
E6B9AFFA3E9950914CB0781D5442DC61E235A20A510902A35531B9B500B8C97D
E2E9298BED48D2A5288BA4AA145D033406CB2331B12EDD876D60CB8241B1C09E
F1BD0B26445FA74F287F6354433C93CB2DC1D318DF0395932D8CF25E71FE22DB
E822EEA3381EDA029EFDDDAF7F7FB72FC433188D4F6A0F65986F92AAF11143DD
BE54BA69C027592E21EDA4064F9024388FB285B72C03C55FC87234D559479676
5CBDDE8E2C7662221E2CBE5FDADB9FCA3CB6695C4BE1E0F6F82FDAAC5F5F2210
14E72243838796FEDE5D81709D1B3AC99444E7C55F697AE06CB2218391F9B8F5
96612934B1A8BD312DAF4E6D8D42E686D760302A683371D17EF7593F21B62B96
6D5E36440613B4607AB1BDDF138B7B9DE7CD39614A703113BE9BA22E2586100B
3CF66FF9503C740F3368E1D9EC9198F05B0907E7089F0ACDC1C12DAD061C2739
8966550634266FEE63460BE1CB7D9071466AD9FEB6A3FD6B68DB45CA7603221D
FC92E5223EA5D9B710DD5F4C1FE2C5255C7B2F6CD1D412599FCBACD5B8357B43
58079877E04E987D9818CE1EA4E055DF4A8FAF27B3B7F2267BDC83B224172961
56E133A7884C1FD146B9AC8BDA1B0FBEC07A22A70A586F2C0000C6A57CD3FBA4
1434B6E47C18B5003887BE0774DCC257ACCE56149AC9A75C7B441368863CE766
6C1E28F100862154EDCCA8520F0FDDBFA9E744A863040D7B9408D62D5C02DFC6
F80B336B22A2B7EE27BD4EC36D46EC1F14277E526818FDF66B8611FBAC79DB20
904E41A09A2B7632C88BFF4EDE18EC80DF2A54210D9739022860C601C67D5771
C729960E1E1AFC713639B1C068F02B68F5E7C7E45EA39E5EB5F8212FE8C9BF6F
CF89E3F3B8842551EE083A5D9DCA824F0BC1AA34CE0A2F32C16D310685A6773F
A9EEB817FF3217FD15110C0F4ECFD6EFE7EC5155456CE480F12DB560ADF70520
CA53E24BA02ADB714024FB39033B10F72DDE3B6EBB808D97C3380697B59D8C9F
015D17CE76F3DA3C5CFF2E4416493F2DBB2D5077EAD12BFFC4F7C081C536F943
4E6ECF409BCBF77A39F2BCC3CE3B16303EA44EE89130BC5BFCFAC2784D902D6F
7962F4077FDB8323478FC28061C074B4AAAB227BF93F873046DF362F42C4A132
EFA0470E8642AFAEC4CD1947F724E51BC6CD3E93BB381A7F2E2FD2DF21016D1E
7B6ECDEEFA855CC47C7187FE55764EDB9DA965633F5DCD87B471D2A628392368
D68C28ED60CDCE0CD13F54F0F6FDF6C1241583B84C15688C6165A8BEF156F6AF
0D737D2B0ECDB55EE90B38F659CD7EAE816217ECF378AE25768D90C920020A6D
2935F0A51D7BA1D55ECECB3FDBADC6ABB50581098BB4F6779C063F73F09DE148
DAD9AD98F427D039CA631EBA789B920BDD8EDFF07E1BD84820F7BAFF41FD97DB
7BD4877B2CE55A8F36653835A2E195CAEFF4B8D7B450AE658F5FC14797AFA4E7
90B1B9E73F7CE61C2F45C5A2074BEA636B09012ECD5F5A88EAEC46B2C6FCB29D
5D3A9E6DAEE8429DD780B7457E6988D2893A95C4DBFBED4A8DC151B0A90FAB52
321136093465316769D072471249924C3A95B344784AC66F6EC752D420D8BE59
4D3BA4E5DE096705B40339250B7F1527D5F8FF12FD500A44DA2555AA09938382
27BD7FDA6B5B3E556F9E3BFFAFC98FA6153757074CAE7E43BB6E89BA0B5570F8
508D964BC4E7937792CFEBFF58AE1CD0F566BEC6FD4B2F5EAF3C9EFCAD95A1C6
4FFBC6312A96DFB2B9C95B2297BAB78DB580E5FAD0ECB93786E1FD81066C7F2D
4D77F4B9576213835AE7E32A2B401C36C3D584F2CCA1891DD8656751732BF41A
130E71D69709DF330EADFAEFE38D0E9F9702E3D942063E720502C8A4FB972C10
4A2C05289E1E554C5AF893FD2D5A2AAC0995D172FB934DA5A97F002303F42F26
613A74F03E6D0A48C7F5CA43C8AF53530A945CCBB65BC4B1B1089634C77C753E
E07EB5389AF14D94CC6654F4AFF9D8A5D3991132241DA883FF0DB302F886F354
374751DD6DC1EF079B38B28701AC33AE3F705B143F935D3F4FFD4F3B4C203892
0CFE23BB1513D490D591238D318F48B8E075A41CB370F6C6C2C7BB7E54264029
445B8B8C3919AF693F40582825DF0CD8E89B4A8D9AC1D5D8EFDB029D49D60E4D
3C19D05B51B48416197391A96E5654C1379B79BCEFD3DC1140C406A26CFCAD03
5017A7E39F70E582041F7E7228CBD98F9689D4EB8B4D12F80E2E959564099D2D
79DCCCEC37A18F8D20F6C6E489B5ECA0F59D72408AE44535F7F58B254464E1F9
AEC2DFCD58F309C580E3027432F367F100EBE88FAC77C46452EA9C30B630C7A1
2F545533834BF2F6D6B2EC17F6A56159ED98B450806EC9100A418C8BD326CF50
373AB7D47B509AE6F5C4B100BE8334ABE66E13BB8B5B9215BEAF72F041F17D55
B49B81F3D12799C7003965683DCBA5BAA51ED9F1F601F0F088C4C28594ED33B9
4AFAD750F6EA9BB43271084CD876A14CEBEB82D7F8DDB076BAE2DA3B6CE4CDDA
B67A81831F25BF86F60A033BBF6307EAD2720BD9674E2AED09E56CC6D3BF94E8
B4F8C90170E014FE8F31A5FD35CB74EF0FA13C6DA372819BB607B8D6E267243E
FD320E2E52173E513BD9A8C63E4956C72DC9889E13896C84FBA0BF4D5EE4F6B4
E4B72C73FDCC7B6FF4DC48DE847AA47FC8A562E91B485E9A19CD50EFE1EDDF11
4903155F14A3D27477386B661F8AD4BF6E6B3FD434FDE1329BEFE5A0C84E3977
32913FA10971C37957E885E308D4A9414FDF10EBD25557B85C0E4F9BF2B1CFD0
4E1F92DCBA540C6A44B3025DA828E07218E8D85184C463B9F9044091F80D435E
1366EDBD58473D3EF05A00A57078A6C9289FBFAB908E868942C11B0BD4220A1C
15988847BCB5B01B04F5C3A01B3BD243941A405DD53AFABBDAB026162A499787
D099A660B67661C7D1BF6E6B3FD434FDE1329BEFE5A0C84E397732913FAE8DB9
8DDD8A8691F3FE1D7B96C516DA7DFE48BF6D5B1A576E890DBB1BD9B8AE10E2D6
143D563819EB1ADD25EB01C356325B4456170E9ADEF02464A57D0CC0A7508499
7636692AB13A9F2183C9B0A4536829527A871675FDD3B99CB9FE7E9A8751D100
548636D62A4BB95C874C4C5F1EAC61B01FF8FF6B822E6C6F656FEBE1D7573B9F
22DAA862AD0A9BD2BCD71150C4A337A7CE97706CB7E39C427720A576F30A146B
7A62925850B9E2C50CAA6E60F1173DD50937EEA219B78822A55E3E6845A40126
2725A0904BCB5EA7C17A39552A1F26283F54ACEA0D7F579C8A4DD8D901A5B598
D721639E2A82FC866DCF8744FE57F931995C83EAB168E55568BDCB5A43CE3A39
C87BE52F0517E5D2BFF09D567681C85AB417366FBB13BB3443A298C784D469F2
A1CDD0357B90EE2BA330C23F24D803820D344648676F9C6B888FCC1F5FA17578
31BB68863A358EAE7C048BB0749A09F2EE7F66170B773BFF259970E2FF0A6DC4
8E2BD5B8A4AB4A1D58655D42D988542EF55E71BF19F0093C0A36BFD621C62BAB
E8C57DAD1FBE8B11523BF841208249F95F8B28BE162717CB6215DF222A20FE01
B3079109BBB636C43D2B50F1EFE12D2352A8DFDBEB066F94C0FBF70A7068432D
EC0053CEC7BFED397F59BEB40AF34C21F04692804D19A2582702B0E297D69FF9
B3AD38AF0A86A3B1BC9737DDDB8D941425DE145DA043A710A148BF63FE3B3C8D
C2BAA9230C3B2CD654ACA8A513F352B24F27606155ED2C2E95398C0BE9BC7DC7
84E4ACBC3A4A0C1786AEDACA045F663A3C778D20B652D4C20EC662F276BD7373
EBAD6AFB646F54CEC76AC98678B54E6E3A103A60A5B324A31E114B11AD245C3D
14EBEA4A6D96765D6920D97A41D2F69B4CB22412ED01BDAC0BE83554A4BEA091
F378BFDFAE49D3FE7B47F0B4C5BE36297E9DA5DB6FC2807CD9F7E078D1DA94B7
D89BD873CFBC936787F84F03BD8FD9CA0AC8FB5A2E119DAA9F80083C9BC54F45
81C467CD4083FDE377A8E800BF093CC74B3F067CC1DF986C6E7E78A183793198
838A2416018B583A55803F83CA1E94B6383FB3CF998B84796AD4F1646204CFA8
DE394AFDE0736A5C39A6E22F1B5117C49C6AC5B8EBC8C27115DE6771CA6F51CA
BAAF6F0F96059F16748F7B1B043BC01F44110E737D475BCDCCA0003FF558FB0F
071597ED30339E42D3B38B85B5BA97376AF632DEE1A8C2B197CD7F16706B5092
820445881B900A6AD874AD8F56FC5DAD08180C2C77A484515EDA3F23CE6B25B9
1B7678A1DCC12FB1438E863C21566CD95E6180B4FD4920794F6811C50B246A7D
C70C99B7DBFADA1E01B81749EE49A0A26C70A78D313F992FFAAB30A5EEA4AC13
C5AFCF78EBDE01F1BC0414FC98F0F035385A1F49A5C9D9020BF62FE1A77A9E41
F1C7CC6E7EE5D3127FD2B4FB2FFB78635C4543F316BB80FB3F6B7BC903FAA875
92819B1F3F9C689C2B82D2BD56F5C560E00E662DDDD0217BECF37587795A461C
B473A01BBCE289A295CFD5C2D2ABD635DA7FFE17B2560A080C018C74B3E2FD37
5295CBD5A726505067072AF713C69FF15F78C8E8ABCAEBB0DF58A464569E55B2
DA07D69B61B97AD93BCCD85F37AFB6445BE8E13E26A8656BB69356D9D65CCBAD
E1FC7665016DA0D967FE6F24FFB84F23D93A69FB240C1D725D13110E07EAB006
97AD67EDC33886E3E1A0AE32E50FB7513584EF4EBDDA3BD2320DC1A7CE6BC3DB
2867A9FC6F3B6DA1C79A6CABE4DD8FDD53859244E764EB30928AEEDCA61B74F4
ACB5E3B7AB6B9079F2927260E9EB892FE7C3278AEE739E156772A45B9A9633D7
E83949092B0D0D3B74380A1EE008CADE312541D0DC78770CD41319B985D05E5D
40416B945620B04790905077BBC7B59C5C42CAB2E88D24E5D7578CE6B795C11B
84F702A102B347FEF08A6FCBE79D66B42523EFE5142D5524B8229FED115DC70A
9B60EEB1EF4E4CCF72FAFA8678639192259B654C4949219420CCF3B83B51F38F
0AA8FC88AB12065DF7AEE9E50C6F8273FE857137C2CC03F42A0269FABF5963BE
DB4CE5EEF81EDA0CED4C3D2F1D50D6583346711179D60EB17B9C4E3B7262C91F
5489AD2CE47218C673A37DF00CCBCDDA897BE471F8B42682072AA85797AA89C5
D990083AC689A453E2B89D50E28040DCE919A3AD39B90E6E7ECF1229D9BA0A67
73C8E3AA1A9D95416FBEEA9D12216EC37BD89C5CF33F50F0BAF05732C17FFB56
DB58C3C703CDD10D18F3D2433B05EF6B1F64A14FAA7DFCBA54B260630CFC5763
39091662B7F1AE3CB1BCDD4120E4DA03F7F94731C504104FF01A8CB22DCCCFA2
93BB7D7242BC74F64E87EE4AF500C6A0C76B9A89ACA396CB9637E7BD88BAA338
4091223B7723947DC85604DB4B0AC6A2D31157299A01895DDC8D2B8671A36DEB
811B2898D889A581B799ABD98804DB250BA675AF6A039E71AAF8CB881E5E854E
5ECC3B0E34CDA1B142F8E062C67D0E8ADCCC09C7900E8E6AC46A6B373325995A
9C662760414C01404043E413839CF8C96D5553A0EE6C0639283F42E7EFB30F91
0EAB7E9A77A1671AAF60486AA65076EBF7BB068C9ACFE42A925AD428839F8B42
D8D3E30A63243E9F7DBE231C3DE32B82A38A9BA8E5CAD485D93D8209C94E8875
065A8D2F7D8A673AA44575DA4AFED924430C88DA60D54DAB1FF0F28B7075378D
6E84933CFCDDCC723A92C5D81B3B8D5E7BD3C814E17F26950A7799D3B4157FD1
CFB3541063ED6DDE509CC7331389E82FE046C615B231FD5B7731010E08A50DD4
6A8E367A7E94531169CD7436A61D09DB2F5D3E8D3640E5C05D4EC56750891C94
A4B2B51C83CED9FC4CD766291C78537C4478A5C381186F39ABF5F965C7091CD3
352C8DA0338CB068304B8890C9665C65926E0A7AF8AD14AB0A7A532F0E53AD0E
8F529384B8871388C4604675EA7374326544A04D62836134885E655B34F32BF3
E643F1EC2D5545B897093F2731FAC044BD2ED07CB68B2B95FBB88C2548EE855A
521224E669826C2B2249EB55CABCDCB67534A63B0EE3CE96D71D08C228DB63BB
F3B44E13AF7BD18BFB49C6350BBCB3D7D45EBA8DB8DD6E5B41F5D290A1216B17
742ED304B2996DC77BEA528DD00039AA5122DC2EE4D976BA9A90F152D68E756C
29A24A789A87AE0748BCDEDE568BCE4B97C14DB45BBBABA2360BD53522C615C3
3E05D53C5F042E512B2E4AF08B012316E7524D6AD535E487C20BB53D87CEF1C5
64E90FEA605DC6AEC6224352F3748E35732216736F128E4385681FDED57EFB3A
5035FA3D391514F4B36D5C7333932A53504D96648C2089948891B557C463F511
124CA3AB63C2E2F43DE6FCB7C928450BFDD46DDF88004A089BAEC8E122830934
7BCB3C08C522B5705D78441901F4B7ADD76AC652ADC90DA54B5B97820B885188
510749E4A7852A99D0E5F912C86A6D1700F8562BA49879ADF0F5D6E874C8B692
98FB05215ED991B7540218BDCBA95220F975CCD3FD64C5AC8295A399DFD3C62C
045AB3965FC9588BE97E0D31D0267D8CCA73C1E7628058CE97BB9B080DE567C4
C57ADBC14C3C7AA45C67039BD7243BE77B846C9BEE668BC55CB057A516F7CE9C
3785D4C128EED8E78FAF7343A81EF370850F9ECB8F2E788C9C99C4CF9BCC9CF5
3232454B14C15C5E30DF58127605F6B9C0B376B51523394318C22B863A359B68
FCBAADE97E9BC162A7229546436378570253F9314AF146E6642A4AFC48E940EC
0639BEB7F11F2E56EA59E9C2459EEA5429DF9C98773585EA5E4D316AEAC8CB41
82A887EF4B2CD516FCC00619CA95CD8F97EA85176570BCB441E9B74B39F47C77
E8A28931AC48A54635501C98C38B816811216840718C421391BC4E0BDBECE4A7
FC58DCC2F00B5F27D4547D73CC867AB741F3C6E2B4B638E835DC3DBD138243BD
94B14B219519BB749D0863A5D8176337A81F92CE7DC6D9200F7CF92D71DD42D5
7F1FD115B700DDCE8BF6642AE971DB809A152552F2DEE1C46A4AE4F16EC3A864
D83862DCF9B71A8FB3A6411DF64DACC97633FE6492E65F77E77C47A81E657F37
16379FA3981985275A7DA9E0E1336FE337DE8084CC913EF48B7D6FB0C4668867
98265AFC53074A8784D343245A85FE7EF39F517A6D2F7B121763B35717DFE874
692145232E89FC52487BD40ECDE58D83FE9782A6B454893AC10647CC82B1937B
920E802FF49C93C537BDE3A1A9A4C90286999ADC8E984DBD7D6B8CAB65E5FEB2
374FF8AACD9F9E421646BE14E2BC90FC519829577BF4A90C0A7A3716E46F464A
198EBEE6C6EEE21795B04FF3E6F6542C4F1C6EAEC54DA233359CE4471F90D104
EBADB9DA09321173442805CF8F8F6BA06E673E1676C3926651F5B3F8666E369D
50682A921BA05BDCD2BC5993A39A3AE751C54B3F34E026863F790FE3B176D71F
41CBC436C8E761E2953D39C970D1FBB4CDEB5AD9705C56613FD2C27A6FF7D30E
E720575B4FCDBB284158CEE9912B34040061729AC4D74A7A206550FADDC77C9F
5AAF7301691C0425A75BAF36903C96F1DF07C5ABABE5BB69DDA29E77F9419E4E
98666752ECFBE462E14783910501D40612F4B2EC81023B5B9E354CFE201E2EF6
259A283BE5F7F9BF42EA170FF2EA98485424B855AAFFF9D4D724439302113C4B
84EABEF6DB592943F362EB36B5F56AAAF7990882F149552ACBF1101C0CC34540
AFE14596BC4F4DD6EFDF6925E9A44604B1DF5CBB795FB18F532DF7246796D287
DAF991ECCF0279ECFDE314BC8E0AB7325E4F2C4D6F555DAC9A6D17C263F63D55
D6424C5F7DD252A743AA3677BA05A43742D2F19BE31AD5366B55580CE7EC27EA
837EDAF9DBBF7EAD3B2858BCFE820B445DBF0836388BDC7AECC01062AB86D4EF
61EA4CAB239834D7796220D6EF04EA845A6241FF262C6E8C4C3F2D1103F49FAC
CBA91B72D7440A7BE1390540A5E42BB221598B02071136709C64B6264235F140
573595BFCDFC92703D1A095D2482E2ECA6ED44F3D91E287AD49B22418B330B24
A0549185CAA283448C7FF5400BFA745C859192C2623460AD1D292AF0022CA7C9
CD80CAB18E2F8F36CEB9CCF1F47414F0FD74C95042B4E88B99BF90C760D537A5
F601A5C3B1C34BA55DB6D86E691B2CA7B82F4ED2802349FAAB0C190DF699FFEE
5B7FB9F34A31386F07D66ABC40B5D16703430A1B6DC3005CA2757CA7ABC912D2
F76B826F1DCE24EF8287ABAD9978D95109010502656E1E022960053BDC34BDB8
21D5EE1ACAF8D0CA6E13EDCCF90A4BB9A71D5712C20120B99667816FAFDD247E
06D9789127D2DB959C1BCDDAA06C54247BD18B7A124F020F8BC59461A584E9D5
51DD326E58FE258D0E268FFFDAE1393586EFD07326AD758E4FDFF9A4FFACB66E
DD4D9377BC3F5A8C799A226DC2D62003BD41E1A25565E0F80615321554AF2252
858B37B9F807317E68EF2C3F555A3B98ED30070CE54B0FF341359851824D08EA
CFD158139882689F43DD094EDBBD206ECC0D62BF85EAEAE51E4D7B7D66B44818
23B60F89793275253690D2634811AB5143E498FC491906217FFC0A0AF3714BD4
DAF84CFE5022302D8D80AE9DC26D00BBE1D16C907DA1869966AB23C9930A5861
847008DB93076D8669400FC6E144DE4B3C6620EA882A24362888BEE48FC92D48
97F8E6BDF8674D52F1A498223006A550EB524E7732C3661E84351914EACF7842
A4BE1404DC599682264931F5B77208C675B566A0D99632A4C34EA9FF559DB02A
8F69CA85C1FB19A3F2C9CEF11029E9A647CF2CFC88570275F4F8378BAA0E7564
DF5D0ACCC122C8C1CA9703EF94ADEACF930E6741D8BCCAFFD50E82227E9165B5
363270BB0B7419F52B949B41012B32241E3E2F47B265EC4F5C6D3D7F2A15B424
61B545331D71A915FB663A04001D43A504ABC776456B69DDCC97085957E39DF3
DDC87E92E2FE8EE20996F52867C6C8D67A28909BF23D50EC5BEE2FB930EFAA72
96E18DB2AA3023666E0D94BEB3407A7C4179B1173C7C66536E688AF7B407AA9D
B73B5A47F44758445705E96AE953F33CBC743DC0034904248227A65C597DD3D9
DD1B7B7E2D7A8185EB91514A80F81FE7226F6720890B9E65DCA9515D6E911192
A0772AC9CCF99167639A74B45FB0CE70ACBC2940E23F8C860EAD0EC4977851FF
7A788AF590F08E13E483D3EB2263E895FA3541582667A7816F44FA1C161BAFBF
18900D500C4CE3599A4B1867616223CC44074C3B78058725777666DE7703EAC3
383DC1024047BB16A8997BBAB9B6A1A493BCDE67B2D52CF54D7DCD88EB5EA03F
149D89BE957475084E6D7DE7352BF4E925003A5EB61D83AF76F0EB2A1FE048E1
172069E61AE6C5258B51C5A80C5C7238AB883E083EA59959A3000F610111E8D8
5184C463B9F9044091F80D435E1366EDBD5A28728204C8AC7AA8B27CFF05C517
293033671AD812F0571D4E47D20EA59C3276D70F48CF10493E0A4117D1B4B6FE
6C2FBC7901F18B38FBFF69D3FCB65A973610C405074CE5B13CC66497F464C580
6D183F4BAF157CA75FB9E0134D63B1B99C881ABBF836F8EC13A5A32A91CDD341
E13F803E42C0491ED4208F2A7E2311CD90DCDDDF2859681D7DD8CD465D8B2E2F
F21241F38A4966154285C49E1046BEC678BB15F35792DC64B934DDEDF3147D1D
4C2FC72734F17A71907E4739469EFE5675C0FE6A19FEC02697503BBF0DAE2D5E
87BFE61302B759176098C0CE2464D64366480BDF00AE4AA5B339C187F52630B5
2309834F266D747ACEF8132E8C92B729F0F68C6EE117A1C4940A7282FDA952F5
C310AB3BC4F61C2FAD79570767979CEC35A1140780B4075D21CF191A2A9F42EE
8C9E9A2200C8EE611EC799134C97367DD0CFAA01DAB79ABBBA2411F86BC60A3A
DE86984C77F50B005403A81C506D419113F3AB92BED886B0533C7C83094E7E87
AD847D5976FA7D44244C895D1893C287342A686E0F949C4C751CA51E6134534A
315CF63481AB6119068F75BA9907504610BEA55E0F1D09C6E24718EC132DC34E
8A9C0657E6D4956DD56FC197D3F2349AC7FE93539993BF0DEABBBD33673C5BA5
8E2BF177CB005C044893CB8523A177F964352D65650DB2D1D87F88AE09BFE4E2
CF74BD96A2F91BE168C0D453945F999AB6082714B4EDAFBAA48EE80F296892B4
63FA2680A5A1E7FED1E46283199D5A2682B8745DE6F85C655457DBD51637C51A
5FF27FC1322BEF31F9630CCB3E4E5BF0A3151004FDD30F9F772DFF813063B613
5CC85A4383F380C770AD1E44970D66A6C473EE1FC1951F3193810F97E77202F1
B53871F094CDAF1D7AAC858D712A7BBF3E039137E11AA20B0C21EDE41EBC7BED
633893B5567FFD39CA40BE4EBE0174BA827E7DBA957B5556716866C7406275A3
206C0B981EB6DC945854759D6FEA4D391DCD5D08268EAB44BA2650CBFC0CA9B5
5CBDFEFF9682A94A759A52DABC55192C708AC32DD4739F3142C22FAD15FE866F
5836A00A3BE60BE777248292051488019B9EB33BE4747AF13D0369EABE30E90E
CFCE19FAA1B0230F54DCD8AA3CCE6DC74199B5AC793F7177BD0AB6578693FB00
F24C2F914C7E2FF56DEB89BA6E42C5DDCB2B8E61E1BFDDEE486EDAA38D931F54
4C4DF2A77D8B4405FE1871DFC04B7B823C551EBA401D04287679A31BB11295E2
D0F324B92F6BD0A90560D6F2439E2D50DCB9DDB32229C36CE5CAA364318894E0
F26501E97691ACF63ADACF21B2842243E8FEBCBDA5C7A8EC3A02D70409252BBE
AC6AE6417D1B42DD280C1F4648F2336C3BE41D15EC4D23EBBAADB525C242CB8D
CA7A517E7F4D92C7AB797CF258FB3F74257F0549BAA570F95B97AE0BC57BB247
32D82C0B4926CCB9B73A8847B4EC479380641C1F340F0352D1EECE54FBC7B5A8
87C3478EAEE8720CC128DCADFBAB950F8A1F66D4720DDBEDC0E0857B057D019B
B4C65812FF03FD597F2B8695C894A282C56BCE1F787129646CEDE4F02616F1D4
5745A47169DFB74A9DC82D26722D928D5450771F19B59A2760C52C87C36694BE
5257D9DEEE102A11BAA2FE592ED088AF61FBE6210FC290D982620A4EE0030656
C55146644AB4081DD7906687B7E22B3C0293E0ACCAB225D733E123302C0C9B05
4E97386886EA0FEE509C58255AC3CE51E83585671A28115DEE5421E8F5C91D4F
0A76E4768D7B3631236F4F3DBF5EE7898240E65DE1B310583CC318C66E25AA01
32CF07ED76FFD70142E86EC2D6A439AD5330194F10BA60A0E5DDAE08E5CFF9C2
608E4D28DF25A018A687F1C73082D11C738DF99235FC8A501FA6A432AE81256A
65F5549E8184F4C0ABDFB3D1571A233B24EC15B7E1E5F139C5C44B79071E11ED
402A0F46027DDEB6E4E7491AB2810236282AEF3777317AB33E13FC8389673021
AACF58CD6C9C2046BE79BD0228FF3C72842106811F4C7DF26F6C07E8D0E64590
F3AE4FC4CEB9799DC73446E89304DFA0D81856288366086FD0AC886A043C5A8D
7650EA000E42039C49B39B0B7A384B0489596EE34E86A4F629892864CA25CA61
523211B5618A55356ABAAF656D22C8055FE0CA4183ED3A63C3EA53F1BCF48A07
C5B84D65CA2A712F679B240AD78AD226ED887220077CCF62931F45E478D22828
BD503919AD6F4D29CA04960E6059F6BE264E087FA9694608E008AACC3E8E391C
E2EB2DCF62706873833D75A879D70898028F987AA779E3B96DC833DEA014FDEC
8C5F5C7331D3F09DDEBCB1DFC96BFDF9C0A7156177857C548D21E35083BCABD0
76473DA09D5EB6F16E7DEE843122A05CA14949A579FB90441976C32F15E3141D
E2EC6E1C7FADD152453C1CFCDF025386BF62CB770FA8451778614D372B0437DB
030F3C11BF25D455B290D175430A18EC785662AE8B841D78900B7D347046459D
F9F2CF53D5D8288AE753DE30F2E427AF1FFDCF269ACE957F045016268865928C
6BB3F4FD6493CA2A30C1D5C24AAA0CAAAAFACB3F91F2FAC865B8A63A3C32EB14
D152199A30859D32081F8D1718EC76B4126BBC6FFCB899A971F6F0C88AA598EC
5DD33137B02D4890C033296DF029CBB5E4C8DFEC0195E921B5D1C30279CB62A2
6B1B799DA0730B7FDE5129EA4156989688954D17D25975E3A8855B703C13DCA0
E736177D67D48D94827B476F6E151BECB7CFC1C73F6E5B2A1ACD2EEBCA8B2EF3
4CF4E6BDE24C4AED0AB9D47E165650C8E48F3BF1C87B135CD04092795F2EFE5D
365F8C2B5A237484577D19EF03858B07BCE5B7E894EEF76972314A56631FEB5B
EDACD0C478DC826E139728D62DCD235AD82570A4D1BC6E3D5CAE517CC7D9D120
EF1E2FA0916C3B4DF48B5214DFCDA8CC77C7E046E6CE46884C22C95372F9E5C7
8D6D7633BC50F6F8520550A2CDBFE703E9728043398BC7D25E78D39FC814BD4C
1FA088BF862FD23C955131C57D20161C6B509E566F224CBCE952DAAA71B22BD3
EBEBED565964C4556254C22AC39D3FCA78BEF73FB978E1EEDD5B0BB4D669F99C
2B9C17DF5A755C3F27BCEE2CC5AF65BF5D35EA31063A07CB340E2DDA2BFC95D6
3497A06FC4AB7CB13689933247F78439F1FA91FD5C20C3B32A3785FC39C52BC6
0EC2D3DCBE1E53FF8BF0B076C7E73F8E06944D881BA1488AFCC110AEE7764325
19B51B7F28D52B230134904A3ED3467BD9D97C3713D2D2751E1DA8CA36F065E6
5DAD34937D41B3B79D8F9D7C2066475D86307BF84F18771FBF9203371A31F66B
BFB84690AD3F1B8393AC6E30EB9F69CE1CCDC30740721CDB61B0078AAC02EFBF
023FB31240DD9704D3A9811993B49B5C24A20AD3EB7F2D1B0E041AE023EFEC3E
AB42272C3E44716879DC81ED6039B6A796E3C9ACFA8E8D9DD4C8E0FE3BF60E90
F1484A9E733493D28522F0E163701D58D9ACEC65F0A3C5C1E33199BDEA6B6419
F013A71591538DC8E9DAE301787AE73A19C6E042BB9154ED8D7F8224FFC0C2E6
BB937FEF16ECF55B260FF44F8623F7DB21C097F9C5DF2CA48E8B6F541261C158
B7BE3DBCFEDD54DF3A5B64E489907A9D2BB6516EAE4C1A82FEE238CB19DCEE0E
B749E0745BBE5ABA1630640B84AC12BDD693A0AD5B3A7D01579D8C6A33CAEE76
F12E8A0C1DB0725F13B9E6724CB98D65B024EA2CA0998C8C4008155FBF4ADD4F
92F08C41D465F035073B9AC742B5E6C1AE95046B27F92B4C0C2FED3BCD185C88
C7070AA9E122B4C489E17FE81E650522FF99C2DC9CA6D78B4492D97042F43EA1
EAA00F2AA512B58840058AB2250154682B81584DA29C9499D161ED5CCF05778B
AA1F71B2BBEB1A84DD780DFB3E4F9FBA622E5EA1CC3646968F98C0DEE5DE1359
7C22F4A76D7775162D043859027803A064314BD0A1AD57DD7CF8A3892400E0EE
557EFE61648E12A396D203B7E68B040D939EFFBEEA09F5A37A4A3B0FD17E83CD
F905D1B86677D996ED0B1A1DABC32DEE8E388242737A9F5943043AE31A053F1E
73005D05923E748D0AEEFB0C79B34E4BE5434888A3630138F8FFCB30697825DA
5347E5D2EC9A39D9C1232ABC5C8FEE0AB262C47FE1532A9832ED123A518F52A2
3D60515584196D5E53FA079A8E76169C5E5B48F954D78730787302AE4CC27216
C6D8513A7082F0421850A5A3642B1713DCBD542C7510F940BE254BA805EA1254
1C1F82D6DE32DD4E9647E40D2BEE3234102AD888E98EEBB12E62E0B8B9ACDA9E
94A48CC27028BA09F814F9E554CD6E3A47C22469A3C1B6F98E4F885F7391F5E7
7094DD8C3E0D42D357AE256A9172895BF4CA6D403414DB39314E9D64755C3101
7599FBD254281EE28C7C82B835D87597087BC61834277AD9C14546D7EF8EF486
2D881144050E542C4F1758D2BDE072183CDC01AA18078F04C992F54F3210B54B
F537A279B10DC14163E6F72A1D1587BA0672598752D88F16FA7A7E46B8C50A5F
8086EA31DD2180024DCDA9C6248679EDA3DD7E214615494D08E385C9BFD95F14
F153CF9E844F8ADEB36CB104D2043336716AA4FD9CCA6CAFD44529A22BDCBEBE
3F85D9895E9086E5A9C83A412C6316F2BA6C6740248541BC224FD1CC2D4B3C0B
AEBDD5D7F1DEA921FF191F0CCB82531134578A81A58015E801A13B79C6A0D3B5
08094F8A16DE9369657D3E7B5497D142BB34993D54D687B8E85D03A46D6810AA
40544A16D28BA63DCF9300948D4ECF2D6753BC7B4792FC5DEE41C868F8CC0000
0F56DCB5F24933CC7A638E52ACB6ED993FDCE6CF3534361C97C925E515EB9C2C
392889144D33417B3B4DB24B99CA1E1BF22E2ABDD80371F80666942548261593
D5BEC043B961C5ED5FF44C2BBDD54EED44E02137C8CCFADC29C90A05B4082DC1
1A5B06E6B55E95FE4676BD3A2E696CBEC1A4BE2D09B29D77B435517ABC1951B2
F5FEB48DBF88A16F80B7F9E04C25CB42E376E62D42E2B2975DEF406420D45D3A
4AFC8EE0703F70D18E9342C68EA72D9C1B9DCF39CCFF1F4FE5E5A2BA966006A5
66503D32708C76C3C9079FEBFCC7B690303DD095898BD098E41EC9394CD1F634
5FAE2809DBC1DE60AADB608A446B5E303B47B5A36FE105747B8A9440BEF9AF5D
54DFCD7E45B00FA818D10300CB3EC0EC996961A1990AB2E43D063CC5D81A4CDA
1C29EDDF4CECC37B599D801EF553C26342D4383C7847ECE3BD8099AD4FC0BE43
8049762F414749D753CDE79E68DFCA55228BAF4BE0F730A77A4CB834A5F3D626
F5CEACF4063F1B86C764925ADE4E44F5B3AA092CB4669FF637D91804BC8EC615
FB590C0A199D4C2B0CE5AFBB430FF8FC19C8F9FCF703BAA08D393AA0BA0A2144
5FC79F194E9DA8CAF39E3F8CEB831AC6592F33E47951985B4B068E95B1FD52EC
48153F2BF1A2B0CEEFD3107D25A3E99C12C85B8D065C0B1345D4BB4B2E379432
615D4B4089CDA3C719DA2D9A53AEFAD418B26CFBD99EDFDA9AFD772A300BD05C
996B110D0BD99152C480C06B6CEA550D7A206F524E6811A9F27253D2F79968AE
F8BC2FE7ED165CA3F909B7FA2F1615CEDA66E1EBCA8FA2B16F41447548B9D45B
A66891DD83AFFAC7C5AD04F75E227B16E5F2F16AF3AEBD211B0D57C57D3DBA71
75531AD3481D81E8F28E13E483D3EB2263402E79864FFA214860193427C7A7A6
551A530701BC8E885F4E3AC447552D9E5C9F70B927BAA1D139DC15FD55492A5D
ADCA0772033B8502B4CE259E68DFC8974BE8A1D7A7B8DDC32475B2378BA972A6
34D129BE6EB1A843D62970D315A9082033360CE319598F1B9D697E5699D3ED60
973C65917D2F57540089A063E04E8EBAC26CE357DA4732DBC91524E0BE91F054
B1CEB0AE141C47EA18967DFCF8CBD4F22FB2FB6043162E098C58F04D641AB0B1
B9EE4C99FF134D572E2DEDE2A1640AE8CFEFD4D090DA5053617969DC6E7E4B50
10990E0CBF4313F00A1109207D4C43BCC9931A152FC9DCA4CECC7D01CD20A94B
14C0E0256D0E21A2A3C0E380A38C1B3BFE0DBC1C3CE3B31E11D4CE6A283309E8
14EC41FB6008400E9DFD8C82E77C0379DFF6DF5E49956F9FE5C1C16B36822BD9
5F371E0D99371F8104319A40ADEA496E7E76CB19F7CA65F899FFAF1BF3A3E1E0
5BCE13AEE2260E0BF7CA0B74EEA1497340D4901B3C6A7D498BDC8F84F171FE15
01DADA8530F6EB1DD82657B3482423CE58A5688D70F26AC6F308687ABE404BA2
6E352CBFA1CF33ACD8ADBC8F20C42E392A98D69CFA1D4DB40F678DB838532436
7B0C8B56603FE044E7ABE42848A03798063E7E9FD8A52CDD6E2CE0F5D7CD70D7
836B1BAA5B70E0555D55E53C66CB08D80CBCBA61642EC8619EF2BD3014DCBAEF
FC02442DE4901D21B81654FDD6FBC1980A97C9C550F8E46362DCA60E059A00EC
BCF470355EFEE6E033CB42453B95E4DBD24F8D1133E95C56CD87530DA6500ACA
B04B37D9C8DFC9E56265042B980DCC476A8C66FBA891
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DB1749576FC52C627F2181104E45B6D90C4CB7ED8
92F1A55E037EC28EC3EA1E403EB80B85A444CC84F8DD351882D81CF6D538B644
942B6B97679E4B3D29C4CAA8344432F60E76A279100D53E3A652381140A60AC9
E399D564C91C1B998EC74BA4DC0AA1B54D55FA959DBDB3A3D59D187984C8B19E
111895943C6CE54E4990F54783F3F12333238AAFB953188F9C9B88B7B5A19F81
62E5D8454B7DB90D4C37C4E6C970F7D4EA4D8333C5B27CAEB1C48C5CB2C644DA
B026162A499787D099A660B6766CFEEB7FBD3285F689A85B864F9D252EAF5F5E
73E8BB70E64EEDEF0CA24784A1DB7F945DA3C9310C929E52E7F1E520E0F0F50C
287A850CB8F474F37399F7AB451FE1D956E1254970C706438805E25284C7CAA6
EEE7810D69F2428045CD609E23CE37791362950FB25AB2A10AB693413B1AB7A3
5B65D857089968DD4A6A37D5F26E8EBC016257E8F4D3BDBF3850A455A4BF834A
C254FBBBDC95998DEF2EA825E3BB2AEEACC0F30846E22536AD74B6819A058C9D
D483677E091DCE521CDF390FEBC79E7F50D3DF9F3E5B6EB1E7F5517A860224B9
ECD544CBE2D7C6FCEF4143E50F9A9079DD2FFFB1672751D8A658C45E07B9558E
776E94EC0991B31B7DE95F23639AF5C05AB13D5A1C28A17DDC8EFA3F3BBECA06
E09D438052E27B75787AE81EA98B34D8DAEF36B9E5DE1884D783C1E2041480C6
862C5CD0D47E24A2BBBEC8AC451239E34711ADD347782194D0FA7B8EA68D5671
095566DBB3F327C441B2392BA948E1EC46435ECCC3A6CB7A5F2F60CA54F14A5F
F3B3F2B3A0D09C2E80E84D859005B46DE826491E802DC10AEC6FD0AE1C3298FA
99C53536EDED25435CB78EF0F4A8EA38C1F73BB1572F7875CC54AE4EDF1087D5
254167A21EABA1D8287E95DCD5BF08A1FFCA11B8BD493853D06B8FC46751A568
9967512AC84C42DFB2D9C47204DC605EF7BC00D85F75BF5F32B350E2CF46BA0E
8D0120BF165A428CA13FCD6B0686B1A34F221780BC3FBEFCE27843EBC897ED2C
6EAF713011776BC1FCD81EF9A29A807BE4300283AE5AC540D464771454AC4CA9
2840DBDA7E1B7B1B1505B3F1266FB8568E4BFF0410C0775643A871CE8580556C
16A49C4B4E8851D93331FF3001E75D64C777FBCB70707F4F0F088114534F6D36
E4D76B65F8774F02A5CFE926BD4891985D68CFD7AD774BEDD19E816587D025EA
6DC053011212523A5C86E50C82C0D98D851C9629B978FA10CE2AC0425C783999
1B2DFD3164CE25F9A19F120360F93E7BE38AFBB5932C564E85513A94BE894217
DECA2F18BF6FA92CFB8D535B2D1B67CD3CF5EF4349B3DDDE8CBDA5AFDB246485
6F531DB9D7ECA48701B5D4511FF86644AE56F46392D9CF48393E530139BE17DB
6A1EDE43613759B68D109146C4433B990B0AB267D3837F53B0DE93BCDA243268
E89D1BA848F9FDECC6604E7D488ECF152B694939E28D488E75BBF597DB49E3F4
2610D596C1D91A878B4A2648506E87CD85E84C54E47C448AB0EECCCBC6EC8E82
6AB2BA27088CCF6A8F90D91ACA913F1D146B2E267EA777FFD62509810B87C552
46B60391D5CFBAB7C1B86F3EDC61AD43FE9BC177C7DAC8DA44B2655D8EC9A13E
235F1B8C2881C0B52D16CB8A3B5D19876C830FD788150D82EEA9530D185C5A01
2B4AF8FA0D43DB3CB9F83BEA96C9925A5BA00548A3141A3981955A3C282A4089
F04CEE35C0B41847C41C143A8ADC78D79BFAE3A811F2D67B799250CAF1112087
3098B51384447951AE879DBB7FB52F25A5A5DFA45DB0FDF9B94F0D339EAC1935
F8964877EA22D9E5D4256F3134B7F3A62C11FD1710119FDDB6C7098134D90F8F
B896D5153F114629439E6B8AB2B752FBF5AD056EF2A9AC6BEAF4358B6F0A756C
A29721D6784A86F3E68670240CACCDC5124B1D4E67DF3C21F1D051AEDD11F65F
E0F14DAC46EC88F3B6577184B17C8320CA028F402E9602317FEE444EA33B01A2
2F873D195661CA3A1BBAEA7BCB4E465DD4B94E0C5EF66E5F4252E5511A19172A
E7E16EFC2202318BADBD95D136728FDC1F3B174E3596DB82865BF5053CFB253C
24C65B5AA6221F458A151C340C5A2F835F9D0AC73865D83810A3A6B72B91DCC5
B8A85AB8E16778C4284F21B29864E26D31511F85D2D2809806065D2034DDAE9C
7B38F502A82A0D35F24B66D798F61E9D66510A1A86F80719F3D684436EDE35AD
601627B61F029D08D9A281520C4A3B4127C06741F0F70E1A55F20456933FCA64
CC1B060E260782BEF6721C7F108A0C2CCBC094031C7139367941CA39AA6DDE23
8ED59B3BE653A80FE9B5F613D694EE004270B5FFF26BFFC184A3C6A182563FA8
F8F6A0A210405C9B5CD8796AADD16EDF3BB714C5A037F58DF43A39DF4F494455
37B8F67721883BB280365F5DA1C9A7DF298B8C2FE351292F1C935F264BC41873
E40028AA8F3DD3F0B1A291E4A62D5AF6B69ABD9CFCCAE361770F7112D35E277D
4D3FFD95F32C14424A2B5AFE307C7807A80183C5E50DA12BF2F08521A17641A2
F5541EC84195149F6D621C746CFEAF186B9198AC674D0A76D7A11670C954A449
EC4E1C006ADFE2CCF08EE40B2837B09EDB5A316F841806A3EF9BCEB1A196F940
1A0C475D1D047809FB018964439FA7B3877858BBA8A26697C5929DF471071938
6E4581BF1493794B0660A2DE342E973DCE4F22F58D24B4AB1D4492ECFB3F7AF5
C3ECA837029A45B27572914CA4189749A74DBB0EA1CFAFCDD853C87668F76D42
0E78726B258206004BA387FAA821247D20ED83336504E06A82A194C7BD042EE9
0B6808E249327D58E53663421E0B1356D7C73FF4178CA4DBEE8AB7684BB471CD
800A378306459C022F4127F2E2207BA5EDA5BF150E373526CF55A76CC97FA47F
FDD7D89F79716527B77AA521C155CE3B0F52E354F0BA788AC9BF66C3DB5DEBD2
71270A478AED9640392137548DAF2D6476ACBDCDFEFC8B7BD24AF41D55196DF6
FB2F204F9812F73D55BF7E9EB4330844CB6AF35D2AA9116D7B649FFBA7CE880F
D80F40C3AC18AFF7308E78F05DB84209A2A06E998BC239F96D24325048BACC9A
BDA9206D0AD26400D878FC92B08DD94FDD0788C9F699187671D845C8C43BCE9B
25CD64E26B57F1DE47D6F9DAD18BE66178622BA86B74865A45D3C82058957883
B5D74BFF42EF404D0B72EC09A99E846384818A44E541E4E108DFE5E1E97F3BD4
57397797B1F5E1DF730CF36E7E0DA7F98056197888148E53F04D4CA153663EFF
8A63016F79C7D0E6C9026B336804C9D88F0EEB0C993216CD336AECEC76C0FE3B
7D5966A35557DAF14A4FAE61403855815D8F7983522486EA3FD2E3D8B66473C7
4888BB0C5CE966D64204063C1676C3926651F5B3F8666E369D50682A921BA05C
82DC800F7362CFA24BB2F3D4EF7D39E1902C53053C202C978749A095671A46A4
D8C410705B100FF1033BE014B7CD8C2DA31500445B3ECF6C6035F883EFC0DF2A
A75EA95E9E898B13ABCDE7322323B3A2A02A0BF388E89B4DF41069404312289E
AC5B98F664803DD7D474A5E0C3E67E8FA0B18E7063D7748945087CFF16DD1DFC
964B4C27683FCCD1C14AE308A9DE8E06E047C76391ED93D9810851A03B9CA089
F7320D1B9BA214E43E83C1FCBECD573418C920277639390ACBCB6F9C5C70E555
DFA1D8EF22E7BA06F33A32C37D7C00D1EB61E25ECB12B1126317F7ED54C97748
1778614D372B043761D928D66FCB9D760D333DA34E243D08DDBCB12F26FBBB8F
9C43DD7BF7665D5C87EAC07887EB84556F43AEDEA439FBF139A16A55342EEBC9
0033144207DC526F24B186BF758FFAA8B678DF14C6FF92CF8BFD11AC59DFF36C
25AAA8C771A83D9CBB7DCADEF7866486665CEDBCF387F67EAA68EC3C5832338D
9BB698487988764781797E2E36F85B97FB489A5D5A12D536115F01BDFFB5EB6C
F214440E4DCFF294E01915AB0165004E47F96B61BA0F88E99544E109918AB0BD
CA908DF6E9A1CAB183E05EF9F3644BF2530CB119078ABB982C5CFED39BC18430
53FB2909D78D0CC5BD0202C8FB9DFB22D48FD50D1EE2A9FEF854CD6238126A0B
323E6E81B31C557A7D64B43EAF4ACBAC482D06AFD458F0DC3F4133EB34835C7C
0E2FBEB1656E6DE0718D62481CA06AFC73449B22937E48C950802CC7B24EE992
477BDAE8844F739EEF29A005231D03B51D3B5ED98C6D02341ECB3E8092A4D59D
6E77D53634C137AE6A6E83FC0D04CA55D14265E0FDAD510D721956F7200EAE8F
93ED95AE429D7CC8C0EEF48029DB6BACF364CFE0BA0B773753BB577FEC7FBA4E
48F13599875048DF2F55ECEBAF8931ADDAA4018FBF2C3CAEC235BC863688B43E
45786255A4DC7DD81BCB713697BB4AF64F4D308793FC1B34FBF5A82D9A43BF12
78F17B4CBF6DAA00B960B965E9C7F789DD05BC0945446259B8B0A4B09E56B245
38CEB6AA2DDDC988D12BD4E208610DFC26A600CB272F79AE07698A0018620539
FAF5FF0CB60BCE7A4975433D1ACFD965F3C47D22B2B8E48DD5EC60FB40476AD6
E7850D0E405AE6523DC0CBB3604510D14FDA13B91D0B53F41B0F31EEF6E5CB36
F29D51120F1A78999867C5F0970BAAFB320F87FC5D14039580BCA0C820277639
390ACBCB6F9C5C70E555DFA1D8EF22E7BD90C911C42005B99D58516FA232E661
C7AC66134A730C1BAC007FE16F87149E876229B1D9D79B17F2D3ABC764266F25
BAC550C282E77B265156DF6B789ECECE188354FFED7B26992399F7151E5B56F2
25D5F360452FA11A8A4A7847107009B163709687F03E8904C670CBFF1BC3FB7E
81230D0F8A676B928A8884081996FEA9AEEF4208C6BF8A2279E9B01C3D7B00ED
AD8F622B8166EACE5F1F7E95016F858D6608F304E3C1B9FDF97FB541A598466C
BC731C76FFCDE3DC72DFFBE32D06D800F52E0882EF078AC20504D9C77E08FCF1
01D33E908A71B94B57A71E9D0E75B54A0ADEC289ECF7C91A46344E619A84577E
90EE8158BEF379A1F1FE5E41BDF8E59075D83082AB0165E301D00B20DAAA10AA
02B9A6E6EEEC07FD93D19F9C0A6B2EBE3165BB4DE936CC3A4BF19EA1C5D6C0D7
9F9DB3B7F0D34576D44A44F108ACDA4E402DBB7F245AA757A20B573E93B7DBC1
3E8E66984826F1301300FE37C74CE4097E1C142088443C22628E66F9D36C8B39
6B58282342412B7EEFCE0EEC76414116026BC6FC01CC7AB541E85B3C974C1E0C
593449E31AA562B4741A6B88834D87621FE230CFD21CAC6764484364FBCE6D70
1FB389257B8BC394FC2BCBE0AC3DBD4F5A7BDBDA43B38A384C2DBF592B0D5B1E
F637F2B625D3A4C5717F7AAB0EC6DEB96170BC42E9C0AA97AD291A3032F4198B
12D0D7A61B06D63389A3DE8DE54897E8B9F0A0E73300686A2EEA2E5002D7CC42
9119063C790D6986F72167A7B5FCB735BE5857F22DD9BBD6B1916CA2E00321E3
409DE3B9941C7165AEDF16E014C1FFB37751AB5F9D5F7E685C44F5AFAC1CC00F
6CBB2D50452F80C93A84675B71AF94DE6734578EB4A5B62F0BBA64443EB7D0F6
C3883D195661CA3A1BBAEA7BCB4950B83A0773D0F7BDD47F29D25A92DBA2AF88
984C142F296F5EC44CAFED396F68A43C26BF138202E62D84800765E74119F5B5
3CCF11576A5B3D14BC2AB8ED858D43F66DF0CDA1BD5C661A4788A758181C6C21
3A2A51EF5CE647E9971FA87911950FD65E90E3CE3A2F684C07F20223EAFA0A96
C971445D731DF9B83A7A1136A9CE87477940047E4EC37FAA311671BCD21B2926
BE4C650BD6D0D1ADC7C4EBEC25616CC076DC7279B83FA125D6DD423540BF165D
4AC10B712825A46A68EB78AA3D2C058488C29EE7524E942C90D9FC0115D85BD7
B8DDE271A0D13042DBFDC1FCE6C5279097919A2254314FCF21D618A11C8FE5D4
0D30BEC350358D62B7B015A019679B0B8E742902AAFBCF4D4AC975ABA0286FC3
1EBB7B819AE455CB993EFA453C94914EBA348614E3850F73A8B2C5B0AADF8AF3
E1CE6D032BD2BB1D80CEED73812B66E3738E8F677979A1564BF38BDB031830C2
A5366F8716DC33D8AC9B5BF5782FFC1FDCBCA6456FE76D34AD5D4D314FCC5389
84EDC70C0FC586E3FB319F985782FFEB05794CC8977E665AAE5AE150D961FA70
CCF2A9568E3A47FF5923031E7BCAAF3A0E143415DE40C492F1036351910FE6B9
3342626EF819845D63ABE36CC2C0C7204BF83B4F7349ECC5BFEEBEE4CCBC754C
D04E4FC6B1E3DE635362BE899C415584C1F2BCCD0BFAF40BD9C5A8652C95246A
640E9625BCB3CB6C9D0F6AA91AD38D69132BB3CDA70EDC5342656C12DD50C531
6C548AE06C27913E3DF2FAB630C7A12F545533847B233CDBCF7C83ACD62213BF
6D8A8C77FE8B2061655020DC0A92111ECBF02129EE8DF16E063B7BB9D3460685
F19031633A7155A83360304FD4175BBC50F3077109A450059DBB3994AD63D63C
43278C28FD1A4F07B8B0680809F32670C2F1A54555FFFE67565AB5DF23A71731
265FC524075ED47DD6FE8909C387D8F02A88FD24540AD7195A850948F76183A8
47F202D77815ED3E8E7869950B26B528DF4B5AB8E1B0DC311FD77D52210EB207
3CEB06E5DDB36E5A8032FCE0B50CB70D4F7E3E5272E57DEB9A2357403C2477DA
990FC58E46BB65AB0676A40A8130F05B1B0E50E6BFE03965204975859AAE67B6
7B37AF86DC4A75FAD4A862142B7A895F9DB67F41582D0C817460440E9E04977B
DCBCAF0CCF5D22E677FF4BD649053FD293830C4EBD3CA5719BB456D1AB80B6C8
0C550CDEC09BDF5FCAAF5F4DA7743A09AFECA6DC807448B48C85E46121054F17
F4288E56438EE91BC7297A8469F567938D322536CCBABBEBD4A514626C26F052
A95D65D942ED54E36A6C2C3BB0D89232567FEF3D544A8F9B896303A47E29FB09
B4ADDBDFD0CB0D5516F615FEC677A6D52BB7D6B0C6BAA0F25B2A9F922A4995E0
83622B36DEFFE1A6AD802B4FF775B6DE6FF9635DD8C6FD508F211931143BA01D
7D099985E73099943D762D20ABC42DFCCF4ED0E151DCDC6D112A08E068177852
1870E80CEA2A87AAD5CC5FB7E9D3D3D31B8637A7FE55DF98DCBE9015D4A4D35B
006CE68B3D19FA3B61A759C707BD7DB9FADF6936E97D67897C643267D9CEB295
39BDA71BBA7E79A8A11520BE2B47FA59E78C28F8C83803992132E16AF8AF6D02
B1B53941ADCC68D6220A1C15988847BCB5B01B04F5C3A01B3BD2439367DAFF1D
47B7EA53FD3D3ABA9F3CFBF0C0DE305E7AD2C9014001A032465003A5310E0401
6C3AE50698C63E3356C89EDB5D5B8AA2D56A311120976314C02C4D84CA61D0D3
F0C0E7EE52EC5A8A0AB9A574039A5B0B9E2065FD7490C7AEF418EF47ACD12550
68A21969742C55D97F1DC437E05F76B3DC275C95EE5FAF3A6D876536B55707F6
850492FCFC8615892C4304686401B0AAE619F7F850A966E7BD19641F47A05F49
CA2A65E0A3E935AA652C0B7305FFD0D434E7C0F668AF758C46B5E53F46EF2081
22D8CEA87738923689F96FA3FA86AA4C503C7CA2D05701B6A0861F56A5C5F8E8
DDD7180F306DF16E79A2D2DB98072CBCAC6DCE622EBFF358E63D9F6000F11FC2
357FA3A8BBC91CECA3DEBEB081964C6150ABBD5B3A4B88B8F2141AB69CBAB904
43083A74742E895C8B2BB07DDA99390B706F0403DAFC454A30381E07F915846D
BCB2C690161DD5A7476AF4893C6475A474561B6385530D40BAFA9E409C73D39A
BBC2B58D97BFFDD887380109216561C53A75A5FB859F2B46DF97AE05915E791F
1CE849154C53C4403B43AFDAC96839397CAA9C23D0F483D155FB93C29415A779
57BC905B9A03FF4E214C11868573EF080958074403F52A37C14EF4FE416F8FB3
B918C454BD5774AAFB265AD654FF066474763370EECC9E1E60195986EB4C4BCB
3CCE9879E4C129CC139E86E1BDC3F13FAF7100C965DEE0BC29EC531D24870365
A38AA8C5EEDD3B4748251058487B73E9760C57EAD7CB37952D1A0E9F744FBE80
41D7F80AD445AA4B08E97B5BD3466C6897065446F7653445CEB58FC5DE5224FE
992AE7CB66C69DBE7886D7ED3F27C3617B84B6EAB895BA6138753EF23A95D41A
8069B91AD6161F18BF75E71B5B6E7022B99AA55C94130C7A4AFF9878DCDA9764
F56EC19382F2B86AD651CA2B01DB899DDBE0D0A526643E1D0F81D86CB8595D09
B1A874789AEDA31E71A915FB663A04001D43A504ABC776456B69DDC90C6D7DD4
C2D071F1C8E049E657F5F14377D75506A96CEF9417BA30602EBDBB815DB99556
9B3E9E6F95C41DEE629A189E9D5FB2A75DD37A909F53C828A653E838F10070A8
A262363543F04DE5B6F611520DA4696FBB73F3CDD7BE198EFDB35B3317308967
A00EADA8A54DD0385F305D14E32638D350F86FA328363D1B4FE236DDDD5D327A
B239D9D6D92DDE4B0DA61C03BF4360FEA49064FDE911D77067C20C6F31801F82
3E6B21EF61C7E869CF3B0AF9B350452810F9349B099A38501F2314DCF08578A3
0A60020A6B80A374C5060D0F0776BD7EBDA80080E3B3FC14BAF82BFDF274D3B5
576966137E9F90AA3CBF50D220AF7255387FF65A63CF2A927E5F2D7313EA2C56
10209DAB5B6A9150337127C6068B9C79A4AD5C1991F7977C9EAA35431625FF8F
D008BD4402918043BEDF77B840B2BE0E5594243F7D9FD8D8EB4A878F25A58C92
0D0FFFD6FB602792243EFB20D792FC6BA87AD98A0BAEC9D3F17AE9CD0CDCE693
6425CD45C0A5A4197BA038ADB36BFB0B0C531E479A988692F0931B645389DD9E
EFA606C7C16504F882FD78BCD95862F2884FFFA17C26969FA7AC28A6FF2DC4B4
7B3B48AB7AB10734FA0475D4AA4CCEA042816BACB5C7A0775CE1A0809D5C2979
D409E4D68BB6DFCA01368E371454CFAAED3C30CECE4FD7CFA6E4BD0ED071182E
6129ED82B2F9D5CB5D32B93F2CA8FA546DB1A5A2BF321AACF862FA731D18CF33
BBF61F01565E3C825B0D6146CBCF1454CFAAED3C30CECE4FD7CFA6E4BD0ED071
182E6073FEE4C6B0BF4F58336B495790F2A96F1D10C8EE6ECE02DCDCCAF5DC69
E296AEB1A806F0222132EA46587E2AEAA3B904112140552E1280DD31317A2394
86A2278F0FE2AFF4DDD78DDA83C237AF564E874A8CC6004D041C55CFAF405F47
77D344C4ADF44538F045091160DFD4AA29DBD79382F68E3993AD0B93A7C03D10
20B9FE9F780E3D55D993744BC84E03D6F2E5A5B2796AE96053CE2780DC7750E9
7BD02496F62FB0778169721B3F1714B1B621965F59F2054FAD9A3878CFF50032
C9215ABB00DB8951CF82013C7CADDC2C3309492A3DB33F8E9EB23EEB04AC45D3
4A294115CB01446379D93A84DA7DDE692830CEEA2D544889141651A5DEA6262F
D54F422E7F9553C125FC3B9DE248268FBE788A4214863168A679D4FAD134E4D5
6178F717E6E7FFF7B1BFE2E98D872573C86536F65E670A06A813D9B83BA91C2B
1EA4B102EC16763EE0F5092CA5030AF4FDDD9069BEA6501105C9AB89E142758E
F9A36F77FFDA9116B4E8CBED2FB8719044CFAD402ABF220653833437ADBE66A5
3BE748C4E76934D67AA367955FD34BB7546652435EE004F57D417428F2ECC729
EFB3AC2543BBECF09337AC26BBB0E45CAEC8BE479279364FB841F44BCD49BCCF
B65347FD1767DFDB6F85337F7B399827B86434053FC7DBF813A96D33773AACD4
000D71140AE06EEFAAAC0AB3727E59F1642789A1765F02944B8E689AC7626485
E1467125B7EB3C9EEF561001051A26F3196E2238683140701ABBD926BB41B1B5
31E491065D57658A2845522035B2875A44EF7DAFEEC6B06D7DB4B3BE25BB29A1
BA5921AA479B5B48F87B63E0A3565639CBD91D4DB48EF838AAA5C53454E279BE
24D3DEAA67D8ED7A01FFCACE2EF9EB9AD584935A58676976DDD2B6E118FD1D44
E863059495BB77FF54F014CC293B27057DE8158DC15E40A40D03D5DB93CE19DE
B7C60644ACCDB4EDEE8DBECA784878F4D0643460EC9526C92A00ED348D40DD39
B82DA68451233CBF49B756D42FA0CBD862C56A5046047DDA8F04FBEDB4CA29BC
51FB2BC0C62CE1B3FEE159A7BD1F296CD053A5C735EDC975CEC40A46F5AF536A
3AD35E6AF31702C467B05AD7A7A7BE352CFCCE52D9325C8BBDEC3C3AC8E233CD
F3BE813A9E2555122B46A03394E8950F77701729711369CEDDA424A9E19BED13
D137DFE3F01D46DFB92C897D83ABBA76105BFF7E7929B8B36A0F3C383E41D33A
E8B2BDCC9705D1EC8848293ECD9599CAADB70331F694CC96CF93B817463535EC
7FE247A0CB0AF5CD770D3297414ECD1FEF73532047FB1478F8554CC724500DFA
E395E68FC891329882A2639575674B2A47C068A119CABECCB9206CBBABDE8C4E
5E6E6B61FCFD3C2BA11D6C86EBF5CDB65E8DFA20E2077404B83803AA3A4643B5
F81E0A22131DB04E222FA8EF0F6A31B9820C7AAF7C7C9780FF5DF5F69DCD8FB9
2B332FB6509FC3FA395199F80BAB0C5F04DDB4B27952C3745B76EE5B168F047E
593066E242C394C0B30C2D8210846A85A5E58EE0E7270BA2C6CCB305D9C4587A
C495570DF9C4F05525921AFF53DAF38EB59E0F97561179C2C0F08E832E2DDBE7
C66ADCEC06F5567D31B488B661F8C45EBD2FB0F0EE1D4A21068DDFB24433BDD9
1BA70E84115929BB08D42023B94C5E08A7C457F254438F234303E15D8F7E4DE0
09307129C044539DEB57AA3DBEF8671AACC34F3E4C8B7F07ABEA1BAEB58FFECB
7489DBD42DC2A12028ECAFDB6CEAFCD1246A7E4314E83E34DE35A5260384175F
C38213E84E11690039F50C12725A14BDB45D92379CACEA43CE73C4B7BE0ACAC3
35EDBFFDEE3E46DD584F04936B53C3C81CD9E76B3AD9F8290D5915969AF272C2
205E542ED8737891E67A8F5DD2C3154FD5480E88E9BEEB2499BF34A46C864A46
97B0DBA695DE4E68439B79B33FBBD44312EBA9063EA631195BBA0DDA3F3F7061
C15460E3C1BC8E20988FBC4701BFB8BF3EF2C1C6DB56FDEF4190263A01AE737A
CE2AE4620C9803C3D031ED3D5783185B69DF809544F529194D26EC7B74F1E8A3
69DAAB3305C440A686E566386C4E57F619FEC839F4D48736977F5B21F6961C8A
9ACF420E7E30E44365D3319C2134B46322F7EB16708D2BE2CA02AB8E0D0C3E8B
D00B108257F92AE1869430C6DE57F020DB975DDB312011F19F94F8BD632589AF
0FB8C8BABC8055031363EF056B5D65444578CFE08378B1DF7086315EB2163A26
AF2CEB9E359BD9E5E92EC8F6A19066B51C2FE1678EF11064986DDA53A77FBE2E
DD38E22689D398BB3667E4BA66F7844A77BAEC87EF5053D888D6C101B6CDE17B
92E526BD45A921C4D6D0F443215273F91C3DC8707547AA2DEED29B985455F21E
95225D7DA4780BE7588842D575C429AABA86C5E24DD1A399C71785CB889E27F0
BC2DBA726B307A8EA9890962512B2DE3CC959848E590C4551EEBA36E8B8DC122
B1432A6BA9A8A674CA2D5F3F592909AAA8F44A6BB4A34F1C35114EBAC0B0F263
ACEDDF61DD3D0917C1539A5DAA9AD34E7134BE594B65D76B173700867E2028EE
56949E915B81C56CD5055CD7F5226685F558D0EDD67F350C9C4105F867E2AA3F
10C3D706339772D69BC62743F758B67B1B1C6FDF84C9B2E9E9B298B465EADD6E
0378A1F7D1A254FAD9F125B2599B59AF47877A82449559F4602627CA0932C2B9
38A071A719E64DD2A0A2F32C5D52B15F9621BA9E1688463FEA43F7297131115B
4AF2D9DF46E1E5B36E223885BB7E1E8B28BAA3232595A07CBF1BD05B68870AA4
FE5CEAEFF2DCF00526FE36A64F79091E373D27C0B88AB5F039A24FD0F3180EB6
F316B59E7BB99EBC7521DA5BAEF8AED3B848E230572F14524F98584ACA795863
2CECDFE1ABA0F78067D00115EEE8DEF5E7410B896BB3E651A8C015BE75966177
9214401C2C0A05FFFED46A72C245F7529B8EA55A038A8A1E77BAE6D06BB1AB0A
EA89B6683EFB7343EA55CD37FAADBFC6867B4BAB0208DB3C5DD474D8829CFB02
6CD35422238CB8CE62255BAF0145692EE3B52643A0DE3E672F294230B9826E63
22C4D6231EFE10719E907FECF47A5C6D76E2B23333ABF27FE159FEFE89CA6E88
F43E2C8E5DDCCF48393E530139BE17DB6A1EDE43613759B68D17753A29357D3C
3A6403B9A7675DC69ED861AA0478A60C96485883BD24D106382A82EF4900A178
29C8A8DDDD4AE47E5F846A44428053C6C606216322B5CB00EB11973241CBF09A
C718F307E80B29885BD8B971C8670EB6567ACA29C72235C37392697AF95FB4F1
AFD8CCF42255F331C4FF7FD0FC8962530A98376BD26C39075D9EC1A987B85615
7952F4DB65684D6CD4AE246EA88B6567C07522C696589828D6CEDCBECA38F7FA
E8C1363A6CBD8AF8B8B82AAAD74A6B73608413B8369365B495E9EEE5FD08FD42
4F1E0FDFDF3F6E03A90ED01EDD1A46782159CD55630124A2A344AB66411C9853
1B2CCBE9FE78BC1AE4D4254787156300D914119D59CE53AC7B8F718013E92256
1CBF76BDAAE575B67C26D06A35A0D394EF1A332D55D8641DE53700800271FBCC
D9DFAAB5E93F903A8FEC0119ED18B7C08EAA7D1909D5833FAB8D6671564F796B
070A2B371E3005BFCF09E533CF65B356A8D902BE94A449C5EB8A3B63A4E70BE9
D053F69949A8E464ED478A8E037FB1309B7A6A7FC778190DD5AEEBEF9B6A034E
133314CB5127107DEA1344C6E44869135113CD900AC1F0F5F458F5034F43D570
1AECD409DBEBF0C9E95509BDD99A537F5C974FC5505CF6EDCF2412B0A9382D7B
9B373257AF837DF7C393F64BE99AD5D15052BE4101EFA8E39744C2315DFB588C
F4CB885E940AB179C9355CE53FBE5B4786920842A92DE5D9D36A9AA32C283B25
D9E35BED54243580FCB2E61F1E46873EDDD6D5EE7953B988399A6C9857B8186A
1963F7B741344010B345394F22199DE571B5E71F57DB9E12622E4A7A73B41920
BA2F51F6627DBC1F119BA6B22248DA2B391A8E87F2C6E50D86A356603A8642D8
BBA038A739145A2BFE6D055580AF134B7DDDBB9BAF94774040A003EDDC21219F
392DDBEA601D6DDCE7A8645953235A1B19A9C0B0BB98EAD3B5ADABB830C68513
A5DFAAB2F6E691099EF8CEB0036F32181F4A5475392B4B1F92B247446CA5597B
EAFE42535A8C88F9F1937BFB87FC8AF3376A38AC8D43CDB3A383FE182EE89A49
C28C2D635A28DFEED16CFA4D5E4A384094A1D84A98A21BD69CF349E99F848A4C
95D7EB3F7FDB5E41BB1C0A46FEF16EBB0A9052013A587AC9523706FAB55BDEF2
D9A3B50D9F5293BE9660E920F82C8D6C46CA36C01CECA219E2EF410CF4A72DDC
3DCD6254C0BD756210F38F01D757B83E2090337859341376112BE48FE6BBA3D9
D06A0C77112AB99ACD73EC7A7C5FA2A0EBCC7E875A641694AAFFBAFD9547DFB0
345DD1B984860123DB51D12DCC5FE6AE3B89F87E115F5DF7BA4AF93B4D5944EE
FAC690FF1C17DA3D4B6BCA8CC6A2941732B8C31799B4E67102E1628592D5D67B
C8114CCE47E44D3355621E4291E8B19372375C5DA4CF8BC684D59F65F460EA1E
5927D4524FCBFA7625C922AD1FF0D05657A77F77AFCCCD82CFC289D46552563B
36DA5DAA33C9BAA665D56A05FE6A270625DF8ABA04200678179BE71EAA84D69C
E8C6203A71CB424C72AF75C1818F6A18C9038E3BC1299256E1D1E4EDD740CB6D
461FE1CCBC3D60567E9D3EF7181B20F534678934A4362DB20B0C8089BA79E701
707CAD347208550DF890CF5924BC50D349A73787E125446E5CCB325BF943C3D7
F32D49651F5744A767707EC61AA529E09D262A841CC9C1CF25413ADC7FEBB158
0922A191239DE0D26635EF19DE46063E625CE2919ED902D587BE6EDD46E091C9
5E57B5C19979E675BADF2FF5BD15F19CBCE5F93259A6C4A8CAD50B9186BF1464
B59A6BE348681CF88CE442026AA09F828E59584BF2C4D75E749EE3C9A2EE6055
14EC228BB66A22545962DDAEA5BFAD178EE10572D29BF719BC6C31CA404A9C2F
3980136B4825CF63C13B40CE21656E37A0FCB6836AAAC07BCFBB26B2A8CFA3C8
6296F768E749F3AA8A56ADCC26A31FE2427FCFBDEEAAC67F14F71B450BC562A1
95E9F1CD42E7EE23AE4194F920986C6CF3A993077C0B2501E3E95B9672042C54
3338449065A454F82E6DED15B32E690092EB2420B6D9F5E6FA1855513B7131C7
A04B00038E4F5E8E26AC74EE09527348E31E31545F0FBAE0813944CF1A81EE3A
4373691772A120BEE77098BB898BAD2174968488B406DCB59972FFBC57BBBB49
3F2C1B5C38F173A377099E99F717FAA635DAE480F40B36D3154B85F978280E22
7A1245FDA84738BE165A609F79CBF49D51AB8BCCC1A672B2BFBA84A84C9BC409
3E2151EA61F538857EE9787034E207FD3BEBEFF03973685DD97F036BD60D4E32
181A0EFAA41BF0A7F27D2A274B1D654C2683E8F0DF6444233BE72E4B676F7A21
1F72225DB3DB146BDB01C7E88F672F6E37605D7BE1D821C67C6D1B7D6DE18064
541C2185B57B67071A8CFBB6CAC323167D9D96DBE2AB5428094C37B2C25CCF3A
F3E0E78A42FA0F970C9B27AD62347BF02FB21503D2FBE78C1B07A8E09A3BFE3E
B5A5B70EE00D8ACAE49BBA679D9E0D06BB86BCA7E5FD3881744B08F6CFFCB789
4DD565CCF14EAE6264E06D391FEAE0D9A6426BF0FB5A606F7A211F72225DB3DB
146BDB01C7E88EB07218D82EC626C936209AAE5D9735BBF8799A87D12607D361
FE8C805163A6957DE6AA4AF7FA6963E77AC9A423F0333E981166F8F5DA8E7B44
48DC3FBB1B774C324AF6862F2CAE2F8B6A8DB26A1287AB3DD941A92AC57A77E5
046A4A17B5C3E9DAF063B335EECF830F146463EFB387A53F157BD60FAD744915
3823E9F7778158B67FD318FA6BBEF386127BBDB53D25E68448A975CD56BE0A96
A497963436F1B526B5A4CF3AD27EA5CAC1BE4E5AD2BF141E24BA210DFCE1D138
8FDAA040A900CD88D739CAFEEA8361B68F6D0D6E11B3FE268772307DC168E01E
794A180B85422DD886BB8C53B28E48E232FE7D29562B3B0F2F3C9005DFDBC7EC
DA793F537AB616249B0358EEE0AA25B669AF5703F015A210D9182678AF5F984D
EA53961E820CCF73B19653C3BCCAFA1AA748409D3C1E1A165DB626D27AF3D0B4
525D7DEEE210A4239DA49D23EC2BB5EC926970D31963A81F3099074342B9F995
4221EF653D3EAE803DD1D270D5456DD52043ADC089C9F1CC96E65C4341491984
C107C8FD9285F08FC3C879AE6D42023BE0EC35E3584D0670E527BC95332D13B3
980549FA02073BC15B155E044D8050BF7C551651FF922639E5077C139E3A837C
35A8D8A8E583D3B87C35933A35DF08B512C2ADE26B7A2E77207E6022E9D50B28
2B1284DD9EA66137C2960AEA8257076676FBC638F830426328CF13180FCF1524
2BAB9381F5E959095F3F1EB907D1413F647D905576F1318A0DDD5C6C2F44BF83
2E4D54880BAF264A44318843E37328644C3FBC75583A7943ED882DC2C6ABDAF3
8CAA2B19A756CC045D2E919084C7D490D88689FC1180B0D18B9D406A0635F4D6
0C3D5A5D5AA54D4566C36A1DE47C68F80E54D3E6F6B2BDA855EF11E75D72EE35
A7F1FC8FDC81666C72993BF21DA93935F90595BDBD4D274FD42F121A21B8EB08
5BAB7D12B3B5F1AF9C403D65CAC4A7A0CDBFABDB4D358E8B8DDC32EA172A2DE4
E8A25320223B96228905711E015CA1115B60CDC9EAD5BD6FE180816127DCAB6B
9C8810A52BC5F9674D286FD002DFA5BB313F36A362D3FC884E32841E6BE12817
A12E65BA65C7CE66AC6BFEEAFE31C8A721C2D46AA00C10681BA9970D09F522AD
91E52759DA17CF323880E5EE7E183DA41EF7DED6C7F61AD6925321D4DD76E461
E79B1CC4A0564E9D7A41C3BDFDB730DA86C9CA2049211DFC67FEF43680759C50
8FC6D79481D91814C47A0A3BFAF7465542D6822F564D169726BA926E6A7AF094
A1F9CCC08D01256B7CED1EDB959E1D48109C2E5D22864BC6AD983C2493CF1748
613F298E07C3D70161F0724055E78899DDF3BCC34D14196CC4BE07D3031D08A9
591029380209D4C769FD636A4A1D08039889DCE822D58B48EFD185C651E24ACD
1D0A7FFAD264D2AE5F9560C3190AC388C4D02E161B1383535A429D90276FBD02
0EE4F28EE492DADDE9A7DC2F40FF95BAD9A9C17907788ECFD84AC599CF9C38E9
18B17E14F8728BD62E45FF52188FCA5ED5CC9D1A8CF9027A5F84AE683086D34C
EEF0FE8FEDE01A7AAD5D667300F07CB0251E2F245297A4BA42AC9083F142DDEA
2183744D33C42E540ECAD829C4255C893F7749C4E7B6796855E211E6751305D6
9561508B1E19EAFA4C676576BF1DAAEDE320A0520B3B46F772B5E5698FC7DBAF
51DC2CBFCE0781919E031A880E3767D8880357E5017147E5372F54B764A8DECD
0CE7B6FFFBEA22D61456E974626482B4C2BE49CDD56BB91D4D1DCA305FD1D602
269C73C8B107D49B98E5E0C4E46DF62197B85088749F3CAFA40A6A3223D4CED4
95D2E481273DF6CFEB55341D3FCD1B53E15238A93F53D2E881629E37E9038CEF
C41BA172055892C47614A9035E7D8D6115A4CEBCCB7E1BDCE1C7CD54907F2ED4
CB1E9D646712495E7F26989BF6328610AED78D0AC8A6526EA144E946A63B5D92
47DCC59E67DF990210DCA0B584944059773DE69E1FE68FB06FBD58BF563372DB
D30BCB727C36153A1E8F2E42D4D0358B380BAE915A183A8FBFC7A569BBE3D2F7
F6618C375D1EC39D0B866481D723779B3781C52E3E11D3AAE27591284292FB1B
F22EA7654C2797615A7F49FBE31D6CC6B63FC347F5E8ACED4509C0A4F07878EB
7D8E64D01390E9E92FB6FA21943BA9C3AA45E954E7F6CB68063B65B26A95C303
711943DCE9AF05FCF282BB8B94E2244B800EA15AF8C16B9B8329E91644DB1EAD
A03E2F74D9A26F35F91D61E51829D31791F1D36CF69DA3337F945275CB4A4692
393F561AC3395F6D9B8AE4F9CB71BCEE0AADCD191C733C695B8DF0163FA0C03A
3234BD65400C0D43F4A0999B39D1D5F9EDAB9FCEE3756BC21D32B49D0C265EC2
511211833F8C475D7BDC3959C33343C76AEA8C43CE8FFC9D1AEB97BAF55DA23B
2FB4A86C886709387253B0851D0ADEA63D9D5B91BB6B95C298D1E77F1CDA031B
D6C638971FF77622866062969131FEB0AAC8DA96F7CA93B7288B2491380B2F4F
87646F6BA4269E6436524AA186982F47DA47525569C373B4B066BA73F9E3FA72
97AB17B4D2307FA2839FCE196D5BD93BED41582931E78F5416F58A9AD099D024
AE7F293E55725E48A97C62B5D90F48DA5BDB8D01BD0DF36D531892BB3AAB55C5
3D979FB64C1924B9A869DFD9A72C83D2DE423A5AEA2A9E72DFC04B7B823C551E
0567C0A543A4B01D70AAD9B650A20BAC294E4D392E266D5F57CB4C3D19DE6FDA
4BB449E97F6C22EC02CE64CE9F9DBE52947CAF49A78C17F38F9E167389023CEB
D2F0E3EB90F50FD11EAB33A8CF611F0AD7E9C1807ADA0EE65BF63372B9182E8C
E9964F169C29074B680191367ED29A5A7FBB4EB2423B73BF347B4247FC0D40A2
C3CD57E796482600AA5E73A63B50D4E8774D50DFF8486F20890332071C3280F5
71B7450BE821B91FA306BB15DA5CB7FE994C3506E6C02DD94BF37C93A17263B9
F0369B66BA6CE4410896ED9356E725FD1523F5B849DB16DA76D4B6E47CB8C03E
730F739778BBCFCE2FD2B999DE15BB9EC58DEAC2DCBA40925D29B3970E0582EC
823434BFCFE218A4B5FF0264F1EC9818FC87436020E36FF2D28374CFAD56A12B
00C3D409420B491AB1B0D595041D0FC126AADC040D9212923F8948E5A8CF7FB7
E6E3FE51870FDE1C24DD45E854C664AE533D0F945638E4121441ED02D5DA83B1
A7FEC5FA6E23A2EB89320FE2FA7297AB17B4D2307FA2839FCE196D5BD93BED41
5A8E97423A8BD29076BAEC3567CD7EAFDFADA9448F1CE2AF347B4F9354DC9006
85CE73A8D5738C2BC3A5CAA921D9A22BCE7616FA610E4B920460316C88FF71B1
04301CB90945B9CD7B18C88E1931B1D04524CDC4DFD91253C98897423A8BD290
76BAEC3567CD7EAFDFADA9448F1CED47FAE296405CA92AB1E898987F8990C685
8F1F6813E2878A429DACE417CECEA2D839810D562BC8ABC302119B717A0C119F
C35E435A69079A46C84B3CF54BAAB62E1730AAC8F75EA67125C72A4E324619D1
EFF42E23907DF6304704446D3A12157DE158671515E8FA0324852EF8AF2E67A1
324B65EA61E97B2819EF932341824C215702B432B8806D34BDE286AF78464D9F
BF4D80433243428C84CB94A6BA3C7EE4290F0D898BB3E404CCAA91FEA4E8DD46
98E1DEA814D34AD1C22BF3D7E222146343ADA948C30D7E7077C518B22888EEFC
64BC1C8D7F7111693805E92D4C6AA42C40192634B360C4D9BD88735ED4D83C14
121B5DF384C3FE28C017EAEB5CA8EC4897901FBAF7C89938115844FDA9A2D92E
CBCC9770D0132628D7CAE18A95A8FABFA9E50EB56E29C78C0F5026AE72E09208
216386917F074F5B3644BB3F93D7F96770C73499AC0AFC39309266C84CF5342B
479A465137BD820832EE94D79A89C21EA9A0DC5A9EFB7130EE72EB3313510EDB
1DF48D8CED92810D3A39848C4AECF40555C99ED63E70A93D368F935147AAD5F4
9FF530E9B2BD87EBB101E1FB697AD8FE7756479581DEF6C117C0FC3E2F617807
E129EAF9B119FE404AA7BA57A449D7BA28B98B743C44914DBD029C44650356FD
F8ED6D2FC85A9073185DAC6B1AC95A90DB6EEA8F861E7081B5F3781AC83D1C3D
AC654D066ABFBD20E39216722D7026D65F60ACEE6BC75F7E7AD0E48C13FBF90D
B85389D4204A70AD659E36425F3228E761F8E4E1850518F37C8CE316534F9C41
A3007E4D0C9120B0F020789918550AEE8AD6EA8A1100B2727B762F4B71862C04
38CD886193D46B2C414496AECE6E9C25D142009DF9CD5B6E994BE159A4A3563A
E726DFAFA94030768FC4321528BECFA8505015D478DDBAF6E09713243AECDC80
CCB95BD18381A0061395E450C7A4960B6B211C1052595CBC3A156BCFB0EFF304
AEAD0357F0E0514A6564D2E166EF4A82F7A8DECDC2B3FD896EE689B53AFBAF6D
3FF0C518CBBA0CF7069648C00668B4990FABB50CBB1E144E36CB7A16D6D67F85
6684596CB7050F8A2DA7B4CA249DBEE24A710E60307944AF84A130FDF61FD4D6
FB1C1E29E57ED782D2E7C2BCA6333D176E3A11D0DD82031B81A81A9C77487322
6CF6AA48A467B5B04ABB3EA9455BD1181046835B8228F0A892
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman9-Regular
%!PS-AdobeFont-1.0: LMRoman9-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman9-Regular known{/LMRoman9-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman9-Regular)readonly def
/FamilyName(LMRoman9)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -131 def
/UnderlineThickness 38 def
end readonly def
/FontName /LMRoman9-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-443 -292 1454 1128}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6116FD75187CCA25A83C18B7D36238D683DD1BDBC6A88423ABB03DE1E80733F5
EB2A5806F5FE4B1ADBE6C1D86F980E374E8A548591F37ADA6411F46A0DF302DF
BC030FE18BC9AE64F74ED6727BEA55018BD56BC16BDB2D1D7238756AC4AC1F97
2793B7460EA635B857CD13CCE722D93CFF930116F50BFB864AA6B5CFAB471C5E
621630B6A5EA55FEE07590DC85728540B113E52CEAAD4112CDAB2327118DFDC5
955B8CC380F1355107729559D8312EF337D6D2572276DE8C0E5EDF6D0937E67C
7C25F5096AE8AD1B52978F02336A9ABB54BC5F84B558D35BC54DFAA00D145A6E
734D580D84E97B88854C491011807439E930EF66C618DFAA7289A65E0B852115
3D3218FDBE42E7D93E411C417A453EE676DBB88945E5335EF02771E119407A7E
04A329DD88EBE730D59CBCC7615377C1C6400640C26526C0A03395986CC3CA89
7453F7E6C4251D81ED29E82F7052C7F8DED9C0AA224861F102875E94718A4408
D823FDAACBAFD47660527816A0ED5875D8DF3EAE713E38FBC5D74E10D5529AF6
84C4B2BDB673B5985A8AE2871F758C0B8E59D849CB1A7AFE0651ACB97F7A5980
896F5B17979FF104C4D97E05E803EB92D60A8BB1E79692C384FEA60B7EE3A158
56C67CAEDEFB99732C9630C988B23D892B53C23EE9FCDDD95E1E790CF9265D08
A0DCE99B83FD1F717581B25B4FB468E7469DE0B761D0DF672E738BD2F2FA5F05
7295764127AAC2DBE5CEF9311FF48353CB8FD62E27C4E3A05DA549B40B6C0AD3
DA4B590E9E7311FCE86C774F907F94BC6178D0C8B6D3E9E8CFBC37C3604AE0B5
64BEBE2FF35E49DBEB06D26677FB232EB7EE3ED0DB577DA27E474099C0C01CBA
A10C0032682C8E1E263214B80D797AB7E393E46E5CEF5EDBD37618D2877E34F5
9F794BAF7859558C79871830A4581AB3426B888F236D57DB2F5A50B37FDDFA65
3D84F9AFE1C032512E0627A57EFB828835A5C2477D79AF990E501BE540ECB176
762EE87E3B278A64E2D18B5E0E4DD995D52D6610680EFD0BA3A114DBE4D67641
56C44C8839E8C580C44EC9A7A5F01EA6AFF4F8032A501D34EBA1B22011E546C6
D1689317D88E104B9FB34197C837564EACCE768714D7430BE1825C90D88DF40E
7D540FD1991881327327B90CD5534097225899D543E53CB4325FFFBAC2E0F8AC
ABC6F575CBB58EE2E9E2BD064E369FC591D4739533513C202E9DA91CDD1586D9
DDDD4A4A3EA5B0A1FA84E55ECA7617A41124595DB557707F5CF0EAB4498E8574
6B85E0FCA48B718DD31D925E58081E32B98A6F0F70430579F5FCF839B2EFB476
02F6FCDFB887A83C42C50F08E66B611F54314EBB317A1CBCE1AD69AE3E77024F
07D9F56C7B80ECA9A70E96B9FC9B3861D3CF617825F05997FC1E538795A87901
A44E7A65D278EFE0C676826DBFC268474EAC9FFB67E4109D5E0A6DCDDCB2E212
4D53A2D5106DDDD901232775857EDEBD007AA9E1BEE3F6605B45B2B43E1513A1
4DE29AADF0AC9F4B4CC126DF2779061012ABADFB56116FFB38C388F96143BA87
0537CC8B3E590D57EB61C47265049EF59628DC8B04C7190BCA2E22F7FC139EF2
50FC2A6B8179F719AC6B30787677BDB840EF3BB68F3FC3DCEC70597CE938460E
736B1DE556C26951E3D2772F46B84E908CAECA64B09A6B156DAD6E91269F30FE
D66BD929918A29501B77161586A6D70BEBD20E34B1B3929EA15A4FB8D129DA0E
15E6784B1977042937E911586EA16547F111B035E4950C2E91BD421873804855
86F86B6DDE55D39772A06A03C92119ABF9616E20B6B12B517C1E56B18A51C229
D309174775445977B74378CDA96C83F922465298B05A57E01ACB4849B3E0E8D4
6A3090B42801AE7A97DBC8BA1100D6C6490988311A5C70DB60B784FC038F6DAA
C43F75EA1D7CE4898094BCA694C00877E6BC65EC82F51ADCB898D079614C1B7F
05AC96A5BADCD03553A59652EAEEF68112638EA01C20D5B131A84F69448FAC91
D9390D30F871E16F52290B1D877C6381D1B21393E03415FA8A94806AAABDA31A
9C1A23E7A19F9ACDC86710B843ACE6B352A0B859AAEB15A52403FBD562D284E9
865483BFA8684A253F442DE07FE2C0A459FA2AEDE4C39177AD0A23CFB7F631E0
0CC979AD410F813119C6096247050A0D7757A4BC7C0380ABEFDBC42371036292
D89200DDB63772D73C36E0280F8ACDDBDE5CD4F5ABCB9E85A6904AAFB352F840
F8453B0B5FE4F6672050EEA33D7D06B717D9AD0AD9090339E339375D60A47A0E
B0944693E0B9D18A14E9DDD500A588EC97AB5420D0CF463BCA4DE70B280622D9
9C8FD8E295AEC15D1B1422FFDE5BBC3AF8BC50F0EE6AF1B93250698AA206C119
8E32511F945E117287AD86E517267E421D3002ADC8A7AED0FFA3EC08393469FD
E6EAA3E54E66EB0286D3DC4FC1E20A83DFAE731EAD0363A7BBEC37DE46E8873C
9F74186C527DCF2C26EEA6B5033525C1D6C41E378245A0E017C3352B9CB7F2A1
E4AA3D9A44E3885F493C5E083E235B12C627CF6E0C6109CE4ACCC68B83FCA0C3
42E95FB053CBDAB825988EF44CA9EB479CFDB5C54A27B4F8DACF8A13D5C80381
3B27C71F022126A0A1C07D553D16F19C950F09E30DCBC7FBC17D2C074997A8BE
EAA0D453FF0F727EE7A62CCA38D89860AFDCD8D09E8CEE8238655ACAEFDADA56
A9A02706558110DAB4E1B0908C088DAFC0942EDDFE276B6F258B0AE8EC6C0C76
B875FF4244C72D9C5BCE6B0E9B760FAC62828B9B2C3BAC419B073E6AC2982989
C29FCE47F94FD8CBCCF94422115A756F2B4ED0A53C6BA6B301D3F42EEDB6BED2
4CEA54F2ACA1D011C03BFC4D497466C7F09105A287FB8C8D3084FF0F4EE3D8ED
6F50AE60AF3E00B6E524774D4399133F32A124FD8EE5C6C240D3CD3CEBE1A691
5BA90064F58AE1742B115F4FA7FD8E330D0B86B191FF5B038EA800A18E62BA46
76860D0F2CBA941C24205C9F1791F885CBB6D378C0AF8680D88E744861352351
811FF967CC6FB6A7D01150E5B38F3410D8AD65DC3B10A72AB18699EEE0CAF3C1
BDD39D1C1AD55DAEBC24CFF24E87A8C8F87AF276E8795C6CE1075574C306FDB2
3602B00E73DFC16F8386E6F6D836836DFB68ED5DFBBCCF8A7083194DC83C7784
B7734022650FBDC39FE0CA05902DA86B8BE39AAC8BDDDDF5625C61972D35EDDD
294FC9F585ACD311E1BA537EE424CCE1F22EBA8031469AAF6A18DC9B42E3255D
9F5B6B98BE298A3999D91A1783DF5B86A556402853FF310996D457C4AE4F5A49
82DF69931B83B3329DDDD044BD3C3C36FABC9898C62A92269E14A11BA6A5BC7D
ECE20029034C8869677ED509A1BE1D2B08CC10701AA6FBAD4318CACBD4DE3D39
D1E6D189C534D9D5554F49BFB87CDA9E22839448247D40B23A37DFAB7F41D275
5ED237569345F676ECF81AC3D3C4CBF9F6CD7D3A21112E7D266EF13D18FE4670
DBC1A8E3BB231F9B21F9E3A811F2D67B799250CAF11120873098B51384497CC0
29ADA68F6A0DDC1BF80268E5088BDBE5E056B1E44FD0A4011808FF1EB140791D
557DA31A46FD5F25FB31899FCC92FD8B51FE215E8735958614425C59301CE7FA
939688C11F16242C23E01471E9983CB925E0F0B31505C0313797A2C62016519B
EF23B160A29C6F339F32AF7261E19E0B78B3EB858A932B26CE562FC3416DC83B
98128FCE221AB56BE701148A9A15B7F772BA9147849EACF6F6F9C0037098CECB
6E88462A7B648BD190CEAB577C4EF72BDE7188AEEC3E466AE803BF5A7F44050B
2198DDB2BD938BA9E0A07C349F6A296513C5B966F5FA87940EE2A1CD5C47FF1D
6498E484B8E5FDDFCB905ED833E2A2EC5E9FDA641FBD4D0508CE15C08D389275
D701D5A0B2E94E7984D00F0398601E33917F25E3FE2B7FE624371BD931719C5A
9AF7F406D7499EEDC5920F37985232D8C861F0FC7C25DD5ACD072DF819216C06
D3A0003AF55ADA60C1A968918CBCF267E9A49C7009564214078E4A64A95F3973
DFEFFFA71E47A96E4863CA278DCC38682E1B3A7392E741C76BECFDF6C074CD4D
693633927ED8A283232143F849713BF60ACF39A206DD513F69FDA0502D77E11B
7F4FE60961BA80DCAB023E047EAB43652643E34633FEE302F4CD994EC08CF2EE
851D82E54530025348B848036DC6131C1E5C4B3CC478BB858369D6D37C7AA145
12522A3970E3CDBA0C5DCDCA4E851708DF32EB0138177F7BAA9F7B6D47FD3DC9
52FE14918EBBD4FC1C15B283E2959F3E1394F6212E9CD5D1200A4B6B143E498D
5EC423985F63F7BA5EA703122EF3B169646A92E4311BE9AB45B21FDAB27C8A28
207547267FFD6879E16BD275BF88D7E1F8FF373ED07D33E42FF9C37B2EC57D4D
B9EDB2ECD79A062243ADB3EB7A84E9A79FE1FF431070B30242AD7D07C2EF599D
28170AF9399BCF9027F2B15F8A618D455B3B13A9AAF2BD7442D393B3431CD9DD
A0F0D5FF99461F3A9DA8509E7EE6AB98B4BB88F6703105E718539A8A368389E5
6271E96908A1BAB8EC4518B3D8828B097E7E7844246A646D34D0D7356F6E3655
650C33710D25F710E4511768F708A00D003043473B837D976C86794A6B632063
242034681657D298C1383EDD388DC48D04EC033C9F923DBBAA571FFCBE653889
2DCEEE406F1BD40DC9460D14489F24BD551B8FA02E734151BF098D7B4A3F0C10
7C07755CBCF5D9AC9EFADB7A25F042DF63B75667FFAE77337151671A462E91C0
471ED87CBE825DC0FA9B6ECA7924B5A5E0DF5357A04F8A74CDA53B7AE3242CE5
BE6A645C2653FE55D062B786BC3C6651B6A2FF0C1CDDF679DEDA691E30773C28
6B1BA80CF19503CB7DEF9ECC22B5D7B4E8E9A11D95EFC71B5A6C6EF7F3A4764B
9C68B6CAC4E3CD2D3855A81FF225461A812A2532A5A281E4E34420D1FDC40E67
8BC42FB3835475F09A8048056CBC678C36F4C2FCEDCA94009F2270478297049D
15DB5AFA78F7FBBFD71535FEB7049F203B46F9E302E7CE40467CD33ABDA7E803
F7745E4C1C988226D1D7ED2F868D2BD6C58004805E2F60776FA1DC3B109C8262
E7C128A9A16EF1F6312D9B2A8D1590B39DB91980D3E866604325998E70C05F71
207F0434C9599D05AD5897310103D873BD8DFE894577A6911231B049B169BA2D
7E4A63A5086136374EB7584F372B016FD71FA35F4B72627B670E9A3EBEA6BD6B
76592A8D6681FD7D54255AC3CE51E835850E61D153F982B67F7B74A0C1E2A2D1
6FF35C3D8F5FD37B1D57603AF1ADAD3766FCB34151EC41CFE9353D29974AD094
40EE9307549F8D02B31A13100AB11746A2053E0C5E6E8EC7D1D9B54A555619DF
1BCA43019F62AC6FBAD2A4F2C83E0B909AD58E9301456EAD333EBF2E6B9C976F
1800F7035F4A921FF09A0F1148A5CC5C9F4F3BE200877997AEFFCC4145600F85
9EA2258ACC3A750E94CFD5C2D2ABD635DA7FFE17B5FB247B75B26324CFE84BB7
98632C9BCF9295F87BFEF5FCDCADD19D99093B81444B8B9DD5A72FD601B4C221
22AEDD698F4C6FA5667BE5D25FFF2E69922C496CB4EFE7F118E10EF475F585B2
E615996C11BDC84BD9EA2524732E2A95271E384878E4B6991DB3A90422F7D0D4
A260E13748BFA42B5EB6D2DC10C1B440B5B316FA8F6565B7C5439DD2802E32C1
0DCBCCA358C9A301777283C08EE11B9814C0834D098E20114903155F14A3D274
77386B661BB6C53E88BA830172D02040286BDA9D17A20F6DC3C0DA1BED31244A
14DEA17736D0535B2A52817D35A9415F47E78573F8634E997CBA8CED2BADB20B
5109C44A4666792433C3DF19EE7BDCA427C35BBB11C7EDF6D59332DF7AB6B37A
09174D1CD50A27D94FB36222664F6DFB6EFF878D0A68604565D0BF75FD8BE021
1E4E326BB19FEE02D4F50615AC4FF3F906E9D890A82396D66DFD1D671C08E1E7
5F7795C33E885EDDC5A753603474A4F13ABD480EDCD34370F71F9BFE330C32D0
11AFC5C802EA68A34BEC8C10EEC80002C330C81431E79A50084C45F0B5F5978A
3FC55B7099C9F6EDE1080D905A3C65E232E15265271E6E9F502C0B057C5A3F63
F8659F50DB8F5BF5053CFB253C24C65B5AA6221F458A151C340BA2B19A3D2CF0
6DE88A7776E7401409D1DD8F2063EAF64598835A459BC9E1BC7F215B52370999
33140495831CCFBC1B7105AAF3401BAABAA9BD6B2A5211FF41FAFEDA4BB29426
9D8C8640A75773638943DE96B8C4EAEC254915629E86CEF1C8D3D84C9892F626
13F3FC722D561C0F83724ABA65E5FEB2374FF8AACD1F127ABC5F12298084F0AE
A1B5A04A73AF4A83C3A8A9E6B46DF617EF495328457E8C003F22957AC237C42B
F61ECBE5B796DDF0076966E3DC90E648C069C9F0A22EA79D34319957690CF7CD
568224E9F66B93EF3B53FC94E8472942E287483E4CF87E1719621E73D1924CA5
03D08210E84D5E5795A34E65694436761182BA6D5F35AB189E8AFFC667D0BE39
969DAFC31182DA4A939000AB052C45AAFE8F0BAEC0BBE3AA65E514290F7EB547
F71F7C6647A102CB88228BDB94B4800143562A1D24AD69B43553C1432D4A7871
2F4606601ACD7D328B95ABEE16B14A9D3B6867FE7E2AC972EBC0BF7AF09DB47C
9634D58651515FDA8BCBFCE2CF04E2DBA86343BADA5C89355A821F85A6F47D14
9B38A0D7E4E4342CFDD22C780278D973CAF486EDC0EA4262A17C8D17CC29ED04
8CA1D1822D1FAF75E18DE388BB6E93044CBB83EFE94FB23153DB90776F686725
B66C313AEC0D10922AA24984276F4830E51528A44EEE10ED317BB7A757FC7495
3208E7C2067335C9A1FC4CFCCB35332B982DB206477E7B328A903ACE520E5C7C
E10CD887933607DC28419E70E2CF805AEA725B877EB3C7D60A37913627EC1073
1C0480BED9988C9AA3712F46D4A2535036C9BDE8CA6BA88C5B05F5F72881909B
F65CB09071274F6763C471FCE09BE830EFAA1848D82076C95BF563E47D3841B9
FD401A469962DF6BE268D3CEC78F0CDBF0974037781A7CFA7A9CB4335D687A58
F61800FB46DBBDFD349F3A58BB81CA51E5B036CC817233E876F1CE3CD9E5F931
4BC78AA750E91BAFA52B4E07AF3EA92B61077C98F384C997CADDCEF344187662
C8822094FC1EA50090F2688067E088FAC64749709148D772837FB233B27A1462
0FC8B3BCCE3F5D699B3E217632AF178C2E2E968248D5B79889D9133B6ED6BD14
AFD7BEDB0D732B10B0E40E1640744D0E93FA8D6345555D3953CE94B72F0E855A
DFB7F6805834C8C3BAF1CCD316F456CF9A00EBB4F43D271F5B168582C43EFF04
C74DE9337EDCA3F908E829BC3C1C38C41D889292851E809D9B81DDD84095D579
B1DB60F4C2AA92B696284A5BDBA9A442E85E9BA72134CCC83B6EF77480164AFC
42453C70F368DF9A75ED5B78C49642E51A141C5F34F7579AA7C6487C19F8DAF1
7D45D9824FEFAB3C300261DD35FD56DD3D1900BAAF4D8B1B920CEF7D5709BC60
E2B71D71398CFF30C7855C59CF9E782CFB09DF52F10FD3856029CF661D90D104
EBADB9DA09321173442805CF8F8F6BA06A16624F8B47476E4098ED693455F82F
098F49FF48762C6AD9F8FB6205E89A7B698F0252122B33F45E02D31001E4A05A
C0244C26ED6EEA47C3FD8D9159594CBCCB611D701D04167D8701702BD3C055F8
CD1EF6E60FF70CBD8ABFC4E6912DCFF9FF07EBE821AAFF09597BDEA4E71E7212
B9CA06E09D438052E27B75787AE81EA98B34D8DAEF34CB3FB3E4038F50162676
F6D777C370DDADAED2C7DE816646E2CDBCCB8CEC46CFE5E3F6E7C0BA86651864
8EE6A470C839176E9F7B3ACC64DBAEF3FDCD3A80C0AB9389410F3D1A1DE6A3DC
8F7A013FF5864C01D08AA572C1E5C513AF4DF00F86FCCA06B7DE925085317CCF
8666F1235223B1F41340EB97BAA2AAA2D619527A955C5840E4BF683AE77CA32C
8DA3FBA7A26D8917B92E236864F84D83FD8AB76E205570691C6063359CE9DBA2
E3ECB7B59430FBD22DBF4E006F303EADF1E26987E4B9CBC486B946562302A63A
C37031CAEE62F37E54EB76D9D9A73EF32A4C800E603A76223216CAC3FB7714AA
86929A1D4FDEFB14DE236C14715CC3BBE5610AAF12A03503B48F6451BA26E40C
00D0E11B189E5EFC007B0F2CAFEFDCBD00F3FF4C087E7D2801778F393B2383E5
5FEE3E8FE1D842380AEE6631BA7DA2BAD9955F9061A59C954D39C6883419910F
0AAF04E81A47A3FFDEFDBA01DDDDEF0125E3465D433C727DEFD108C15E44F130
7BA3A8C49BD1BEE367846BC7C7188A06D85305F4994827DD1017EEEE54B481F0
61EE6BA356CFF8DFBB285BE2E378FC46E58032659369381202B43E7D9EC4B765
BD8CBDC4ADE726D6DC6EF0FAB619D80CE9D10B12C4928ACB38BDEA9630D094A8
68075AE0B8B8EBD67DD487340D1EA9E65A892A5AE88E593C75BC8287B3B8DF64
0A796F4BE9068BE20BDE45E6C67C0B52326F80141BA943A9A264898304A49145
0FD1452BD535203368F8CA936A6B93DE729493EDC6FFEE039CDB8208911B7936
115C10B5CDC5920612A7653E052A08F846D5636B06D59022DE169E3361C7008A
F41D9964639CAB6F9BFCB9F3E899304F22B4BC7CE5E9B7DABD6ABF310E101C31
DD7109BCA7E9DD2110E686C92C60EA329075C30D3F97A3214A47893366D9BB5A
707EF78DDD239111BC0C866683696D3E2E001A8512D146FD2B6C69375E9E0B1B
272B51BB1829FEDEA353CF6A050D36BC884EADB9A7A40FB2096EE5DAC923CBDF
B4CC8FDA657C5FB7C1EF58B1C8DAC7BE2803411D60BDD1D131BC23B3E4DE6BD0
52FF44DE28535DA5839017A3D115F31D64C36E7FC9BF48ADB04BEE66877A7912
E5A329D207815F79EEF626A126E8005FCA77ECB3172F543F2AA90F69D361C318
26743EB62C444271924C89E11F28E452DDC6BEA07E93C31D65640378033A2EFA
C8C464E11D756CDB62510D4E57FC1B814A0385443EF623E7D0F1B9B0F159B8E2
8B279CF25C047A9E542AF625A84CC60580E9B2EBFEE1F502A178E35704B7D0AE
379FBADD009C0B8E8E2B3D65611110CF0C3FA0AEF50E284BCE7CD4863D0A57DC
AB2B635F85832FA320CD9FE204CF2F99B5EFD7DB57BCC78C196AD7528BA30D88
C54AC06B816315F29CCFF677ECD1AC125C7750588490111E7FDDEC92ABF5ECFB
24CA59A2B909CFB47CB43CB452F7523C4A50E01BBB356F66B6CBDFE9D437F55F
17C33AB41E835231B3ADCC272B577AD0616D09DDA2A16584C8D40E7F673FBF1D
9446C08C4908E723D17040EAD128DB37141ACA92AC68688393FDDB8A7BC9BE20
664BF14FB258C36D52E68767698E5A302ECFB9B5F1F972F16BE95E6133522021
C091596841B8611E8E62063B7A15243CDBEDE373D0E546FC194D18F917A1444B
2D159634BBA6EA6877D735D699BF8EE44FF944557A583493AF80ADE6403ED444
100D4F32E8B794E5C27EC5AA845072ADF11FB8B9FCE68CB56114FE9DFB07B652
9FD752D2FFA4E8E41BE6221BFADF32EE779584F269C4301C5AD39C601FB86D40
90A6DC5485BFE8588C946F09DABCCD5FE74AC5D873DD414899913C475363EED6
30B3B78199AD5E1B2A9E8032747404C8E75EF02F7E3F51D6E7D60A9C42188906
6A22AB02D7D85978F6EAF2AA24715FF2DDB265C44F18FAB825EBC3A5CA041B9C
52065ED9868BD921AE2E19E59DD6207F34D7ADDC4B61BD20023FF06A5F3B1A51
AE4850C6FDD6BB09F11CA9C72A278C045B1D2572EC08DE1424D2420AC33D6709
82DAB244253B8FDB3BF67A6EAB2D85E1224B6BF8B1A982A5CE8765E2681E64B8
D84A7CD7504E58C87FB50958237C5B0A79A271ED04048FEDEC4ABD9B796888C3
77E43287690007B115A105479F9AD0DB70D6267254D4DB868A2B8F010172B9CB
2C76FEFC4576A763849B00CB44D4B1F6F9AD92CDAEAB2DAEE928681EF627A2AB
993E44B94E4123F330E87EE1DF050E94B96E0E045835D70ABE81EAF66A0A030E
6741C060A09262425C9A402950FDFF4538115C10B5CDC5920612A45A84F6C903
54A67A3D683E0F63A6B04A4D2B3CFF2DA0A9047DE467857D585ACE25A1A4CA5A
F26846ED9C413EF195DB30A5713CCCA0D5AE25DC5718B8A5D29638E5A7943C6B
C606D27C3F74B5B514DB6F85337F7B399826820083775F8A3026182FA0199789
5934C4A18E6AB2451E13950F95EC5C461FFE91A4B63CE618076C36396D4C7506
C14BA7C4DB0F7DD846549BAEB53987787AC9AF72F866C4F1559DC587C64ED680
9376C833E4F520FC63A7179906C4BF064E369FC591D4739533513C202E9DA91C
DD1585245B8C704EABA8A055F8A2E33E28344A7A9EC8F2CD1BF9D3236C14715C
C3BBE5610AAF12A03503B48F6451BA2F29F053A2A7CDAD63A0DB6D50166C927D
3D083E2F6C5A1F09CE83D67D926816D58D4E2306026405D970EBE540F636D5DB
577ED40D52EAC80287BD427B0CCC771782C12CB7C11DC4C275DB0A07C5E530F8
868C534D966D458F7BE865130948DC92813858A464130EA68615B1B71CD1FF04
54B439AF2702915B9949193F3BDE186465B79525D18586C67E8A16C560DBC0D4
941CB6DF6A0D1E7495C768B81E706104300D19993CC0D90D2BE83169D4F881D7
AC90873368D785FBB2758DD1B0BFEDF2C3D6DCF61B8E35B6B59E943262F2E6EF
B223B25C16F0A20E27F578FF740C96BA9839BB9028425F71EF541587018C30ED
FAC1E79FC285EC1BB6E19BE9B1E902D8F01E5ABE8CB479FA3C3B4D9438C2D541
657DC358F6305450C4A820C87091800AAD1BBEED508E7E03D41B3D060A92B195
8407869692AA1DCF6B0E4DCB2DE2BDBF0495BD0ED7DD0EA7E67208CF72309950
D176CFAA1D155312586A9ADC136D93CDDB3B449B4A055214DF69D0218549440B
1C5F19476271CAF8423D79C383ABB001990A07F8B008FCFEF55C2E20B6721B91
E3B18B10A96E8ABB5CFD28CA18CD9013BC80E4A7AF1258A15ED5674C3AAAC4CA
A8344432F60E776094439402454FC951E4319A04CEF2E45C67D82B81109F8261
0616A417C37827D8AD8802F62C21D16B3B6B21A812756C8DF7D51C4905B01ABC
6B2D707F1BF8FE2E9DF0141D60E376B4E430431F049992647E2B744E48AFD774
56954C332E781289C284BD763ED301C3A74B9A989079DBEE2AA44362A10F1795
E0780C412A606D33C0739910461C61659E33793CACC75549D54E2A04A2F2C6DE
71FCEC0035946C6E3002646FCD01738AACB9AD52BCD0D1C720BF2A05C08668FC
BB02FD86B02982BFBCD90A5B6434415B6F39E58816C7A84839C069CFBB069C10
AF00332661595E9A52B3D8AC1E8FC11E22707E26253E1AA576A3229587E2295B
D4748871D5A349370AA3F656B45B5CAF662DB496C9CCDDD789D38C643B17E310
0DD9DE9BB5BCE2F3DCA6DAAB758BD7FA7D29C266129C91A2A5804C17092591E8
96938B584450D9E008CDD0202DB1B3CECD7ED9D94E21069ED4EB4830E5E1BE4E
E7195B4650686DDC1A85FADE184AF8C02A0F597E6E21FA55672F22685D3D98A2
6B2FEBD568CB936E21256CE1CEC3BE4E078BEBD4EF3150A34363BC35D052DA1C
3DB6E76F6AD8C924514002AF07A0FDB7C9FBC784A1C9E0506142709DA9971E93
A27439157A6DBD2F81AEBCE53A2B5DEF7197954D897B1CBDC450EAD335A76FA1
6620BEDDCC866983248CBF6CB136432C3D97BFA325CE8096FD87B5398776E612
691A4AF65E0CEA3F10C0B38F0F033C7B92DAE7C12F2BCEB5C9051F0C737CA349
ED488332E0623A0B9812BF737412DCAA02C4D27924F2EF2A129D38CAF87A5818
D8CF2E912DBEE22944E6CF716D3B3FEC178E2E133C5964CA2A2E99F5CC0FB11B
03D11C7B42A3174AC0F181B7B0A462DF5100C557358B8B66D23136C74DC04252
F54BFA604C5A93CA60A8C5C4A5AACDB6EF5562BF5E35D2CB24653006874B7FCD
22DAE8A539CD906C75020B655F19635E11C8A3D3EFFAC77DED7CC3DD229F1EF1
A404E896F5B69456110B9A8BBCDA8551C3C14F979F3CBA935489C0361768A343
2BA668F5301555CB7F97E4D8A9EA336D1AC9A285B25A06D846FC8A73E135986B
275E2186A32FB1ADEB641E16550B1A7408EA2A22AA7C602BE0B0A43D9D5C6F50
C479A9CF0D30588E9E03FAD6D901DCA2B6BAC956EB8CD2CCF0E47759245BD5AA
1A57DC0E956ADC19E19CA5DF2F8CD965B122282F1FB1F986A5E62DC37AC584AA
741728166891B89E4721F5E6D8E78641CA4885EC4E8528B65F70028AEB7C7A75
ECD3E4BB1C50447C558FD565E8C78B03941454C4D5CB44A6DD2B195117096C46
D1167CC3B84A260B5415DE0DA8F40992ED9BCE277024155EE3A67C4310C0CCAE
9E13D35F87E6E91140E84EA48A09618DEEDE0A5A7196A5687BD9F33D193276CD
AA152C0C500791C7692576455394437C3A7B477AC27F75850CFED5BDB2F07345
936CC48999B19367801BA59E660FC5B2B1E296511B7ECF2E4FAE61EA1D3E2DA8
EF502EF888B7009B1D9390AD878566F026E25F3508C48A8BB31377DE3B1B9116
1CF3BAD8ABD8ABFBA9D53C42A61026E5BDAF599739777448E99873A424C98F8E
905C9CF80FC724E5A519BBD1CD7F2DB6B29C6FB2B8487C2466496CD53654AEBE
BDB8C6A70D79458A5C88DA8147804B50CD957DE5C2AE9D179B28A39663873429
AC429977FAC1C877ACEB28FC471CAA4DB7E4CB6DD2FDFF0966F0AC0BDDAA98F6
6B8D3BB8E3542B2279FD4712E7CFB1554FB459F06712270221C5929D8F307061
E7A19A3AF4137889983657F78257CE77F1E57B136AE676E52680371D036D1801
406A3A5009F8ADE80A988D2190616F793DB31310AA0A8F45140EE4FAEF3623CB
16BE0DD2A5B6AE12B959415091545A96B78F68E627D76F615F8936F163FAF95D
90410021306E10589C39A6F9F66D9078BABBFE2E4AF4652A04541535713971E3
5AFB7318D42CFE278CA6866BF81718901D53F6E6B48E4982A39CB410107BBCBE
4B5F3F8CF3C20A8E023AEF5800FD898FAF5022413AC49AA92BEEA25BB7C0D502
F47B8CC6ED1F473C705AB25634F19770334684CD7008480A286AD2291E6FA868
4619451A3D0928F822846260B9E50FB76DBAE3AF4FFD6E2D1B76DD3B13C37D2D
549776943609736F4C3E149C1208CE99EBB4BDB19A68DC6FC309273110344D9D
EA1A7675912AA4B7A084AB3481D797C3B089C8AE581CE6668FB9ACCDFA224536
4CCA16643846CB1A96642BBE17421176E0A43490EFDC5A29A2046C30B5034E44
0AF248939790081C2D4760DFBE929FECAB4D4E2B6682C3FF51D628BE1DBBD89A
7AAB946AF713298E06C8D2140B854F2E7C3CCABAAE3D2A80837BF7F8C9BE0CE7
EDA8E3D5BA606330FF5FB642B2F470BA92542B1FF2FD741603D1E0E18571D3DA
62557A0376C2E716264521D5175E66EC9D1E98995562DACE57A09F962CEA1CCF
DFFA64792B40AAED1287E8AADA2868B5E11EB99A42C318C747926594AD9E1914
F07F659282255057A4BD4853EFBB900A6D8546E89E3B58A5E519F34D465E0130
1DDAC20421EED1BC8C0976DCD965F5FC4EE010D6ED3ECA1C29C08FBC05291063
120165B4379B1A4DC9D967DBF6A54FFC3B61FA204411DB939EBFFA88D1BB317E
FBB6364618F331C5D81A4CDA1C29ED601BD069927BB266B919C08E78E8F13057
5910EC324FD2DF976CFC21F02925692C889998865C8B6D7EE450BC57C3C08497
B28DFC78295590C304ADACCABE3D5AC2F814D8413A9C3C1072C818780AF978D8
60252ACFC5659CBFFBAF642694D17BC8EB9BBB8D5035FA46F719B503CE4B2E2D
3463B468EA89341AA4B5ACA941642067E8F402A0813FD842EE498596F982550C
6DEBC833692D4A13E2D795232E925FB4EC9A232041004B109FCC2DF46F924B06
1AEC1F051B1A6604F902BFE55937DF0CDB33E479A0BE74BBC7DD92D941DD621A
CE52DEC96F4E13E2A020BDFB10EAF186D8E92293DE8A70DB1D4D77D17EAA35BD
7DEF5A54D050720CEB18C9EFAC046453291395C141525C234192DBBDDE985B64
79A65160640BB17710A5ECDADB2CDB17ACEFDE8AA1B61465F67EFEBB1BFA166A
088B8F232012896F122727523B8F4AD264351DABB7512B0C01935C590257F4F2
D842D222CC36C0C4403C71A36FEECBB23E7D2774D28AA4C900071CD6729E5A5B
5853AA7B9B87A3571BC7B448FF421888425F20E04AB5A2690C4319379780FAC5
940AC43AA0D2A7218F726809BA1644C7BFCB667D8A6123F3B3A1CA24BF33ED81
19F306CC5F2623BFDAF5600168775DF39B82699486AF082785CA8A5E6F4F1A75
5E97F12D702635C8FF5E5B134119F76D5908B953099D0A17ABB13A9B52986CAF
A343A4F0E10031A8D199E5499AE2072E8471E99563108EC36BDB46E5704EA4E9
5BC91194E2A4F974551679FE0531799FD9C1D86BA3B9C0205FC2580EF426EC19
4A7D72FD4AB3216DF6AC30A36A1D6278295355E2C340FB03A17EE9E03504AF12
68BA20621368DD7980ED87573416A31C5B26E391DBF8FBD2E94C4683F3A493AE
64C5646CE3474CC7DD07E691CD9AA1950FE5D3ED2A5AB00009311E5B13D4214E
6B52B9F5684AD99C6B52980A9EF4B69A32B3DD2B06D394E6C71B572542E0ACBE
BFF0AA4A11C5A5886DAD4EC3D83D0BF1564C00C405693F2835CBDE2BB5CC5D17
CBF0E1965C0E6EA3DAA2EC5DFC9756826970A60C38F60C315723B65F76D0A258
6694A33540881E4AB18510916FB1C6590D4B83507C352E4D83A16917E422D350
5E555EC90AD1EFE819DD2DEB414DFD0EC6BCC089F2A41C161D18B14AA30F7A6F
16AE2D9A96C60F3A4DD5C64A24965E7BA6C7A4C59DC071F8E63B22CBA71A09DF
BD253E4F8EBA8FA68830E6BD9979FD51C835594B12BE6FECE60AC0DCE98C901A
79E3E0354517C3D959418114AC473001A6EBC721B3AD347F9CC5C2A27C339A36
B6E22C2CAFC254B52413A107BF5B596BAF902B8D62183CF8B6FF0B0D28B049F3
3DA50B0FDF4FA8F2153C37BB2A92F74A378B308F05D8E2964B470316617538D3
6A38F22B2E8B377F5FB494E28BDFD45C37FE38A7AF80EAE630426C7859229DB4
2614A54EBFB4DC8097C0D9B0FE2342875E3A7F03DC50F41C4657934151303A07
33B90A2D16E683456344FA4E9D98849E6AB20FAEFA93C3F0A35924795E241E6A
95AA4017DC05940F32250DC3AC6688822562582BF4A17E92DFB106520F5C7463
0741BC6EBF94090F7C072B05B4A5CD9F0DE3EE7FE13BB25E2856FE3D85F30291
FED98B2CF78378088636FC9AD91DF5364D30910EC9C57B38834DF8ADB373A5B5
BDB1D57F414F3D752AB791DB1A56767B0A22F335A7A5AD395D681A059F068C7D
664831567DD71900E884258FE920301DC50C2A6F74310DB9B2DD514EEDC7E235
C3DD55C62FA36A90BE91DDFCE2474FE577198E0892BA1FAD0244E7A83AE34D0A
5FC4BBEB0896586854605D658D8C7681595D0492029BED6BD0F0A7165BE3EA92
61F7BAD646B373701920EA72231CD58E15E23EB6FFC0B492E09549CEA21B8FE2
701F3B02D285318AD6C4B6C3CD253993DCDBBA44091625193CAA9F24548D00E7
22021FAD70D99E2FCCE6FA219B263FCD9B4E9B7F733FBBAE7E723C2668B7E384
0DA5AA98ACDBAC88BF012B53F8D3262E9BA4F370699C8678DE72279E73A0EB1F
BE7B70C8CE0AE57426572795B0826AC2B6B66DBB9F135BB2480E67D7AB86535C
7CB519B758009FD2875EE7E519052DA057ECE9E445A03C052D4A72D87C83794C
228F06268D28EE4DFC8498FFFE101EDBBD60B5056BCA70A7E3B757A8130BF3BC
078B17590D62E97DD83121547AA7528316AEEB13219DA6C56D6DE146AD73B081
E30CD562DB316843A053F82CD8E6D7EAD84B4ED37FB67C666E254938BF6A4470
6AFC1CC092741BA7FD7E6531BA7DA2BAD9955F9061A59C954D39C68834199725
A7FABABE7F94C0E09E6D9FBFF9E42091225BD1B2677323287771F728FDDCE8BB
0876873C49ADF8152818A7C518A73B5CF621EFA31491F5716595A08356F07039
77CFA7CA07D422DB05A9DDBAD2E69B4AE827864CD1D0B455587B80FE1C820745
18D7466BB2B91FDE11773B6430A24EE56AD8DE314808FB8636AC4B4F409C806C
DAEC48214129F8C71C37CA3E7472AABFA16C8AC88C292CD5083BFA20340FD833
CEF622BA10BA3A87F250AF9CFBC197675A3DFB8BC9991B1994C5D9B2E4DD1F6C
B7CAD2C1988A886352EA88F4538F64D0A08C138EAEE72D20F59CBF5BC65E15ED
402A0F46027DDE61EAD03E8DE7EE3E332DC75EC6272165A2DBA4978322F3B706
D42300C96FED26400B178882FFEE4C84A9A10F63CFF96C4B2E433893093D484E
8DBB6F049C331EA174787ABA8C3EBCA6A4A7ADCCB2D4B6C5E3F2FCD8562ACCDD
70CBB223ED1F8B2991F2D4CBF4029F6829A6B55DCA4DB5036675013A692E0774
7EA2080A3CF844D40AB9C3A7A165D6AD0D9482CF1804D086E57CA1229401BF63
4D445C93FDC157796BFA50103E311D58A242CD10719D1C27F71B50303BFB33BE
569092829DA93DBFD4A001BD6BF9E20ACEF6C80D3CFAF6C752643B3124541295
2085C699EF4D7E65ADC8CE164E1B1D3FAF353AEF3EB31FDB3426D23D1D73D277
C764E69B1B58AA70AE9037BAF2779ED8034237F25540F71DFD170BF05FDE79C6
1F414C4C203C46E6A6B0269F00A8A0973B658764701CEF19E33CEB900688B766
23F07A3507C8B52529610091D8A9F09161A41BAC6A15727CE914A49A9E2ACECD
068ABA3B0FEE759D82A5542CFC4A772D8A4EF284D4DD6EBD8D243D45E089AC01
843A0B408603CC1A045C63C95E789382461E84C460D0B87B60DC612AFEB0FAAE
7CB88303AA789B6381A818AAD687B5997486B0AA46261A450E360B5B7C5B6AC9
F9EEB11ECE055384308E7932CB44B0934372C0717C1A9A37719070DB1E340DDD
90B02C699996D6947840CC115F91F9CBC391AC7A2E1F11F50DFCF371A8C762AF
5BD7C49E875699AB0AF958983E005133233547EEDE16EAAC1024DFA2E161FB63
601D9529EED7CBB3F9F236403E4979D2A3656F0F847652EEA36D6AED2DC26C28
A403BBCA3435C3FB7971E9A5622478C669D8DC37769E59A5AC6BF061C79FEE26
5DBB5E5F9F5F146BAF053E9774866BEC3E3CC34E053C9A36AC9F1D2C61C6E96F
276FC34D2809D0D8DF0356D99ED3DF736C9E24C566824C8AE99CCF0EA0BC1407
B202F3CD1D217D1E42CF50466C0470B236BCB74B3C640C7DE47E8E7378E87B76
7A9A08694D5372104736A2E78F2BE1A10E2A036E9D3068A6431ED97A4122FC32
E50F7440F4CB961ED44B02C1798DF351EE40FFDDCF72872069A157A036BDBD74
56FD4CB9D0E370FC13F87C4AC4EA7673552C9D68D44CCA777CD3B07F91EDAC55
9A220F29084DD86CD8767A0D5ECFF6A53718E4BEC0954E139112727891345288
038A665FFFB23654B08776938DFC3DCEEFBBAC6F7A9B3F3D69983F4BD65023FF
7C9FA7821E5C552F14CEB84385AB7A471BB817133799E5AF19B25596A888D753
0A37103C7FF4D1B05DA751B6C9A85920A1D24281559258B8228308C0EC5F43DC
92B39BC4B2CEB9827F51E088B838C6AE98647776122A26396D984DADE28954EA
A105FC6947B5D6F83CE3CC63FD1CF93E8926EC03228E7EDE8D2D88358A528D56
A6FBE9F3002E56EA59E9C2459EEA57BA9A65A0B2A48291F051DB2A0AD2856B3B
38FBE2DC3F9D20229420CF2450270BB75F181704FC3ADA152A9B3BB870C937FE
4AB2C6596ABA6F44E4104996B360A0A47D5E71C7FCBCE1A31F600A210F389D59
5CB86D1556BC13639056D0CE400E68DDC518F5DEC908477BC2ABEA0F863AA6B7
B980DAE14BBAFFB2A2BE826A7DF8D27C035057D9A35CFFDA803083768BBC50F6
788E0B753F97FA84A9906CB666AAECF6E9A0F87C271512E54394057B2F2094F4
2620EADF2E3BE114D3084C0C99F2BA16132475D0C50670516EEB9D0CC1BE1F33
8D93ECD3F2C2A0DCB24D9B5C8C127EB412E8E5439C771C5E62715F8DCA0A6025
218DD0E019B7EE9F6E08321C06A06936CF5B206B0817F3B43C732F31077E2600
7F392934FF0DBD52A445A447AA0CDA94CD2601D44B862EEF3618B587B4233E69
308D45B16FECFB33D497038A1F42082A5AED5538D460D3D8B795797440C31403
7C7E13F3D146873CB848F7B16C9D20D8F785603AFB76B55C10426C6B620BF189
0A7406C1F2D2C8434E9D7B202917DFD3124D2CF6465104F2BC1F86F4C47449AA
6B1AA37A8ADE9B2140945FCD0EF5A8F3E284ADFBA5780CBC65C5FB6827514E18
6C6D585BA04EA3815200E0A61E469BCB982ADF9D49C42C389F1E7C3DFEA7902B
D312667D2D85E130327BB94A2CAEA1A6F14E7CB432512153D34C0265FC616245
4CE75BB834533528467B300759191F73BC8E69FA9D20AD8B5E14A328424767AD
E23AA4BF38C4281B4DE8B5EA89F01EAD1795668D4BE0D3EA45E9C76EBC814CA9
AB0840DC3A83A63060D59B20454CD90839685F280CDE4402EC81E92C081726B5
230D7FAEFAF02DC8E4C2826D76AECC974156D96BA4D8CF21F49B9F8E7A7FEBE3
7CCB1B2D86051BAEE6C79B52D7003FB0F27D5FDA349D52907413D171FC8A0C04
1BBE58F704B8CCE162736E6ED003B2B28CB7ABE5F883132026FC381D8D871D0D
96566F0E4910D17123563A0971EA74DF32D730CF09DF4AC89B211985D09A3BB8
BA1A11D9B9DF27ED6A8E4E5C370542ED6B9BD96F75D473C38BB5ABDAB00E5722
E22BCF382BF892C7678948CE66304D28E009E5ECBF762601A2664FC434D8545C
9B90DE32EB0138177F7BAA9F7B6D47FD3DC952FE14918A628EE9B2EBFEE1F502
A178E35704B7D0AE379FBADD077E7D0B0D80F2197A5002738F99176AEF34CA6E
A3F43CA6F4C2FF85F88B0CC9508AFA4B6C0252CFBD56AF94BDD9B41566250CDE
486DD72554B45330B3EEF2AE90BAB3D9E6E78FB4B2AE464BECF5865CDD3182B7
D2196F268DFEF16E195C0E3F2B12B433D7DA1F634865DA6E5ED75553658CBFCB
416D189245F75ABB8B75BB4B7268376D2A24BF843621FFB374CAB0E7EBB251FB
73859483A783801FC5197DAD14FC119AA647EC83E5BC6768CE2EAEC6AB35DF93
2D98BC959A7E202AE52E354FA6C17A73F45476924187B94CBCFE47F500704579
6DB0584888C23EC5A36917DC3BD5AB9EB5ECF312F7652DA436599E4084880AEC
A48C587ABB5E883E46B80DD5197FBA488EAB0EBF3E04DAE4977EB9C877CEDD6F
02C656BCB443AD9DF246CA6730CE97B02A7FEF28CAE22185ECB431E66D497D64
075C0D6AD83345A4C0F207B8775B5843A63774434CB8BBFC0A73752809D4DA30
B2AFB4436B8391A25E05447CE7EF4B8D442F283446927A539492EE479D276557
952E53E9B9A49E49DF90A6AAE92EB1B2F3A66588B109278BCECF4B659DBABB4A
C20EB75E7EF41A4D5FB154631BD38C0D833343743003D9EBF5AF03297DD62DE7
B59A570932E1456B87390CEFA94CC862DD34E1A74DD035E487C20BB53D87CEF1
C564E90FEA605DC6AEC57D0A02C93280A0D5AF2D15E33E6F14709AE2C3277B6F
20A06FA4E0F158662CE2537ABA43D20F43D1EF663063639B566E4DD6C4538604
F1C9465D413121C1934E21C2929B7F02D9DBB847BD5FFDD78A26B831E7AE1E23
97A194E1D0E993CC664D44A301CB177F6BE7335C754EA5F9094E5CD3380BA3EE
A278D53AFCF068CA7F595790EBB2D7D07D45B98E6A7780287E7F2E940FDA194F
65DDD5CA646A8C3CC88384C7E240449E3E04993FDFDC22CC8FC032E38B815EC4
75EBBE6084272873E4C1FF02C1A7A700B5FAEED648E99D28172FF396F2C7426D
B0581FFC0B5C1FC939AE02908C4E8AF4A3457AF91AD004BE73EA18183E441E60
B83F8F75A26E278D0E8DFCD563ACD9B5BC939F94583F6F9C6B7C6844E5E8DE5C
0BC0A0018F30800C40CDF6F2C002AFFE01C2C470520092DEE5D0EE470B9811A0
F461F9EE526F8689777BD80A56CF580246A8A3A04DB482146D004FBBD05EAB60
3FD46909A3D892F83A2264C4FCD99261E8CBB86E3C668B0368241F3D1D214F49
386E9A10F263F7F0D095D5142F92C335E0CCF6945286357CA71A9E622BB24EB9
F747BAB13BD252FC520F61C17BD91D3B9BB1F6E66AD16EC5FB0076E8BBE8172D
50EC8BA796612CA0FA4DD4A51C09346A0114D2749C33A769A07C8CBF64AD2F41
8B758A6187EB3EBE9E5072A6AAFA8A594D3A339B1435E29866070AF18760DE73
8F9AA02A86EF23D5F28C1F1C53B68A06B7322A9BF4593E30CF027E72EF4BFAE1
5A215C5D0BCB2F67F5AE8AFDF9B42B87D59068765E64B345091B50DDBE579893
99D819CE6C66CAF48A4867EA6218789C6D0517DF749F4B7221BDE4DC18A1CFA2
3221BF0C0C973DAA0D3EC8459A625954F74B76495AA9C0A31CF5662F890FE57F
A2B9FD5C788393D12F7D776C4845B75E3038E06FA3C7D9D8F38D2C90E28DB372
5B398845F9964A55E7F993003416157BC899B4D796F25E162D83231EC40AE67C
6CF27AFC13776578C923341FC339EF8A0D56D9B7E58C450404AA44D2F502555F
C74039A89002F21C1EA0B088BC37A02B0448AE38E530E73F7BCBBA0E84F9060C
62A52CA681D5A0BA4D730FF79C12D602D4B8792BDF922E41ECED4419F3E20418
C7AA4D499D43A8B60D7A0DB9382FE00BAB40A16786F6245A907E7370EAF4260A
698AF73BA7C6C423262F764E9A5DBE640CA904B445D673C08178FB083A70C456
4FD126138BFC74298A789458CC7D5D7D91D4818D0A1593216BE22D44F5B382CB
08E5298E1605E5D2FD0BEA85EDD3ED6DAA6A5403ACC89BED1A28685375AAC44B
3170D3107566530ACCCF1AA335D56F0E86665AF9428EA52DD49060D64C276781
A7C27B2A3E991D494458B14D051F8573328804790A03D98CFC04E88FBD4637DA
34744818D2364CC6932DF0E2362CCDF1DCF3F60410E4FE9A0508AB7AD97D6A74
7C3B3FD3EF15D444C40F9C260A53DBD3433E9BA4350E69BFF385EFD21A1383A3
9CCB7E05896DE7069693EFC870CB86162614164EC40D188F4E304C4610FA7CCC
F0512FDD24CB36B353FE5FBC8B632D158A299E13B3FD58F627B164A6E78D6A85
6B05FFC68D8337EA8295F7A6A319ED7849584DED22E3F82A9E9CA029306E7E1E
45E02490C8C38B66A14ADA3D29901CF4CD388BF75D7A85330B1F22DC60E5B596
A07EF039381853AE8DDA0FAC27D211F658635BC86B269557D70B7373BC787A0F
D78AA2DC373870C4CD9A8010660A9A532233DEE6481DD129E8321E5148BA73F0
A396FE6A378D188350A0E986B3C401AEC31A62FD76A27F9B0ADFAD9593224198
1C918712214466FDB6EA98F5BE94F29B45F4A0D2EEBDB4B650190C7B320EB33B
1E810FF6D1C23500A7DCCAF9326EE884319257624C90950AB56E17448FF44418
79205132246A1D65F33014FFF91091FFB4FFB45555B639F6A63D62F7F676D60F
D5560B7E86FCF751F08F54B128B7FB0CC33F2727AB0924ADA5EA04FDA3E8E5A9
83B87A679668E8F34CA8BC831717B8EAD7CF15F39EEB1C3990DA5CEE9EDB9718
DB9219571D74423208D3BAA6155473B755BDD453160F4DAFAB75D306A990C40D
1CD5882670690D14FA41F8CDF9184348551D4AD897BB662F9921B44B86EA4A76
6EE9EEF09589FEAD458E80703365E481FB19B8877BBBF6147B984B193B34B057
B10EC3855E96425AA5F10CA1EF4608FE644DA9ECBB422B89184EA331A881C43B
EC2DF3A0A495EE75A168A0A7175FC215D7E58D777D53156C45616754665BAAF0
8B6A8D2C57DC12F6987D5DECAC254238E5BB5762D451F777C4928D117861E469
F7A408C96E6663C4EB382CBE4DDB1FDA69CEDA83C2B0328FB8814F0C919EEAAD
D15A03FD760170134A905F4B03D3D574FCA705DB539AE22FD45086F515FDDA17
F86B2C3CEF1E291427A2B5AD2ACD4E749734781021CBF8204C93E1E8BEEF6550
EB727B03BFCFC98DC527B4A2A27FC4CF05A5F079F5ABE7CAD24F1252D10711BB
4C61FB3B2C473062F0BDD443E01E6AB62C5DEFCE21C52EE75AC4C92A3DA0BBF6
562776F03055A514EF38C3BE7BE18BF369E95F2397B37535ECC96E7153E47C23
906327D929F2336F1994F8157999E76D8C6F0A941885A6D4F83425F464433417
19627221A09CBFCFB4CF3D13A7D2321812C81B5AB9FFB72BC0F3EDA54BA5A18D
E65034D0CC1F1ECB409AACAB1794F33524E7A0A6EF349BDF00A3322F4993D3A4
A89AC44F8AA9C96F4B4584747E74145B50402EDABBC7C7134085D17FD1052BFB
D969FA1156412CA3E63BEABED8E7F30EEF791DC3E5C99F7464654A3B4127C067
41F0F5A5FEF3BACF583EFBE1FF3856DF768AFD7C810A269760D5BEE797DBC572
D71E28C60A1822C1F77E5DFCAD6E06AB451BD30E3554F65A2BDBE89B6F6BB32B
219D9AD4632C8494E120FF8B0AB25D953DAEBE2006856F96C88939C34296C690
8AEFCAFC2C9DDFDD855116AFD66EA16F91ADD5858747EAAE222B1D550213BEA0
6364396D2794806A5766761E290D9E1774A0955F7A1770C2F25785DB68B88B77
222043D342CDB4DF615E2CE587704349A09D56537B250089C04943351D1F3F20
BA57C39F1C31DD982D72C4E90E7013A609DA36DB25ECF25AFFDE94BCE26C43B2
7A4422B1822A523D68C4929E56347B0FE76C25EBB2DE58045F8A5AECEF663D1A
1643D089DA059B3A0E3FA758E80AB10A0CFE7DE988B0D57A95CDE61641369CCC
E9BDFADB9314DA07D0741C6CE0726DD6462C6EC9A0A66D8FB63E218E4A7C5B87
E5432AC14E46C3F0B91533AFFE2386879E68EBEC50031D4C01FE858B681B896F
4A093CA502A4656E7B3114074293B9647289C4317DFA2C1CB819D4F9B989C89C
9BC275A5EE2E274C2E23EFA61BE18FE4D056969AB8C0B457EEC294949A817BA5
DA426E506FAC2C0CF2021C45B094B8FE38F11D1A0A5839E3BCE0E4BC304C2257
64A1E0259D94917A96514B166A10BB37D2EE3B6A4CF803D9644E78EF1B09D709
423C80DC2BD05046E9BE77149F7CDDEFDF6AD4BC9BF80F3188A55927B50511B3
73E23B3A1E4F7D4A0242214DB59E582730EE9D0F29545F82F264D6820225DE07
5A0FFCFA37CD005A55AA69B8F3E06684B9C7B72566A6A89FC0641F7F64581D5B
9CAE36F9A5F9B93A877CF541BCB18CD7C37DB0FA6883858124FE6C2AA0518EF8
DE0864507C8ADD1CCB62FEC5AE724457E9628C077A0C7218B75BDE118C457AA4
96FE37B34D462ED5E3F60AA152C1FE8FA5EED865E40A2A645C429B61AF44E405
1836287494964079D7109DC5145EB3265314A5F21A6EAC33C4D7057015161571
E48D7B0C485798AC2F0A34C98AE533917DA4B84F1D29AD2530A16654C26F4B1D
ABBD0AA23694077AEE9ED51D2A2202D7308D138F49B6D1247B02D1E632C20F9E
F9B7CB7F1D174B2E94953F541C3B84D4342E008B8E7A364F21989024421059D0
F608E8471A5D04397F35AA5C7691B72AD442BDDAD18F30DB190E4D0044357C32
34A963F7F6C74C3424F132DB46B106ABEB773B2DF4ED98EFFE36A6E658BD6D9B
0CF5128FA7547457F6ED19AEFFE1F98FDD3DCFBC52A8723234AF2117F63EFD5F
7548D95ADA06D3F348353E4963E20A85A042375DE93328B777101A5BAE73F8C9
35061C799E4FEACF31E1D1FD20AD48F21DC7670F5245D7F62FEC4FC1B22FF835
DD007FCAC8A12789A86A7F9AB2CF44B40C5D496DCB96A463116389EAFF598241
3682F58A03B8139B8EEC22BEE2E8A1A721E5A28DCB5D3CC1781E4F3ED7F9F55C
21A04F1A6DF8168FA2286D8C7EBA7158AB0D31D99F3C202C277B9CEFFD6DA61E
E997A91FEBC48DB6EAC00A0AD9A3D55C4A7AF95B79602F210CC831443EA18E2F
C03785050C5449D652A4BB7AC68A26643980ECECA8F41A24D9B74A0FE9EC124F
CF791A46BC1F0E7E66BF4E41039434FA25402F1CF8BD2225740C9E691617FDA9
4095D19E5404955606C730920B2E4F45041702F0DBCEB7C454CDF7D535CD0598
B249AE0213EA9C38E918B17E14F871DBFA3A7B3D47542FFF5987268E60E7FD64
B017EC6A8878463DFEC10FF237E38BC8E19B81502A19E0BD113AF8BE1BA489CD
B5C599FEB9014C662C9C68868890B42D96CADBDF8A3AA1BE8F7AB1DBB27CD8BF
8B107F22DAA867CF332058803390CA8D6FB9CA953A63369889DAF8A3F3379C7D
9D4CB1DBCF751C748A7ECE0F4FDCCA3F1B81FD055EF1A33C94A3B9DB6DD7E89D
F4C5AE264B38A42056D12240FB36C17030AFF437BF74C63765722036D41DB706
C318F7D2E8FE4BC43AFC8D57D4D7F60F0329462D2B14CD1D737A647B484728F2
D914417B7C4273FDD95DA94DC115288A94717B2F1204BBE902AAD23C044DE8DD
197FDFA5D52193DC2716CB520442D8FF88841181C80B2EDFB786572DD244746C
0BF2C8C6FFD12F00B58395CFFD267A9F7D8A3519DDD158B84D7D330ABAE1C284
95B0064C2A1BCED8ECD341D45C249533277FD8F9B93A877CF541BCB2B168D020
1D1E7E2E27FADCF643C0D7CB15E2DFD2F64B4E1E5A4054191383E77E963DAC46
6447028F139D9C6A56EEC907D4EC63F6431805A40EF837884510B1A8C7CC7EB5
06F880D67F16B316CBB5CDF1977988257A0ACAED41012AFA3E5BEF8D7B942444
975C89293EDCE4112DB68AE53FE6AA6B6E33A3AA245AC6A5AD3EFB0E11E043CF
A6AD06E06A2E0D9DFBDC28DE2F4431F3A1923FA3C5F03A7F35AA5C7691B72AD4
42BDDAD18F30DB190E4D0044362DD8479FD479D9E3C3C95C47088D3CBC8C8A94
2A81B3E106A6376C080E96B4E84895627B7886F57773C201BFD4FCEB4D66C94E
84ECF4F36192F78D40ED7F80C83A5B6773B26638B9BDEDCE94FD6A7C3005FD7C
0F7D05289DC156DD080093D26A252077276EE1D016DFD6FB53E616656B3F80E3
0CA6ED35849E06236B54193644EE111AC51724AD380CBACA24AA011CC06803B3
1E09E75CC9C0029639BF63A033B3CAAD7CD337CFC9F9BA336119F383A67DD50D
F66820CE924DC6AB60FCBD5DB172F6DD30F1F1D20304A6364BAC1F6E1F260D64
A894AAF9A59FB5E1708E345B8CBF7933242FD51288193DC3B89260F80CB007DB
6086D2844D4085AE2F640A3993EE13786514A8D15FAA18132125465B6C40B5B9
10E41AF4F90FD3ABD529B568E9ADF83FD9FB45A2F385A84BB64B27DA576A7BD8
350C2860935B0005D937E15529BFC43EA631B1A410AEFEEB515FAB066FB9A6B3
40F5BB512DC333468FB500D860BEFB092DD571DD692239FC4B3201383F579BC8
B0A946E84E83941E5463C794B0DAA79BE8E129E7F5C5AD1B7495C1BC9CC6324A
E44B7870D343DF102BE43CD5058C3BD0263C6CBED6C0C8BB0B9B743486E0A343
D68682DDD7E10A9FB6DB646F43EA64F9E1ADF4363E6DF22BA29E867F335A4D38
F20764033929A8F36278575777299697480D55F746957E7E67C90E0CCB248245
0357011732325272278750818E1C582F30C6DF5FA2097A078ADFACAE547DA592
6E4599543E97155ADDA8E704EC5C0D97071B9D86BE3B41774B9D24C5DBE2BE54
485E3FE28CFE2494D73D9AACCFD7C637ED8AF9A29CB0E55ACC7FD132B117B09B
8C394A4E7BA3CBF1295FF2EC1D6F82BC0428A071213C63F9E6981C2E9BEE5627
6CB5C7A5863400BBD725BB08927B936A10156D4E6773EA74DF32D730CF096E87
CE764B8CA6124B2FF79725564FB98D42CA1A6B848ECC401413FC969DF044D49F
F0BB6C5A6BC08C71F67FDB950BE928B74B6E4D1011538DD052B2D4C406589037
4D2051B800629BE0847718ECA5DE4ACCF88AB495636B826E97FC91A0A25FC795
5B4348ADDF7CDF148AF7BA1E216D1A74EF9C325E5820D3C9EF826C2CABEAD679
8035ADBFCF366596F5E3DC4BEC30136B8BBA284E1FB0C95B6FD047603E302D3D
296FEAF54D457AB450610AFA8DE172104A59134C57CD5CD0305BBF875D7087C6
292C6EAA1B1F13829E41C922DF981188F09E377CC2D2663B732A7BF2B0150F2F
0E35F4D000DC45CD6405E4C1B0C110725C300BA2FB19A603ECB41DC86E8ACD2D
A44937F45A6012F3BEBA9D5822E3172F75FBB24844323101A920E382137EA26F
EB07208D32DADF41392053084F13927AA7F1EC64F8855E80F6D18ABD45FF1F67
3470DDC418EC772C1D183F91D837DAC94609659451F83DAA632BD0325686F4F2
2FA5546410F5575B56D3A484AF5D02AA92F653C32E9EF3DE510D05F01B979454
C6280A58F8BC5B7296D5F83D54A389FC2172DA93C47D22E22208EDB1CDCB1E57
276D48633DCDEB7F9D21B332CE4982A6E06B07E56BD212A1226689CCD5B3D743
354D1CCD1777CE3DA7B9FA454BC746D40EB4B014E139A394B10EA563224DAAF1
B03CE6A61B1E867681DB50422B1EA0D657589444C92765B0DDDDAC9B974D3E64
19A760163FDE031EA1CAE763E41AF3807125AECDFC2B1A23F594B389B6445A99
DE978B0D81E4BAA92E8B121A1E1B3C94DB7F3E6174779CDF1D7FD2815F9092C3
46805F09A1C83CD1D23D5C8E17CF1B43A482C44FE52E57AF48D108DD81C30121
5DE734D791692C5AE0C53DB380ABB8676EA30589FD841305A8927C1BDCA62444
5061F3C1FF224210B18B4F150D7D5420F4733080BEB491FE23FE13E8F8065F71
5CF3B5F94D81EE2C4C3BCD890BEC0BD575C4C31F33AFD3B9C99B044EC18002CF
C7C9922DADE3577BE70F3D4D71719C1180F1CBE7593504742D31C0B69DDD41BA
88727A80869621D0C553325868F716DFD2933D5F0B14A0BB45AB5F7647DB4975
1597C7C5D25EE9D241443F85CC936AC92B6A641DC84A16E5CBDD29930856F00B
AB4302BB272DF7D1D747BC7E3AC567A69429EA3D1E7FCCF0E3330146F527C590
174702C42C30D07D729FD4F2FCC3A6B97E1F5FFCC24D2D7EA471E902433EFBF0
2EB5929FB24ADEB5873129EC967D92D39D5361B2874B19850772C62EE452C200
DB6AB0BD5757C07FB38DE5C5CB5D530CDB8376E52631A6B3214A49E4A05E2A67
BC0B4901E9BCFB5BDCE3DFEC1DA9CC9F6DDE8322DE6BAC3A3A2CF9913A8E082F
5211F2EFBF2E9A82035110ED87DC585D6197F8FC762880B58A5DACC222386372
06A7941CF0CD9403BD88E1DAC75E53570BF8A166071BE79D45CFE4070F971EBE
827C4A23294ED01217B9139F7D3911F48E1B15FBBAAA67779D6E91CE2EBFD41D
E45CB0EBF3429610BE8F0DC8964292CFDBB1E76A1167EE178B421B0DC4AC696A
D1D7F249B4203DB0A98E40A9C419BA24B720DE733E2FD24D1D2A24663AA6A96D
BD57E0710C7318C152697C6CCF8B237FEC5E73AE06CE637878782106848B43A4
D6B4C3D55BE6DD8DD35AE3EAC0BE9EB7F4A37E67C704A4E1B985666287346459
4EBF58A0B38A156331EEAA0D0BC0E66AF10B8C676090F93D6A7C13ECA74C793B
3917C4EA95AF3F20707869C5FD40D940A885310CD6D5CA9C35199581B1A6B865
510896B0133C9D9C98E813E0B142027C82DF0453DBA1E7162E501AEFFDB31556
8F7165AD37E59A2E44ADFF46B2064B8E9F1AD7176D26F1924C7525D7129C0D79
389E03D3AC1A60B61E1A5ED2082C744D44027DD6C0F2B3760B646962D8037B07
0EE978068FAAE7C02ED8A5CC6E01103E0A3BCFE69E0F0C64EEDF48372D13B1AA
BCD7AAD846A6D458112EF1FA85099DB3D96F60F6ED768BD87C1806BB162028CF
9D79ED3E033B3D6817263C54EC85DA80EED3D5F47556AC4B2DFA04804141805D
CDB4DF615E2CB64980C415B399C243997B5E0599C4BBF97AE7C6C442581B0590
0DB68DB3041C6A9C6D68A62F14B2097FEC5B6DBF139614924CECAAE3136520D3
4512F92E14A10B78D35E5AEA8DED08C441FF305ABE6D0131036354C6BF79126C
436F4C14079CD216A6C58ED13C5FCF608CD94CE466C1FC3EDAEA3ED25C96FE89
A7C970808237F691B0A9B27B9B609BB38DFE282EB30CA1CB52FC3192DEC590ED
B2F3F5B2C42DD548274B40AEE16BBB904606039537DB98087D5260D747C1A2F4
B9EDCEFA73D1F81BECD4BB0FFAE39311C7937F8538038B8C3C53449DC4DE02CB
9117CFE5AEBEE1E2DDF9DFE3607CA3EC5258764BF2264795C01F62D6F124DE12
2BA632D89F55124C58E6471FC04A203EBD502D6C566B0425559AD38C8B40E1F5
AC047A8204F49AEFBD18A339C75B13E0707F5D096FE8977A44300C1C8F81EF50
B9DE4CB4187B9BB210A091283C9AFAF835F63C1AA4FD057F51ADDF7DC9BEC731
AD6040FD9B804FA1424399871C07242CA31F3ABBA9BCEA96438C90156BBF2DF1
F2543ACFB65DB1A10646D0762B400B49288C4803541EFA6BBEF386127BBDB53D
25E68448A975CD56BE0A95FF5DB8B016EED1AE2A0123C15585E849BC46825B83
A12DD252A6C23E1379381AB6EF650938D7D1D90A82EEFAF567CD23D70AAD5777
DD46AC20C0D02790EE255ADD6117E58004033A4C316ABB86A95F8FBDEF27B9FC
1AD3233EE5E8108DC4406159F721C2333589F78A0F7496601F46DF3CB926D41C
CF5BB964801E50422D5352C9CF8010031F4598C10A9B7550B239E8E03B81B713
F3738BC8FD36774CF0B1B98E14B1CCE43D91B137EE909680E472B0310A955FD8
B9DF74AA62D786A28F95223B0DC0A674409B1D0577295F4A4A6E8ACC3C497A4B
AE5D53523C335FB2BD8C7F755D67838B8E8B5A35E6BF9BF3098535D75E74E650
8481B52D49C5508F0ADAFFA72527A156F7C472F9C2B9F084C0D81A912ED19C84
EAAAE99801DDC5B98DD61528DE396A0028B3296D6DDFD72ADA2801A8E30DB236
103CA293576476D8AB9050ECEECCF35182E14D08DD54C74875CF107E8F35C40C
193914BBC36385AF5C2706EDF4324CA6EEEEE7B4FA88BA66620BB08F65A08BF7
6C5EAA2AA9ED69D6A974D6BA21C4923B7B93F52AEB5D751C4820B96D5030E787
961D72D02C195C669E792C0DF1C18C9BB6BBE29AA08A9A1D1C8A53C205B89C69
E509041DCF9919BED8304D1F9E1C3182455A444B4DA0962D32BB2758055EB2D7
A5607A3F8959D92F1F96A76025C39CB030BCFF5A9055C76EF4ED2A397E30973F
13C9C94D097DA7F06A3C36A4C792D168DC61B0E00C91D60564519AF81F5EDCA1
06FA0636B029F12E6809CD8308A151299D7E501ECC18F0A78587E1259B120548
2DDB69B0316840E73E8CBFAAA5FC3B713F6ED26A0E7A657DE220EC3F81D20482
76AA8C7A1EB9D7D6B7236413BAAFD8EB6634064DD2673B132906D4F88BF12A34
45794FC9DB3F1BB119E2B4D2014548B232CF00A760D92BF4B537D15C66B3BAB5
B6311D48527544E28F808A5EE6271CECD8AD9AB5FE27404DF9A000CC5C8B88E4
ABFA16812D30D955F2ED4DF7A613C831FBD18402E4B85DB57867FB715C0C1A0C
C262235138E907DA1E62DA447AB71A060B5199BF7899D41F602E326E1896EE31
A2C0B15FEA65ADA070BDCC23325D9CCCC471834AA9E29C70561D277F9C62A482
2577D797C2B0A3D09385418581D067D7A65C52482D6E2C5740794958D0D12B50
5A9A7B468C11A86C1A517F86D2C6190AFE9B31BC892F16819978D5C13AD7388A
B725051F3287EE5C4D96208D833C60E8E89DF07C2A11C0E1F89B02D061B7C9EE
6272DB673DF314F1B24A651DE4DDFB5A8F647CDEF44ECA5B539969C9BF448F92
E9EB110E4A01476BE68E839DD0AF2F989089386C3079B29055B18C05B9CC8ABB
4F3E6809C07E94CA10EEF66317644DB828335EFD2EECBE1E315834B8160B4BDC
95F29056A0E8972D5E0FEDE1268161B9A03DDAE7C321181170BB05CC2CAF6283
0C2C50EFD34C4EF05D22883F2968FF726EB83685DDB4D90069DB7C9F7DA84415
660DFC26A600CB272F79AE07698A0018620539FAF318F081745A7D2C3B899950
7C609A2ED663E1D24F98509ED437829CB4D1C345C1897001A79C5D63F6E4BFD3
F8F8750848A2355EE55BF0CB1730F94F30BBC89A8867EF6C1CBA4E2DA498A967
D890C295745B1D18B5ABDC577DF8F4B125C0E9F07F9D61DD9D34F9797827B9B6
49E663595826A0053742F89FC9EC5B131EC03E528B06FCA065D7C95992607C9A
E7C1DB6B1A94DBC963FB1BA1018BB02F3E02EAAFB0BD1754C3F11EF27F1C85D2
D2F86B2B420E9D7325DEB5A9DA6961886F19B5B15D74CB098F56CF1CB341A140
6603232BC8B3240023605ED2F848E848B88111EE5C79A76E9E0476FC009295A2
108EEA1D130BE33601734C886B4CF03D8468E5EF0DEFA459EE470ECE7493118B
91A352BE0829A733EA58759C80980C93D33ACFC394606A71181F4E77CC3895DD
5E3C8D1FB444D535C5B0B3B1B67CB004376208C8D6DCE81AF1B6A8D13F6A0D3A
DA1B2EE9CCD34481A046D60B5837D5082C3A6CA52CA5C3194DE34AECE622C40A
D2D349F0A99EE75CEDF13EC406B61C9C66C2521F9AB5BBFA9D8B366B387FCD62
F348898DC659DBF1EA3D03E6FBC9D3BD10DFEFB1EEDD4CF3945AB516BE7B6C38
97FD702445F618CFECDC45A8D96D7B83073CE78791C651AF5D766B378FE86691
BB1283618D234ECFE8B485CB991BA970992D6A588F3463B38BF385D40ABE3C64
1A9A2B5F0F6F6F786A20316B992F547DE9372FEEA0BE405528F44B182070AA3A
421603ECC1623D32353CD7684A1DE3211A9F1C30D13BBBD899E1113DB8E9E10B
BE2AAAF6A5F7C16ADFC9E6BBF635DFD8CA407A41CBA205AC0B501D36BC172A77
305BB771DB267C0AC6F940EE4E12921E57FD892002C19B3221F02826617596B5
855B28202F6BC16388E67E7AC8E934D993EFAFC5D3C280C6065CC8EC9C775DF8
43E7DE0BBF8EF47E09F7E172C97AB5684F36A0684186EAF63F04F9415D7F1CCF
81D513116A2E9E6895F145BEFA7D935A4FD76D7A9CF080E34D19836FAB5A4C1D
A03475A731A5E011E6FFBA0C1AFA5DDB5810F10C7D27653EB4F5907252F9558E
03636F6D26F927CBE82C9A407AC9F244237CAB3726CD9E2959A9D7B68C79FB9C
C7847273035DC5AF1E9B089098ADA0ABDE837B551650E889285442AAB9A29D15
BB66552EDDD461FD91C88AD7CE0DFB5E45C649F44580845F0B726EF3F7F22A50
0C53429EF18C3D347430A1B89255031E9E6A2D42E04AD651074A7FB8EEAD8468
88F724105C3D408D6A9250BD9404BED916394A66ADE73FED5D68B3FD0A64151D
36BCCEBE1EABE609BF49E09C3D7E17C70A21934360CA5614351A8DABE69F2690
D9834D6E1B63D9A188961A3A75B1638F4C12EE82A60239CE78DDFE423A00CED6
8405A82F15039F0A99E6FC253C49ADFB3D17FE377B75CDA89882CE10B7CD6C1A
51FA391F98488E231DAB11A308C44713C0EA9FED6D5D72499519BB10BB5BD808
7857E9E1724F3FF689C0CEAFE3E98D5590DF074251926CF3F0DC1CE20D426284
7EB62ABE8AF75C23A6908B0E5D725D21F531072180C1D863F24617C2FD0C0950
4559D47C3240B0D4A30A382DED5AF585C938A80836C8EB1D7BC8BDF10C700038
FDB23B78F3BB8BC8902369B6805F80315BCBC1B4C0737EBB623F79B3C763CEFE
30DEF2E90F712DF8533B2B6D42AEA28A08F8A12C4E681B48F6229A697E94EC4C
8947652C9AD39BA6167EEFC82F772D4973C92CC976AF06D7CBB5667BC5737A68
181E204BCD4FF8024C28F61A2AEF37E4F659E4B3AE3CDBEB1B994B2CB6DAD323
811A946008743118F5F98526141D74BC4B27044B3F72DD84699ED708C0A0CAC3
E2A3DCFB38CD263642FA5DF59E7F3AF5AFFE939F56F9162BA8B2761BA367019C
24DD75C7A4F038BCD9BD66E47C625C970DBD67DB3B40850954CD2AE45F56C6E2
504796FBE2B5B8DEC3939CB6FA9ADA4A65D2D2A0DD620C4C9277D3637BD8087E
596DB6D6B122B3EAA537082F566E73C4C3C500CD798E325C588B5B71A41C7E40
0B0E783C7A56426E4FA821BFD8644501E923A8FBC7A9B27F2B44615B72C93110
F53373C50E14657ED9D8C03D675D7BE879FCE0B20A9CBB394F9D38159C847CE3
B2B056B9A6339D5B4AFAE1B7D87F43426B6437127D43A4C3B473C5EF5EA99AA9
22FAA53D9D03C54706B5E769FE4A260EEF5359B2DAB8797A532D12DD879FE1D5
323DA1FC9721689D4194CBDF930E0CD0ABA43AEE38436E7C68C48BABC7812B25
5DECBF9CA92D5AF89E0EC3EDDDCC099413071D70E4D2A0C4E727BA4D42250851
9AF3280921CBE78ABAB12F5E0EFBD4B1B7E0041EF6291C43FEA6F1F1EE0C438A
9A2B6D2A07E0CE1D4DD0827F22BB0B70B8DA22B921965A7D4E644584C7B44334
710720AAE0F7782452C5AE4FE870DF890C08DCDEC29D1AF8D5BAFDFD3DAC5A64
10CC04F00AA75074F6D0C73A32E3D18B0D1774E48FA183B65AD4347BB545FCF1
D4CC29560012BA48917FAE21E3931CCC73279FD7C84E9DEA1365D1E94DBE41A6
8148A5E603BF8EC5FD95EE5560BD521390738A9FCBFE2EEDCFB12B265ED6FBF7
A0B1BCEFF5C2FC3FC6CA25DE86079D9FEB45C87D9216FF6451FCFDED1ADD3E2F
982EBE208BA9E14F7012FFA2D7625392D30FF0094E0DA23B418FF169EE474FC3
A601C49F3450F08A2F61C19EE2E4F1055A04409949DBB16460A55F02528ABF0F
629B34522F0F346F762EC07BC99ACF93AD672573419DE238AFF3C64D29B8D531
5A29E716CA34CE544502ABC9526DF48B0762B57F8AA6E9B2F9224B1464E2EAA7
C8A723BC408CE4A039F7672BCBCC7B08A59A37D37011B460936E58877B32708B
13988C7529C67A539AAEDA416F481FBC1CC4B58095C7367888E183809095E888
40F703E9BF997E8A66669190857CB6ACA8A5C76B0F25FF7E645584A781B98E80
520557D73CBC1CFE349AED0167FEB6593EECBC997193BECAA008DFBD253E4F8E
BA8FA68830E6BD9979FD51C835550B166B9E868CAD24FFB5D67500A0FC478AA9
AD7EEFAC1938BDBEBBE2C375A1F44C22F3471FB82A87FF8B0614EE19F29D65E8
1CF8BD3127DAA34B98DED82EA0972A572B947CAEA183EF0BA72B6974603D66EE
4803CE8B5819FE6A14157F2C9FAEDDE08BCE5960F2A9F926A5855DC4904D7247
EA14892715CC4DCC45A65DC61852339A38701BDE4CFC1074B15652192DE7219A
4DF8CF21553BFF0A11DAB9E2B4D890E7DA4B0F245FB3B454FE9B84B95902C17F
779FA09691D02AE84C57206870DE41F5ED48C2D6352E95EC6CDB64DDE6B32BF2
6FB6A7A50B07D3BA3EE33A1CF583968323F97506F34CBF442671F36694A6F2A8
246549076EF5B331E29A86243513EF4FC03041A35A2D76E4155D47E8DC677E58
5599E94D89D126C60220CFB93E13672DF01050EA8053F3442CC66E8B155C17C4
883DF110A5B0B2BD0AA099E678F8F433EDF028F72C4943D29139650015DEEDA3
1D8C044A7EF02E9F99646905A0769ACFB3F74DEAF149D3094F9896FA9672B097
F5D0ECB2066AFBE6513F3739F6F12BE94CC6A0305AFDBFB48E64E6CCE8C0B637
AF9CC951A3385396EFD37A2DCB017D5675D901A1D7CFCB595A0FCFA9F4E0815E
CD8817794B78307D3B01149D20E573024AE1E75A03A41C1BAB01F717231BAD98
209BD688C20C2F8BB8AF4B23B71658B8C995A8EA60B1ED295254B09D1742EE80
CBB89E36650DC9C0CC551C02DDB4F076EDDBBDDED0994C69DE3196B59C4A11C5
BE487097A7677913A666BD533947432DB5692CC517B140695CB2B8B1DF09E52D
BCA6286B2C414496A4B0E2F6AA6E8E69A5E44A9A7CDD01FC39B7D505E0F35C46
21C32A968902AA6AACDF94B4850BDD181EB8A9D084892950515E738A5D4CF6E1
402060C6481FB9FCB8A38D5429D39EC2B3B5CE9EB412BC568CCB04A1780BB568
671D61B31F58567B3396F27C9171AA0949029E19CE52FC82A28340237C6FE109
ED09AEACF1AF74DAA369B5FE272C4932328008BDC4A3F9A05EAC76ED7C42F48F
671752D4B440B210F84FA35A8828BC563776F7F95DCEB82031701F40A6184740
9893006110975571C462E7158BE063B09259234BA355239031285851ADE05F64
61CD7A174893640C2C22BA5ED197F0D02F563069F367DB6EF944F4B277D04EF3
B9FCC009E5E89166E7553705AB52F98334F48219A42D9AEF2D7A0E1549F4642D
12EA28AFB234E483D552A84AF3D6A28E076373D3C6A3CDDC1747963E60E8D3C1
426DBCBD8AD8D573EA953C98D62486ADFF2AFE24EB580E55BD945DA11B77B1D1
8652064765197E5CED76AA4351B50377469A2253D08ACAEA4C1CA413FF0B5D4A
4856E5013E075ECEABD99CDF6565DFF36A07477C96D78955FE1862A6E71F9F41
CB8BC1EAC8F3C0B1F2FD785FDF2A06CFED8D304A99759915CB264C041681A02F
947946C46A6DA7A75BBEF4931035397F3CB37BC27C555D5A0ECD38AA925090B6
B57E444848ACC0C381D81973537795178ABC56C97BAE40A90F489F00D126177A
7FF6A584C8A0E10E5F67AAFC5E03CCFD0783D74E1B4027853D45909298E74B52
0BBA65D5328F528B0F4182E27720A42EAFC2BAAA4AF91FECDAD43676CC58D00D
EEE25BFA2D646904FC5827EAE50285979C4568B1800C919BB125CAE80EEFF987
69A356CDBC2E6340832564634C283ACA202A7E407A8D1A14EDE113B3A0921192
75C407E199C048B481E280BE355205E43AF3754C137020F62F0B85C4629DCDCC
78E7D9F9ED4D052CA9D828EB79DC734243C6F5C771FEF1DEF6FBE838CFD99C0F
77860AECEBEDF17CB6B0076D8CFABF9DF8363A7A5E89E9ADA78E142994FEF962
49E305EBB3E2275CACD5CA7F2D88D31D6A875649DC1475A058E9EFC4E9DA426F
76B2541E54067E19B593E3412F298BF5B27E22EC5B885FA8B9E72334F79DCDFD
1EE6B6FDAF91A31C5491FF300ACDD772003D0E5FB85A5D6A0C1C3DEEC3D9A83C
CD444CBD95DDB53DDFDAB81E254E1AD3FEFEBF29B1C7EEA6A20A6F417FED9450
F1405C9134641B0CB2CFBEF104A0095181EDF855A7E939DD50669A2A2679982D
2017EABF46F22676D859E0199E3930F247366EA6945759F2BA7F649AF87AA556
F085670E39C686A3E139436AF51C74AE48E544B78C9927488B78E595F98D3023
B089FCAC6FC139370EA53A107AAF7DDD74C28B46BFAE70D826AA6AE3747FE544
D61ECF2A2574C0E0AD030883C063856440185DA9A9518A9718AD7459F115741B
F4FA53214D03A3E945CEDD2581DE2E34DC9A6327819741BC6A002B02D9B02597
1A942856064CA30527144F363CCC587A49CC943A01B88858575853F19E7D3180
64543DBDC70F50DF3673E030C447B3B5017ECFBC772D2B7E4FA697803CA289CF
C91005AD35A3EC0AD10B1571FC0A6A6D70C5CD7E2D11E2E79FF458E80AA337AC
0CF146FB7704DFDF783BF0B433FB40ADC263D761BF8D29821DA717C2FDCDECAB
E30FE2A23DE3C1766A979E816F23E7565412A1CF1F972218AF6F22127330965F
7B36E3DCBE9B6D2F2DC7DA4B5BC47E7F1BC27EAA894C6E3159B9134D60F32E9A
B81BDCC019E2CFB170F522E8E6D22447373D1FB9701E7B7F2A5AAFA1D184412E
0D8EC9E7809F651E6679FE83DA13EDC60E21DFE99AE1681A9729257CF3223664
2AEB40C5D0BA60D7FDF253186228CB6AF062983D4950AE20436190F835A548E9
64B35D112B5CE2E3845AD971E7EBDC383F2BD73789B3CD654EBA34746FF80C38
7BF21E8B29EFD2DD9BD903159A5B34F25EF6F926B6C287719C5B27C4DBBE2D7A
18699776BEC1DCDB6F430349764E2CFDD04B5AD2A81D09258F575B6426A82F10
1D37219DE1CF5083302F2DB903FEC53DD3160FC0041C94E9A1554980E13B37FE
678AB867A38F249214F3FFC5B619C76A81D151C42FD05C3E19FDFB7A5F036946
B7D6FC521F943D7422D4DBB6074ED63091C8ECAC2CE0EA35A44C4875F8CE39DB
E45BCC6A38589981CDDE961A6842A6900552B90A6FE7B7FB51752C2842F3E1F3
C03969E94142749DEA6A0AB1D8CAC21146FE510A6C1D4F7E3C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A110651C32F7372F56D5E845643350BBF6D0A6EAAC
D2586F3D71442DBEB5B1B049B691CF910A78299B8A9C0B39ED96503D55AF7610
48D41BF8E781511338BAF3A2E79B98DB9E6748C1FE829C1E574F41ED7A56E8DA
4EA2023CFC69FBCDEA39CB00C8BC5AC4B184E13F3ABA4A18487B10878E9D800F
8064BC68223CA5F86E7A9AB9BAC72FFF9546B6BB94F4426E5D273581A6D28444
44D82093FB03482F71774ADEB638DB46DCCB0C6BD2192A98CC4896B52E643BDD
07F61D79F78746C5238C5504416B1E2F271280ABB91D54CC819680322EAB72E1
250A760531BD7F2AA1DE45FC978490BB69153DA6D6161F7AFD7BEC1ABD547CBD
B6BCC20BBBB289486F6C7E238C2A7AE02B2539F6DACD88AD99A2B686FBEC34A6
F9EE29616642225A5AD8C4FBEB07FE262D75AA093A73E9E0B89695B5862C96EA
1243561331C2D9EE7B65B8214E519D57A88C79B55D644CAB29554F2E31FD6843
FF7B259AD5538BD0836F18ED0DE7F01D9BD148F8279585467B15C17D2D0C33C8
24A507CB2FB6E384BA8BAC55FAF929178B7AACAE1D371228606B58787EBCCA93
4E4F469709A6476CBF11C97862C34607A7DC2871810B501018824C0E0CFD58F9
7A957FF98D5BDA3E3E034C52405A6C2908EBEBE3E29F7C6A759857EEF72F2EC4
3A8642C108D34C4CED6F7DBE80F25D75116BBDA7CB4BBB73A61F7C685A3A9A51
8734F9E4D7E801AC7DE2E73CC759AC64F3CB8EBF8B5EB56F41B247F3F19315EF
7C24C48C184E2BC4350D72B6956D0C2F54961B34FFB476B8B54F5F249AD4F434
87F61D3712FACEC07D010DD43EF4D36C3C6BFC310B412ABDC95F0615C5BC5180
C92F0640CE6A8AF3AE7EB181C2E4C11086C530DF109AB7631B321258281DAADA
221C4D03BAA1CB2A3368AB891AA0006AFDE458F28C88624B7CD1FEC6CB09AFE1
5B7C4C75C0C00F4549D250A8D8D0B82FBBF52438CCC1953B78E7D9D431A1B5A0
4A73AF4A83C1332449D33F89196645962942DEBDD82A0C4A86F0317F943CAF80
38C03C57418377255201AE91F48B7FC6E0BEA32C7762AC27D37041D63165EB3B
E7A22843BBBC2A76EEB0E1C3F1A5DED8CBC163A406C10DEEF8375D51CA265048
A748D61C4B7C040606D6661334764F75102442574818D8E2E330E2FE5102B7F4
DF3E4FF29268D62FDDDC616ADC7E9F13E6B8A5628C9C333261C279378974A281
B8F074456303CAE324705BE0751EA813402C3D640582C972655ECB16686869E6
DA64131BED44D2F499C69EA518C750370797B96D672132C82296E416D4F3B55B
FBF76FD52217FB7A494737C74DC1BEAE9A4370CBCC6A3B60E897A2A10ACC9590
B7D182BB0BCBDA4B8FD30EBFD8E947926A7AD4A39C3E3BCC457B16FD9FA2606C
C3C0740F437DF5F1B361E2AB0102CED6B56AB56737158CF03B694FC508079D3A
31ACCEAF23100219B1CF3A1F09D967E429545A65BB9BCC05055A705CC4D79163
209A2105EAC6577EA6EB40D70A6D3A73572D79A8CBE198C9F63FFD1470AEB473
2DA147B30FA99C4C8C7BD336D401F5DBFDE3DB313266068F252FBF712D4F6AA9
CA51714523FC48BFBA1E33E36A67FD71C4DCEDF3CFB6AA5BAFC7DCCAEAA40FAA
E6D4925126349DE06E101868BED82BB51E91185394F31E2C049463AE81F753E2
F863AAF5E286731902E47CC79D75EC3262338CD13F13C659D762DB6199452CC0
3F88EA12757D52C10FF38B44A09610AFDCC3E9E0EA6D89BB91F93DEA53A676EB
142FADDFD883DC4F0C38023BDA6569691729EA004A3D96F0FBB300F4030B6606
13071727F3BA34DD98CFE4972844FBA68280761E4D48476D645F86023FE852EB
25C98058B68C3F7DE5C9E739BEFBDA9EC9C8F800F862999D20CD6BB97FA50A40
B29FC17AA00DB566B2EC94DE5934CE2EF61401B1AC09C515B31676917D11D6AA
C4F958DB61B11DAC0032A4A9BD935683E85A26C1F42BEEAD417F837272445BF8
5B73660BC2B57C89B3CFF6C85E86E42A9550DA129DC0FDC4BE50D5A5CD8DAB41
09CD47BC05EC9E0CBF809328C5737D7917AABD0AD9A87F485E0843606F7BF8F2
C0F92CCA49C489AC56BB4FAEB441E713B499545814BC2B3B2ED508A5547C4B8B
182CBE2ABB754E07D88DD634787FE1DF52B38F3EED60778915269E71DB74E889
71C070FBAE2C25A7104589EF38806E811726E41351E349B6167CA5058EE84D12
58EFC050B428623FD1E621555BBCA26C986ACA69714EE285E4183ECA0F278461
1B128DDFD3B8061FEAB76A85459C6339FB76BD776FFBE44A0D870B50D5C08E42
C27D4F909B92A16E8AE2275E83777297529C5ED2573FDF8BD7D6DAC8936854A0
E9B5873E0C43A98002905B1F09DFBD253E4F8EBA8FA68830E6BD9979FD51C835
5A7EC5C1747D467FB498E88120CCCAF6A701DAC4FE774492035D2304EC4F9083
716CA7906B80486BB5C79930F2D085E30DEBE15A07B6A046946D1BAEC088EEF1
31BE9C77E57EFDAB7374603762EAAA72B0B40EAF746A43B2DA7552C98FEA1ADB
BB93C025B00E2203899B2C287724BBB8E65FE1141502C1218C55773CA3C6DAB9
681EA8787E7960CFCAF502B7A3066310BE7A115570201F827CF41845BE0BF8AF
AE8348F559D6AD28E96669BF76C5EE35D36E883E3362E8151A38AD6FA6AEADF5
82AD81A19F11688A44032481C0698FF9E0E60C0930F7AEC84C4D7EE11BFC90EA
C5CF755173A99C3D0BF412FD30352B46B6FB6D0B977BF34FB3EA2C40A1ADAA19
182C7E3FE4F4251B1887A2C605FE1895D3045D915E59246A382A2EF44013126E
974503017108146FCA11C477865B61FF0136346A52E994D5242B0EDBF68D120B
D216209890529FBB3D24651664E84B70E52B35750A4D746C647119A3C81D1CE9
54F4F359CEE99946657FE87EFB947F6EF31DCC61CDDFC39A27718813E2CDEE9B
EE0507016F7651418558D452E73137413161CDD6645A9C7DB42FDD905FF9EE5F
A98B2F04DD744B336C400DCE97D3384AFA5C0BCEF133DD294C2AA330081B6EA8
216653BA182F7FB05BFD80CDF441BB594FE01CF3180D3C3C1F0B13A98CC0339E
144825766BC7D4CA384FCD2E9256B4C11C354D3ADB93059FC37FDDAD6C78C8A7
FD6219FC44CD0E30CF5FE94C5F95054EB0CAB8CB0BFB75B710119768A161F8C2
76614552655D1037F82FE0218C4D4CD7BEBA74BED51AFB08EB16469390FB9807
1BFB9020766AFFE943870234F365EB6EF863A8103CA6089A8A29528E45C47F09
C56AD5389C3EE8DFE85E6127D09DBF020D89506CD1270C0B3EA235BDEFE3E247
B0C655D9FF7B893CC31F7949ADAFA7FD22C8F9537DE472B6C31FC9AABE7ECAA5
701B0D2575AF8A8596254E937C142B0AC9512BCF447499C2005348B848036DC6
131C1F05FE139D653820FB3EEA998267FB51CF42EEAD7BB3CF28571C437ACDBC
56D765E2C7F61226CFC5613463DCE571BF49F20E7ADF22AE9612796DEB913805
9A4C12D608FD1228018A6DF526D5C66A9F11AEC07A100C7CCF020413C69C51E8
D0541100E3DF71D501F4BFA0AE8260E23761F29F3EF6B7AAFFB00FD028B380A7
31A931CCA7A1CD78F9CEFB9B43D1AB67E0C1B90B74C62FF8FD0FCC210E26E80E
A2C146A040FB4729A47526A644743B53CF0CD6CE4EEBB414C741759F68C2C929
2B509FC3F79A0124BA95F9FBAEAAC3B3A5CC1C9744253567A78303623728AA44
9365090D58BB4E0B099DA528E5BB6426A755DD97B90D0DF4AEC960EE3BCDED36
FEC31EAABE44B4E65AC2358864B4567F289298A69F79F6981B190F26774B50E0
D246A2676F9821158D56882769E3AF7B6C0F8F856AB15E34B7AFAD9FBEDC388D
8DDEEF29E5BA5830B9E88A403649AD203CBCAB5465F18682746D4C6A28F9D30C
71556F7C9822962D39A30A3D5D4331979C914CDACD8E52AB927C4F57377C6E95
AC3B74863596FA34250C38904577CB39ADAFC1AC17B04381C6754327FA7C65AE
AC1A2839AF94903A7EB7450AA2BCC638BCB6D2318C6E6FB8AABF70FC0CEC089B
5B2A64DC911A05B7D0FBD3BC15657FCC9D561808E50151C166892AA2415303D2
ABD61EAD6A46E042F2988E6A31D07C0EFBD835CD0C526CDF34968DEA783AAB27
AD15B45820BA2C8942FB131136588242112EA1F17FD3C2604EF52210F343C793
DEDEFB0A2B195538D4B0C6FF837473C372E70836D4C5747C4EEB85DCCE969D9A
7F061B9FA20CF2EFB32200703EF58C425B9A7D27CE0BA78897210D30DA8F7CD8
5D47409E582BDD2EB2D8D505FF764C914B4C11AEA7B23988D184F29AAC5C274F
5694862641C8ED8ADC2A7166E893618F4E1CE1CEF3D26E28BDA32D12B10ED201
A9F192758B996B3B8750FCA90CACA049EEF3CF6CF84697FEEEF16F2290BF3094
539F0406AF0030ED0D0769FFA19112C97076BFF950438DC37E9700A7BCA663C4
328967C977B430B63CE6CDFE50A651EC13D52174ED5C933E8C8525F88E6CE482
66186158BE0A5592691CD1E265DB2F523B702D4D0DBA35BE10A4F542DBD3E173
15E1E0A224FADE62569408F6ED842CA727BF331033E4F074D29DF85080F06956
1019E04A19756A102E1A32153D5C6216D9C9385A18202E78D9E7ABA944D21851
498AD5DFBBDFD2AD3A45C0FC93D273C16FDC07C095C8183E89A7FA85A0C12A52
763634899F898B819309587CAE703571A817E2A7D1FE8496B76E5248A3CC57AE
914AC32F028980AA50C18C5C8C44EE90A42542106F909E4F59803685F804B0C6
A98E5D37F963A15B1C0B736ACA11C477865B61FF0136346A52E994D5242B0ED3
7AEB62353B9A1D56DABD05371F9479BFA4CAEC5CBAAC32E2DFF165186D73C527
5BC9638D8A733D3E5905EB634982BBDBE878E238A3AD7D54A0F8D49FFBBEEA2A
08DE64815E836B7C7D1B6B6FE2F8CE38A96655B073C606ECCD8C3F2C5FF185A7
2F8B21D6486CD41A80EC051E875EAA89D64FA5F2126CCA7E93636A7CCA2158B9
9A15CD40585926E5ECB3811D95422BE5D90F0E736BB7657CF2A0A5233E11D3AA
E27591284292FB1BF22EA7654C2797659EB876A0CC35E0BD79F4A14F56FE1C18
E6232BC798A227D8F8F92AFC1924FF85BF0BD5547FBF0ACD890470AA5CB2E0D6
1ACEF149B0A7B73F2EE0136A9C23EF64210422CEE9C62889C3FB5D8D1371EDB8
5EFAE402433ED36B610862F00EE394976F0A2F4870DB0C0FCBEB6D1699049BDE
AE9A5B364AC04F853C9612C58189EBF3334336824F029CF3315CDAC8483406A1
AC1DF70188977249C809CC821BC0B7A2F8AAF27E7E115BE85D71C3003914643D
2327692E464DE4CD3E76C93397F7998AFD5A64D6903F2EF571F9A24136315988
08E0F91DBA758A23E515E9F18329599819EDBDA44E136B801A216AAE5168BF1D
DF74179AE8478DFF4DB502DBCCDBD61CA5B5E20E1CFC04C7B74A171F41A35364
E573321A926C7C3DE13338F52F2C91531C92ABA181B7CF0FF955A8DA29F11753
6ED7582733A6C86215121DCF5B0716611CCEFD11F5C5F00FCEA5EE9D46AA63FF
7D4278CC27249B1329305788A6AFBF6CAE00AA6B9DA46C51F1EFB3D014219FFB
966E070D8BE5B5CD57458FB78C6ECB6460A281A80F502523BC02292E16AA3B9C
A089F7320D1B9BA214E43E83C1FCBECD57341217FA2783DCEA90AC383E444674
6FC85E9B1D817C988AE526DA4338FB27A18C3E1F59CD6063225001812694472F
7AE07866B1F040B42849BB161F8C5058DA20F5AA785DC0E77188C18435A2E7FF
BA595F0C054E96CC44F56932D8FD589EC2438A167DD3799972464CE75AAB769D
CB32014BC32FD730F22927CBA09B8CD2167352E6BA2E96F35F1E67BC40979F9B
86E0222012DCA626F8A2147F672557FC3E08A242B2514C24CD74D2A6056E9B89
886CCCCBAE6F51A33757FD8DCEA2488E7B130462CAC1C61DDD7BD36BFA9D85C9
CB0414FA7B15EC02E8C08C8A4F789EA1A232F44B216B0A7C6B898EEEEA2EAE31
DBAA343678B35948BF6E9180221EDD0ACCA578928815D319AF73A7E10B5F523A
8B2E7812E325EA858A25C26ABBC4C25E327DFCCEAC871356DAF0CB205917DFD1
A8F1216EB4301EA62211CCB8909E9C8DEC28A6FA8042B461FB6C3A5425419977
1B7A614E53D6E49EAF8E8C75650D5793750C61F2D28FD6296AE76BEC4B0044AC
2984337F2EA913D381318ECB6383C6EBBFB2B61FE04B0B13B26BFA8A80D62E48
64239BF65B841617AD96D9D7F89ED64975DC69CF20F88E081FBADA15B871D8EE
AC0EAB134DD682DCBC9C187AD9788F635D7C1D238E43779FC2850256D81DD960
1364534E0C331CAAD340B7375427190D9ED5D06C044AC61F885A346AD0BCB540
FF5D3D13C722603FD1A9BAB8481D5ED4B852061899B5682BD0A153C50E9529CC
B01112EE116B684BA5B21D162765BF1FDA0BC109AB896DE24B0A0D57D9F4CFDC
4C1FFEF87FD2B0CA2E1A287BED88AF473AECEE97ABE431A8D1B05BCBE69CF10E
B696F21934226B6174010EE3696D11291F2E3F06359FB2DF0AD948D5F373AAE4
A4752F9BDE24042B95B58726FCFA82AF11ABD26D2D81FB0531381F8800FC7ABC
5436137CB6ECF73403915F269B7B231F5D9B1F61DF7CB03421C5F46040744911
2BDFD986A3F7EE975F79735FBDBB333D136FD72B54BDA112352814FB6FAB9134
72DAB4547A50C2C293458B1D854EB79608E52F06734E2CE9B3962B4FBFB2CED0
CD7D1C12433ED9CE0AF54C73172253EFC739D7552C51C4BBEB0896586854605D
658D8C7681595D0492047E97CECDC3FAB63FC92DE5F64B6FA36C08DA3B7FC06C
7D40B03E7F03EF36CE0390DB45EA1F0B6AA0630DCBC43B1E3BE9B7BA5722421E
932D83657C904434F3CD7B4C5C7CDE111CDFEA91C7326AC7FFC2A65A633FD028
806459C9CE8EE40DBFB9338561B425E7FB8A486E8BBD8925F744645C55EE47DE
4AA52ABD988594A7EC882C32556517E396269C90FFA27C5A51513DF558A8B499
C7B6158DA671139A282357F5CFD4CEE0BB8C7C8ED352E0A1E6DF242BC75F285A
7C4D903A367CDCB74C56BF8356F94810910AB18CEE5DD843B5FE4096F520222A
20FE01B307960B1F1030F6CC9B504E1FFFCCA352431A0D5BFCFCFAD30F97D9F6
2493B0CB7FEAFC9BAF90B7025D2E35ECC22A152A63EC110EF4B8FFD3E82A1F2D
18F3F163F77EF399A73A1B5FED7935DEC964AEDB4721F177FC89A5AB13A06261
BD660253A72E63479DBFE0FB8041A873898332B8C24FA875D3E200A018C78BE2
E930457BC33AD2FE3614781E71AB4D0073D71DC38239BC688D3F5F61CB43AE2A
53FADAA5926EA5679791D474BC0B7939D43C0AA387BDC9184255A3335FD10380
3857B8046544BF2723FF4B4331E2BC38EE8787EFC7FAF8A4D10DF88C738EBDF0
4155D92D9EC67D91F7299AAC56823CD4BE926D0EE4E8CD015DD85E4004694D39
E05F5E2AEE30F76D51A3CF5FD0316410BAC452BD8BB544B57ACF2F9FE83E3E68
109B182044F27CA200B432D886A12EF6332152F0E30D38E2B0F2F1E30D973B04
68FD4F84E83950B76B1A05B4DC730087F385C524B689F96E3FEA51EF125D16E9
073543865055A37AFD20C49BF08EF65CBC703EF6ADD2DB56EAA02A6C8649E61D
7F5B5320DB4E6C7F70B76CB486438D247D0100689A73A26C5E0137C208DCF1A7
143359F8EE27AB1E0B8333DD55B109F616080F5BF29107A418F686DD27656D1E
EBDFFF78EBD97F40F1B3C7C78221B0081DCEE066E353DCCC2B78551535EE5DA5
2B7AF5030F8AE1482313610CBFB4CADB3DB95CE2C74DB09F6C18D083A389BF57
68AD942959FF0302B3225CC885CFFC8807635C4262456DD0C12D6542D9EBA6F1
12F55563444FC3D79F4B3A2E9432F8E1948F77146199CC80880EA23BF76211CD
865BF221AF4EC556835774B08B04CBF20D471B7C228958EF19C9A18ED7B135C3
300D4E6C8B686A49D427CCD0DA4E7B07C8D2140B854F2E7C3CCABAAE3D2A8083
7BF7F8C88D26D37C4A69365579571DE66F500A75420DCB24BFEBE3ADB38A6CA5
8290D557AFA6B2F76D3C2C0D7C2FEF36D9A72D75E95EC194042007DB1738809D
C388263F3562D6BAB6320CB7B552FFB89F11EA22D02AE6333848C966B1B1E30D
A2B09FB2012717AC3CCA0F72FD3DD6E6E24621FEC52CE047DAB64EBA1EEF23FD
D6D15A5E4B14C74D3856E17C875B7531CD1BC116AC4F21FDF43764C2E9BBC3FD
8F6C02E213E218294D1063180597B8C427C9B17202A03F53B88544455AA87281
0C7948B1EC866883E78C9C909A89DB039C9E9960E315CC0D5A741134B101D1B9
61CCDDA1D8C89CF7B69B3CAC447A2D2CBE22433B7494A12D6898FB52E8D60EB8
F100DC970A6F6FF1EC5403388B6EF347797DF580DA0E0A4F13FBF20B25DFF786
1AC70BF7F778DA38E54F972D6A17B932EFECCDDE3DE2B3521F190FD862092C5D
24CE3B8037AC8FDD3EA687834689DE2FE4B7759C944FF72ECE869A601FD89830
4C6EAEF3D52B31B6CBA3D9E7EA775BBA2EC97CC91D926CC76EB3300E9B6FA5B8
477E9788C5245492BAF032951F69E716001DE419883FF01BB562BF7A8CD1C6CD
40BBB35A5685BF03CA5AA04FEDEFDF24B58001909B7B03761FF2070A0FA2CEAF
23100219B1CF3A1F09D967E429545A65BB9DA9111A6D08A31D0797C7D0DF1D6D
88ADC4FF697C5CC0F670731EC605C2C85F79D5C6DD740FA2EAE0C2119F4AEDB9
BD5451F2BAC4AF89052666E690F8ACD132C6B29910190FD862092C5D24CE3B80
37AC8FDD3EA687834689D1ABC946C2E4E79D4F3AAE440A1F525EEC2713C0767B
327F5AE99A990B727C6C7020F14175225EFEA39202B10588CB9B4E44FEFEEDCE
7B6160978ED7FF4A5199B53C9F904FB174E3C63454AFB214A8944B2299D75F55
E0414E65AD6A19F8F0894C659A61F005C6FCE1A0E970036566CBD52B4A8B1AA2
57C2DEB9689E200925D85FA23439452A82E6421B44C297B1935A3A5DE94E8681
FC6842809C1CD755943368A9554B60AA09E892F91A4B3291F21C9C651669E0D2
71F30024C0488C71FB30791F330A89ADF521505BF7D84597813143C60D3D1A51
5D52CB8732BA9FB066CFFD1C50E9BCD1885D95B60048D2EFAC8D2CC435BC0F25
C44B4AE7D581455520DA75F0AA2AD71C12CA16B7AA13D89CEE02664EA934E077
7BD01EEC83BB5674DE327954754A34A9A04FE68A437B8306B8463247F1E54DFF
D17B997EFF71C0B00B951A7570A341DBF602CED898087B72FD370FCBF53C18F7
6B79AB072E704173D21582B641515FE91E1433A56A4B1C717A38CF9C88CB71E3
781E9DD1EFDE5652E31772561D5A448F9B520EA55BFA4FC1C8FA49F5377E1680
6EDACCB60F0D8085FA97FE6D2E960552337321D82B49DE32AE60EB35A8EB1742
21DE36BBA0146AB08A3DFE98951927F9C3A83202250796C33F156EAB4EE9BB26
12B1FD223DC6C8A48B36B81681FCADD2C6095F052CEC01B7D399D097BACCF6C9
E10E5C114D067892630923CD601E96E722DB1BE432987A61FC0FC6820AA22F96
7BCB97046EA3C4A9A3A97D7C031F9E8AA24C0A18B40E952E098614C2DB3FA57D
400530CA6FA97ECC263187BFD652DC36561D27A9335BBCA18349AEF42BB9A57F
831F6379060E3650CDB2C87FA552F5999A1B5575D6CAFCB00B7BEF6E47AC23B9
20F7B535193DB8FCC1FB0DA6E544394563D24D8C87FE0F2722FBAC78768C4A89
FB6E27C2FB99B97F2312B6455CB547B771F0F0E66A2A9A030A92CEC7F3F1B26F
F6E2D1797C38DF3097789861DA2382708D050BC6A2263B7F797BD4F9FD0EF0E4
68AE9691921512F7DE93337F31701157FF310056D421E594F949B0E4980653F0
1704F8963B8BF87DC9CA5CEDEBE5D0088AAD263602357ED1BE61FD58DFA0317F
A126A715D3C293274ED2C5CAD0C162EBF98632D63BC149DC1379327ACED1EA72
9FBBF3D9C2829B9FA5A211732448B8F3125AC8AB538565E06699AE5D68759A52
096B795F2DFD666A3ED9C1AECFBC3AD200383477D05545B04A54FEA1159BA81D
2F515C46229D50F7DB0820570898CE57EB2DC4F2D4F37A3B26398A1D5AD2F84F
0E1339008A3DFF0A65F140E43A7EA149580132082317DD4A19E976C084A28CCD
E5BBCAB3731366C3B74072044D3EF2EBC1CD905BDBE9C01C812B0C32F4F09AE5
4B9C67CDBCE3F58B2E4658532D7DA349A085E560FA3A13FFD612BE78D9014A90
8651C8C8391C12719AC3EB6A7652B3689830029B200A417E9CD3E5580A9B0D04
F36C41B2F672218763100EA3EE9ECDDE8DD5AB6A6510CF16E8CAA48D18DE6EE0
20AEF0B89AE754BF7F8203F0C857CFAE8A868BC658413CB9D65DFF018B979021
09935414D50E1375DC1FA058A26A17105A2469DC27876F4035544028390706CF
1ADBB96A74355655EB64342E5FB6E18F2149FCF4C0F743AA1A1A120843D3681F
9DCB79A8474270CE46F97DD10CF6C8941D49919570F2E5F06D721403053F2058
E88858EDEE096C4034B5A2C6FEA57D50A9ECF4529BF907C09445B3E47801F2A7
157FAA847DA5E22F00136F21273615D5288ABEBB427E01E60CCE30B0F2B691E3
A8C1DD510CAC176665F9F845E184CC0594188DC4771B8904EEEBCC26570D5C83
6D34EF4DEC34F23A4282E1448187B3AA4BB9002792269E14A11BA6A5BC7DECE2
0029034C88696775902DF6CDFAE2AB99ABA68FADE90898D7F48AED17DBE9CC3F
44BB85BC31F795942D5D77E3AD79EB3B6CF717E5CD434CE1C6B388B901F937A2
99F65C3217180D4BBDAAD2E96F91B4DBF12F6C352FA5F0492B73CCD90086FDAD
B941A35FC77F7364BB75AE2083C7C66E6C13CF17915C99F16A44ED8B88CB1B25
44153A1AA8D2DAAD95397883491CB46911D35870C88509B392E1B931F0E402CF
17A63993FEC0044612E8EB5CA65ED931CC5E0FE1F28D6565F3C195C8183E89A7
FA85A0C12A52763634899F898B83763908EC0A1C9AAD283809A935DE0356C702
F538EB0C2D835A9CD11BC6D7C87ADA05A734DEE08CB62CF82CFB0166F0F1C54F
38D882DDE8DEE28A07A9E0A42143E0FC979F53C42E821C769735FB865860424E
A7F5CD9AC21C7B10986B3D714BFD49F6DBF0306CED94DE945B5A67DDD8EC188F
7FDBE2A9AD81F7002A27F2EDE3459E49C27632009CFD9CFBB246A971A093D8E5
027D67A89EB217A0AD71E56421A3B1386C8878EBDFF132070DF8A4E24787A29C
5AC9DD10D3BB974C0C92B89BF728B6BD03C5A92A87A52243943EB3E77E6CC38D
EDBB2DB8BE7778936B71AE27A5FA67289DAAF80C0F5EA7D9E67929CF4142CD52
DC6214105CFC9E95B7334F9BB9C94C9D81ACD2DA6F0CD9653A11636472F5845A
F507C8EBA6518215D75034119AF139B07DA441ED1B5D45704665D5E85622B48B
EC700AF8F765FD970E1F82C2659A38F8F63251495D697C3E0E8E7CDEB23ECBA6
03CE654F0B4CB297E3AA3E9EF091E6F7D0D07D34102A25E12F04FC9F4B80562B
21C6D0B8BE94778C7E73746B4845C1ADD96ADA56EDD51EAE4683113F66F87650
90E7AAE59D8053AE0BA8DB3BCB2AC0442D6E7DA7789B74A83724CB18C0203180
8CECB597CFFE81423BC0B3D05BCF9C2F8EA64AC3C5F7CE2DD08FA2E5253C21BF
1C0C1DD432FB523701060720730E9F51B7626597A17CCED52E42690F9808BF40
C0FF302E4E863FE458E0DDE830AE5FF2FD1A26930E14FADD837552972E4375BC
3F6F857EF419616A0D2E3D646143431C318824FC3BC21E55EF5123584D5A3508
FE86CC6FD9A1DBD506B027308CF215ECA53E73C0C347A0C47DE886A1E1F78EE1
8F3B7924E56DE4D18CDC352314CAEBF065F610B00B529D079F2291FAA610FE8C
4CCD57A7A8C9F5071193E20C5358A7495DDE0FBC9B11349A03CB50C3C6E5F571
A5469121D122E16010687CCBA357EC5C1C77239733D652E40DC6F755919054DC
900685CE73A8D5738C2BC3A5CAAFD59260886FCA15CD098A1B0611374A7A0A02
E4EB602399853AA05DC6ECC02F16174606AB2770299A4EAE74166D0EC9965C87
B89B8C1DB7526B19F7F0C20B11FDB0F0656E7ECADAF295574EBED60685F10EAE
1ED416C4346753181147EB065D30A883FD14933F4B11CC112DE73301F7F888CB
67DF1D266655E2FF6B267ACD8E1FD4B60843C4A4DEB96E4C3F6F3D70BD587BE7
BAFA3EAC91AFD9FDD8AA23A57F745E383FF8BB6DC0C752C8AE387F1D4C15E4B3
D2C887A3C469F9DC2A96B15D33FE7C565961C2A7F1CD5D80B4B11525BD2B8C3F
6F760C8245A1AD9F508AF0EABE76207E935CF4233C2614BB02993C18F5228D99
AC686A7ADBD6EA7163DD1362A8CE7A17C1064CB861BFA9277E75B0A8C76AA6C9
98C9AD482CED7C243C9688305E326F5741E280311FB6537C611BA2451F461DD5
2B51651F15E9BE11CB03C9FDCFDE3700BDDAAED61CD52A7DBF4395E223ACFF1E
E359821663C771DF990F78D69355A8C1D072E20D0E000DBE4A0656BE7F021DB8
63F63DE07FBB104CAA97C01188ABA1F0AC094030E2F0216F900EEF6D6E69E994
902A4C425BA976EABF2B11775929B1296FF602F903C70BB29D852EFCF3751A5D
80A8849721E155F887EAF14699937EC5E60FFB3A13AC9FCE3CC664E6C09D19F7
D23F8A75F6D1464A7A8025262B1C95F281E0164473AE82AA9B11484D9D6F8B66
D150591E00FCA26EC8CFB1C926563979CAD433B91341797AC8D4E9842A26D6B3
3DE375C1AB93D839DC4F2D41639E03C463B9D53DF9D649C8017386EB0C9E4399
A7AFD8703D384864AF49F4EA3FE72CC66F826A3A692434D4D3BE6ED6DABA6016
F812E8D85184C463B9F9044091F80D435E1366EDBD597C5085B9AC04EDAE551C
BE68E84519D138C233FED4D6CD32DE3F8DDD32A240FD49AEE908C7972AB2A420
AA567E0BA6781213329980CFCFB18CF7CBE6C7FA3C27329FE9A10D03889EDCDD
324E112D5BEB28766C0B807B8FF1FB8B81D0B4103EBB92A3F801177BDE9BDD61
E288E9C68A020BB9427C07939EB5649DED6075ECFF58FBACC2E7AE26BB9A0546
118C9BB6E9CA78AFB3C7D87A1C043EA301C3006F857EF419616A0D2E3D646143
431C318824FB0C49362FF7408933501D25922724867F1084DDAF1D0BF513B767
87E4A2F56EEF9FB845A2F7E97795A15160D23DE3668AA3D7DA417C906CBA8079
93A9162700BC9A16725D6510F607A4139FF20EAA6FAD50724816D76FE683810E
63BA4E40BA8E5C0A6D51ED6EBCD11B5068CACB85ABF6D9FC648CD35B1E038274
11BA7AD177E43BD16802D27FC2972286F2B152BE1F52E47D6BDD0DCD828F689C
74CE0750AD5FA10FC0E6B5F36EB62D69D698EEB767B4E9FFE73FCDAF8BD20876
DF126296187D1364EB31556C2401B79B8A2E285ACE63FCB0B137685611FDDAB2
E8FD8784FAA7132BE44229304ADC8A686D6732B0207BF2EB32EF468462CCE9D0
CEB6AFFC1DB954D41CE677D750AB42C1067EDFC2807B3CE00CC05F6CA1D87A1C
83530D8ED64611BEEC2A214EED19C0949910584F7FE49B03F896E7FCFD087089
E5CCD4368BEF556A281D166D457F08E37D782E7467A552F704EBEAF9F9AF6A64
9DD0F7E5D01633F0D869255EB21B016AFD3655F66750D3FAD23810392FFC09EF
C2864447914DF3ED2C719753BB1EED9C4359774194896CAB73A2F2ACED52AF9D
066794BEAF0EB7F06C1D428B9D34331BFA9C9A08BD09FD5054C8388DA82C3566
624F6F7CAD4242AE6C63D047AAC8EF82134EC418EA69430C0CFA1EFB2B4F9BEC
48808524500F3A6571A6EA4D65079538C1F9087E6FC665136B7ABFFE8DBF1184
D3C3AA9575819DDF023FF06A5F3B1A51AE4850C6FDD082AAF6FBB07DFB6A6227
A73AA255113DF4821BC5FB991DC6B178B121D38CE79E3AD729E30028E43296A0
548A7C64326F696544F6B1F129A854A81ED65184618E121FCB80CD031A30A0F8
7D7BAF534E49D13772304484CE3BD2A9C4955C7691B72AD442BDDAD18F30DB19
0E4D004697B5BD861801D55698E3D6ECE62CE5CC9FE34A8AAB8E3CB9409F8206
F24A189E57A0B5C178B7326860AF2A334383A1C7028DB9A3509F974F409FA0B9
5E779F2E9093E016D90FE788F6D726A04A5D06B0C05E69A239F52F5EA889627F
19006CC52D9E451DC21450FD3DBB18715AF6BAA336E150E02FB2831359FDB957
92B2E6431DD24BFFF2DB62693EDC9C5A4FA4A71EA0848A9364BA6446D5BD93EE
9AFA29111A71BCFDDA20BCD6006B0309EF0926199A60E28CFF48B79840BCB88B
39475A7E1C6815544584C34DF0E22A5EB61F0C232B03C08B27866537A9CA5F4A
B3D997E3153548794D9232AA20C29B6CF38FC8562EEA94D43B47E1F7AE890D38
03E91CE2738FABBC214C731AD70893D5FAF5B4BBEC5416501276491B79153F8D
F73808CA8940A65E5F0D1CD06A704E946B53768B5F92C841F47646E5CF24EC08
A8FA2348D271D2A84CAFAB1A979AA7E43DAAFD896177F1F70EADCF7E077FF92C
EEE279D1CD8F9B064103EEDACBDC40EB2EF6C28E91A0A1B0D7A7B0ECECEB25B1
8BCBACFAF313AC51BA6360C4F0BC34696FFE3C105348362C617D60BA3678C821
5B9F542D81152BD47EB69563510C525D05E195960D0EAEFB771050039A2F1CEB
A3DB1E042443B665E915991D932209B3F4C86295911FACB51BDAD45965CB3E4C
D451B5A1D6149A66BA1CA971CDE9629C0B16424CF3609285DAEB0115E4A8A145
939599F77990E19358425614D41218CD20852B1969CE91DB3F7B7E87BD9D405F
2E29BF660674457A70FF888A59085E68EB262A88EC25462A4A9EAFE20A956D43
50D8C90F998103A821C35734F0153950E5F72FF6A8AA6940836AB19ECB89B9DA
9A93D028D28EFCB73500DFC2F30D6C47A485B062196657C6B0CA8422DC11C6CE
AAD52991D1A9E5969D76BDE4FC976074F2D623721D38E3F361A941457847C5EC
09C01622C089AB3CB216A5C27D634731F3CA55BE5D1F91FFBA4A232B68F80792
19AA89F699A8C22C30EA308E6A5C8EEB5921F493C8F5B7691CD5C39E936ABF65
80C629A7592A909A4F89FBE2E3EEFC8BB99DF3B9CCE8FA93A71128B87293E690
C242ECD53B604B30AE8D7172F3E47139FEF1D23D2F930AF1B361E2AB0F5B11BA
428CD87225C7FF28FDCD4FB898A052A0B1A3C494AAB27E0C853EBD237F5FDBB5
82FBE603D54C4AA4887AB453337003BE0392AF8359E416849A0B2DEBEF46E3AB
2B8DE7532BD19CFDD69285BF725FB229FAC5B04008CA381E09AB94F1A9224922
B4A5C23593F8765E8124AB49FBC57F1B0A7E8F6FB6C483282DE613E28E0AB1E0
441517818CFD111E32142FFB160DB6422A5884151A4054D6076EF2F506E3DB3D
67A2D10FA038561B4D714B08BEC08EAA7D1909D5833FAB8D6671564F796B070A
2B3717577FF24B2CB8D87BFCCC85B1F91277DF1E391ED325F8383B11D57D9AF5
0EBCF7152E3715510FBF60F16750CF58F347797DF580DA0E0A4F13FBF20B25DF
F7861AC15FDBA1372D5D4D2555A2E8E23E29D8C8C5F39807B5A46FC1B70A9ACD
B172BAB4BC144943B3D3FE06E95C6B69FB006A083E8592BC01483D8DE50B9A6A
C86F872ACFC9489546968514D49014716D5975AEC37D2CCA662CFC60637C65FA
FBE78109CAB35AC2730A761CAAED96AFDADFC1FAE977B6BE8BB8B73909AA1117
B78A5506192B150BFCA046A36DFDA767967A43B3D1F3FC4F591BFE0EA1D77EFF
0602581EEEDD6C8F062E3E6783AD762482408DC1A5E5C900A43B0115F76BDB75
E9FAF644E1879C37A1E08DB03EDBCDA51187777E14F63F0C62F40BC85D30FFDA
81640FC9C58E6C4A95E1027273D38482DCFC5F6F6E64E4D57EB716ECD75C6A6C
AF0F0FB5F6A73A47FFFB9D63648979AD6DFC8C619CE8FE1EEE3B9FE2203DC6C7
5B27035ECC31BF4368E12CED705A5823BF6AC2348B46BB50393DD2B0D8A303AD
186A5DDB0595138C0E3D757E8DB9B67D98219241C0DA67E5BEC040A958B14BB3
D782151402720D5B4C77D25AE31C4A75BD8C7EB02722DA8D89430EC74AF0B255
2C97BFBD1C6C0062488763FDB07939C52A5D0D17AB4CAD27D6776A05245E5663
DB78466EFF0F8E67FEBFA63628520A97B48285DA87CED8A9520D6679CBA61BAF
3ADE6EF9B4205BC43BA3CDA488E512ED42BD142526394C5103BA4718D58F167C
B6741E06D4CE5E269D3AFCBBF060F416C0B747EC5BA54AA743154084CCBF021C
EAFA448258460E39549BC1781B89BDB53A9752A519A9BBB3CC59D3FBE6A84F1F
9521B6E05D0A0B2E0FCEADD4932A5E64E2E417C6B64D84B19F7C2D7C143E287A
BDB12AA1761639E638CE9D89C4CF0AAE1B38A2837E19E5AD8A4551A971DCF562
769FC5E4767C4CE91F8896FD3FE37FA5F235AE1BA3C6F3547FF24606651E5887
FE8CD61F46FFEAFF4A66DCCA05B42F9B762FF8905BAA1B6D15269F38A2D283BF
456D5D8BFEEBCB5B69717F22A0503101F9953D8EA3833BE27127E1C489198821
227C1ACA75B845E5D0C0F7D8416730AF4BE4FC931E965594E03272CE6647F502
4D51CD78D79C802EEABBCA93CBF968187FFA00C2E8D8E14D1017DC8428791C90
0E377B78459F629FB32E5FF3872C95854381F1D0D070EE364ED35377E1DCF455
DFB59E53117FB961AD0BDD708C34E6B895AEF03EA76FE4BDD1BECB4F085845D3
9491FEB49ACAAB78D15ECF938729214C68FFEFCAC997EC286F30AD0245F229D3
687ADCBF4D6FA08D7289D923565955106A2FFAFA8C9F63693D20446633CB481D
C110FC14AAB8E9264F5A97105877EFACBDD14EC74FAF23B7784B64C524C2A312
2128B8383DFB5DA7A5A97407F3DEF442B8DCCDEC2DDA26ED78D546FDA83928B3
BE98031AEBE6894AD20C707D6AB0FE0B28A607D5242312EC254311435101EEE8
6C70CA637B9996E2CD033AA4E4A7DFAE20ABDE997CE19D306EE564EFC9B18C70
02F76150B70E79387F8C338AA7CBA5CBD0C64D459276BF2D8F25F13137C7F1CC
459CB3B23FF9941BF214B5B5AC3E4D781DE2C5A1D799C37EB49300F5B1ACF806
87D6383CA578157328AA019A4616E1CF60844E471951730F598331430372E9EC
7FC8D62B62EF029DA9597ACE2FA8F5AAE91606BC8FB9FE50103F0100A4DF83EC
8118D800F3B2A7B5EA03E16B204962BC68AD757C7131E0EFC7FA91D2E9AB6B3E
D5569C5C5673B880AF76BDCD4958E166EC99FE60AA5334CB63B98D4A88FC1A9D
7A3F00E21C72DC6C55F36DB35C15D5A480A1C9B60CD7C76C0EB176E73C609F8D
0E1B5ED58FEA3576D09512F8CC1041A6FCD1E20CAC60BA728EE459CBFB2869B3
137FB82A56592F27FC27F1D49D5FF4BBC0E1623180780FB423D096EE2A4B1936
12337A6D180D9FA91E94F858DB8F560E9C740446C3D311F71C48ADE52E536208
334979DFA52EF5DF98E3BC006AB80F8ED18036DA7E2AD741E7074EAB05EBAC5D
4AFE97D7071C95A6C055A02AC93F632D57124BF3FC0BA485E050DF883E4B2767
E236BE2685D658B0A0269A1FD38BAB95AA31DF4BE8804458E1B8270B93A5B74F
F64283F15EAA51DF4C74CBB662283EA551F36DF4642CD37869BC08F102BA0EA2
EBFBC82BDC7EAA3EF5B4891F92369E9379CE45F6CBE7E3178917EF87FC1E58DA
C0F5A84B217BD0B75692BCF2B45DD711488A0E98DA49661EDD60013B3B394283
857632A3737C5327B323891B54B03BFBB05D94BC32BBD9B63477E629422A5E9C
5E8CE27B8C4B6E8B4F056867F1C0B014E2B65B58FE6D0C651BD3FADFBC43552E
07DC8EB2CAA41893D904634378A01D29BA705CBAA7A05DFD55671612F54B9647
84C7109E63150CFE8EA6FC2C63AE316DD83D7A678F192362B8884E09A4A14466
1CA92A1D608FDD4115294C4BAB7C7CF659E73BD53C618D5B31F5AA87E1FC2C5E
1DA797746970F1BD868770E114F3D056D9CDBB8B940AAA1A76E4DD9DAB1FB419
3D67613658C8DEC14710626AAA3B0DF4912FF97C84BB1B5CA369E26E4340A2DA
D2B7F770C903FC1396C369F5A3955DF3CCDD486CD0572415E3983D58F7E3F7C2
E132CF18355263354E8EF809B47FFA7904B29AA1317F1B24E76AB689F5CA4D7C
D11E96168505D482A9BEAAEC1D92CDD7F4568FA0D137CBCECCDB584489E59D27
7A79AFE4A7F12C144C472BFEA869D835CAABF7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE505B8A69335E25F98573BFAC64A02542D3B835ABC68EE4F
0A1436DD48E963348F6F5650666F6BFF72D385A5FB67448213B032991B4970C5
79925CEFA92DDED5BE33EEE8275EEE83829329E11E4EB1E2E16669B21C3D36F1
FCA9535233B0BB982F75ACF33109F8AE7ADE4954D0B1E1802008B39E90FD6AD3
2DFBD4E8C89A9FA5772BD7C4CEA7C8F8272B4C34FD26058AA9E35E6DE5D8F2B1
B78BB131F06294B45300705B786BC0D0653933C657D716DCDE61AEAC6DBB9F5F
26C309EC6AA6E4BDF86680F4004C27DB20FEF95B0BE467B5B7F436B45DA8033A
3F755FBB8515426BB432CB6210B93F60C98D1DBC60E48CCFD9E1AC3BDDF3FB69
A81F2D36111B48751416C9EB562F65C3DB7A4AB69D26B5BF8D90B5758CD7435C
20A34F783A4273244DA0E4AB11C078B07BF2786AA78EC0527660082810DD4D12
583633A6CDA00B353267B2BE5B8178E6B7889A33771F86276E6F0FC729A9B845
FA4DB9CDCACCD1804B9444C284E42F73764E076EEE81285FBB3CCD86DBC5251D
2D38483567AD80CF22E61904C92A4FCD68F8C5389BC7B4DDB26033F03C778A1A
810DCD869D660DC33865B7E7C25820CBE0AC3DBD4F5A7BDBDA43B38A384C2DBF
592B0E0A571B36569CD507130E8F9ACD3CD20D9A4008EA074361239D8E8052CC
15B53B907E17802B8F1B15359AA8D6F03661719C67527EB25CCD9328283C9F0A
171E48CEA273F000F765D1CB762C01F0925CC89920648625740073D2F18F5E53
5CF1F0D0D082C889B4F6866E72B09BEC4DECE4EA88FDA367F98790AB0323A4FD
9F2E28963D7CC8767E4719B001B2B4D6E8E7FF796C4B5FE29DC0F93C2DE0ADDB
6BB87BA8423296AA1DCA216EC5AA96CED8CF68CD7F69E003ECD5D48EBA04CA5C
2A3FEA809954726348F27B22E5B99CCC94A4CDB6374418325E79EC4229D8E137
B3C9EF090C510DC30DBBC10E10866513910B65C0B9F0760B7D4F6D28B6CD5B5D
C818257E2541C8D18975EA17CB21EE4C09636917012FB05964E8014BD979C2FB
36965D880AEADADA8D7D37ADC90C999415AD8B6D0F40447FB5FB330A80601B1C
79EE748172D7503E56183EB0E6818FA31EF967
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman17-Regular
%!PS-AdobeFont-1.0: LMRoman17-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 805 195 0
%%EndComments
FontDirectory/LMRoman17-Regular known{/LMRoman17-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman17-Regular)readonly def
/FamilyName(LMRoman17)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -252 def
/UnderlineThickness 60 def
end readonly def
/FontName /LMRoman17-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-400 -286 1338 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105D56139855A7DFCE26D44F42E43DCD4B09BCB2
C0B13FCCF45D66724D4F9BD1AE3C5DACA322D5F106264D18B14EA595343FCFF2
E1123332F6D493151CBB41DFD055E2CD496D222EF41B4531A6CF94D6BB6825C2
1FAB496F22FD3B47B1E926B9B05CBAE6422EBBCEC149FC0C70F6F86A0F810CDA
0AFDCB50F75368AC58AE244325EB6CA36EE300BA83D807CAED125E3B16569E7D
1AA186346F4F62D8BF78541FD9DE8C6F961A6753785923F4F221656FE25458D5
0A9808613A1EC6942E9B97B18F0E235388746DDFB04A5234ADAA9F2B59A2B48C
0C094FA865AEF464EFE617DB7A93BB5C2F57C77326A329B432A6BB3AE294D926
7D1EF387E9DD04FFC10FDE445DC4ADFE15D2BC0BFD34906D473A59603FB41480
D35869D2D71EB1F97B5CC81BCDC2ABB45437BCB13EFE608A1DBF25BF03B63C27
CF678B3ABF5C53DBFB7F3E4AF705F3518F7B3682A0C50B4F026D3AD818ECEB10
ECEA905FD14A5D0D09B7B38A3238990CD98B0256D11DC6907857007F39B09C8B
9EEE545A072FE5A265C9EDF7CED499645D848821594918F4F56B9D154A316567
BD9A2462398F07C1CD521F9F3DC87C721A67F56D69470FD29CF72CF5DBC7AFE7
C602AD7D27CCD4689F232657467C14A5FF7F7D1BAEEE4E303119C510A0B277CF
F068B7F4B6EC64A5D969993146E720A1EA0524D58468F113D6E65D18FC32F4C3
90363D9FE4273E24589ADB87E3094725B46F7273BF66A03998BD0D14E16A1B78
96474EFFA7572D9D2E0EB393022F3E8341FD99DC0382C7972E10609B64468C85
4DED836B378EC22C47D64389EC39A4F9559CEBE3FAF93BB8E469C01434A269BD
92AACB6C24C5C93C36059974A75F1CDC349CFC145EBC13857CE69AD4F14FBF35
AE0E25E3A1B65947D70FFEB85C9253075B5D04025AE0344EF76894B658A64DB1
299509A1E7F6F61659F406C52B44259FB9B1C3B24665009041CFE641946FC93F
1206E30F2B6DC521CBD914121E7536ADAC45D25B5C822A2336CD2380B962EECD
87067B67B17FAADA6A7DC0C81155F89A24B00F079E15412A02615B56BCDDEB8E
68096015F5498DBCF55453A1FA4D7576144F5E56B96A6754C10A7CF0C7CC4D4E
F62EBF6CDFD17640BBD5AC1B23C3F46E77E9AB8D8989F1EB54005ED80964BB9C
7DEB8602373C23451DD6D23B50BA1A7B2A17E1A8397AD291A3380AA884E7CB26
A243D7AA497B71C1E241F728FEF7AE18923D4E4EF922719BEA95A88E93D13023
3A518B48040D40CBF94EA8E15DF7F0D97F71AEF4AE5AA2409548C3FA69105168
9741CF3E4A01E7632E4A89ED435F4F843AEB0DE2D08746E18A70133670FB9B6E
9F731B075C021DB2F0DC106177F0F23DA7330604D0E557EE03662BD31AF90587
A45AE742E8C9F3648B20C687D77FF83C5898C718A1E73AA06340D67AF3D0B452
5D7DEEE210A4239DA49D23EC2BB5E90B87682AB0267EBB3BDACCEBD717AF3271
DD9D0788F333A71FFE65DCCA47FBB31392FE4F5F94724C1B4B5EA572D3FE1289
FBB4C85DDF72F5F6B01E30B2D9F88A521B47C6DA9DBF0F87E5F9CC7BE01927BD
85A77F1CC33CCE480B3B81118510A06852EBDFC8B36B5106F39EEA082A9C50A0
57776D363F68E42CE70C176517F8F13EEBD103E038CAC430E4350E4C3DC89D78
925533ECC71B411C533A5CC6E235B63CEF024C8BA29295110CAB27A95C5FE00D
11D395303092E064F9EBB05F4A7C48C76BD9C1ED9DB78BF62E9AD2222E5BEE9F
D5DB0DCDBD7CBBF0BF03BE50426089EC7071143F51776050ED33CCDF1DC4CD54
AF2B27F3898D35DBACB95E3C2FC652BC22248C030713E6208B0243824F27494E
FA21F8CD131E2A211E0810D651C175A7E8184B1F04F7346F67ADCABD02AD4126
F724976A78C97BB968A8EACE39361C97C925E515EB39632D220FC1BC93C07970
0F7159438C42FB1CFFCB08B0AA19301D76B7450D4AC531D1590368D32CA7EAD8
7D6D12938C8C15B97382859632903B05A54B2D50C6F8AE4A852A3DB40FFE102F
7C511BEDC3CF77526FF59FFD601A6123A48DB29D4DC83E3B37D07E571957BCC0
50B841774BC20AAF6E6DC741B6D309D7273C28886CAEC6BAF51D01EB91146D01
06543A53CC16344BD81A194FEBD7861393771160A0C3D4B521916C7DC880DFA1
EE1E270FC43E30AD827CD0583D9F91D8744ED7D04A96240A6E17F35E2C336EE7
DD39FE52747FFE5802597B7E6B04B22D96A6086A3A8247773BF93CE143AB03DA
13405FD339E514C1E4B7DBF60FD0870068140DB45F90DE9249C5AC63F2CF8E1D
94B5435159884E743DECBED602BF78B1AB32220AEE7C75A5BAC24E9E43AD56BA
6B5B915CA43DD6A4A1BC869BCFDBDCFA8C381B3D58482A0CC98BEAFA9D68B7EE
0B47644B35841FEF4D7ED706F6B021DF7D51EECA6EA4ACCCEAFD45E534FECF04
734C1CA136DDC7B924A01118DCE34CD419D74072BAC8B84509CC88986BD3673F
FAD5EF6D07968BBB7CC49699FB89C48DD1549B730374F5251C04E601C27E854D
53B85933369479139F23EB1F9D299353CDC99BA9CE2DA27D5F8CA1C4A297E478
2B90379F6445BCF144A9DB591AD3940F8B3BB3E8C7295B779748273C485A5F88
DC1F97251302BCDA11FC4491EA792C554CDB77B0F15E91C704206DDBDEE99048
E6D8D3238AB7B166C4CD509C71D11CAD02ABB6357F0AEB3073FCA9B33AEC147B
3FE4B615F6F492F8D3AA12B7E2928E87443D6FE06971B7B4177CE8CECB8FEB6E
C5CB1E2301B2DCC11D878855E958B2C005BC3C75F49FEFE3278F08FDD23BF1D6
AC3D05EC001E45AE4B4DF4FFA56A85E06839D169A95F9D65F5C97BA8936194BE
B61340EF3F8AD3E1BBEF209220A27CBD23A3057371330B4041566CF5A666F6D4
F21E2D20E13788E5C6CFE951C45FC49196DD8C36353A3B8F968B1440C691B1FA
7176E0CE92270D872E9661127D80FD783E271DBEDD8994F8A2E9F96F4F86C4EA
276853D1D85C71F550300999F2BD75F2F13192C2962224D4E3873D2DD75BB1C6
1281E75298D261EFDC3D92A76A55B20FBDC8F08B4857C2B99E52AD0DA876CCCA
10F4DD4657C898C9FE32ADA265685700673C65057BE93BEA6B23FA0D592C03BA
3BA078F55FC5DB77399E2573FFD3CAF3BD21C445F6B6F94A5018BB42F710D26F
FFA12CFD0E9247BD4F2CE894D6189EA6007971669DCA948F18341306C3422922
BCF391BE9C92FAC168E7DF3B43FCB4C9DF1736074582183309AE031B66B70D78
82E0121A128CF3F3B5E6428E1F6EBFFC5F21CC28D856E1923E8FDEEC710B6CCF
F25048A502378913DCD823DF8673A3ED3D91ACE4B124110BEAD2A3AC3617AD77
C899FE86E54B8BDB1490AC76FF84E6FEDAD0E717F204FDA7AFCFEED49454E89D
0225909B66F2C54910CA8496E87A17BDC48F8E503BD8B6C24BBCE684BC32D3AE
C992B6A055C0DF44E4C2C9C3F13FAF7100C965D4F552E23AAB63B382FDD25679
BFA57D305626FD09C0DA1E3325CFDCEDB7655264E5A5CBFF0E4E7E7536E7F6C6
21296A7A76B6B93D28A18CF021042D11CCC1BC769ADAAE23459049C09AD75A27
D5D356DEDABEBD4D7006A268B707DF25DC59359DAE2A50B98AB2D2D3A6081AB5
0C2A762335C05DEBCF002CAE6436CC5B6FE26688D3AE86751B8E0C9251DD4C68
226F267C021CA4C0E99CAF890E36E6AC08E1506441E64A09CE495A0D19798520
625C8E686F3F263BC002C8884F38F3BB6E09768DA949838796FEDE5D81709D1B
3AC99444E7C55F697AEC354AE5CC71BA9B8CEA1FEBE62D888E525888557F611F
B906D915352458CFD5817DAC157E3885B8EBDC3DC70FEB070F64ECB9A680818C
C95EEEC0165C712FAD81A476D9F0942E0AEBE6BD0EFD1F37687B723EB42BF583
4C9A0F16B9F74BEE52FE101D2897009ED4E791BB2FFF275D1F3607DD9ED193AD
F2C24BA5468889403E4EBF29885A69D8D51B47E08C814B5A0C25055F2C5A676C
71FDA5E29DF4C794A4FA812B13AD32B28BC9B0C0E3C6C043C47CEB610EEB1C7C
304449084A11F5AAAF62E1CDE6B88280D2580EBD61D7CB962C4EA67DDD7FB060
A9FA8F120B9B0ACC23C3BE38506A74046DCBAF014B7A4389BF54308B3DC9D107
38D919BB7312844065BFC8C868FB6AFAADECA9158EC9419109D47C0ACEA9752E
70E2C36D1CF43D1AB5EC07FD02651DB2565E849E3C2089B5EAC79E8C71C2C784
871083A4E385C64EDA6AB481E37DFA97082369335AAA53A4D891DD3CA40653D3
5B5A51CBA7A97B8B09755D3D61875115365E93E4896809235571C2F16B6692E8
41CE94683B5EA31E9E8B0E8F051215D5934DF2891D0C954B079BD2977384B96D
8464FEECA16244F6181C5C535EC9B0C8DDE504E621B5887FEB6BBD37331DB406
8BE99D304F82B16B3597E8AE55B50C2767AFD6471A1F8D2A1F258CC20090F490
32F24ED8F7853E8D64E5DEC1FE3940C0A3B942DEF600447D0DA19D9FBA34DD2E
646C135157A05B1FAB9FBBE250F5A6394DA08A88FB7197963BEB37967630250D
006707F236AA379231DB5D3C332A2EBCCD173513A7856D01915A183E58699AAB
ABF8C66B4353A45C3290A238478B29F1588ECD63002A855A43C3097D27E51314
1B91A947E0A1C2BE7CC53974C6557AA20ABC9AFACE5BA95779D124604AA59F97
2CE2191694A19FCD8E55063239A22723DA0ADC91D3BC6A8FFF2E6998F2C4B4F5
FCFCBA5B07B79B87015A90D41B59DE4B5B54076F7EE652220C5CD20A575A917C
9E7A9562DA5312AE94EF917D9DB15696E17035899FDB03EE065096ADE0BDDC44
00A37D6E1F717DD65F6A274994CC4100035234D8F9A6363E7A49FC22BBD34D08
EB7FD439A29011A91258DC4B7C64E3174050B7C8FAD56DBEECD31FE55E59DCF7
E38BF93A153B0082245B574C006312B25597F837A3A2F5C501AF422A313B47DC
EC7A019705E2CDD6E03C1A537ED6B29FF9D2227A5447F002948406A8E2A4969D
C1FA04ABC51B7387109C1185AD5648C12F4F3D3E97B8926F0E4B4693B8DB4AA1
EDD6D94926CCC3097E9FE7922F4D6DD0447518D11B4CEF600EB513433962F7D1
67E1A06E5A4BE4DC4863C90CB52949603C0727A6A61EF448337E748995A74E9D
3DE60DE90966B9A28289434CE61D7F5B5320DB4E6C7F70B76CB486438D247D02
315D875A422493C3E2B5187EA654BAB542981F079D7AC77DA5BAF99675D4AE97
6E2399DC0992D78F7634C7F851377625B5924F5370E9C13F0A66881FC91A4FF6
F1AE7F734917DA07D0741C6CE0729159361D233CED47B7985C872D7DD3FE4DB6
3D88B16327359D51745FCFDBE43546E9F2E6E0F9B59485264D6153646634A1ED
34A59D5E95524DA50EA2A8F3E6D5BBA1E2319C65E68A4ABBFD0D3F861ABDE24A
ABF7BF07C8C599F051F8181FA2DA8EB6CA21B85563A11A1C5B6FF398F35BC5DA
8C0901C0933C6BD33379CBB77C99C5099E69C8798D2CDD59871A304EB9F241E6
D6D1EE9CE21AF6B0637AB23DD743CA174075F0A756B226DB7673920A2C426EEF
8DA67E650EB7B1DBD386BFC9439A37411A466AF67E5372FE007CDC6DD09BA8EA
1DB8A81E4164F827F359A4630C2955964D0D808C983EEBB1E7A05CF22CE0A8FE
40F401BE961183024AAF9B9DDEDD4A99CC2F0BD0358E73D500D9A5CF19043C6E
C2DE1E3297DF93CBA6EEDDC1BEBC9536C17D7F7254FF9DD927F30AA6BC09F912
9B0F58E7B6A2CCC81FDF9803C210AB2BBB5DC8E1BCB1393ADC71A36AC0FF1968
8AA91D7E6B270128639A86DC6412958577C144591984D9E8EB512D07896534AD
7BCA233A7D21FDCC48F92986F516FDEC9984270692E476E281AC6E7837E2BF45
A9DA7EF414818235ACD6743E692C1E52E5FE51543C5E421C449E958DC0AC818C
4D8691E084B841E6A856A4DCCE2297945CD386F8E6A28A5AA2A6206FBC132F4A
BF5BB7758DA3D3C9B178B121D38CE79E3AD729E30028E43296A0548F65EDFA7D
105F375EEB7585683D08F1DCC78BD17C233D9E16487A929DEFCF0103834714C4
2B1C0B53164C8FE739702D4973C92CC976AF06D7CBB5667BC5737A6818175D41
DFC636173D5D9EF4C45B087BC34E8F14FCED37AC07BCDEEBE8D06A555B642D68
6CB0F0DD3CA419BC2D3096653DF3A1A9D4B70DC521B212129CBBD99BFAEFDDE1
D324B6EE0EE9D75EA112DA1C60FD628B806D89E773937039E05CBDFED62624FB
8C497B4F9E0CA92F06C6868A1589935FD90668FF86A9BE37F550F08745106417
070088791A3B45F5314F648AAFD00DE61BF6916152F9389F8A551041B0EE4D1E
1AFB6B6FA6EFF9D626D24C4FCC92C4377955F6408A0F6951FDECE16DC97E9998
4009138FD35A6FB03D879D900E212698367D13499797B79D0F01DAECA9495B07
2911CC814C19D53B95DE0071E3A439D3C08FADB6E7A170134489283FF3BAD560
02C296953F4C5295D0B51251CD17976C798B58D0CE0AAEC52AD93AD901D81DDD
F75353BF0CB3E7444A286C3272C05FB96EEB6C5D1405F6538F88EDDBC3400477
33AB3AB0D27866E1C8EDC2E140433640B24F4ABE14345D6A3A253C967BD3557C
47DE1DBB43878E3EF52717811B1078CDB36CFA524F522D192FA4ABF53BD1A287
04B84939C7E339BA3F4402F2C9EF55D46057C73CB15B8EFEDD59314CB5B5554A
C9F23C12D7E0B65E32A8EEA690C33C850A8BC6988EC47574A443ACADEE13915C
5CA44FF41CCC2BB9ABB47FD96BC6569D54081804F5FD98DAB720996E76C82766
4C5315DC8EC033F6D1A5B6E1D8A2A3EA61B8AF242E4F815B5D467827EB635BFB
6D5C8C66C3D184704C86343AC38AE7885A62966B7A6BA5E64FABE65A37E50D69
1811872362FA6B020BDCC75B131B92A963902D10C5468AD2BBD7B3EDB86016F8
47845EFF4DEBCC1A2CFA0BCC95E3FEA8500601B8A20B93FD8A6C6511665267B0
75C5D91DDA5FAF6B138C8A750A892DDAEF50284D2CEADFC997B78F99C0A850C3
314D6CF5FABC872BB7CBADDD96379AAF8584088625FB825A5CFD16D9AC883CD0
7A159ECC675E6A0F67580AB44F83A07764C5B7017A8DF4AE3478C68B4F7911E3
6E02FCF0530E683A96AEDBA01D6FCBBC224F848C932C71774ADEB638DB46DCCB
0C6BD2192A98CC4896B34825A453989EB7CE1FEC9D31E66BB00C09B952A829C1
BF694F5FAFA68FDD22AD422869E28828137C706B0CC05506F1B0626F3B6FCDE0
16EC757883083D7F28ED966590A884B63EA0CB7C9786C3BE9F3808FC75BBF201
A2933B7F69BE0292D4FBEB504050FD0E50AF70AAB831F5C0733CB3BECD84ED47
AD6861D3873CF04374F19B0E82736DC113AECC47BBE8279638A023CE465FFD64
9C3C85B1F8C6D15417762825775A80924429A4EAA36622D2316895F219FDC4AD
5B38CE04E4C555757F69C669C5EC403641734914624FAA4BF2B5FCA3448D360B
18D5B8F984E726912ACECD068ABA3B0FEE759D82A5542CFC4A772D8C242E9DEC
88F4804462ED7EE43FA81647628E18DD1256451D90035EDF5DEE6F02CDD17819
11E07C871BC80E6693D9987627D5844580135B616405F42758BDD2C8CC29DADC
E44106EF5359B2DAB8797A200F48C3C4C84D78009F18038035082142E1C154CC
374F269010E7E14272816DF9B504269EBBED704890755222E4581F68F78E651E
E26B88851EEE664DE4B7389AB1DC905D2BEB79B2107C369A1D2D41749A942880
A33B2834101A10E5E8EFF318AFBA650A385B06A1FAD4435CF699EFFC1E7CD356
B314F22B87CAA4B679CA4218D82DC74995CE4F294DBD5F0DBF2A9EC6B156E8A9
2F9531A9E80120579A2560FDD25F5477D35468BE5F80E23A8F5206C817E75FD1
2153EF75A00DC64626ECA9329513ECA625CC1C5FC3AFB291A6B75A593803892E
38B8304C424757E029E43DF9CD565B380CFC395E5718DC87CBA6F4A233184480
098C1FCCB58DFFD98B2C16C7448C1719C88FE99BCB73F7DEA427FBFCDF4F0371
1B002C5FF185A72F8B21D6486CD41A80EC051E875DFC71F411F9A7083494C099
98FB17B13D8773D1003F3075B57F4CBCB931F9ADB92E0D61990B09C6A749C366
6BB1CEDF4C0C30C3901A7E30F8B3B017B1A663CC9481C40FCA8AA4496B318283
B80AC61EDF21B109D7DC8DDB8FEA4470A91697FBE8DAAA2F2AFA130DD7C6471F
AC0F1132CF5414CD559F65B1728DFED9A13E39976C99B380E55636CC0485CBE2
0DEC1DA560FC9291EA3D2C82C65337B73465068C0BA4EBD1F1355C3BD6CE1C82
17D4CC3E498E6672788DE20A34ADAA75350DB2DDD6CC57A37DD72D5A07998F79
AA1C1493419F16DEE7880A8543F0F54F4553A40635307C5BA84FAF1FF68C2583
C45D88054B8A4C1E0FDBF5E01D6E3E6DF0D2F3BE982CE7A4C89C9BA73DB98583
4F028AB83AD872B09E123754F7752507DE77C8B35CA1A3F7D176DFAB1D234617
2F1CAFF7F85E5BE5AB201A23C3C162F116D7443865FD00A72C7D2F3AAD41DB78
D3FF122BE0614A55E20510F04E9C256FA52B4578C42F009986D8D33311D6C025
6D9B1207A92C220CE37E3D562C228D56D90B90C3F3C665E41CBBD9BE22362913
2D9D76370F06803E50513AA7C034A8AD0032707774DB00EB915C35378FE81E08
D9B76B4AEC9A4DC5FA46682FC0FE180BA78E422D7A2ED72A7375958229B0A244
93204C69E3BA8391C82035CCCC16681FED2AD0A7BBB9D264D2C1F5795B0CFE3C
B85246C672FE09A73D41DA0A414238920271CAEA602F4C370C2628CEBC082A4D
E2E73AD08E20791CDD4C0BD8D7B17124B6019EBCF65E41F12047D5DD8DA55B1E
8D74D5C0CD3A2CF06DE88A7776E7BCBDBBDEB109822F326A5B4B5DB26DD5B3A6
C2FA7DAA3EA92B61077C98F374D8A750494166F950699B52BDAE91837F25EC0D
DF6B8AF6C16A8D8AE278B7171B945C5AEDEBD3D08153CA578EAF17D5C5889AA3
7879A65DD2F8F5CE470E7F992C0D5CC509060FF3397CFDC94CCC44A38C2CE2AC
5E22AB57C488C17F8B46CFC0018ABB573A78C271861565CA746D4F1661C84A33
4CA5F336B3BAC97AFC9599AA0F452D028F4FCB8D829C78D309DB3B4824692E85
E9320C26306F91514BEF7D8E5DE5E7FF04454A49B719BAC88C6284076BD9B931
4D5ADEB711A5D5D489D543B8A20F0278602EA080B0C99B67F242B92F71193D20
4C1179E7E5120F911D26FDB9DD77E669FD770003EDEFB74B9BCAC40C589C79ED
8932A19E15A7E232176C51FAE6DF02EEACF5E0C9F80EC7A70E08D9352E7E4E5D
DA08D38CF2E05A5712D191D61F1F80EE6A858EFFA9D7B7F99764E3718CF5AAD7
E22762B66E7DD639D9CC828F52311A94A494127574D949072C7CFB52BC20C689
BDDDB94BD67997F60F31FA62393873101E97716DBA03B23D85CC8B701EAA654C
5EE74F40D29CFBD64328E1F2ADC486385B04884308AEC7E327FC6AAE5ACAB5A3
4569ABD9811593AC6AED960159774FFFC2920FF294CE1BC740EC90A0764E9027
D61CE5938B121FD1B037D1639B616A81B2E18349C55F794B95622CF986B9594E
992F9D944EDB02F6B9D49C876062C19E602D5907F8DE79FFCBAA6606E892B2E4
1A173AA590B6C92E23E83163B5D810DE8F57625819D86D7AE834D7135E30F133
42DC6666BB2350231579E82A4A8EEDED2E000BF862462EC2BA6B2E0C81075959
3AB1BDB8C2F50C4E8BD6068E932430549FE1ABE58BC6297B05FD52E99C741A3E
0ABCE4870F6E0AE9A724A3310C3CE8340FC7BF20C853AB653921E23B4554E194
07D4A864472E90A42B6F41EAFE814682705468F167630971BC01DC641766DC25
4D9E9B08184AB18510916FB1C6590D4B83507C352E4D83A16FCBA7F0D5FF9946
1F3A9DA8509E7EE6AB98B4BB88F6735BE98BC26CE436CB8730DD1D4D5EFAF5FA
6A47330C66C5473018AD53F67C2BA8AB5D4CFE4E217103A3A34AF2577279FAC7
524EE55393019EEE61EF4B3796F6F20F50313567084E1EB9712C38D9740F3E21
C98CADB350E8DF2162EB7EABD3D44DE5C2197C220A4E6C51AC3CCB3B6C3B47BE
E713B7E40F77F7F6EBB4BF933204D9E5E28D5171678D931C372B3188E10E4515
4767656838EBC4A3150BB53F388663FDE92797BB16CF12A44DD6922E03850787
8F3B6818DD0CDAAAD67F1C43F8454EA7BABEA8C3C385282BA7B2A56B2C172B4E
14AD845BE9A914353F9B519D00ED2B999CB46D339DDD22319BC0732326C35A3B
183B2BE7E635744692A959C7B4919DEC77FA5012A3CB8B4B10A39182F77754CF
F68E1DAD714EF0EE4F9F1687F30F176F8F3B0DFB89AA1D0FA3717BF3CD52E7FC
86C8FFEE536D7854B54D737C6DF3962B95B4B4D186076AB0A7776377DB8B0387
D8BD56253A7ADBDD5E5514567FEB018AC12FDEE87E53945816B7A1E4B6764A0F
87848033C7B3017F360422F59F50625FAE9DD08A8BB3C39D282B7CA983F6EC43
320D24867624620D636BD5D74B42B03889EB16106C684EC5E7511AECA5B6C17D
57EBCE1572CBF92F082F643A212E29617C2CFEBA5A6386B82D3FE9CE7CB3903C
5AFD9B42A8D53BC397F9936CBA7529A4BAD5887609A4FDDD613E1E98225608D1
9BFFB8773574AF92360E8A1F3B42547F2E2696386D99CE937A447BDB6911FB0C
43B33FFFB35AD715BB0DCDBB2D35B51730CB8CC9D76A4F089CFDD51972D8DBD2
ABC7D011C6D2D65F03B4F6FB30C72468503347EA1A45344A43E0DC78100DFE97
27E71E1FBE56DE145488C0306C6EE589C2E71F0433B9B822E029746ACA103A34
C38A7E6808E1BA082060EE975C6A81E6DC09DFE6D18BF866903D3C694EB91AAA
50A2EA7E28ACBE1FAC3CD9A004F3ADF4F2DE14E190F50D2775D9D08E7180ACDE
65F8F45846939F96E456F14CF9522D1F43E7A34F7B469091B4182B33BF1DA6FC
B815622C7D6E5C449A46CC5716E1BDA9EE77AD3E44DB02447082F8D17B523610
F60AA52F893F9E9B333CB7FEE6396B677615E761A3BA3E78F64ECDDADF68975D
97F94EA8A698A41EE27E4306238F06F910C43CFB7809656D574C1887F22D21BE
66F462F417FC15EE79D98B2F15FFA7271DF32F36DC92988A989C16915E134A47
A4A117A55B66ADF5E2ACF4567D31B488B661F8C45EBD2FB0F0EE1D4A21068DDA
4DCF34F43878F7D76E5B0744A7C12C1F974E42BCB0A877A4F0B931673B3FFABD
D2E71CDE44DE61906A2CCF360E9B6FA5B8477E9788C5245492BAF032951F69E7
173729FB4BE67A1833D36D09829FA03EE7D559D5AA9874DCBC7BF5029C4A8FD4
72401BFFEBC8BD4A7DF0884F78730C87848E6766CC8D703B64341ADC30B47F91
282EDD1D49001A3FC4C5D21126A66592F51AB6DEC1CD3393BD380CCC919FB121
1D04CCAF2BBC827A2CA8FC1D6F293830DC962E131EC9B9463386118A1021A24A
7204007DDF9F3D5E1CE48D9D7DAC7D581318D98098F86960E1482D042EE0F2AD
7CE0FEE3CAD755AC23964FB3A0FE97C12505BDE55EF1B41BDA01D7778687C22C
B79310A9000BA9A93489138F9F262633B88CBA65ABDBDDD8DB22470CC43D06AB
F25F89455E6E32D6DDA5BB840CFE9AAEC1BF78613E02DF75BE27F973AA31BE3A
29A821CB8D0CF788A1A8D2BF3D2514456D6EC34CA66C04BFA09E8706E8C94427
5A3315DF7C66D0B692FE7C9CEED9A54EE6607CA156E4E98AEB703BC7366ABEDC
1825750DBF07753E280C9F49A7650D889863A10E33C9F736CD0F8361837F4FF9
CFC54D4AC975ABA0286FC31EBB7B819AE455CB993EFA47921A8A96E280CF7DE2
3EB8526813890F9C9E1A4FDA3E25AD10E08997786BA72E91BA1D2759753E96A3
27B6C553FD5E882A0052DE76A475D72276E2C6A8C482236249F5756827503C93
150922D97E5DA774EBD006978CBDEDA3371D65DCBEAA2DA6B8DEEC35AF2C3E12
674A53B3A7337CB37F2088FA9735C944C04B919B7BB6A60DD4DDFE2647C3FA4C
157F5B8C568B6005F5989022DC463B753CB3326EADCFE52D2A9D0C4C94CB7061
20B5F5641CDE19F831BC44C1C9AE6AC470F8D8794991CF4E6F6D3229F38B484D
DECC8F7BD3EF0C79354354299C85E179913486792035D5695E1B8D43FB421979
DCB016E5CA2765235F9D2002A63AC37031CAEE62F37E54EB76D9D9A73EF32B7F
4718AEBC01F60262586BDD20A1184ECCA49857A849D581EF4FF32B384B76574A
5049D9216272F667546E7DFDB1C56ADC1A80619F155C66DC637B24236DAFE0AF
9515F5CADA7CA565352D8CA24A715AD961790D552E9D70D56C47C10CDE73950A
2DBF81F7C3B10A749A1436FEB10D557522B401F3A783BF474B153533C05AF2DF
8DDA9101D906AAAA7942D7ECAF59DDCCB44754D45D2DAB9983ABED6287672778
A3BE351E58E961E816262EABE2E3D3AD16AB2B6DD6319BD88BA7072811E1C7B1
5E7838700A00AF3E7CEC08957D1E08DDA1C52CFEB059A019B99966F7C1F488A1
1DF9E9251C0554FA532AE3CF6B4CC492912F6B779566ADCB995B47A4712422DF
EF01EA631F6E54F375144D9CB0089C91D6A134411D948AA2F90ED6A01991171D
60569ECC2EEFB7B6B0263B8B5CE6EE63CED9F892E8ECBAD4B01C420F4E13E578
FCF40DBEEB1B825364926DE647DC066E3BCDEFE3928BAA8452E64FE2DAD4DAA9
7EE4A6886CC43455C6C44E9FB7F55FD5649526F9355E3A08EE8FE60D5C71D367
B7D2A6BD0C527C07577F3A4D75C33BCE44A458C5F5EF1602C01D3283CB3A4287
33A80F81580F05E4DA3F302D70B39BFD629F0E84B5F49E005529F67FBB2BC8E9
AA0014C75790B06C375ABA39B0430848627C9A81151D88FB40604EF0898C52BA
94D85122321CB031F09CF2DFF49E3A9A25496738EA0E3A81267DEF3510E5180B
59AD5C1B12A1E790F7809EB1DD887670D9C481C68FD4C026A95D677617CAEE4C
A4B282C8E31DC2D185DA8A80553F052F97988D4B276110BCA39FC6736A494EA0
9A3C18863494799AB90F0B0FF8A490CE8584C2FD94BA99DD39628557A83A95A5
0DCFFD4DCAD23FDE1B0D501CAB98B1E55CD8D87D04D8CE052366FB644334A007
71EC0FEFE058B9944292ADF21511621F53D54EA907FCC6345DF34AAA57C2F64F
2AEA6BC668325DD036C59D186CD60B16C94CF8AC326817CC906885AB05948953
E6FFF817A0D3F36EEE1C420BE2A6043F45C30570A9799E6442BE76CE28AE3DC8
D73A84AF77A1A9B7F8FC85347F684570CF6C8FDB960B9CC6E9435D6577D1CFB7
1C0D58FF67E1BDD3F5A6455087145759F387B2E8551B436E2E7E77E8F048365E
B42B825768AFE40381C7005CF57A3068909178D9A544430CFF9BCFB9246472A4
7BDB5475F7B71834D2BF6EFAC3CCC40D3EF3B2E2080F1484431EFA049B0DDE72
B9F10BF392EEB7EB8AED2B53A6F2E318C95105B28471B69EED368CFA2F0B81EE
EE6E1DE6FE6BD932B806286039E75042D590F24D8FE9F50D35EC6FFFD00E501B
8F4CAB74A5F64B4A95DEDCB0179FF112315676071DEFA5D9E32E3757D29531D7
FCF22989718F2A5D22014FBA359AB5BFF346F5DDB0BD589A54893931D5511565
8E1B06DCA548D41AC58850911D4D3A68BFC49EA89394F80315901081B98FF3AC
06F5C24B6A33DC92C722C7CB5A5F344D5B9B46B1D5EA4CFF4F5EB02E01028A8A
4DC3FBCD1349304B2F9EC4D5C57518E8210FC2C61F0D2BF8EB4342118FCF06E6
4A0B4FD2AC4543FF4C33F35243165480511171EF9A30D87414ABA2676B03B306
08E871CFC416D861B0E313E9387668640FB271BA91799E6343667967F1459F18
598E3CBAE1DD000B51AB4A815E3F93A1C34BC2A4827253F72CEBA7495FFD2989
718F2DFFB28BB6EC98CAAFB7993BA7CC897B16A52472748DD46DB25C2A504B01
4DCE8D922CA473ADFBFF85285CFE4E9E3D38B6B9A5998D6BF35919DB26271A70
FD551FDA5866CAC392E98C29986B14D002EBFFC08628185D92C9EADF8E0A7F10
5E13164CE1E1777485A1AD3B8ADCCA509F7A7B0EB047051BE634D62F6F164085
EB045535E44A67A4ED8EAD3245271BCF811FAFEB8B4AF97E8EBEF4ED065D5CE0
BB380F806B9B25AAA1D11047B48EF2CD97626BC016A6C4465B80F38210033BAF
01D8F12547FE7AE41360A5DC31DACC0163FCEAC4FA882EB97C873969EFA04831
905B8E690B5DE0D85B3640F18B169B121155CC0181DEE70E39A3CFAEDCDDC84F
AFD1AB548A688C4F78596130888DF214F09E29FF55CF49C204324D050BF5D846
C4271C7DB592B3F96A630B7322C6C94C4A4E5211BFDF5222595B994DFDDE5C38
B305841459D20BCC18C1C11B936B75B378B00586F8A890443897F479F5C27BAC
92012E849AD896F8E6E8FEB1113E961339770A3620A6D219203B491C34CB4BF8
8039971CBF0B811DA5D0453701393A1FB82CFB717869B7EDB6649D987B1654AD
20D7CFB953215026E46BB5B788713FB8009CCFE62C17E001C9663301401DF54A
E6686EEB06A17DEDD6A14279D75334BCEAEA16E7B5EF3EB9270EDD6CAAB47986
A3DAF03E40529E1F20E5C4F45C6B35F7A256EF60CD7D35794F55D34C07548CF6
0058C8F54FF20565290C0A49BACCD5C04E8C01D6644B306672481FC77B5C6D78
43D0CD59C28E408A956BC2A6D12FDC38E3993120E9D60FD5FE71B1AE3D44CCBD
F73B38D613433DBD22FDA50DF4433B0B8AED6A63BEEB4A8CDACF7FA1C6FF8AF6
320D750231B552FB90F120DEFDC60D179347DBA9F2647B2B48C445FEF2432F10
22D3C0774A4F81A5577BD4B255CD6114AA6A305C8C2630EA17B49B8BB78F81FE
42DB1827F994E9EFF86E090C561F6C3AE476ADAE3DE5D771C66E86F97387D4AE
97D6E8268902E471759DE406C018F9EE020A5F6C02176DF5BF47EA853329025D
322D8AA0C5BB40DE983CAF4351425454591F73799FAF56EC87DF91F6747833E6
2A193F3DF3FDE41ECB58DF2E318B41923E8A047553D96C8FA33E8D5DBB97205F
A0BAD80C3EDDB35945946E27DC96828167921DC1B5F69AABE2F964CBA4C0ED54
16A20F102C82BF573D333529F06FDFCA1636023C3B45D99837E560B85447FD4D
8250A9AC16CC84825BC064E46F3D779006EB66AE662BA86B74865A45D3C82058
957883B5D74BFF42EA5C399F82169E5FE0D613468676A21638730B3AB6349A30
512D04D05046DE4B8AA759050A4CD64E67D56C072DCF249DEEC01DA4A4B30051
CC74AC1BB800B2B30D034B483507279BF57D4634F96E28C1F94FC02C79B3E9EA
A99ABF558B366A02AD194E29C31962FFED37AA64ABBF5417DEBEDA65FE59ED04
18F6CF07B28837D638BC0C253BC58B7725B4F629671C96961BEA8F3C44C56A09
C74FEBD45511BA34BC052F103C01C27935E0257A091F32EFCA1EED082FC4949E
9D7C1D19CF976D0581EAAAEB4173E4F2D882F7E2DB836CB4A4CEB8295834C8C3
BAF1CCD31357CC8DD1549B730374F5251C04E601C27E854D53B858006EE926E7
2751B7B73886C1C0394F1A561EA185C51A214946A5A1BC4BEEC335A5C78E90E1
21BEFE8C3E172C0FF87E4F766EF874607F657879F9269DA059AA16DBEF29EBED
931F56CDC90C677070565126AD56CB4E65D9BB161D26512BA8E943EFC02ED8BD
1AF09AC4E8A0BD65C37C5F62B0E0C454C8C57735031B7A58D1CC858BC7B4D6B9
70BF182FFA1055A1BF1F53C0B670FDAAC8CD81508CFE360B1F24B22D4EBDDBEC
18785B4B37407B8B557E081F2168376FE7063FFFFEB8C51B57F75ECFE7238BDE
6BB300C27EB562B2CFCC6C8E30F658A9095000B8CFDA07DF50CAE65CB5F398F0
236CE827CB5650C62A761566773A9AA702BAAEAA4853054622B71E68E8EB8570
2B4460EDC0F9D1A7A659C822B7A93C27F3D482CECFB6EF2B8237B42CF8B8A7D7
1C1B106C8104BC8DB6AA0E3A664DFFF329293EF880D1B9147A7CAA0B6C48D3AB
D53A4050121445A5C6BF3B08B16454651ACB0649BD132223FD13FDB58D9EE00B
EBD3E75B1D437F6D3770D5EFE932221CAB863B8794AD2EF7CF6103E545E449F0
8C2C5000002DE829F5A301C772ACBC7A0A254B33C9C6A0CE07D2FB56B89B55F1
DE2CBBB2F3B2D3F3B7005E9F83E783452A7DD6FB610C9A877AE16BC30D56A0B2
08DA546903B801BE42F2BEC56857B06B212C00A1CC66C5F98D99E6A83BFE4BF3
8F10BCB5B93E04FAA62C2147ADCC67517C05D31408F02FE1057991478CD587D0
8576EF5B4A94B001F198E65CE8578FEC854A89C03B61AD69B87764A81AF067B6
BDB5CC5B1AB3A1618D8555BB8895A8D8EFB1FA857840E7F2C74013B6B4E693A1
D158ED9866DC5BCACA861674980EDB012FA4468296A7132A3D28EE56182422DB
0E16F53246EDBC5404E5366F675032DB812A9694387BC6A7A08870BCEA52B0C4
80AA4A7B456EED703C27AECEDCFF88E78FF19910B28EF6F1D077D41491DC8978
EFCE821DACFEBA0834C0501DA25AA2B872B756536736F4A79DAAC752DE819006
D1FF3412D504943284C1658B6FF324C0FC997F8A6ED721F201166F975A39E6DD
50A266D0935A3E306E14E38C3695295292CCEE57A365680B483E62226690722D
4CF64802A82227ED89B7E927DE87A8D4ABF3AFAF30FCBABCA7D4C9D90F414418
C714D6B0A0FEE97A9A5519DA63302657F3B8E1D9231EB1EFB3402C2A4583C10F
A51EBB1FA9612DD39C767B8F89EFBCD72A65F33BAAE75A8057567BF58497ECE9
A3914678EE3A7C7BE83582945C41387F50C5E0F59E80EF4B772AFD59D0135EE2
90B7E41B6CD3542AA43722748EBAD8C81EE73B03FB45FA7D37CCD345102C54FE
2208132979EF8740F922F120AD4D39CCA679B6ADDBA24E65168F3C10DF41FA07
DF46AA909C706E156C470460104C977C7E113345221695665D78C34352A1D9E2
A844124B95A92E0FD95856B048341F7E4195B01CFDCD5113471F061C2E3C6816
9AF8184B6F334AF1A1B79C7F709E8893FD04E9ECD497A5D340C632C444ABD5CE
61D359020C43A005702A013F2D23198FDD5DAFF91CEC69EA5BF0BEFB7B5DEA8A
06AD0DD932CE1BD7084E7E56BA311010D74956B88A3275E2C2F367CBAB1BB2BB
9EB0FB9DBC48B0B05472B41F8139A4753094EB282E898600165A4FDCC6EAC4E2
8FB43737414190074E9AA87CEF7CA0C25AACFB8E6554846A70EF18D4D3413D0F
E098D8BD9A3188BD49942B76DB312E2C96AC50AF5AC7B76D370ADEF8E9D3B6F6
057F6941247728C7BFBC18C29E0A119454F8BC66934B9A2AE930145C65F0034D
A4A3A49D63DC0526296E9438E4F5075931668B04698B3CBE8F262043B8DD88CE
65C6EFADB667852739E02647D111A69CAEAD0DF2DE438ED25EAD7F8BAB714D9B
09F67A90A5D28CC030F18A8C6E882D97673A70BC845767366CDE0D37A82F0540
091A3A1138EA6A07CE358D979C7BCF0215BCA4082FD49A7780C15451EBF292BD
EA8C0518A94DFD65EB475482CE7B085931FED54F2D98B06CEDC3CAAC3CB5A692
9131A73ECCE17FC13DC56868E9B011665BFBF2F0502E1A231E8F4F3D785A31C1
CF5B24D127CFD021D684AF84AC03C2BF832196D27869EE01D169FC58F743CD16
C8F0A1A9E39016C180CB85FD2D1D5063EB4B2B2D85542665FEA22FBA77A3F888
F990BAD4D1810A9046288D9C33E4016379D20E53AEDBC9B65463A916F2C508F9
3F943B4682998296F0BB9E82C4E2D4B5CD35842CB7261126B5F96E3D58D53DFE
E3C698A0FAAF1C5F84FEA62E0A99E81E9BD2366CDD1B9EFE2872B5ED0542F2E4
9D8D6B0E2E9725062F4F3C3990E3355CD1A1495093EF00D900ED6F6807DB610F
C1BF195F62B1D25A69CC8D9A1DA535C0D75BC32F6037A6F28C9980427B10951B
59873A145C774342F1EA0B93B6ADE804ED2E62D99061ED94DF63E559A167C002
D9C61B46B3382E3EB93403D6C63C6B1A85CD6A38288D1C1A551889A3D80A0859
3908ED8B15ECE9CD36F3F09C6AB00D15AF58CE22EF4C7063DBE03DDDCD1BC036
4A2892A268B3AB9B3149450ADA6A116A7C2DB3E6E4B31A5EF6F401B50E8D60AA
81DD4EA8EBB7A3188D82FB1C208A66F66185C1D7C770713D05B96E0140F52216
EBE2FEB18D1757D6F8F54D8C82EC382A77DE0ECB0DBC084414AE282962B5BAC8
89BB0B4114256D575E27E844BA544F23339129DC1F4EC3D0E698D82799237D40
4E0A2787011D33F94B6D26195584679DD79390DEC2D5CC2D796BA6CA1B93FA27
83C18A7081BB5848DFCC1125C2B0BA6F1413D796C008A2ECD55E062CDFDE2D9A
66980ABE0ACCEFBA3D2977040D8E3EB33118724176D8929A0F9117F420C72F0B
98FFEA8975977FEDD0B6DAE17CC51890A13715B7B5CCB828EB08D9A9538E1F4F
AD8F10B396041D0FC126AADC048D7C554633C4F8894D874A4FBF18DDAE6BF185
1B9DBB05060458AC959882C85EF3F78D1580130376B16ECF5A150915203A9623
CA7AAA753C7087AB2F7C202BC4A531E8E98548855A7546E89F525365ABF37959
3803423DF938011505850CB8F474F37399F353301468AD0D7FF1970B7F481189
507888EBDEBDC2424E1D0EE48F5529487A198EAF6D255658FC52EE48924C5102
4943F2FFF8F1BD3BD8F42BB2FC3662D7BDB14721D956B2A19AF48085BFE4DCF0
C8E7DB4B2AB50EA7BC80AED2C79E879C156BFF7CFEF614F8DF247BFCC83E71C8
22C48A4D4FA54DB546FFEA3527127147B1E22B116370C7E05126631A5195CE26
29FE5353A85C94FBE329E1333781C7475EC34A8AFCC03102D991076FB879B6A4
777CCCB4546904821A10D6BAE302A33FE7C4A0FBE3E103D1668B4243F44FEE43
CC06FF89A82F675631DE59CE2BF06B0C40C1294FA9FC04B12E0026B50FB55F44
FC0D155C1E04055D6F81AE5E20A9E98ADD715AEA8C567225A16C4CD76EB085CA
9444AAAE42D0F64B24A7F70903410B4C7EE09941F9ED40BDCDAFC20C8BE193E5
DA7550D3CE0DC86DA1645B9163C671A8E071FDC92D52452E3F6F5CBDF5D34B08
CD2762A1676BB6CF6E1B80D2D133019C4ADC916AA6F4F5FE8A642DA2E54F4222
0C073E4C104C322503F37A5AB40178F10648832847710B34078B200461EFE9B2
91836685071A7C7643F954630816CC7D1D0E4A13B262BEA658AA67B8FC1B1350
7878E6ADB5C7CE498A3EDCADDF8FCD6E58C27FEA0743FBD4B1AD882B49589219
6566D12D71777B7C2CF8316050B11B9AD043CCF1B9765CA0D1D4B70AC42C44A9
01511B3FCA4BAB93698FF78F872877863BF79C31CE07850EAED974C6A71E665D
AE1CD5C0555B6619B6CA63E79A52BCE7DDE1054AC2553313FF5502323A08A495
0187E02B880DACF0DE611F0E3686177F722947CE7159296454C9734B9DE98FCF
9B0FDA17BB2C917239849FA8B3641AE786B323A31BF1830B1ED3BB924EE2CF3F
5C7528E7A45BEAD55CBCE10CA63833AB245AF584BB2E1628A7DD8E13FB11F05B
05DAC1BA9778E039424ECA899F66CF5FF342E1CD23876BC422B12A22E18F3C0C
E29C3D2A81F0484EF41517F58611FB25CBE6EB88E9582493E0C867D3D47F715E
E9A8254F3350F4C6708DD037E96492D3067DC940EC39A3D73A7CBFFDA8248420
129A8BD15445C0D8E2DDCD9067EDA333D8394D3C4E92AF0306300A30CD7AB167
F8259FCEC503AC5A3F9D96294CD2A186A0D5AF2D15E33E6F6A2701AF81BD10AB
444EB7B15CF844837C8EAD4D4EF97716523276044FF1DA4DCA5E2E7F57DBEB3C
0C5724BAEB74A9F6C44159C4273046D8FDC1867AB741F3C6E2B44AA95479E4E9
8133504A426A8E478603573F9FFDD42D1DA7BA6D125B96B6B3176987A3ECBE14
A62F9F5823B738044BA1025DCE099BF32778F0F2C8E96DF0029E23A244DB1F4E
1CD50860AD7D2FAEB7490556C59FF1D9066D38BA8190707725C13B87D76ADE4A
DA28877B6B867613D53FD6CF230F4B05040E9D8E07CDCF8827EC04177712A79A
ED14FD6A58590CAF8ACD9921FBDBF92515FD7870D5DFB1FBE9AE03F51BD553A8
1EB9CA70E87C62886BCF09294D95271189D0CC18F3F95E5F4E5DBCEA937E7912
CEF11758BA61DE38C975DD0283129EAAB6668661E1960C3FE4B1634DF157C537
B774D0D3614ADFD6664348C7A8ADBC32BAFE0B75E3C5D851094CE50D476DBE30
61CD16B6AA60AE3F53B88544455AA872810C7948B1EC866883E78BEAC389FFC7
02276681AF7D03B31878FBB1F73E41AE2F35DC3A66DD545E42A1186979609CD6
2EF3C72F91FE57D57A05C3D8EE63F77FF6700DB4C80D3E6B8FAE2765FF22E921
42A1B4DC97D164780529938A4FA7BA0BACA85729DC71047A8CAA9039893530D2
DF976CFC21F029256FDD246557952E53E9B9A49E49DF90A6AAE92EB1B2F3A667
6AB5E26CAD7951FBF3D7B27121FF01DEA6F49C7A4047AC9D875019E23C31650A
25CBEEC6B93C575C363FAAED629FFF1E1D161DAB4FB2DE5CB498576500ADBDD6
E0DC19F50883A2233E299B71E8DFF3FA4DC4369115AF71DEDE6AB1CF0D1A2BEE
1E1B87180B5989F1706873C973A21F753C4BB8B8E6121EEB51C5F469E6A082DF
B54CAE9DF0EA35CF841E1C5DEA29F7C11892781D1D3A02FFCAE58B3E39DB153D
C7E4B034607A71096D7AD1B003C9F31983DFAF5D40A8782483E60166E90C2025
6280D9735CADD2DA77555E365F3638A3EEA169B2B4B5A3D3BF965CD3E8EE7D93
8AC9F2D37C035CEDFF73397100202095D91C1A63519592C751173173AA52E93D
9BA791971918903CEAAEBF9756DD3301F4C4EB5F7A46D1EF564F9D4A077B56BC
0A2F37B10826AA7F8D15F5A74F536B4F63EE567922A564ACAD7D02D559CB82CE
0E04016C3AE50698C63E34039C507A406981DFAAA68E2CEEE203C7902489D4F4
C2CACB006CCD94C3F0934765641CCC6100EB759CD73B33001C07F3C016142C1A
8B337A0907F9192DB48AAB64B0865913560761994A7D47CCAD33572C36AAF578
7B986CF74A45467840B0924C38AFC428BEA8F26ABAC1A2B9F5E5048DC56C5508
4EE590D2BD58FD9784BCDCC3D498B249A22E983E07BFCD447294B1F96ED4AC5B
1BAF7B8882156BC57F333B83B6D1CD3D56DD3FA494E5B2CA2248560D4D4E3C53
338420449974F4BF9DA358EBCD3125FEEB2A89862EAB22C5ADD53E1979713C24
D3C84013DC49C75F498E138C7E1A68DBE739C01D6D3668122629F3C62F400177
0CA00FD02267EAF68823BFE0AA2FD9ECA512FD0E8A81D0B4103EBB92A3F80117
7BDE9BDD61E288E9C7B049B36DCA74E4BB24CA63C88C0A635E4B8E7C4743B04F
095F9288C410487290808B88F9421D506386AC95C1CCEECCB420B5C9593B11A4
99EB2A59858783B57BCE2DD605F69AC3DC5F258FE3C18E87FC474EA4A491419C
F2A9E8632E97CA65D1D2BE3644E84A35070D8E8B67E278D6712C6BC2F91D9E72
4CBBD53982E2FE82CF72A27FA7304C06140427CC6BDE166ACEEC8C9F63BF23EB
2C41813615C97E629FD0ED9D4987C1C3F19BB1DF75F985EB1E66E610C504360F
CB236B33EA5BA6233B2973A1A4A64870A9224FC39F35AC5F1F43601BCC7F39E8
9FD7D5E9E9877214F8DC4749DC919D6C50524CDA3E22965E2FA5AFD63B4AF829
C39DB36BFA67124053D79DB19F848987C25738F8E7D0C2F12AB40F3AACF57476
FE504CB17DF506B0A403B26056CCEDF294BF5042ADCDF0B0AF2F35E7B331AD53
A0D20BE60F75AF092FD651C175A7E8184B1F00A66F3FC040A4D4C40E586B3DE6
9872B0674150A1673C4495B00D8FD42D81CA1A5B7E977BEF2FA74250E3DD8979
8F38CB8FA216580EDF8B62D9269A09C1F62AD71A271A7778EDFBB057226D8E50
93BCE55ABCEA8A46B575C28A61DEDA9859E0155E1D3FAF491D4D782CA0ABA987
A7AA3817F8B62300F7273F1EB634320066BB9332F6330B119833B9FA2812781C
6292042A4AA9CB4D899E137A41E043B8AF7194349AF4587F36C0AD089DD68764
AAD2CF3937DF81B0004DBE82B86DFEE6082E90DBFE87968918000FCCC4BBB3D0
F0A77E13A72370131A55B77E3CB0CA12010DEB5B132FD4C5CB8253ADE523B36A
2AB5F41BAF1D6771576B4D367AA58DB6A7714304941D884646C328C7B77E1C3F
D22A147E3E415AB37A902B371A2751DF250627167FD29136A0B3696241F30A70
68432DEC0053CEC7BFED397F59BEB40AF34FB2B1E5898638982FF191687F723B
02A05EA5F95D79F392BB7F12425CF626FADD7F013DBD6E18D63CF46DACBC64F3
60444E08EA8214CD4647D62D216E540277D26CC725C1BB9F7FB26DA3444238CC
33E2791CABC1DCD0BFC6402855C5608635A76845967CFBBEE7810EC93784B7C7
EE49264A8745D71E9F46002EE1FFC4DE496A308467D7C72CB91E6F4A30F183A6
6BCD03F71278FB2BF0C8A538203E4C373ABEA435CF4310F49867570655BF29FD
ED11BC05692B58E2A459398AE936F68B68194E99EF391BD26479AEF95D863434
86FAA6F8FDC9EDA33C0526F2FBBE5C1C060E5E26BE8A2FD0533BB5F108ED169B
04F1A408C2B2CCB63E5307AE41EF66ED56AB00C6C757576EA0E4C8F0F1461423
1A275834C74D3D12D7367371EAF1BCBEBF03F18C2C839AB44CDF124A34A12225
592CEA5B55AD65B8D966406A86A7FE8031A7C4C4AB5FA2B8EDB7E7F3A4974D75
2397E6D2ECF84A070AF17A438014B5902A55EE220152C90348CF590DAC062E09
112C7A95D887EEFCA9B9A6A03E80DEE3F0D7F8395661954DF160077B16CB4AFC
85B4C391418EC9A08BC510C0CB3C45918E92417F6CC39A8288A88398390C5305
27EBE3F8C28EC36BA0E331071D9B11BF19F5E6E0159D0FF211EBD8E77BD4B7FA
ED886A9FCB3CD2278D1DE85681A6F1A4EF1B29A17F5CB6AB539BC6FBFBF275FF
3662B68D889C34EDECE89811A4EE77E8B226AF77118B7CAB8CC61BAFEBCCDD35
9FA302572EEB10583F675BA045A8D89AC58B77200A09C675E4537950D9DAD30E
B70B6B0E91590635EADD02BC13F010CFFDA7D770B21ABBE5E79C53C00D98CC24
C50DA84B0C80BAD78F030A46BCBD7576320CCD85B077DA331A705CE078FDE344
CF66BB4C006E141302BBCAE765F2778C34894E1878E1EB419C638761CD0AA12D
D9031412AC87B96A71772E6AC87536427AC8F7B54DAB946E2937617D922CE89C
34ECD3D7EB4DFBCF0C6BC99FDFB74F740579C8460FA10A2F2BA52DC028A438B9
DFA0D9BF845CE38E33893E5A935B41688173ACBB5E5FD0F0E523540498F79D70
1A974C5F51C8EFC7CEA6075FE46A0725A98DAF86117A3399E566EBA932460DCC
5F7C565AAA0D56E9AA326C57BC1330E9FAC3FF84BB2D4E8D4CCE33E0B1A39A42
F8BDFD0D8ABFF0B4DA2A814D14DC1361CC9554DB2E46B161E4E0415EF5914825
ABDB71FAADB45F85B90C026CCE185EAB0740D4EC4865403DEC7C9029469A889B
9D80BEA56264432E894B96CF035A3B45ED6A55556828362D6B0DC6286290B0FF
FF2646E94179D30EBDF73A25B991A8B72034FCC138F9573334D07FEEE0594095
712FAAFDF0A13E3ECEDC9AEDFF832696F5CA0D4BD71FC54A1D783BF12588184A
836AB19ECB89B9DA9A93D028D28EFCB73500DFC012A154360FDA3DC799FD0748
2666F47C17D8A5BAD6E0B0C51609B586AD809AFC85E0D3DA4C2410995360EA21
74921A195027DB020897E28DA4C2E24AC43738F8420631614D02C0902B167500
C2538273D545447091D9D01B74C9F976502D50077BE9AA1668BE627189993779
AFE7094C398A029D6D08CEA9983961D761AB6D4C5759EEEC65B47A64135F3566
FDD11403617AB2EA0965C54F38A3DC56D5AFCDF439138776E7DBAB1DDEF7BDEB
259CF9015D1F51F513C2D2C9DE2A496D6BFAF312195318B3551984C347F8A88E
010537A0625C655CE74B16DB3CECECDC55767C6EC7CAC0E6F01EA6B19E1FCC83
489BF3BE8726073C5E069241A906F0EF15886DFB61E63C1C91CBD3C0F554AA2B
59F454E3D427962D346C24B5441201B02AC1925E792B908A541D32880AC41C3C
5F84A120E8BB2194CA348FF578A21DF7761007F3CE2FCFE63FFA79847C698A4B
BE3589ADF0D9747D62E08EF814DB8806B8FE83081EF762ACB88446E6C561055E
5C553D82942B1302FD3BADDE29F623EF50C9B12A34407F8D7F27643D015A4423
506A9A2A9E1CFFF120534A762ECA8EE7AD235AF1F50DA985D21FEF5897DCC7EF
4FB0F4A917906A30A7667D7C591B61DA5CD1229D99F82ACC997EF38084D64928
9E4600F5A67256788F406EFD342384DD1260C67D7A9BFC8533FDC27952B08A5A
DA04CD11EAAFF511067D817E9E09CA0BB698030672C53966BCDBE7B62A581199
E65B1D8E5F59136D8FED9BEF89C391CD84F94F5F401CE18E37E72D710F5E78D3
661C1ED9322E208132F886170E2417CD39A79265C7EEA862D9DF37ADF68BC4F4
77396BA83809446D5B28ACEB5B2EF79218A30F747854716E2766D6ECFB42EF35
4D91BD335465A5FFFD7AD6325768AD4485DE6CCAD07E80CC0DCCCEEE6E18B0DB
8098AFEEDB9891A09AB880230E2A9061FA6DACB7BF08D93A60CA5A4D28C2E0EB
581F3B8F165270E90C727DB9E454670D51D7F8871DD6B006DE3E4BD74C1CA889
1A8E08C09A601506D5759F84C25AF2E0C86F2AEEF587F7FF90E05A28234C71C1
3159DF7DB7E4CF77A2DBEB151A0F9CBD00E2EAE5896EFB1D4569F2F4629141CF
756FAC27DACC81D3B0B0BBDC5A9F1BCDDAA06C54247BD18B7A124F020F8BC594
61A4DEE4D9461D2390B36E5A8B6279A5D2569F321B44C3524A733BD1D3D9675E
23EBEE3478352EAA05DEC5A6772EB55F66751A5C0A81D6171E5D1E0CAC8E185F
99A35459BD78EE752EB77D01CEA50E0D6555854323FE00320EEC4C921253D17E
3EB0A8AAF4771B1F3AC454B9EF34374098519B5E05F8ED25325368D4BFE10ACE
43981CCE9FABA6FA130D6EF52F14202317FC40F6C9E49FEBC2B0D196CC270C74
DFB15B31C0EB8C910767C395ECB870DCD89530E6EDCF91BD788D8F261962B438
70D5928D160218AC88B9BC735D9E7226D2B353CC752EFEC2E91DF8E2DC618697
C832D3A03EF24ECB073936A0C035ECDD9681A52CD24C017FF1B1FBA0F5D7D4B3
5D4E24AC4A11F6D76804C31309C8950E7DBC216AB359087D8B27F4F7C38152D9
5AC1367151C840D11BF79397C17BE61B0803DE1A88ED80BFCC88AAB0CD130921
560822D8F89DCA5B1802B72F5A608A31A1E5D8CD203F49EAE52A38D32ADDD4F1
3837661B593C3FB192661D2DD29EF941C0FFE601698FDCEFD7A5FBCDF61347F5
94AE5FEF6C3773F335A7CC092ADF82F8CFFDEB4AD90CD971AE3E3A107949E013
3671E9A8F7EC514CD779900A4156930785F1BD24B442988AE5DF78B11DFF4721
707ACC1E45E4D50FA5D878A7BD6CAB588FDB5CD8790A1CFD6359EBFA90EBE9B7
BF54177F19A3638AD8CB7B651E7EEED85F1327FD07585EAE6A5254B25D0690A1
C2394520D09923F16F3816C9775FCE5AEB0D27DB26CE1C7BB734D124EB0386F7
AA332FBEDA5E099DC8879382F85EA515D665F6BEFD477FC3D2D0497A8FF126A8
07746F3D79D070C1F2D0A021D02B02DB6D083256BB14596EB9150A402C5C350A
C7EEAB82D64F9A5EB6A4C9B1ADF0D9950A195F64FD3209C6D47B46B7708F855B
CC6ABBF9BC36324E1AE948C6AC16E4B2D65CFE125AD2B1792585749780483D68
2D172A2CAF15C4D2B23690A9707477AC3BFB5ED0BBBBF6414EE5858A463D1D15
46B2215B46074A63B80E60E46E129F6B57DC84CB8BD753C518649C49ABC0D748
DFC2F2D05E4FCA2D8F85E7BA1AA334DB8C3B0FB495C0E06BA6F5D1373ECAABDF
8B746D4B6D2F51B276B471D10BD5C1D8CBB442B43FC6DB8088874C03A7884AE4
336F3FEBD08B7B93B550CC6D1ED120AAB84429FA3F773B665ADFF0135A65ACB5
311765991CF8A37FA33DDF778C9B9E07A0A9B9AFDFA66E765FE6B7FB0919A84D
A1B7F2BDD3E8ECCE1499F3925DACEC43096E05C6A9B27F2B44615B72C93110F5
3373C50E14657ED64C766A7C0EDA3E239C23A9BC94D2BB2581629D0C9CE8BE64
B0619C29348A1E71382C84689EFA8B5C6DD39FA117B839F0EB4B41A1A63D7A48
13C0B746D62CE7EC7BFFB6E90E3AA6696E337699AEB3705F20CFCD667AB094E6
137A3267F18C5E91B6CD62494A24FD1CC370B51C17E71E994F007A8EE703F498
74F401C2C2DA8C44148B89401230D903C5B59737BBD6C22E537A1985F09FDEEC
43923B2516DA55C31E3FE7541B2DB7C9E5641428336BB8891EAF78409FD6B64B
F03A46E17307A879D563BDF67455F2CBC9A04CDB15B160C3E2B285BBCFE14C06
C4901850B138E69FE01A114E444C1F097F6AFAC7606ADCCEFE991B8C6CCFF9C0
ED695C2A56BADFC3499FB5D13A5E991E2DFE674BB56DCB53F9792361238817BA
3548735C48C90E12C2A949B71B69F6AEBEE72A3DA2403412987F9D1A50988936
D0F0342EE72FEA3514606A3B03A8BE0F77622E47637958133A2722778B45B6BA
F48736806E0924D06E367BDBAAD7E2CE7A0D21098FFDD692F517544F5785A13F
A80F7B93A7EE8AAB6F15B683A76EFFE1487F472EAAAADDBC48486C5D96FF0A33
4C2BBF08876048521F937A458A63396A578F02131547968973374C15A410AC5A
C35FCB375E20BD3D283BE2AF93DE6A7ECF1229D9BA0A6773C8E3AA1A9D95416F
BEEA9C660479F606DA8804A0A299086D15E11748BC458ECB2C63227ED7BA6583
A6C2EB5F2781310B9F71EF1D05A873BFC4DE8404F8ED72CF2BFCD6BF52FAABE5
F2F227A023E90D82EC823434BFCFE218A4B5FF0264F1EC9818FC85EC5B4ECBF6
A26DFED9BC3104B7D31460E3FA77DE5FE46BE60CE159C111A6468D2DAB04B3AC
AC61986BC3AF3A3B63BA36B4A8C4D61A96C406DF4CF3A843159D3BAA527E5ED4
4E2590664FBDDC6FE2646B6845D9D4835F7F33331E97C7101BABC80FC6726396
B20DFA40ED6AC6C132681AAE29E7706B4EFFB51B647A1A37AB387BDD3C1967A9
DCE7276A6B357A892D84A875E7EED85012819DD2F84DADA7B8744351564FD4E8
2BFB94A1F6C35E1C0A7E8398C08E64D86252B69A28E33BCB4F4665F07AB827BB
2CBA3245C3925FDC49F75C0ECEA5D575F34B7F7C3880998FB58A21751D1FF032
610410865DC43C4E9819F846DB1658A7F99E27F5145AC823813A696A709CDD04
0955F293D5FB3B52CB7F2C1FCD835625B44B69F5BB2E19DE22FB6635F3A42DEE
E11D4263DC0E215A49782F144DD9F51611FADFCBC48EF1AC9D2F5D6BF3B46FD6
A73D31AF122A7D4310010C92022EC164531EB45ABB32D64FFBE3475AC402B3DE
C385C5933DCE8330A3A930E83872D8BFAC1B099162FCFC58DEC160DCCD124925
5D1F4329FE92C8C5247752B2945D2D7073FA91D17ED05868E556C18D0866E97E
C8F77D6F54DCBC5BA7EB6C07862D3090AC8A81D8019BF968EE31210329D7AB96
9DC1FA04ABC51B7387109C1185AD5648C12F490F6918072A9CF3DEE42A9546DE
5EAD908F2FC9BABDF9022AA781E14282982C1AD13479B6178D281CAA541FD7CB
5A850CB7085567F6AD3F4B37851566D69AA649F97AA2EEE9D984A5787BB6100F
41C88F39280980EF82F43A40725A493FFFC27F6AA52F79225868783A50546B12
D45F4417F8DAC250A102E7404CA135B33DD66F8FF40D1EAE90582D55A6550899
10B4B7C4FFBEE8D95937061EBD6C60E8CEA1EF8D26E4FCB55C69418D7A4DCEF5
1473A5383ECCD73DA84322E4FAFEB7AF69C96112F0C60416558B1B67C61136EC
EFC056F812112CA2E5DB900DC43E67A3658A36CFD52E35476EDDFB262C71A697
E8B15D380C961F8A97630C430315D82C6BCC3463E77EF0AC2D1AF0239E1944E0
D8B3EB3AE74B1CE21F7C41C9A7FA5FAE2CDD0912D26D2489C6239BA362E5A3B9
F67D361BF47CEC19F5EE8CA94484C8D06F0C5EA658E1E27E801178FB435F630B
A4AFF79E9ADC4FEC9D11B0CB1EE425FA28690F7AF8859DA64EABA78F8C85459E
49995EC05E1C5D85FBA078FA40C96EBB269F3BA80EBD605910FEC3E3A70625C3
B3C9D28493874177C34FCCD29E69AA3A632B2C15BE26FFB0609B52162D28349F
B9333B6AEBEE1DE49D85EBF44CB95368A12024C0BB437E97A0EBB4121AF36A1E
38B8F55BD530F47194B01D884B979CAEFF660A8B5CE8892183DEF4894EE1FEBF
343E45D8237138BD515A8343449EF06590F446448C1DADBEF2BCEE271D2BA5DE
63095952ABD5D2C8BA51EC4C21A55CCB922488522C9EF8C328E89C5355F29E7E
E697BFFECCAE75C27AEA6C74A4E2B17CB6C82D7263DE921E4F22630D3B3B95B7
90F3F54CEF397E66B5A87C5E297B9D70710F1A72D8C33183DDFA4B1914911413
4BFB10D1CD4AACC908540C9F6C3FE5323334A8479BCAEB272DDD92972ED8E778
9EF9899B50D205E1ECC35934343FFF768A9C7C69C1DCB4086F18D8313068FA9D
4ADB75BEA4DF343AD30344E6B4C7F83B91C13A840AB8D41D661554EE356173E9
5ED01005A995EC050FAD181E791B69F4DA8D9F0BA385206A85A4ADB44BF8C24C
54A9A21E45428A97B9CBC8A1EAE07099B16A54BC5302AE4434AA09AB585910EC
A4AE5A0759523FD374F4212BE86E7C5C16FB6CA58FC8BA0FFD71495D6474701A
A81C502AB62EDFB6C4B0552007ED672902C044213A6A422FCFC22D86B42FF91F
CE7E06435BB29402328A90874B12E020C9DECF71C7CB5B1C295DE9C0DE56949C
A25C059FC54715439CB365500795122379B1581BBC7ADE87745B3D99FA2ED03C
4764B438BFC2453C885BBF4D65B373710D3D92EB644A1E863BCEB155914D39D7
1C5CC9148B6A1ED33D19A1FBA979FF7BAB06B1AB21AC051F112F99FBAB0A2CEB
E51FCFA337A7D3714416756677BD779C91E2735C4D26714D3D3D8C7C311322F4
B3113BD21AEFE8E530CCD921ACF0AFD7A972250F2EA50E2A5595E07B71365B8F
31103159F65D30A7A318C1056BF638C4E2AEE851BDFDBDFB0800183386582831
736A70CC3ACC7033BB614830B33AEFDA5E40DF238862E45E699A220350533BDD
4FBD95600E6C1AA3D680E83A730A4642CE459E63E89ED11A2258BB34CDE1A6B8
6679411B5E932364988BBFC8C13F36F2A0B60F82ED1C7F608CCF232FC7BA15B2
01CDD3C429BD4CC3F96584C065FAFEA3EEC98A1FC4F47054887C1A67A03BD63D
38DAAB64D6298026C40D6380DE701498E8C8A4A3E8E2EDEB61B783E128C91C85
069F0883A7B3ECD67E5BD1C165A35025362F20F481BD9E147F6EFE88FFAA20E0
DCAA36935CAB6B0B33BF6742E2E95EFFF31273BD8C22F12467B61057FC53C3BC
05F428FA65CD8674717E87E6481701FD1E1B8705C512C01C51F4161F425FC783
1B3FF7FF114C014E1DA800226FF2C583B34315A5F973442115235ACAC2670230
C67883D9610F27E82A5A72E24259E976E6FB3381FBEF9762C420F4909C70E9EE
8CBEFCC44FE0E4FCA929E0834456AA8A2A508E5B64EAC7FEE09C6B193C4E6E66
142EF709DD54FEEDCE84D21C80F2B2BB2C71681337267DAF3CFC0B5AF1F6CB40
7EB5CE209E7B5B36894A54F0D81B873BB286206A91857358F58A400549BAA570
F95B97AE0BC57BB248E0FC63251C667912F605356788B31059712DFECD2A6ABC
5343D17BB033432F3E62939E834B48B4D7F9A1ECD95A80F6BD82CDA89EF23D9C
A3FE3A4385EBFE7949B84EF061461F5345962DED3B80B0BA1D11FEB59B435F3A
49F7A0CDB5133E5A5D0B5019F9E1D426843264201C49BE3AE7A7711B75C6AFEC
FF846191F4C6B573815A3AA972119169AA1EBF87F75FD4FACE6AB8A46C5A7A31
F4D963D4A791FCC1EC1757543978CCBCF47B963EA0B54ABE68416E4D5B042BA1
6717A5EEFDC56B6BED9054C8950BB0983A98653D3002F9D6B8A3699E4DC71577
28148E16CCA576E21333DEBBC3CE941D642B2250FA41A71B710C8B9C9AE27F3F
2C4AD8A133E90C3F9D7F0EDBA7B453A4A15E0BAC842BD30E95DE9A9F5CC97F7E
B31B54F16384D540F1CE5E52DD84F09B4422E1112FCFBBB060FA1A34D8A43995
0BA2906B425FE436C546E5D128D865235553C0FE1BAA6F1CC557E9D01FD4A4F1
F9AE8EC65B71373B6D422E24A273E5937A34353D574D8C02D877AD9958F75304
9E613B483C0C518D21E3B8DC2ABB58B41F0060951E935E02D3FC1F6C24556BA3
84425432F111F2A0BE88AFAD1F10D0988EE7D8C6A5F1E7C5664B4A9592882B2E
93428C8A57227185E3B28E94132C3E9C933E73345A96603B6CCEC05220CD8C8A
C72A437618C727DE07D67F6F6D5A6390ECCA88D2C029F4703CB5993D7F39AB60
6C3F6A6D114861D7F8CFACD64E686C4406A00726125345999C1624E9ED30D795
68531A59E7FFDDECA5DF397C0804140285B8EFBBC93F88315F0545E31B381206
EECC342AD4C63A43740D404896B51F413EFBAC14D0F46FDC29D08D6C63FBFBBD
2F18BE0047D51213C826A32BEB6EDCB90DEC4E42904554D8FAF86B59676C507A
EC5753A121B6E1EB14275551B059A650FA062208EB2B09BC5A4AEAE6784365EF
A3188DCD6CA63DD4B6DDEA6146BC4B10E106F3381AAE7CD80B360D54FB3283AD
67E32B0A6D2984F6F2BCE34C9085C270864321856E8081C403834EB25A0E56D0
20AF758E71E5FC4CAAA7DDBCC65858132F9F19FB33B73335966577EA32388815
CEEB3E1434EB9C87A9E28BD25D489236D1E88115BFB080B2E1303C2134712374
04112A1192E3D49809136404822BDEF3DCB9BA6E8AEB4C86A2F256721623E640
D13461A9124F4126F18B6E63A922F9932D1CC2C5D6ADB354B0754E653CA14C45
A24073E84363D40A2E06C76397740275CC30E1BCD028BE1E09AA0DE089CAD78A
7EDE4B4FF0014AA01E1EB6CB3906B979A393EB4F86B70C5AEAE8C6F22960449E
F7F66A8AE117015F03E803F66CF6463B3EC54E95E2717040AEE9D40A8F251324
50F9540D4745C82B9E6368F76E8AEE35A98AAE549D1079752119C71448E3B330
F982202654E072F4D70DCD0DFD081803739A84BA9A5604C54DB5E47C4D4908CD
1F5BA7683334738ED63768030188B0A6A5B6561E797AD2D2C94E132B9EF6E0F9
0DABD56C1F455DD353E2902E85BE87
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Bold
%!PS-AdobeFont-1.0: LMRoman10-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Bold known{/LMRoman10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Bold)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 60 def
end readonly def
/FontName /LMRoman10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-486 -295 1607 1133}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A2B97A2545FB4AED6E864068CAFC11C1B6D53
286E0C557881AFF6159BD803AD491E349272C4420D2E2274C589D040CD3285A8
9B4CF82A5D6CDBB3A3687E0643D2A256757CA467EBD41D83C4068B5F571BDD53
8E7B7B28273CEB38BE621F8217E7D0555F034EACCC39DBF40BFD9FA372B08F97
2001D6844E132A16F34B8B7234D5EEF957099FA45E43170CAA6EF70241E1A720
C1322AA56561CAC98CE90766897AC0611464168BA543C5664242BFA41B3D7688
3D1F10E97CAB51F4BE34CDC94C0EAC376AE280720C33DA72613F8C2D823AAE57
05F548DB3DF8D58096A65BD301502685F53ADF37350A323E263CF938292ADE86
4E420919C2AF30A8276BBCE4CFB3684CFD43C529A2C3203616CC19D8C144F695
88C9ABC4B49497A29F2E748D7C8F5637D9C9D7F057BC0A7ACF91BA7809044D7C
28A2C3C0B39DFD381EB48B2811A3B289364B9AD88B05EC6A2B79F841BB4599A2
76A8D31BFF321CDDF6112BF0C2C1E565C889A49EDB7873A2A09E0B2035E8E5E3
E924F96B97B49382EF212BD25A0E1CD7F132B4D69A79D085D4B3B4F7AB8199D7
54C5C273A119FBFDA9F913E211DDCFCE950DAD1CD18206D7A505D1F6F0BDBBC3
C6692C9BE7A04DA687BC96166FFE480FDDC1ADF8DF328CCBE1B11027E05957EA
41C4F0C0F64941E6A006433B78D17D537004045CCD22F9B96D8120CFE40CB7A6
FD8FD92293D3389F42A29F4F61A8D4A782A141035935D0D6DB2BAE585A54CD88
012870FC97E3FDAD1B5100045CBE72B72E82A6E26D2FC22656E4DE50233CC0BC
C7A54B9F67758563267093C77A86ADFB33603FB3A876C770C80B465A53F2F2D5
8112FDE19AB9A4079E0C90855C51249F2C2240B6EC1B5E300C7F388406E4C645
9490E4F6CABAB531EC31521D635B141538F192D31E24E9D288F43A978909439D
7A156AC8F37C032256BB99967897E536D47EA366FBBC2C9105B7434040077762
A7BC54551705281FA3DBEA2D747BF4EC1FE15303621A111A66DAAAAA70D960BE
4E232DE968DA096E1F56D8759534B87B21E910EFB2591413A05CD393B69534D6
E2FE1DDABD84A5074B583202BE6ABAB078B7D433B58368D34E5818D517FA4196
62D95A571AD5B41991909B7B03761FF2070B26F40AAA23EC01EA99F5CCC32D1F
A8E1101310207D4856FD4CF4FD2543B7E674FD85E23CE0FD220FB1903405EEEA
F0E95EF2773E96A5067A963BA655DDB83B3BAB884BB606362847BE2A178A1E5D
B965010ADF443FBDC3D963E6BD1216304D106252435EE004F57D41FA29D0FF3F
EF0397028EA65442436D32D410FCC29EDBE9205C37115F01BDFFB5EB6CF21444
0E4DCFF294E01915A39FD1BDD7E2AC003FF350B6A5D7B7EB939323B64066465E
00AB4F96BFAA2C8A8C89D44EAEA1A45BB6EC900FE555A2C34A27E772F3A28691
A931DAAB33E447B03C188475E8F3C861CB90E032EDBB29432AB3533DCA6D5345
531AC5BEA159FEF3D5FAEF754ECDC9238EB07CA9264A1B9924DE9EDDB672E5CF
64E5F89CA229298398F85755AE7E1DC42399BE9FAF8DE843C8C20FA440200FF1
BC0414FC98F0F035385A1F49A5C9D9020BF6281CACD2549A8AE864481D4F76BB
941B1832E3FDBFA77DB2D4832F9D1B482062EA4F43E2110E483CAB7EE7C210C3
84F130769D75D61902FFCB34DA76DED556A1E7769B1E1BDD616AAA66BF5B6754
EE7CE90EE8C3B6E9C46FC8BCA434A5264E6403BBE783360B95522684DCBDB783
5E97EB66928F45EA8146164441267E541E05B2B0A8CDA0B452409C8C765E4F4C
C0F2544D7E77C80033144207DC526F24B186BF758FFAA8B678DF176A491C992B
3061D71E2CA93C19866DBD95E41C04BF12AD619F9CA83ED2AA40A2D74F451FEA
CD30A472C61D79202D3AB929B32AEC0947D1ECB82B90FB04F17462FC632BCFFA
DB40D2F9C9F2C7F256417C604CC5A4CC9707114DD547128F3C4A4A2428B51852
D4DA802E46064447AC6D1A15CF1D1A3797CFE85FB55B56AC0402BE8F11F7F211
B86E827E1D5139ED8A122CB8657B2785F10486C7635309B468D8754C572F795D
E5DB7F534D67CFF94947EA9D323D016D893B519883ACDA05386BEACC3228335B
B67811370645D5A389200E6E6DA17D2763E1E130164942DA5F704DE35D983D1F
DE8A3B5D229A41A206226DA21B6B0E1805B35787D9EE2D838C0C93FAEA6B72F7
907B39AA02F5A5F881CD76E4B23236F54E26AA88856FAF1AB62C2BC3EA0DB349
480E8EFB09E6D234DF027C61C7EF0A07843E37CFC323E5ABC80AC9D793153E99
C4B4F9467A98BB2A1B028AD224D4E8FD6F8BD3255103D823B86B712CD58FC7FF
3CE72DAFC207F82CCD8250F4BA04D50D9B6D7AB282D6F8AEABE62D8E1E884D74
9317C5CAE473811ACC48B1E16C506CF003828E7F53B24E0968A755A2475A6844
6189BE6CE558BCEAB2253672D95FDB5AE79051D65A3E75F00633AC1633482964
94D8126EEE53265C8F030ED6F378C43DBEE7A6450C83A736479DF26E8BC8121E
11712C9DB2DD051A85066E4C8A831785480A3A67DC226EB2B96427794FB1D20D
9D4F5EE6CEF4CBCD7653783A51198028FF2C46980F42821A0BC9D23959D8B972
88C1771381D3DAF5B148F098CEE2A1576B533E091E4820C12FE47E3154789E02
FE363C31913E245EE5545DD7B4C68A3F7946C25867F3A5CC88542A4D7C2A39E4
518EE7023BC944C85539D2FB653AA5BAEB5A6C01DFDBC7ECDA793F53F4CA80A8
D55A9DF71E013587ECD6C22DFF533E5C7E3CC5C40B83B5B104E77F7769C22788
334A91C91F02CE675DC14AC047E34E287A975CDD8C4D720EBDB7C7064D39ED43
90E4606AF1447602483A341A59A1B95EA285C94FA51893035C07283661D1CDFB
C34C588C960D438F23577D73BEA16D73BEA8CD5127E5BF5701F9D4D8E41706B2
F0B4DA2A814D14DC1361CC9554DB2E46B161E4E3D9E8B5EE021FEF16B633D789
B5AD9912A0DA55686D8983F9DC471ED6488AA685D04243BF460051DA59D560EC
32CCB65FE9498216960A09A3876B6D3EDB65B9AC89302188343B56FC7A0D0093
691EC0C33662266DA859B22403C1F1B08901EBE7607A0A86C523C36EE6802CE9
1B5B27FE97E1D595E787E96359EE9D23C7E170A20A42453C2146E264C3B78DB6
68FBCECE86D88AB219699E32348310D7DDCB0F249FF96E2C1310B086C3C2E9AA
B40061A6764E557CEC87DB572A42B4F49B20271301D7391127468DD2C98E4102
68717EA1D47B528B4F4C828D7FF50D459FB6C913BB52FEF3A6D47DE245DC2741
0CF1220E3C10E2B44C05AF6A6C7DBAAE133FDADF6802C21B5561DBC1310F346F
4B7BECE793698C75BCDA9DB4FFB4CF7052BFB1EAE737051C55625AD1F9B8F996
6E65A7C94A8E3410944053DAAB56B1075A0C3832220752D104FA1144EC8A2A03
707848E83FD4D72FE9017FBACA70F73D9E899AA25C2C92C8E401705B8508609A
854BD2282352A36AAD43975ABFF9D5FE2BD1B4CF419D4E5E8D7577074A7E31F7
C63BC4DA2C8E1C1CEA7000F63CA5BA06A679945BCA6A71E4329DB73E7F290987
87D96D8C751BE0742A7D74895BC47DCAA02E982F9ED1C700A42DD73037E9CDEF
09C16A2C0FC13C8732D5463F7F55696B895C8F3034F885A299EAF758FAE0CE78
63428E160A5364EF1F6F3A8F40FC28A8F80062CD6C9CA9E0AC7DCB0FD9A4D39E
C820E0B6581A24EB1391BB3DC9666D70DD0EE5E56361CD2703264B69BD25A5D1
00AB1609CB4D90B6068A5235A94489F21B514032F3FBA5F84660F955C6F90995
E1895A56ACA672B233D05F4FE08B7DF160EB87CBEFE56A4BA1BF3141E88B83E3
3BC73BFD0D14217EB9F2CB21F0FF6087C730807473570B24BB155265E2EA7402
BF17ECD71219A16E5A1B19ACB05975961FDDA498D72C313AEE1EFF1472662635
D4BDE72F4B16916E28A58257B2CF170796521017EAF27706DF0D1F99A27E38AF
0A10C608C749D1B7D498EFAF8837F3B650A7FC244C1C70567056000A41BDD4E7
C21094A0FBFB4ADAD5356311A19FBC6D656A4EDD874FD41C738DF99235FC8AF7
B0A7FC07C2E6FB4A9C2641AFA02D2B39D2D903417F1035C93BA9ED147C1CECE6
AFBFA6625B81A141C3AFD1CA05777BB568027DFD0AC78C389CE68CBF1557B048
F8C9E46F213B78973AF9759ACC9DD14B661CC9D209B631F3FA28B1C6BE47E776
4362A220AAA68E2CEEE203C7902489D4F4C606614160090EF1DC1CB0740B3FA1
B24F6630F31E9061C1DFE6936425CD45C0A5A4197BA038ADB36BFB0B0C508A88
B26ECEB21A1007D6F0600E6791BA1EC07C6CD73739047C20E7110CEABF5CE69F
5898F938311D40E0D1B47E579C0F852FFBE4957CDB27ABA4802F081CE802E1ED
A87B8C246F89A0EB22D1C6FDB17142AF047AE11198F23F53001D92DFF3E0E4CD
301F5FE888E50720BC0C88D7C77FB1097C6B36D6495916FD69B176E7FB822582
47687682311E1F884E50CC3CD25E9119FD1EA2D66482BEB6575E43DDF6540B30
BD81EF70708D8A5054D03062546B3B90B798AE5ADF419E9DDAE4CB1B8533956F
CEB913E979CD96B4F9C3CF1DCA93BFB7AFC9F0992BE9A1D66980E3124C379512
1827DFE1B8189665B05B32FC49160E566BCE9EC4ED830D15977AACAD4B90F90D
EFBD39D68F1405CC37786A223D60762002717E410B6673373215DB1BEB6EF81B
FD76407899073F9AEEFB4FB95130181253E9FEEED55563E1E116FA54D59CAA81
9EC6A5AA09354CE8D838A691E111CA8FE2C5FA3DA9FAC82D28E96B682C3ABA05
CC5EA4896A7195B0A5D40E1CDDAF7F0888BB02B27E8C0CA651DFD7BFC5FC1ED0
C096D56A9565B6D4AE9A5651A1BC668FA4DC8ABBBF604C91B007E8773E71EF4B
0C762D6358440EFC9EAB6D40D9E974998BB4E92AE72C668859E23E141387D691
61AE3DB202EDFE7FDDDCE0D5C52E937E03744732E3FAB0FBC075B7350CE3B1F6
940FD753358D81D6EAB52D679968760E5B4B57EF9E3310CBCA79183BF6C68B2C
D112C8DD5A99D30A6C4FF4D07774293F14F28ADE9DFE77CD3E7AFE2BCBBF5760
777739FC42EE3624CA9754C4B6A8B33BC05A3C77ECCFAE3FC2B4FEECC7F8F63F
BAE0648833A8A814E534C18C9FABCC46D24DB46E33983DE9AAEAA7DAFD44C995
C9F6BDE45B9E7C914E0074C4F6D3A398A33A4BBBB1AAE47F2584F36B0027977D
6B37B2827E64FF0CA96215E625ED71E3442C0A00DD938476920CF67869A9DDF5
A29AAE52785CED7E829F5B18B621B99B494EBA7C40428095D02797DE9509265F
6B11B12B8050F6706A9A0E02A6AD0670E1492F0FD89037026930FFAA41A67D26
13F71D09A39B18E8CA380275D93F8F6670E11E5B221716F310E504486C27C0F9
14E665E9D8D06B135D3D678385BAA1666FA273E39AA72250F7528842FC37D91B
86475F3CC429CCB3D77B63E54344F80D589438BB8AA51657E0899979B37602F6
FCDFB887A83C42C50F08E66B611F54314EBE4F6F195B123171A69B2D42618191
0E8EA5EBF6D1D3A163AD56BB2B348C551767F4AA82DF1FBF64BEFE5CFBA94C2C
58DD5FF4A21DF1D7B0A9889D63BE4846B757552363EEDA77819CC32E81AE692C
5AE0C53DB380ABB86087BDA7B534C0238CF65B3DD3986298DE5016DE66B3DBD5
3B94DABD661B312D89212889A053C62AA1B3533B1E9A05A9DB9B12A5D7599098
21BB1FAA64201B5D90923284E3800708D97515CB6CF112C2A89D2D44816E9074
15D8A6AD28B3B4E057EDEC637353C7D47BF41FBEC88048FB5956EF575F9FD4EA
6464FD3E7B1C3635FD7EA160518EC3FAA2F1F730CA8B52DF7F950CE1BD427D06
503FA9AE559D3043D71284811508D69437CA0058E6483474F672CC688C3A9ACC
1D7A74889A35948DA1997E9D378CDCD13B00FE568C9C7FD31AC800091119DE5C
27490C1E3C4C8783C92EEBF8EF52DFD5BD5FA826ACE256A0F72CD410E0959D3C
ADDF1CC54C45BA2FEE00D39157AA884860A45FF4F2868351757DD4DB80FFA13B
596DEDF516B4E2977709EDBD3DB7AE516C55E742F598B2DB63C682BA7058FF2B
516EE6A1F62AD788D7A56D82E1476B5F6EB5D9F6C145821B54AE1B7D2CA88195
3F6B2185CEDA95F37929EE55B032A5FBFE5991BAC2556AE99986D7665C53D66C
8744DB5881A2207BED1F3B5D595DF7EB3A74BD5C497F391141F2094F8EAB4CC9
0B12E10F8FD2E5427FCFBDEEAAC67F14F71B450BC562A195E9F1C85A1C4835EE
254A19F24544F83FFE128618BF04C375EE7187D866683FD55DF3C029465AC526
7B36561BBE629545F542DB2A31AAA7432D7D3B52A094140E4E4D4D4868F897EA
C5B45D6A20C60658D61E59CD2AED49DC0F9E5226FF823955C3AEC0EE98F553CA
E2C1FF4F9E51156B9F74EE1BB3FE68FF221FCE41F4BD22339E88CAC82038A732
2686E9D8E13F000D152EC2BB11B28D9903C5EA1D3C52BD0BB846D7D5CB1E4FF7
02115BD0CF29F74199D60E0EDE42E30B8ED641EB4513CE105D882CFD5837AC55
0CFF9EA3589E88E6D784EB2921A453989EB7CE1FEC9D31E66BB00C09B952A829
C1B075302C030D29FEF6FD6AEFC263C2A95E45CFD44846BD52B78E219263F40C
72D7984425606DDDE632D7AD1A5C32EBB3DE636A8E4EB10E500A144A602FAE78
B968D6A642EDE22B273B7B00D0680BE629166D338F02FDC929330FF8D0748163
0EC3129072AEA5778A135D164A571F661A7D163B7D007B43C1294747F3ADD403
E3C9F6D688826BC7E233BF57DEA5FD7A0EEC6074F1B7334E238D984E62C71112
8C794F77BD223CF144C0FDBF1576BC1C26F1D951131DF5557EF42876F76EB35E
AA4DFC8050FA50C4A95601A9125A3B90CE131D3B48612958B389F643AB72508A
847E93232C034664E2C43DF499BE3810C38A48194C1F91A64C7EDC850C1A6DEC
3D47DBC006F2E69CA836CFE119D82FDA474FB08C08665B47ACC5619C8C6C544D
519CB24FD22BEA989E0E0919A4EA35FAC630A90903429D30DE2459ADDAAC725D
06E4C4FCDF88A198D1D2671FE4BC80BFB93E11E77AB2682DF6366541527B6A7C
0EDA3E239C23A9BC94D2BB2581629D0C9CEE557F4DE8FC7FCFF15F02AF05BE0E
C725003E6D283D4585C3D2FEEC635A9F1E67D57FE919DA0F8D433CAEDE97B27D
BEF7310F51AE03A0F69BA3A5A4B36E62F6AADF23F75393703CAD6846D687D107
13BB0097BAC6AD4AD2D77635C364269A0A1824B829CD76E3AC5D069E9CED1955
9A71B09CDA782DA7DA169A703543F9E8685749426E9AB5A9857F875A51E9BBED
3C9E9AB2A8A79B5A871AE31E0C36AE3C09162E8A4FC6CD4741B38836CB599DF9
8A2463D0E6CD5FBFA55ED7E2E3FDF730425D7A2BD984384C8F7F5F377C51A8FF
392A822244F5550DDDE2FA03948AB8B6D01337232B4F684D275FEF10E1C8DD91
E5EEC0D13882F30D0BDFE5F57243AB565E65DC5CD6FFB3B06D23DF494B83D25D
0B9C6EF72F6CA9EE71D716A24400838344163FDF8417EB931EC402CA0F2450CC
18B4D22872FD56BDCDE19E8B67B5DC829278B1120A3A5D37A68E599900AE6E4E
5ABF7653D4E191CA3B5F623A44BD83E2EC42D6C296FCAC962C6C24DF5B892BE1
87B00481144E142DE3E1C7CF994BE8DE8672207703D00D9E6A248413954A6710
E6503D4DC2FCA7AE4C781A2AF6751AC2366302A42EC4A6D46502CCC5BE14C164
3C89F9703357AC4BE04C78397627ED3AD4456E3A67BF5BB49920F6FE6620D69E
AE7B2C393B778B7611053D31BBC4670C6FFE45FF2528E876D2A4A3205A594FA3
24A80535967BB035051254C0116E9E55882E29B65E5BED61359E90187A6854C7
68BFBBE0A19308E83F0FA487B7233DC677AD402B32E799CA87C9992DC1754A51
C9E754A7516E6BB43756CE0D57AB331CC7F4528F51479C03EAD7477181F724D2
42E49D3170235059BFB3F5AA27D10E337086144AB09286BE3825A1FC2D7BE084
0C35FF2A964A6D5ABBACCE69775DA6C04A4798E1DEA814D34AD1C22BF3D7E222
146343ADA94FAF6CB15C3A795D653EC04001FE94B4F0BBE3331D35063D0EC226
E88622D29B4BD7FF3FECC3889F06CF16EF9825F6B2001EE4589A0A9854DE4BA6
D9520C470CDC546ED84D1F231C580009991D05DDAB231758BD41429FF2C0914D
F28D140D6CAD39FC011FC1324F0F306941A42E8379A9B632488C35752639E1A7
4D9676E4E99291D447074001A032465003A5310E04016C3AE50698C63E335455
EEACB478D3B2E478DE9281B6E20003A1C9315A1DCEE0B86016F847845EFF4DEB
CC1A2CFA0BCC95E3FEABE2FEC0763ED425A255FAA7F439CDABD9D54EA413DE4F
2B58620615883B0E589EE3A0E0FAFC9DC93DE177F14A1E23A06DB14CA1F713A8
EA6A54D4D4D8A18B49B704866A503EDF8532F18CBE8513DECCB3A0D75FA456A7
1DA3FCC5F15E5C4452AF3E1AB2933CB806D30441EF2F23E14EAC23753D39FB26
85E03CE9CB18633B63A89B4E985A342E689808E7996210F99DE85EE281228C73
36E07F148334A2E453F321F1FAECC837D00890473726B43BF80D76E967E216D0
BFDFD8EFF9C41FA280CD6F62F72BACCA64D595964D1D20D0D4385F17600E1E43
F5EA1F884939C15A65E020FEF720BA480BACE78DD43DB1BC2E1EBC72A1FEE202
77695CCC2E54A25041A959AC738AB6CDEA63D0A085AFCAC3667E2ED796A8D6BC
9CE98F2B71D98622C039ADD8939BE7366D1E3226749B9E23E4C2AE4B9E985D01
87349A638017555F046176A9298786AEAB1BF32C05D84EE1A6F363888E2C465A
D739C20EE4A12334AE7EE31BADAA0B2DED9BC3E035459CA5F73DE1E32D80AD95
DB2E33307BE59289726FC97AB7CCA4EDC83FA4D59E72C3B71174192153787F33
A65221802ACDF73DE0864766CD821AF3AAE8945D037F78D6C568F7140417E728
104766DABA0A344DC4E5319F0305199F5EB901C3B34482E314D1348D8C871D5F
0F5BDB7F2A35EA7D7C654432845C2D36FFEF17DC8428791C900E377B7845989E
EC1198F23F53001D92DFF3E0E4CD301F5FE888E5049796B93971B47DF439558C
B53CC12F56D3285CECAB7A84C0D558D47FD0D0331085614FB069CA8D80059115
F43F0A93D192414CC366E7F06A8CBECEE5D746863D5C21DBEB0A83FC660BEA0B
95874ECEC5C8683B558AFED820387436E05EE2FBCBB39F81DF5C6F78E428F806
1774E99961273EB9E4CEAC2EA4BBB90D85756EBB96B5021481EA4E845488B796
85C046AD5CFBC453A35828852681322F471CD166272472856896D20438400E0E
78630FD505A174BEB44068BDD708865C4E3A2039FDA78228FF7F036996022911
F64D6CAFC422917E243C440FABDDAF3F5505953B121F2D290C003C29FB2C4F83
465AEA9196A25BAD468B58580B9CF058CACB2AA4FB421C3457FDC09D3B8E0844
C74A96F6CD2A907CD9398069A573964AB81D07DA46E56AD8DE314808FB8636AC
4B4F409C806CDAEC4EDB23557339FEFF5716F817647C9F9146DE60BFCFDDB41F
4413F59ED2C0E7E2EE6A389F64F3C4CE59ECDFEAC6606F6E38251125385AF164
7A4E4169D825AAC0866A00F58B5B8DCCA40E3253F2D481495290CC87BABAA96A
5D6B15A68BDDB56C1A99ADD18E9C3289A0FE69D1B5C4C56944521E76439B5DCA
7732A29F37A08BC718027F317C50C7D8E3C246E6648EDC162A5F3CC835982581
8D960C6F4A305CB7A6827E453C0CE7DB59931D70D7B70DF3FED09A18A3CDC09C
4258A404966ECD7319CC2ECC68C43E9287A27F8506F5E212668FCA715BF18FF1
E03A69BE8B832A195EAEEEDA16C986DE3E71D022BD4096633DD07F174D0FB99D
2C8477AB5B1C5A25C9037998219241C0DA67E5BEC040A958B14BB3D782151352
1F64CB5483D7F51523208644416D6FA5F5C34F34EB669B9FA7597579F551F045
0F18DF8EBE13214E89E023236D0C6EEF544CCF26CDB6FF82F3378CB493CA2527
D004EF0ACACB48DA6611E0ED9D102FC5598792E6234F8C03EE2C74697D12EF1A
C78B34E566672E71A0A5B53E6FEDD836A3181C7F0944360D37BEEEDCC2D4DFCF
F453B919282A410A7CC021A3B60D1D8504A693DE5A28210BA74B28459049C09A
D75A27D5D356DEDABEBD4D7006A2629BCD623C32C7B1D38819E09E5C6F0C7471
2B2D95BB63E7B1AFC8A6B2C9EA2FEEF1F900304C2FEEA730FED5CC1B6148515B
AD14D0A91EF121B26F80DD9B0B22002837FD8C7CAC385BEBD60D212645715D79
7FEC9C8A4F0EEE9C9EF3BC025C012E85B2B1C1D5159025883E3130C650DB442E
C29BF25310BF92FBF4379E93497CD0B8F74C1F603609A0F921F59D19BDDEEF94
B13807520C8B4F0FC5EB49561B4413C38DA7401609733F47D9990B238122AF73
D45422B85C36411BAB3D72DC17FA6DA648A6E95483E79CB8775F410928E48795
C9159134CE1E0802909A48C0455B078C8984F75016EE72D595487C1C010DEDB6
BED24CEA54F2A86F0CDE2C7F004E59B9C81FC990D9660E61632A48C7C22F3AAE
D685780F3F598F8A1947D5A2F76CD61AC53096FA5FFC6A4B0DE5D4358CB69DCD
7880739497E4321F75C42A86C70CC8E4AE8F6F84FC653EAE2D0D3CA48259DC08
D6ECE0EF01BCD9EEC871AFD57FD3DF12FE07363874F62F6E7E4DB1647D020CC7
B913E10F390D8168BA3DD3558B16E94DD6CBC32B1D1632368D09AA26DA4CC83F
D73A6DB7D18CEC44CDA8E87EF74592B6FB3F5C73BB6A3319CDD3D3F40DDDB6A9
41A0CC691A06F4C5ED116EEC3497D2D84B19F68EBF7125FB02920466AD93C425
DD384DCDD067444272BD8E263B7E189B0658344F951530A61378549CD94322A8
7BFEF9A4211E2D9A9653C0FA37A28699D9C0F3EE94AA32E3C58F8D7F803B5EDA
9E5ACE98AF85DB5EBCE675FD54311CB14681571754568F26A27C674BCA1DA029
B6AD3386DB54549957A9A4BA9DCE93D5063F7D87E6F759A29F32ADBF5D37B697
E1887CDFA40EF09A72B1959517A0630A94699E2A1BD96106232CCB9509A00BD8
0C0A81B108DB3DB41CCBDF5DA9C54FB979E085F5FD245FEBFEDC9BB1134443FF
F918C25F05ED5DC9CE3CBB1DE5A1A15CE727411129F470CAD1F0B6D1977D6CF2
51568EDF390FBB26D5864807AE868310A2AB15080359D6C727DFE485B5D572F1
CAE516F2FCE126D6BC79EA3A1963B9DC8205C8C99B5F1780E7B51B12FFE67AB8
465F525E78C8476B348156163486B0867DE7CA55C54D25630537983B994E1433
C81FEFF4B108872E8860AB6F635C36241AD0ED07778DE2F629580CE01362367C
B6CF8C54884B979CAEFF660A8FADB9B11B3D0DFA60D4F1FDCE6B39387CBE54C5
20F44C03B599DE2304679D9680B7C482A7999611BB127FC8E5D312CB4A80E94B
9F75FA7DF1AAD0F96B2F1290E8451F6C4A4B510BBD233F45464221CD83BB0FFC
9D031B2303184290CB61CB54B870B7C9C0705374E0C8E16ECDAC5532C94C6C24
6D4A5A7C3B4CF4FCECA1FE4ACF98A0F30EF8E2640C074C521CF379526FA0FB75
CC1D909407C93C367DE3FFCEFE1D9D56A1660DAE90B755958197A33515567C3B
A7CDD616DD17877C265E77F708D49AA47248A812AD2F45273FDD04A29FDD1974
BB2690ACDBD76F9FBEBC15D742F7206D3F2AB567FD74499B24DE5052F41A8EC5
003DFEC0732A013ED6A5EFB86480FA9072E4E58620CFFBC8C6E51250F22B8382
6CF29DC7C9DD280AE72E332B074E6DCE1DA35C7640E83C6221A59C6AAD10E16F
E5C7A72657A80F1CFB288E5618BDDA669AFF1099E3D76D55067C591328E391BA
0BB3AF6D9BB09426778C3D750976876ADABFD96E5F33512A0CD5BFFD8203AAA6
5D8116654C76E72A1E10C8A1938F8B896B537462AB0B27E20C9D3CF8D27B81A5
5DE3F391F3024A413A86139AC9A4AC68381550E3E98D5590DB36C668CFFB45E6
E44703FC7AD68DBAA09BF4E38DCE88DC7F881794A16C53085047911D30B65CF1
40514D7DEFEB70C74E886762140314F3F2106069D58578B215A9611517097EDD
59B660C3B8991F7857064BC3D189A1B8967DECFB540C0B2473F20BF05A8315BB
C31178398C4DF7A9210FA6E4A9E942F3C6B70266EDA218C6D2606A4B773ED517
C9B3B0723061CD74EC688B915AB6689904D57622E8B65BA9E30013A0C6F2804A
BD8B60BDF036C8391BE7D4B3E16A98F1E92AC4A52A846A49F1A7D264A22CA71F
5EF8C644D13204FC2137385BE0D5B2387345C9FC4A1BC994A5B78268276EDE30
15BEF3276AFE9F894A7867E786B3FD8695CC7E4D624573A635B65951DC366F76
FAFFB63BAB7FD13E263C2549247D8DF74C6863D43B0267F469618B27E009330A
BB76248AF385677FB2E15F1D67FEE3AC5BFCFC0EC8839CD9931CAE4CF7FB4DB6
0AF26D40E243515ECDC1C7F702FC79EAADB6D2D671F7C74A345BAA7BFDBA7D2F
9B0C79E4635A10CFB39EE250AD0FE6FE968F660F023AADD86B025FE51B8D9481
AA5DD8D1A4DE0FC72A1F623BD1245357B25695DDF5308F5C5C3C77776A719BAE
108F344E5F0CF9DB294762537A84DE04CAE6E98D4AC55330E8A3421C1DD9ECE7
B41ECC4C92B197E1727192B5A2F9860B20D5214B61CD6B1DE194DB09E1D518B2
1204776A715DE0C28F61B1C5B1B6CDE7CEF529A1CA4D40EA659C24098088BEA2
6BF5A725FE56025D1E046C68298CD26E5B9EF345BFA3EC2911E2B96A0B40AF5C
AA2E3EA826C8C1B277C4770A0CC3EF0599B2DEE15133DBDCFE59CAF06FFB28C4
872B301E0BA418DEB2EB2F6D33E1B23EBD4E3C802D8BEA7EEBE241E7C7DA1E41
3E013E4AE5BF50A969796BF3E807C04A3B0CBDA9FF1FC8E22FCCD8F7E31EA89A
855F20E5D15DD4620EE569599C3BD13480E431C10BB4D94A38E4E2071E750A97
2AB443FE9AA01CE2FA78B291B952FC8CE980E75A230B890A3707CF4C9DE893C0
130C8058FBF1F1397DC5AD95E65E9C882F90099F97D70AF54E554A8F28FDAC53
748FF1ADF628675D1C32197132E5B696C4875661730C15BE7C487BFFF3007382
6142850A881648CFF2BD247BEED5D3B35E9C71ABE401EDB52C881153E8228D33
EFB93F057E5962781DDF1E0034DCFE58B45A71D4E9FDDFCB897B46D6C1F3266F
8F48D39838647F35B6059CF7286586D1DE7A35B8F881C58222CF1C4DC905B343
BB72416574240E31C7092173F89341C7723D718EE15D3117574C43A8A8D07311
BD01611E70ED5E18C5897CA59F354BD2ECF30C6D9B42E595C2D8EE9DD57456CA
8D38C41F453CF1F228BB29E00D080F0782EA3B1142C76B364D2D85AF83BDA04D
51A6646127E2CCC2232674924E662B27AAB6D57C09F26DF73CA60BB3CE6D39B6
2E74D162022753ECFCF0A21A710B1D5322B97803DF839374F073EC88745B54FA
C04CA3D6CC160E22513C8895730986DBA9A8C89CDC8AA291B82D3B55DF3B2247
144F40839FF356FD990D7DB2172E799687A7A619EA936D0B6239F72579B0E993
70DA9C9AEBB83310907CC3E44AA1EA09B9528809ADADF12424004FB4E21CF297
80690190D2E829323F3BA9F7ED7D399CE3FE034A06B962B7E28A73BE0B2713DF
D32DEABA293EEEAB63CC99CABED0A49CCB78273C3585F37FC059FDF17E16104F
99E13190C92480439ECC2081B0004DBE82B868F1646E5489C5662EF190E9502C
097B3D9123E213615EA2D79F672BCD4D19F6D70059D309B72D0A48EC241A295F
087005FCA1C89BC1452A6783098F3D2A068A7F375BCFC1C2B96879AC6792E812
426A33CD78A844120B5B65BE80049E4438354CC6B692896971F28513592B2818
D32B17257E6989B76A91534C2564B0516C18C9EB0B1AFF3B9E69C84B6C55AE73
4229625C964C5B35F141AB733822832F4A758285BADF331E56215B34C69B780D
6828711506B0ABFA6979C0AEA235474A2581C01C4AAF34A4F7C9E91498F156F8
B5EA0723C590C09C74A5EF039C8EC013D24A2FBDC4EDDACCC1DDB52E196DDE78
16C174146DDB16293F790C556572C54BA499F49459A9E1106658A5CF85EA6491
34885015C2E04D6FDC463C1510C782FD9288A784189E1C54A1054637784E413B
472B6341D637AB7CF2B4B8DD91CB69558534CCE31AE7E157D0B060877838B0F2
392F12E2508F95949634071E3405B3E415E9406C031CDF7D441B7AE1D7BE2A34
836ADD027CDF5266E418749DD9664535D3D20CBD00EFBC3335345F7579F6AFAD
B7B051FE6BABAC66007C5B9E2AC069379392D74A6C1BE06C34676C1A750B344A
8C867D0962CD51553F259D2A7E5049538CED34E669A162E422B331A3242DF909
2E7311CE2A1A0AE53506F8B3D5EA3FC1FC92FF7B00CE0AFFDFDAA2DE6C0097EC
1BC552EBE9B4BEDDDDF27B0F06FD8B8594FB07D42C6626F4AEDE9AAD2C8716CE
9AB3E2315079E1FA1A18E90331A61AB63356E24E01E4993456136E84F5A925E1
34E8E4D76E3EFAA2F49EAFDDF799DE86B6E4AA470CFF413429B3CBDE2628B4A3
01C4AEEEF6640B47751DFC2986440D716CFD5D2E9A57D84846762BE96B3F92A5
534030BEB136E2DED01B58B8684AA0C7CB7FA896614FEFF85A48B3A327275F7C
9A433ABB0C95B77618BA7AE208615F5D00DB8AEDBC8209595969EB3220959D4E
2D36FEFA77D26C34EDB9F2D1D494941B64CD9D0B2A5FC1154DCB4F6B2E00FD79
8F0E19F1F69F478CB3A53C83D6A24F1E84D3ECA5D922289DF434CC3B75118AEF
A5E9B1E80979B7487BA2CB786018E20A5E0355AA348517B49BD9220AE366C07D
824749D453FCE317F53A0155972F14ED40653C899AD3D26C369A7FCF5D251306
2CD1F388ABC36137C2137DE0D7EBBF2323C750C674154E15AB87B5EBACB8F10A
27E2B97314A9BFED3E1145BF152CCAAE3C09162E8A4FC6CD4741B38836CB599D
F98A21C1D5EBE4AD895425E4FB3315BEA6E2A5443A083B4EC144BD3A04BA1F3E
668B0082724961CDD8AB05CEAD3151356AC0FCCEFF313E863BA2720361D2BAA3
707F23BC0D8999829DA93DBFD4A001BD6BF9E20ACEF6C80D3CFAF6CD0817F41B
505FA0B5F906C537EFCDEE4C69AFFEF89DD1188A93AC42FCD811F7C7966D2112
DB9A3120411A87D4445B935961125F4E43D88E7B92DCDCB3F560C5391FC5ED24
F2D80EB5CC9C2D3BD64C29728FAB41BE31F50BC4FA584EFC5ED60AF6B276713E
F5869F582AF9C2D26B15F8BF36B10851B0883A211E7D47163232E7A7E0C1AB09
219E71DB74E88971C070FBAE2C25A7104589EF3883F57C1E1DF9F4914F8627CD
9EF1D298299A9FA987376BBC4F1291FB015BB0543926AFF3EE9842B22F0BDACD
B9736ABC0CCA3D2F073F1C0990F4F0171D786389E89CAC93255D8EDA64581718
ADF5FBD7277E57E9919BD1055E9B1C88597E05F600FD03CC515AFA76D3B85160
322A1D25ADBAF9BCE3D81E2CC477721A7B7FB7820D5EFC4908E59A59049EACDB
88F80734E7F9CB5739D3DFC8649587232A76FF010D2AD94168B2D6D475471A03
73B8D9B9691DCC3CDD0260801639B3024B7847E996039601F6AFCE1BE74B1F50
25D9BD7DEBAD6FEE733462DC6CDFB7D0D118A74092D1CA9BE1635F769E2AC145
9B0B3AC1DC117DC7732F983D6B19A9B435B32E268C5C50DA95EF3F0F94F5CCE8
EDA8362FE97F209BA574B5D5D039A77BA46592A9777160EE6EA3E6E8FB3190B7
E1BF4C2BD3DC8A8774EFB7B38376ABA7407CC293D890A2BD0ED6CB619DD55BCE
4039F52442A0323EC2D622350AEAA20BA78BC29D8F0173B0CFD548B9D38371EF
4EF65A50468534353B20EE8444BFA42B5EB6D2DC10C1B440B5B316FA8F6565B7
C05BCFAD0B6155E5208D976A9561F7A2A4AAA27D75E800B5DC2D33FA086A3257
406D4A30C4FFC8DF9C2D5213CF2A7D15D695F3947BC776B062381C25057FEA90
D02F10FD1F8D7284E514F58BFEF59AC638DAA66BDBAF071B03AAAE18783CA811
77E26CF828FED0D16B16987D62B6EED5BC94F6BAD2948665E1E90F4DF964B074
E18AB38C3F018A87B3B8DF640A796F4BE9068BE20BDE45E6C67C0DCBFA29A0F6
81BB7C42AB16F3DC305839233A6D79FF1BB42DAB580509F4B91B6C2E1D3D8099
4B414731F0AA47B9FD641EAAFDDBC082E579A06D8A3A323458808BAD0A46926B
B04D18C9BAAFA2320FEFD719E43DEA5FB04E17712A5C7B1F1047F47883359E4F
FBE3857AF495A7F2B6D6FB72A150148B79B16726D5BD1B6985E26BD50A3E718C
3B80A7553ECD27B328EA8481D053315553F3C5C3BE5D2888533E687A6A893A3E
F3E520891FC807DDC7F0A1D36528C8DF2BD4E05147ADDE9902E5A3C0E5F4F0D9
69A89D7A3DBC73AF1C90CBDA109F6CCC9B275F869ABF3D648BB29CD9930C9E18
593DD201B93D885973935C91CBB82A8E339620A52776770935A6A193FA21A3DC
25DEE79562EC834127B278FA649D6626B1BD577E38DE7C917D2C4E973D2E8B7D
560376C0E8E99F2A2EE1D6F12A029BFC1C565F1D434F1B0B6E1EE0AD2510D6B2
1D5E44574BC5169161520C5D9CAED67D9869D7CC5684BE0ADB28406B5EC4E875
136FFD709A15AB5222CF808EEF614A417804C180D36EC0611DB7DFD41217DF50
CFB8585136029085FBD58F87D5145728C12387213B2AA0570A583C2F98E796D6
5A0A2DEF5563A9EBEC3B5A1BDE88057173C0341CB6D32E828091F08A979A57E4
2CB409B958567133644A1517818CFD111E32142FFB160DB6422A5884151A405A
8C3A714E15A869A760D44D5B355836833BD1FA7CE36A5FA2C70191B24E20E699
454570FB31850DAC38AE17CDEFA244AC1D2C3E28B6F4DAFE97712E8EA0BF2233
23C0FCFF46A33F0BC008036EA3093A4A799D6C4B772D38C920EEB55D6E64436B
8BB1659AD76F75EAF78BD04489E6F77994E36E7F3CB0F128274D559A0304705F
E55B686331A46C2DD760E55A38A3438240D2F1D473CDB0D16751C3C0936B813E
3BE2A9303C579CA1031E1026549AD1539B59049EACDB88F80734E7F9CB5739D3
DFC864958728154B97F62FAC2F2E1F29EF28B4A46FAEFFCFBE7A891DFEAF56B9
13D069E412674347F5269F25522F64B544A01CEB0E1351CDC979DCC5C686D4C9
E96650E4FA7090FC8695A7EDDD68BBA96359EE849305A05FB99890D4C30C766A
7F1428C5CC1E86F6821160698242C7566FBFFE82F18BABC1AE4CB0FD382E26BE
0A83169B6C371950D13D002DFAEFD098374854AA3AA151BD54DECE76FAEDD517
C990E170EFFC12D2D1F2356F8A3D634E5AA9137DBB7AEF4BB288C0DD7AEC8D6A
3452F221D0151ADB4DC2C286068B8FFB0F430342E9A29FFF81E59CF308A0BA85
9E05E589F1A1AF4513558F46BC41E42F1E3120A19768AB34A6E242E67E22527B
D17C13D14367D478A2DDA733AB75B7FC8FBFF9AACE0299E84F822C50194C21EE
91693882E6155EBDF9AB2A053F432A3149B7BA168CA488A7CB151B4477E4B446
651688FE1B8EB87FF39E7D3F4A4F8218AA2765CED0D79F987D963CC392365BB3
DDF7350A281C54ECF5CDC5C944756DF6511AE5914212BA387D89E4E81DA81F08
8C9AE16443C5E70BC18F029243D6F681B0D36E17105A2469DC27876F40355440
28390706CF1ADD17C22CA8F1C683DAB168EBB5E40D06758E6FD669A0AB74EF5F
22A24751741F176009F903A926317F3CE343E5898DA4F997D762C2AF09A8CD8F
16274D01E9CE873569D801645AC8B89B5F5056F46C0EA3AC41E9D57F2CCC8343
5F7FA39DDE29A87D797A46E562A7588F9C31F2A5E5432E1D3C38B5473EFE5446
4C7201AE527921B74BDDD5EAE5004A279E0AA45FB54ECF901792D64874D8987E
3745FC0F5C96DD47EF4F7A785026B6A4F4868F06E16B5367FC0C323DBB37AC38
7A311C7FD71169DCA33AE08A7D848E5EB5589959D600AC85DA22DE061E1197C6
7D23C5407509737F317BD3C4E4E674798D1931020E3CBF159A4BD8DB73DE8929
029F44C5EBEDA79B3DAAC2B1F851F14F3251AE978063822DA479E4279465A6CB
D43EB5B5DB8B72E964CF60CF7A3C0D9DDCF12CCC343C8BE4D9F249D3D1AADAE6
A3D4A2AA65ABBC24B3F32100B4F238ADFFF695E6945DEEE3D7D1EB2DB4F95260
314774D8A95EE49D0B07392CF5B6FEB4DC9674711489D4DC5C126F05837E59D0
40F3EE221F27184DB3ED69EFD0F394B72C92BBAFEEA73BD7F0CD37CA10D05477
9D91D7259097408687D982CE340B4C0DF0C2AD906F52F06B3F1DC98C1F21B9C1
2946096BB1098319EC6A71F729FE42FC506AE3F07AB537A2E810128DC25CBFF2
957CDE2497528D6EC2D21A380D93067D1B19A61649AA1E4BA1237AA2CB71BA38
0EEC014CEBC4FB75DCE676DAC7827316D1CA8AC5F68BBDC9066AE3BB0516F7FE
82C45D3F4EFD8CD4E73CB13F54E41B65FC873FA6B0424947B01428782C302CA1
C01A91E699D25403CF736B454C3F840FD3341944610B3250FB92A2717B0B1EE8
6F5CD4A8F2B6CBDE27B33491A995393324F53DC7C71A1BA1C3E03C1F068623C1
9E8055921BF4774FCEEE1044AFD32F4D0382BD90B0D4E9CDD7762771FCDB7DC1
CCED8D39A68B5CA902C05D78BB37327489DB281FD97C25A0284389699F8A2DF8
91E2EC776F556971854B27E61664C83BEEA0958198AE0AE0E053DDD4DB32EF68
DBF6B88EA20514F345CAF92C157EE58D0AFB11DEAC8BD42F70498A924B036F64
BF4C234B816BED1C12D374EF9D40200B4A5CEA69674E8C7589C69B3F1C8E5CF3
1D02E6E16AC0E4A2AB415E3093E9D4BC9F20B9F687F820B5A51B2299B70CAE2D
1EB1D9A016816A3F64825A318673B045F6E15172DDCC4EF24A9893960B724FDB
3A57D169E80939582452831CB2C86AF89506D90AB34063E508A42DB7614B5068
382C76644422AE18999FFE3798118D1C37C36236F536B7DE1C16685B03784728
0BDABFD887DDF2B4BCC0BC350236C08B1B0B72F8719DA86E8AA1DE8D741A2D0D
774D828E7F1DBDA2D26ABB25ED062A86873A22BDEDFDD8C49B35CD99D72C4CF3
56E9B0B42D20E8B640E185468FFBD59A35570033BD77FE7DFB4A4D5A6291D967
4045F127BFDB8C1F07DDBBD023EBD1D2B7565C040C639094C9578F8AA5DBDD31
F62CD736AD7AE654A7A2D892EA471590989ED1FF10D6A220A3B1458EA90D68B2
B13A5D4A79B827C93E10D42D661385AEA33CBBC14A901999EA2B51204D519F74
0718D86C10279E888AD2A114086F225CC8915FC099B4EA27F9EA4BB3E449B64A
4A2CF66D222EDC0D53688859B90631F3C653D247BAC04F94A38C51CA4338A6FB
0FE7F4FB2F484C6591444ED10246F5F8371406C5D0E937F268A71E338253E7BB
CE0C1B99F739E01E36DF5885F657994FF8DBCFE55588A85CFFD9A23AA55B1F15
901EFA66F9ACC3068677C2F7E4E231A76E88F3034C88DF0082E6A8CCA278E34F
5531F8268729CF04B6522FD7DB85DF65E5DA98036E922ECD0BE17CCE683723E2
CB33AF0B4F174B3CAE71BB477E7E392E6B6F07B84A50B8A441440A8A0AA79964
C0F2733DA33646B69258B8E49C9521F6F8A069DC2B789E502928E23B81342383
A61637B525C6CD9D91C6332A31F9649669C36151EC2DEC0A0B264DBE8E265C9F
A4CA6D133410A555377E69B684C70E9FFD925F128A6D916261FD5EE8DE7F87C2
7CD08EE0C9ED459C2C0B7632506E69A116C21EA3D8B0C35006B592F0777912D8
1C56375D6FA556F7D263B794FBA22D17F47345014872BD8B88A89547A9BFA835
0E901C55222D045CFD3ADEEABE6BBA9B4DDD3505BAA9809AF7217DF801D545B4
8B9E796FBBE905611330174616A2A21628A070CE427C75C4C396E2207FE48A2D
0827ABD9E187F9E15825F57F8AFACDA4F4CCA46CBC2C0E86E4DB8F5C31418FFC
78F8821D8249A33A6E064AC1250B4C879999B04BF7CFC2F80745645BC6D2D714
12F8FABE5A2450899C0BE7CA8BCDC03C8CD6445AA730F90A5D96EA1346429DD6
5919525449F5D61802680B0E52B50363A71A650ECDF4ED3FD81CA8D4E6AB6789
2EF0BC1444C947CC9A14675E8B112618BC2F641C58F9733E139729AC6E8F266C
5EADA3E1DD9A32EB06ECAA90D3FCD05CEFD5B3778C7E2F08D3D952E635942095
6F5BD63A333F9AFBD415CD142C4B8AE5A9EC72E275C9D6939E3B5E03BFA647E1
3D6CDDB49C4A6C15388BDA00FF11BFB205B9A42EC1F50B435E4D44E14E25ACF8
93FDE342A595CE4B65C86C902FA164CE50FE5B79720577CABDF5CDDE17A49FBC
5685390B120C9CAFF2FC9DC80CBAA1B52BC680BE932DF95899BB24F824A64113
EF3D314891A427AF550B6B6E3876D7CFE43A4721770FA03E52617B8B8EE1A9FF
9D67803216AB3B6F5BD5C60E59C9710FD0AEAD6ED2B7A7E8EA484E2B9BC3B493
6126CEA5662629D66CB8359C2190DC1D987F2D63018DB16A626A773D24526B87
D70D7F0ED561B23B0917E3BEC5BAFF0157B38044B31EEC89438E05E6922EF30E
EDB8609C62A681206E008C7DB9556C1143A4AFD66C2BF278849067D3210B87A4
82D92507C24F283C14AB6D7E223970B84DA99326C7CF887E2DC8CF86FB2429D1
23F36C79FA392B52641C20E440E6CEC672949507AA020DC42FC3A98BD65D39D2
B5F194C170F1FE1F5E1C8D8368CA19ED58CAE838B3746C1800ECDE3DB7E6340E
CD0BF89F709956583F3B9EEF0C9FEA376A09A193555A7D35BD96767C3080A3A7
724695661E0514EF782F0B30BD9399540CD0F8EDFAFD7359E3B3A6BDF5C7EEA5
D30E9C8A8FF93B40C24EE7CD6BE7BF67E2A831C4129DBBD1EFAE452873FDB723
2C6DBE43D3359096A81ED92E160BC72A1FA5DABAB725D6CF2325162C5BE4FD5C
E37C6C0CE66230101071F6B9F0ABE7A0606C3F6D140AC061B06C528DCB3CD8DE
EBC1498D5B236EB2B229488CF16B268EFD15DFE82FB250690B927A03B3A5C032
4C29664A425D9E82AF3E8DDC1E018442474EC6B0B42DF539EC1557767CA917D0
C23428B188B8B8509B9AF7BB751BCECE96C61375BEB4543911490AF65225CBD7
79C9089FD239E1351CD31ED50C512C39DC8137662E0C7833751EEDB7EE2135A3
264B7EF4EFD94B2C4D14AB17ACB5021DAE0F04F6241EA954B9D7812122184D62
139911F786E31533E08238A10C99E9C00DDD7D78C86ABACA56C8AC1E6173C32D
23EFD9420CD5793AA0361B643C118792ABB0B2ACF814764A399B97148610E480
FB161350D85E6FE1C1EE5A64B3ED6EC586613C178C6685588249B0D40FB1C802
27D9B633FD5C536A261B9CC6A56073F880F94BFE481889D50AEC19145216B50F
B35919DBF2C68AC7FD752AA611F9CDDD05B0B7FF5217C65910B38B3D91D8B08F
F79073200646133AED9F8096B695C679966A1840C78DA5E0EAE074F377CA0DFB
D976B37E4B1ABF70F08617ED4FD6253F795198CC6CB20C4906475CD644B6B9A2
D734B124C418BE15F1996A8727C25001DB6A5BFAA9FE8871C8B107D49B98E5E0
C4E464B45BAA486A85DBC2F45566226D9EA08B48360A2E9BFE6AFB2CB696DEEC
00127361AE763C3B0988F3E22EA58406EB5A5F9D9D0FDB9658C2EA3630BDC2BB
93FD70054C2C284EC40EC00C947C89359505A0025D7C70D0C4022F09658445A7
3832470314C49EE7D7E13ADCF5A1BA1DD8662ED1FD11B81BD02950A7D383C7A6
272DD2C457D7507DCA371001B0B5AB8C82232D175C27C0D6589B5433232545D9
434B224DD3DEAEB1D54E685ABA34A20139A15E85947A8DF93034F1EBEA01CB96
30C3C69E078BB67EEF941F503382A355260110F3DEC488E7FD4195F91A18B8B8
E03577C55D3EE1FF707C55BB314805953828247DA49BFD43100EC1832B58F5D7
535C4640014FEF7F029061BFE960C0602F853F470059339815D7AAA2493944C1
BAB06E59A9518CA0A03F6294366936EE12594E121A6449E7C124DEA7E3B2E87D
1C52955F795C90DF7BEB2428FC62ECD9151719BCEC7407A248870FE02F00F8F1
692EE007A53BAE53445277C899FE86E54B8BDB1490AC76FF84E41D6F4B87D764
59808944194483C1D8B6354B2CDD07797731C5B2F2E84087FD2F1FD5B46B5FAC
77CE35CF573618D2A1372D5D4D2555A2E8E23E29D8C8C5F39807B5A46AD83F19
4A67FD599CA9D3364FBE913083D58F6096E4030605D390AC0F7BEDD9169DC90F
4E57F609F7AB16E5F9DF1C3088AAA4804EEEE367DC5B4CCCB0961E34D07541AC
026ABA8AC4B328555DCEA9ADB6C675AFF529BAA8620BAD56CF2F3F892B60A280
B834B6DBE1EAC810BAD95AF60581D5A0E9A967CD11777E2702A4806B5EB07D74
8A38D399AD27F36FFB6897FDFA0F4247CB3781BAB367BB79E69836D9DCFE0B5F
87FB1A9C5363DF6ADEEEA9082B1AB14C6A1AACDCAB252A603B3E95EB85EA514C
87FE755A576B8231782509ABB21A7D587598CAA2BE41611205C149AC8D455676
6F2477E14462D30CEFFC15D6970E5260EC3C880494702BBBFE61057AF8EAA694
329B892D04CAB2AB3BD8097C96468E9447567A0139314E0E1F8179DBE4BFE6AA
6E50E0A7FBE2D58164D82FF078B00E4344E9282348E3069139B414FB4171EA64
5516FDB1EAF27CA722852725088E187DD3349CE83F97D3A722E1DACC97B1D789
3DF52D57BD6C1A6B744024CFC65AAF3204DB9C7422C34CFBA53477316D1FCE3D
4D332DC3708D8A7CB20953E8891F0124326F42E298DF469C277793E2B5D98763
8F4398AC95485F149FC0F974CEA2EB13572C10B853B88013A4CACBF12DE478CE
D51868B27DBE8FE8F0AE34F17DC740742D38AF5C9B2F44BA14C61A71691D7B10
85F9BFA5DBD78BDC15E3155E70BCF5C758071838AF50C44016FE62E8E2464B6F
921589D117825A1595466D54C85D9E88D7E0EDF63E204E2410E2DC65DDDE4F73
6B88E6B8032B4EDFAF5FB5CB0080A3040C576766A6F452CE3CB9A8D173CCD718
8028F9791E6E3A92F8D187A1B8BD42E637593C2CA1F4DFC7803EF826D99A246D
65CC4DB4078D6097D9A1E7A4CCFF81E8B58F2F29E19F7D715AD567F556BF4DBC
7F73BEA16D73BEA8CD5127E5BF5701F9D4D8E41706BCD741BF7F78928EF8D852
8C8F6DB7B307D720243DF1CAD3F85ABEA8C96CDEAF8149919A0494D1A529CA17
67252514D5D9F5344D837066974F06DA28F41435F9EB11D83A5FBF62041AF636
26DB0F273F3189040175F5340FE8E93E39398C4E10A2F581C3ED7AF577697602
565EE38D5F437D050FBF33E255DAD15F08252EDF5979C14C46A1ACCBBC622B06
28C360B14CA1F713A8EA6AA4D36F3EFDD000D982BB8E414512700D5A1C5D5707
9CF9DFAC75B8872B53C3B1C6CB28C8B04493656F12EC83B02B527E99436BDB29
A944157B763F7E4234DB838E1B66F8089A3D225C138A48F80078848CD9B2EAB0
F0E217E8BE682D617EE310270F5CBD8BCE5916182AC2451C8A0AE26D28072C92
D1637C63B83B09B1C5E946EA2523E44F0696585F25F47CD378381A8DFFA71A7A
3F3A621CC32DE3A47D1C87AD9D258C55EEF2CFCE0BCA12B0D2FDBE641A8C1EF0
7792DAF2D43D99E965160840F22FAB8DAC4AEB1D09427D9F74FA31B2BA0FA411
D684F965196C71A85AE9C57346D8275368E99A28F7880D0ABEAF248C47846155
F94CC3B25C70DF3951ACCE357DC6CBCC1EE0B825C294D6FC7B8B746C4B214A48
5F9CE57642F42A032DCAC48F8FAB1F5AE6A7B8DE3F5E89FCED37E45A5A67945D
3616A29B2FA6EED0779DCD39D9849EED96CBAA4FA607D626CE1C7BB734D124EB
0386F7AA332FBEDA5E099FA279D72008AE9A91044DD214037F5BEA4B194DE7B9
C09AE540717A51FA9BF025A670A09448A23BE02FFA5C8021006D5EE6A7465F3B
B86A4E6E1EA7F95DB0D3140A70394D90979E264B6DE0CEF2F2D0A31EBA9E3D4D
08CBC96D16DDAC763D90BA0719EE726D557CE7E75A8F7613805064BA22FE6411
CFF2DF5078ECFC9CCD005B187D8321A0A21D2271C7FAD646EC17D4084B776222
EEC2281E4DA5F7981C060E5E26BE8A2FD3F49D4D99C91C797A817B3F07D73B61
543F19792CCC63AB0C9BB2F7F79DC853CEF6F6013CDA33DFCB79267AD780610B
2CFD304196F3ADA4BD282FA6D9126B51C55FA8496C955DFA4DDD599A38B3E391
37A756B30B32F4D03BE9CDFA1CEA361FAA6CE5624C00CEFFBD0FD1E6651C10C7
CCB707E656AB31D5F8C9EB0D8545A9FC8C427B66D3437CAC0789D6FF651F0F88
8F602ACED77A9A575B9C83CF9529AF322240B147504DB1DB82B8242EDEF367EF
8B957AC109CEAD66B13D62D0E1F6E8A92A421A167BB21338363DC45F05C13EDD
876B4D5388D7B72AEF419093F511C84BB8E16B471FB3EFD5D17973F26E340757
1D2285B278E6AB5521E363CB0FDD1B1215101370C7C35FAAA73F9F88BCCC2133
71A1CFAFCDD853C436776DDCDE002E74BA03A2B15E0529E61DCAC207A712FE8A
7CA8A0E500F3E4E56446467CF55D664D254EF7E2D4753286626E9309A5612F6A
11322A6125F44CC1BB1FC9B396975786E7B7BFD805853AED171A4BACFCFC9C40
A64E276D54A50FFA17699EAA3C6E4D786EE98C0EBF14DBB22DA4AE4B8DF99134
925CBAAB5BFE95E9DB577361A3B7BDB09793E0CA534C9F954AD5CFBF3A492BDD
0F01EBEA544FAFC0C3726112DAD8BEBC692D09C89079053BB227E2CECCDCBBDD
D028699679C2FC39A4005A2CD2793A1A4027AA366123BEB5711052915BC76D28
89CE55D653563A6A4FA93FC2905ABFD645AB9DB7479DCC4316364282041231F3
F004A3F3395E69C06508BFA47484F3D2AA3A18050E501557DFB9E117A1C4940A
7282FF01265FAA6CA14F1654ACCFEC8FFC127488F604E972B1A4D67A470EB9ED
9E667094025A81C470D33021157B3C23B0ADFF956A34BE0B0F5BFA994FCBAE73
708D12469C5E8D7B83C9EF4285BC86E6FEDC2FB6BDA0CD2CDE5A82A7E3F868B5
05CF963E5F6CAC83A63CAEB8B776A37FA1BB989992B2E207B2A7B7B44FF2F676
DDA84EF7C8E02AA91E217B4220544320971A7A69732002AD0A99C8FD9F140099
BEE013F233C21B55F16906620F859177D68F3725A5FBD84954BB395FD8DC1A18
8FE10A825C38395E5CBDCED6A7D376AAD1AA91F804E24C582927E6F48151E720
E33CA846C5D20CB4A04DA6593C846B1FB75433B24AF1F6CE1270429CD1CD1481
8E66FDE710A442C8D20A5A230113328B822EE2612A059B4DAC9CD8A7A770CA58
2C897F54FB36102EA2E9740830C12A5B03781101D203C853961514FDE38A87A3
A8170AA3010A8187AABF6317E2B9944259EE7501343138C38F11EB320BC9B919
A212FF82547E9F8322CE0099BE78AABBE501C2CBFAEB6FE80EBB83388B84B645
0BDD689A10008D7BA6340A0397F737E8BE06FEFC81EA3A88B4024C64A7974038
4D09CD8FCABC8BCAA03E1E72C0D37CA7DC832D75FDFAD81AA210A5981411402E
F5BBDBAC1FC39DB9BAE78383486A34CEE1C3C852A9CBAB5071834CAA36B7C056
F15FA37E776AEC1C583A1819CB2732460837EDC62035D7D232AD000EDB9EEDEE
F0934AD0C63700B4526A98631477A19FE5E16CF8D5C43D019F687663ADA3764F
11BBB2FEE232D4192499513BAC7EEA79290016F6CE1A8332A77F78B569AB4794
3686B3B9FA6290F8A62EF992237E07E56E9FC168E8F3A9591DB59BDAECC087BD
360B3B50F5CAEA8BD4F3EACD9C669A41955B2CBC66708F9896D69F4A05EC13D2
7C3427F4F438E85B8E1227FBD0ACFFB73441EE4F938CF7104C443F5FC6E21518
DF676CF6E46A1292A838C381D3315D637ADFDF7A300E7DBA6370B48142B747B4
373D2C2AFEEBF2192874E00E4682CF0AE4507F9B9ACF4C51DACC065F9EF833A4
B1B51E56065ABFEF1036EEAB8E04F77D9EE7912CD3F2EAB2010152363BF9CE7D
96355721B905FD4A2705670B0125D81F85A311CDB0F956218DA376F5DDB3E036
DC6EF898745860CC48E55E625906298C0AA1DCBA009C25F0C7568C71846E413E
504BEAA3F4594B6960DFD991C001C437B231507FF515C5784507F7DA1146DB0F
4A2BE12342D800225F9CA35FEB2062B3FFC8CA7849ACC8F587351A0F32470399
46C764BD2088A3EF04FDDFE366A721AEC716AD2358AE18DD2EF7767E50C442A1
EBFDACD080AF068F7A1CDE18315BD694C60B1DC71A194E5883BD24D106382A82
EF4900A17829C8A8DDDD4FD7E0FDAE0712EB238A87FDC41A647D79A3E56C4B5A
B6B434710CF184E6783456BFC48FC51A1185D758C54FD60C14E7E531E835A00C
B7BF1BF23E88BB7FDABC9B780827C115FB214B82459C026B3A1226E7BF21558D
70B553453590D509B25853AB0F25FCA6BB860E709684EA675A3993E79C9AE952
3AA6DBBB526995C1C0A3FB8B3BB4222933227146D0495CB5F6302C7BF689BC9A
13BA20AB48755158999B86DFDD3005F3AED1FA8F077AD1F27EA249310B80957F
D338384130B535D0579D727DAD1E967D50A992412F82723A5B16FAEA0A235897
E57D9FA6F817BEA057EBCDF13848BB5760CBA1D393B852C9AD85E7F2DE154248
731FA35979A2C0AA96777E16C4BFDB172612A8584A0054C0DBA00B5755903087
D17285F9E2E321C96BA036DE6E9C8E81AE5C0DA212DEFFA85E2C93AB0EB509DE
43E1917DA885DD96133A5CE1A290DBBFD88AF285A68F5722F0557CD847704791
EB1068D0C523DBB843CAF7BD8DEF4EBF6FB5C8C1B20D1AD0FD2E6A4C530BEEF4
7E37ACAB7D3BB0F9DC7CE31CAD25EF631C48E3B2431BFB2242292B55A210FCB7
4F1B7D0C32C7ECB4241699220A601BC050523972C46E136C83CD119EF1E740B2
63D9A7A9C327F572E7D74C36412F614B3F46F5ABD0CC6D02DE8E2BED6713DD61
D8D6A3CB0BCD78A2C6DACFE5BA760254F91D3EFF648AA388152232616962578E
0664A398CAB70F0A4A8CF91460D449CFBDDB83E4F6BC7BDC78637189D45A4CBF
E64F596BFD1F3E8D1F7B13351D44FB1513CBB22AC8F22FE6BB518786EF38F5BF
06F73DF53FAF013E6207BD0486EDFBD3B72893792E82F8037F955D6EA922CF58
E38D30C2DB824AAA087871AA05162C139F0972090F1CA32C55A74E6F66615648
5693C28B91AEF9780C356FE1BD615207014C12408E528A1E982E5211409C91D0
054C382800C28AF3CA811218068C3AFCE0E7AB78D733C013CBF06EDF7DF34EAF
E36D3104DADE5D30F5B8FBD16443DE00ED69C1FA674BA3664F8BD00C08A278FA
B8BE4AA90BC15F609D33C011027C085CB99911A1EAB1102E1AE5A5B5EC87675B
021FE9D71441E352111EB6FFB6F0B398C4A5B134D08DAF8077AD1706DC014F06
53E538E3AC567D445420576CDC5DB74C350137A83E1FC0DE678A3452953C5F5C
D65CCB80D33D98C75F52F81D7A5310CCB42D1C350F6C1409D1DD8F2063EAF15E
E322D2CFD2D1F158122A3C4CB47FF5134FDE8B54160888245522049F99B840F3
37BEB3C6A5CCFF50D04FA2AC0C91E78D16D2566EC4BF9518214CE5A0DDDA0EED
648E406DEA957C554CE8D759FE962FEE2679DB5A85920BD506F7D93D9B10D3C3
BB714002FAD60CB843F9F8E46CB9B1A4ED4C679E91D789C3D771269CC29DDA80
A25348F304C769022101F8571F14C1F97401C2319D48A81DBD3A13D927138AC0
4678202ED64C368EF2AAC953EEFDDB599B1C0042405E3E7F64103E2A76CFFBC9
1DEBC2DD56E244F71424A8DEC5AE3F0F649948253EC51D98A20B1C4150AECE1B
67D23DBDB90C3C2A75D382C7F7361ADE33183B5F100174D8D826CD19D97B0DD0
851E102988B469066B2139F4B2743FB948754D013C105E7BAD6D744227137D55
E6CBCB52487F2813197CF8F595F1555AAA669C28B477CE801EFE95FF3A100F6D
341B2BDED5E56A07C450955305A2AFE395C072E31100EE0D5003F406EA10FF3D
7141ABA9A763F65CD683509A2E8273EE34C3A4EF07DB983AD2D7AA13FDD13235
C6D108916318648507B208E546F8978390F72AB65858B859427724D09F803119
9342EF8D4B46DF196E1C9BD16EE084196CDBAE8F16946882E8FE85DA72AEC255
D01E5F5117FE65B1BDB955E5A9F72CCE847374AB85F8391139DE42DAA21E9BBB
25B1BF8625E558039D17A1EF2A364D7D1C9D42301A55561789BED35DEE30B842
F7A2F13C74F4AA95AB062740E852B137500A6F32DABAFA506D16094E18D9C77C
B25E04053E0552D157029630DE6F9D30BF27F857FFFC90C7BF80F1363A04FABA
F7F1409C0185280F62DD2CC436E9D88A6B89D36D0DCAEC3EEC62CAD3C02792CB
44A20B258ED67194ABE9DB2D7D1F2CB52E5D383DC3DE34556B64F1B8F1585F2D
A9A247C00B8B2C23380A3492F87E469A8D4A0B9D7C5926D1B2CC4F14ECF573EE
BB83E6F9DE39BD6CC376158231CA2B46603FCF588EECDACD25533064A51A4ECD
B83B64C9D84475150375E57F66F06D0F943CB8B47B6498BAA98F833886CF2895
3286A517B34F61512C317E9210A89F4D2F36EDE5B09792A04A4332AE7D0352B0
5627E1D8F7F363A5F1279F82F268DB15FBC49E1E35BB6E5E5B4C0F87FFF5BF67
A54CA9C48F2F39A20B70E71E99DEC48FF875F36FF8453525F3585D54BBF853DA
85013DFE95030A0B9632AD80927CDC9C69D78FF1FC158AE4540394D11AC283E2
26D766CC4CA81187599C2FF033738AFF44731B6DB8007749D1B605F397413DF9
6FD78A52D54E74329224C0D1AF05E482ED4FBBBCD1513A848FC918FB884F0DEF
CE7828D7D72EA416F01183C3CE6B66F44AB6F5977D1D2471B5642E457D0BE406
066F069307CC73D9663E33173E5C99CB85506DD1D306AFAD7BFD1517634EBF3D
87ED0BDBB7F3B9BD1869EEF9F0378BB2BAE1F0AEF8888E21B4138F4DA8BAF995
F1D86F8EC129FA6EC32F4E4B35884FF9A965BC8F96315AFA6E5780663B1D7FB6
19A94DF8EB29EE78449C3648D52CE49D51ED1AF062366477100C14F414DDBE40
728A01AC7500F174D9290A7F0F32CFE82DAB10AD6548D0F2F48D127B7E2D7A81
85EB91514A80F81FE7226F6720890AE6F9A479365D3328E0CBE8D4C50FB66270
63FDEEFF583C60A9B50677CC9BF06D0AC0CB991754E319A69A3221F7784CC44F
845E8EC9932969D3CDE2F42CFCD3039A771A5F5B55B2F7B559162CD4C17A17A4
40688F19F62391E97F76C00327145375FF48E6AC3B2E33AFB98EE137996CCC48
47CF2019B1217BCBDD7DF302B8DD05729BFF8E3B0CE768240F0E8CE9FF939E4B
1A6365664DC474CC94D621F31DCB3E021998A5D6EE94CA4BE214D7D30D49403A
883CB22DE47EFE59835F21DC12BA21878166554DA06353DDFA9C87125E5C9B69
FE0A592390320732B76367C2521F9AB5BBFA9D7776DB2F6E82348B86E1E08C93
3EF09CA5D52385DE69D0CF56F07169C43C3BFD25634889AF1E8260A09D6453EC
67CD3FCB44E67FF40D91F240A175A13B3907B2FB03DE5C207FC70D3703320BF5
76E078BD26167522FD3089298A2618F22160C01E99F3EC920769DAA49600CC82
14C53F9C312498ACFEF6E83C046C2694DBBAF882F87811A96EDDE55E91EB17B1
6421922F08D76F67B00F6B9D18E8254E4C395180235E2252F701F8EC7B4BC21A
0D71563F7307D30727B94E23F8E362FDF4E6172063E0FCB7C1D15945ABB9AE36
09B08E5B3C55ACF362F5729D7255F7A9BCC676C77924AC079B743BE413955F0D
D137D42B65BD9AD563ADC7E1A2C3753118EB02233D61F76028294FCFA010ADBA
06F53A700F93E2FE86D243B72B3E700F97E1451C4DA6A0946805D30C00ECCA59
FA67A4D1A70A60DBB15E19968D66162AB822E0013B7D984B3A18E675655F4CAA
C54F1F933DE26C53E31CF05F787B2B565746C211F30813630C7EE7DC305067EE
09569655370A0BFF65D2BDBE1C8FB45642B3C7D3A0F6137860CEF500FE67D124
5DB19FB4ECB8CA307E0D7502BAE7310E6DFFD99A38D60761AEE1594B5F8B5BBE
6E806A73D69A2B62BF68EF83C6986E442D5150434EF296BA6823E6F1E40C7FAF
DE5C8CDBA5644BCEA126ED773BB2838ED38ADAE77DEBAB8084EC9A7564AAE425
0DD63AEE1D6F2CB0C4BAA5675FC93DE5607B266BFD6DB5194CE37C12A19A3162
67E1B0C1452F196D8B206ED266C2A6F409B0AA79104E10420C3F67E491EA298A
68097564AC9BE85BFD704003D6109121880DA9C89FECEC969068C67AFEE5E635
26878D37BE1992CEACDF15B23F185B3E4AFBCD1454CFAAED3C30CECE4FD7CFA6
E4BD0ED071182BDFE83ACCE3E30A0E951D01199A9C9984BD45AF96FB89AA3668
934A0D91746888A9DCD2A0FD2567829B3566BB37DBB86B39E7C589EF576D9398
8FC7CBCE8F8EEAD34540A4D7B5C08967B38478FD9A143A1D7010531EC3868BBE
DC269C55270BAE0FBB7520FE622C074734A1E23708C423E1D79BC73BE4B39410
E973028EF31CE23F77989F4EB11328DFD522DA2A5EDF409A734D2725247E7659
AEB60A58F178D2A1C8A3ECAC19CFC0476BB5CDECBFA1D39C851ADEA52E64DE64
132CC1F25A0DB6F5B889507E34E8066E684FD9084AC279F56B3942F25E0E80FD
3557A680531DCAE9E6A875FAD136C73DBF1486A8CBBAE5AB1BDCBD27F6AFE6B8
BD4E941D2FC154BEA826E96D9A463E60EF18E5C7FE2EFE91C42900EBFFFFBB74
640038BECA9F3FD3A30F4F015CDE9893D5D66C804F030B04DE0BADB8D23F7C9C
77D990FECD8CFA96EB61F4441226143B094946298381C2DA705BB5069F19A580
755318BB1FD40938D6DD68CCFB5D5B1A9049ACF2C3568466C9030C6A6F0E01B7
D1B3339108E2D9247B45D5DB82C16448D59B2E9514294B2205ABF4F61B1095F0
625ADFBAE69307301C2ECDB2F92E8B65C94FE07B3B4F4D28531BB0EA4DC01918
0DD175C74F0993E3447C926E20390C33B759168843DCD0960148CE7EDE034DCC
44740002ADBEA1F7EA19CCCB87DCE08646E417217FD59ECACC94B7272DC613F9
65E02F1F763EB1AD965E8A5A3ECEEBF44790D57FFB857764ADE93F64A237BC04
86514F6952862F207136E1E16B417F623ECF068A617CC9B46FBF2F72F99E1652
876642533A615BE2C59EB31A9827924D3E951FBB6F45F6DA631D7A825AA9CCCC
9CE8BE83282D74D019AC3EF232E4BB3A875288FE81185CEA8DD40DF88DA9F27E
3D93E945701C6462FC72D92AC07B16B69B972C8E5416030D4076D4C09B167603
068010326F551C1CB81B1367939AF0BFF66F35F6816A95BB8C640C3ADAAAA15C
2BFDC446E8217DC2E35350718D28AA6D2E4E881DEF1B58D658AEF260EC161B2D
9589EE8C8334F645F6DF8D3C2EAD0BD5AD97E55CAC100AE563564FC1EF18B216
8A0890CDEB4D14ED754D8D56C2BE2B6372F2D3F6CB1126C61C85E2C725823EE5
D260608D70D7DD605E5484D861ADE17A55B76D038FFC64D4CDA9D2C72DF5CFF0
FD49CCF9C181540243E36D59069A6D686DED51A3C3FAF0DF8CBBBD76524B4084
D5DBE1934628528987ED992F8E1F25AC7EE3A0CCB8649F60957249EDD95E20DF
08DB6E6485E1467125B7EB3C9EEF561001051A26F3196AEFC838F9573334D07F
EEE0594095712FAAFDF0A13E3FFF3B9253EA898F62B6194A7208D88EA329FAB5
4F53153C98CC4741595796DF2CC27F95B1392326CFE1BDF905CA83840CB824A1
6D67D19A33AED2D04FF154BED027CDE409AC766848432AC33288E52F4D0EBA1F
F1BDABB1D524B72D62DDAC9668E4759D17CC782F7D69B4FE13B8409EB0F376EB
467973916884B791DB33D31519DA06CEEEE414994C63199351A0FE860FE1A87E
B08E87B3B8DF640A796F4BE9068BE20BDE45E6C67C0EFA7F517CC04E27182EBC
4DAFD078E2C58CAF3E801A713A90AF85F92849EFE0780FF6379CEBDD27A9EF99
E1280A6134D56A7A70D59AB73CA633E9DCB2D93694EB75E1416986A98D901BB4
7DE5D3C0CB6239FB2D5B4AE3224F7EED5EFC3ACC0D5187DA632D4BCC51FE58FC
26FAB5DD0393AF3512783242342904893D044DA384E4836D27E20733E08A8D24
79BE76477E5193944353796D86AA5E2EBBC1D796F99D4B3778E50274F69BB81A
BA1EEC1B49E3E561E23D9991624A9729675A00BF28953EABB831A7512F30A07B
1CBD85BF493182D44236C93F939FFC5263B26B13B85E51ADE05F6461CD7ABBF7
382327A2F9AD203ABB7072445BF85B73660BC2B57C89B3CFF6C85E86E42B466F
A5D91A1BD801EFAB50C26895953E493CD5E35198113700553818527039AC7408
8A194CB25BA1A334F4E398E917A90E1FBEF6E3778DE10A910F346C4ED33D753A
6839233A044E8AAEE91E1C8A867E2D2A25DBBC9A1CF92A82B2C925BA9BF62903
24C59F30816B248D320852F366412883F1ACBCA8789AE0B8896B8B3A774DE185
58D78215F7F5B818ABBAF1BF0EB39F4DDDDB970B76BE54F7FF3CC73E02B5065D
DE064D64B07C5041BDB97BAB8019E4DEA3DD607576110F2C8DA0F6D99170978A
037D2CA8DD261393C2734157442A161BD55A5E7E14D81B36209FB8AA6AAE3899
27E88C042641E9F7B82E2A24449B81AB9B299B73D483BE7AE0DB6B774E1ACBF2
A59249A4ED17141E8776F8B18AE2852CFBE4C835B057D5953BA549C0742D661C
8D6BA1F6C9A1478625CE94C3A3D64F1FB8BE9F77DC83C23181CFF27EB955E767
A9FA30D8FAD1CCA47EBBC02AEB62B4283E51C492422C1591ADDE314008CC4D97
88C0E3CB5664C60D8E524A15FD6DA7852ACA0B1575FE3C1246D1C4905B82E9D4
46F1AB2C3BDAED5F69A467ED1223C8CF29FD813EDD931A53CB338FE59A6B7F20
29FE2439769D67DEBDC8AD8C861E90E5322F79546D9439800B20C7E958E43440
2D7B35FC32C14EF01303890038BB100E2332B0264C617D7B27C8492D7B6BFA68
7DA480959E4F8348015D1F8D9591F91F6A2A228D8C97E2489871AB157F0467AD
C64D600AD4CB66D8C6486D36DFE6F45BD57DB169FD3568C8E044865DE7308E80
E9709213898B5CEAD46B04C44DC66508A3F74A2746E3BBD81215234A18987DB1
AA8F2CE0E5D324673C0803E8C099BA45FBF271B2B1EC80832CFD30167CD27E67
7A16EEE4557212131FA99BD1669C9489AE583C5305D7D0179222AF4DAFCAB225
D733E123309DE05E6A60C23C6A1B5E5399FA2636D5520060504F6E9878818276
E4A5A52B837C918CA55C5DD4A52A060D1725C26E6940371EB4F0198BDEC533A7
F9759BF94C667916F166A4AD0D7458B1E0ADDC82D25D46893657F0489D444F32
C80B1DCD77FA52E276853BE186DEB0299AD75457E41EABC03561CD94D107470E
40B0624E52F21809704749F6D81E3B829D1F7F77D2C41573894FF976BF8EA542
5292C241456649283CB4BEFBF1EB66E2E910614F0C02936959E2CDFCCBA674CF
7FC61989DC798351E5887C989E252F50035966EB750D7F6A0635F4D60C3D5A5D
5AA54D4566C36A1DE4714BF76653DD40C4DF8D976A9561F7A2A4AAA27D75E80C
1F078B88B13F5F229B7C4F8BCE7CE57344ED454FACA52E17E500152D91F222C2
D400B46B796F12588E12F9F72F2009B41DBD0F2E9A0D0344E6E5627D613BA254
0DA3F064922470DCD187F777D2C6670B93D2BBA04B489AF91F30654219AEFA17
A1457BE695A3CF1A5C16878D44BE38107E327ECD48ABC53E42E38F98AAF6C37C
B0BC4470D58DBF3C6956A0A2E918688CA4B9941BCB0A1E8891BE5F6A06FE23E2
7FC05357F755C48E49F443BE8F278F8FBBFC8BA0FF6A4EC584321DD5FFC69D98
AF6C2FA94818EA84FD94FECC41BF994B414731F0AA4BF4F6088FDE2180BDB1BD
A7D334FF4189624D25BCFB3B1C925E8820A48EEAE9C32BC175D4FACAEFA4489F
2D9AAB415ADA4D95BF116C42EED0BE15D728D7D835AD32554A334E6E347DD12A
FE72E2FAE51A3956B54EDB87170D94893FD2A717854C74FD1B07FD78D7B62F6B
6B4DFBF3D683A1739499ECF147BDDB1DC60788889229E5D25FB95B1EC686F692
BD1DA3CE13BE2D59C7BA143BD0C638647C5F531173262DA2DBA680F9240B8C62
DFD2590CC9604EA6E52753EE917C1B895441A0A52208F6834F45DB87A0DBA1EB
CCF59911E33447D36CCCE75FD9128331F2715D093D8E37FD5B3586CE1E7D8FD4
1E5E71A26422671A958CF4105C79C632C8D5F5D10EABA46D5D3482260016DDD7
C9EFFC24BDF80A39B8821F4F523CE0FF7B884F4DA8B01C2B17179FEF337A5898
5DC4BFC0C35CAC5C00A739CA4BD0183349955C11011E64210F9D9262A677959F
106D85DEA26E852CAA2D59A0AB3D7153D7EAA7F13FA9023492F02A087367D863
76FE392900FAB47850BF190EBDC69CA32C7771506431F981C4EDC94C86661123
71F0A68D698CC69917E02EC4B38E4BAD9DD96980F7B826350740F6246406ED41
49F758552534D5F0F263FA4C3F4C8108994A89D510593B0258D74A153D8D01A5
63266069D486CA532E43C432E359CB9089F14083E01C5019681B29ABD373515D
747ACCA07218BCDF3765BAF0B8587C83631F67B7D5AE0D6306EE125D69E2CB22
6773557D364DA6BDA50B13D692E0F9B1AAADB2C1350D6E8E49E4DE49D57B048F
BB9B8B867BEFD962072CD93096A1D15F9FE4BBACB5314501D5279F44001B9D75
80B45EE76F96F8BF89F18C3314F3EE4585F902975D4DA355A0AD44565830550F
36172633FAB46C42916D23600CFCF95945666776A1A2E5F9F5B4D78C42927149
66D30DFAC7D1B99A51DA49466137886551A5689967512AC8F62C3FEDC80097FE
51C56CE0C3419175058E7869446587D86A15DE75A4291147C6773E433A1D7EB1
81A6A8A658ECE9E35579AE00667D215566014903C747AA4AEDDFF57ECA38AD23
9A1EB7D499CDB5345709E0843D1753674F46E17D7D41281CF1ACE036805617A9
2CF537B442B65DDF48C01944014F787AE5A8E46B80B6A704A07BD118F695A79B
DC089F853C989DA2CE7F7D13B540CEAAA78BD84FA6A059E1603B37202492EC79
A8011F938FB463BAE9777CD8EBB4526A6E52CC6D28D065B79DEB5AC24DC282F3
933A4D4DCDC0B199403B720658B3B4CEEEB520BD3522826B711BF74A47AC9860
D99A71E89FB14298BF242910865F775ED1D4D9AD73216463C606C4A1A7789AB9
690AD6C3A67F700DE97D91EE10236E368B63791DB47FB7CBEE8F0FED441C7F55
E1B5E0B69A5339A4F90750F8EBDC231D1BFC3EB31632E6667115CC1D5B05E704
0D30855DB643B47506F1E62A43A8B1FD826E1848C645828D006D79F5B0410754
69B0CEFE18626B899023D3C152580450BDCB436C8DF81FF9814CDE4EC9218EC2
5454D96F605DC50A790D6E4176F5A0B2D5DAC354F556E56249ED846B2FCB4703
926E7384698C06A6E0A3CCE1BFDE234E3255A58D3DB060B4E732551DED832E94
105BFD4468786026818339B20B84DFB65DF5ED60F116716346710AA73A19E5F1
054921F0FBB9592FF5948C663C7CCEAFB6035829E316938F64F7E96D9824BDA7
C9C6C94EA75993BD19F27968B37575551E57C30F303FF8F220DDE7DA6DEB238A
87FDC4A92689E774270DB513ED4766F6F9E491D3F9B3ECA12BF7CA3EED7B3962
2A1AFCF83EA09EC1FE7187EF7D699ADFCB04BFF3927E27CF9F14D741E7D4D6F3
62F4E10693029CE03C6B350F18342B7D38EDA0638C8B9C265133A8EC0554D4B1
A04F16826F1B26B0AA9A0386944F2E98645B8C922CC64A6A437D6694E3767323
CCFD7D913EBFA50D8CE48ADAE75AD6277C05AD3AFC91168FA48F79033E6BDD57
4C54CA577CFCE2E6979E7D3CA37B9B6AFD4DBB809638736CE41FCC9934EF0C81
561A46A17BA6BE38AF5B42C1F9B6862FC9885CEA38BA5D3E5273710EC1E91090
582CF9B033F43A68992AF392EBB6FCE762CD2D21B3974899A4C8F8A83A684729
B1AAB7E6DDD3F29FEFB15776A5F3085875842161C2A231333DA4A8E9199596F2
A5D9CBFA961C1225DFC181EB8E3AC2421E3CB9C3CFF5177C181819320EB0CA93
5AA8E13C484F673E8532B6E4859AFA1DF0458A72F394D62F6D4404A7DA5069A0
11CB7039C88A4A3A66DC9C5296DF6D3F4BA20A01D69659D96857EF723F2515C7
157185A4C9B3C6F2946B2FA9E39D4DF93598CD98DC4D43F9F33C875A19CD4F38
373B81323A7E861E45643D6655B94C37623555B969C4B4A98CB63BC3EC0DEF87
06CE2A06EBD1D7D9B0369AED2AE9A79C7470D956B30685B18E6526DF77151A37
0BA13A8D0B8B644D5701948C7D3DC3147FF4CCFF0191CCABA2BDA49824892CF3
C8706F2B452B1114D05D4A7A4DB38BC03B5A226F443026E0D8D0C105CB6F7EBD
E3DFCA87C7E9E1D103AAD39FB407E051B5AE5F6C277763D1B1F9FBBD84AA9574
5BFACB62E07C2CB65D7B4C1056B684E06AEA3176D0C8A6183E24F4D7543D114D
5D176570BDCE771D7EF5B18B767C29704CDD3DC9B65C919B0B4F4083EC6A8EB0
CAD5FE88FF780E75979EA28D86739D0EC4644716C5A017B4C5DE1D852EA5B496
0D3C13523443A1B609F6A9259F9287C023492E06E4ECB7374A5CC9EAAC48B406
DA5CD5EF5DD51B76C731732638BF866927F3C204CF45D295569878FD9FA4F3A9
D42E1416ECEA070A8D345A26C6ADACDB2147E4B733FDA3E10ED3714EA5824A0B
8A6ADE15EBBF15761042A2D33AA2AE39315409A7D0763FD647A5A2269B7FFB1C
F8E596C8B942AA9ECF8DE98711E266EA453AF43FFED8FD2980792050A6597D5F
354E714768DAA38E829432C28B28F49541B4A042493B07A6D8C7A32F45DB698B
D625CFE2F82C97CBCEA2B828E6F5AD415AB6F5A3BFDEA02B1D5334181F721634
AA6CB591C62F72454BE2A9AE5E1170E05EC9AB9303B417271D4A3CA741D37CD6
CE54BF5DEE2023BDEA72206477E5E126C3FBBFF281B4EB98C1BC4783BCA1C067
A1C107EC6B0A458F96EF4C22084B11F25BA7BF949C802CDE36DCC0F40361EC6F
B06EB54213312F4505337B4CD9D8176B41BE6EE880995F612E53334D6102FBA2
7EDAE9C7FCA9F7EA5A8748A95282768390419A672C15BB14972F8A5AF2565DFC
E1FB55CD090015D7CCA85B4FDC2040F7C48EAA6B36C6AAB6D3C63494AD18821F
E887C9CBC1F7D7FDEE99A64F7AA2BF1B70E7B5FA1DEABDA9E89F9358B5ED50EF
7E7FC01DD40694F35E64E147C4F7E60ADFC3F3E66CA4FF8647D31AC19E6944C1
806AF8A6CC8C3B425E0076815E228EDB3125050EDA7421A318D369E3FB61000D
51857788A5397DD91696A11DF3A72A384242F2518F9A41A2F631DC92B09EEEF3
A74EC867A397E6856B85BCDEB60A46DE228AAE76E1E1B512C317328FDBDF3A51
2701513C55C16CF714C54BD87AE19073C357F797419A41F44A115DD75B7B1EA2
E8FCEB5946FFD29B9AABEB1C4771AF71892D885412E9B0A6342E7FD23E1BFEBB
58D2D727434397D8440D4BECD52AF358005F3A91CB405E19A231BB22EB24F386
C92EC7A46676C46F75DC2922DF0117DEAE73B4EE0425EBD6CEBE0AD389529A58
9785FBDCE0F73A96FE435C8619ADA5224439A821AEBAF5D0C7E8EC3C1B51C644
1761A1A7974286DAB0FDD64CF618A46855637DA139BA2D7FAB7117E05EFC6573
794A999896DEBD7B91EE7992107462CFBA395AA65A2407A6566D44734F89FEA9
7837C8D8CEA6F1D7486CAA4F475B2948337B90714F2F2AA1238B895BB9DB94C8
5BBE4E37DE8FB2CC01D0352E39135BC98173BAD8C1DE995DB539DAA860F383AC
03E4E5987F7C52901D47D27185BA12623DFD102A880D3BC7EB0F7BD257B07D53
81FF55D437A15CEBD9CCE12363C427AAAA09DCEDBA8D471118D38FA1BCEB3B9A
F0B7126914343C89E29EC27004B65E940211294FF052D17C19DF5740282473A6
78F8C5C314B7554372D4FAE0A366D7CE1732DAF7B579EBC7E19B213D04500178
E555C6305604E6C24D8645C1EDAC368293AF8F7442DF073D09051ADADF113AB9
44AB4022E8A1296DF14FF21CCB93BDCDE43101F99059EE1AFB0BC30CA0E167FC
FF4EF82E13CCD226F2E7F148578666120C077EF1575B928A6D08DA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C2D1AE634032492B7023944DD1F9FD0CE2F7F4
67A41ED7A40FEA86BBD50B645BA87E3D9B98A309023373FF75491743644413C2
ED9D0848A4FA332D582D8BFFF3D0D13EE0E49102ECE2D624A0A5EEF70005594C
5E0F074DF55E0355AA33C6C0F2D5F535AE93682E855B1BDD6CE955627284BC9A
9199F188FD2CB5BE9839DD396DE541D181016DD6F0563A26851AD5E3E00BD661
6EA0A416902D3AB5EC977DFB9A5ECCECE360FCD3B1A04F16826F1B2685EF82E0
928B3862C03581AE7F5CFB6E28E1D1C86D9C66ED01B855342AE4DB0F802C1129
6A0BBDC33436A35995B50C42EAD39029814C8BCE19DE1D6EAFE04776A6E23862
E9212C1F00409F1184AE358D6F5C5432DBA9D9E35C0C8D10D99B443B1CB9294F
D84C265B934A0857ADE490147C5AB8EBC973CD8D3946E50D5357E57CD8F73589
E6CDFAAF3113D089D7C820AA5D951578190E36C9BEBAAB6B307BD21581FB0549
CC984A4D906FD1594C829E3B4E99FDD2019F5AD448E92E67031B18FCC2557726
A60AC1B8AEF5E1B5E86852EC0BD581F6982995D8A72DAF160394A462D597EF92
0655B93EBBAE2BBD038F21047D0019EC21BE0F25113B884DA2D1596E14FCC7FE
2B528806F4D4A764589CD1AF7D05FAB4DA62F0C1C6E3D9A9FA3B7CA6476AF489
3C6475A474561B6385530D40BAFA9E432CE2A559D465B74109BA18BF08D8F494
21E472CCDAE5AE38402E916F844163BBACC25BC23B699E79352604CB5D0752DD
37CA19A2B6AE6B74865A45D3C820A40CAE4CCAB0300041B78C4BF98B23BA5E8C
A3D3F03838E2F2AE7F5B6C9E8E528A1E982E521144D1EC0E12B5AF108B0A14AC
3F8338E1910099477D1F7C08A0FADCFF523F04DB3AE66697F55CC3BD66B83DF5
78EFEF9201F87E0F4C5C5FDC8CCBD7F3B11500CFB0A4416459F54AE7751D9A7E
E3E6E28B1C8A7F0FF7212D71A06BD70910DECC1E5353843A42942A17AD2BAFD1
23999F3F016A26DC027FCBE459EE0E86C1DA16AD59958F58EF664B32B3491B7D
4E07C2C1958B8B3F7D2668AC317CC09F9734961C7D9DA2FDE6A9CEBC3A648AD4
BF7D3E5DD7B418C409D7407A0A7A532F0E53AD0E8B153023136F4BD470436D8B
7663F08DB936F73C995F3FA15A7E2EF828BA338A66810170AF3DF675622DF0B5
5C12FD92C9891667F97F96C12168CD64263F7266BFE37511324A8C312CBD6A64
A365140C33AA11110AD5F13F14ADE40888C5DC808B63EC8AEF27E536BD4963C6
94A57B12AF3CEE45979BA196810E3E8A6F2D62624F8FE4885E026B5748C0D34F
15498ECE0255C8C4126287BD22FEB768221AD59991FD220C9C272DCD31C53CD0
8ABD163F8DE60A457940E1E909E6EE523A79CA226648EB4159B86FE2842D8198
B2C8A40E6CB11C31D9C29C7AA3B71450BDEAC4AC83F0A7F4CFBA1357D8E49F88
5C8A0FEF4C3CADC2E141CD483BF1AAD3FAB74C2B69537837A2B70DC0908E8C46
CE7FA79049B46B4EA196068CCE29BDE02F74CA31E4FD96E4063FB23B0C133423
1CACE3B876EACEAE0665239ADB5D3E324BD820BC6449A228E70E9C8B66029CF2
B0D3C979259A3E62BCA87C7A190A170D23BE58AB02B7FB07FD785518D695E1B8
16FEC3D358A9A1FFFCE1449F0E80BDCBCFCF477A2C30A72EC227B20F753103CE
2820714B43DD9EA62BB2F5000FF23382B7DA84C33F8591A02C59FC1D561F2AF5
D110E04F7F269359D781A5CFE3F56DDC27A8770FBF51D4BEB61D02B873A253C5
266654D1AA1FDD19A24674F7A8D5A628D5E6CDEC1757543978CCBC74C7AC2342
1B58D7A53434917B6DC7F6AEE22D1892CF2D5337581A05B27B4EE4B533ECC2D6
E2FAF9287268340D54746DC12459C1A2089C79D4D3D8C9EB7057FAFACDC9F059
CFDE22885EDD40C4DF8D976A95E19736BD48FF71AC4935E79D34253E4403FE84
0959AEF3E3420C5A4B6C8EBE6F27B4413ABEEFADC7FDC3F6298C4728CD0DB078
B1921F6DE29913D2B6F1AE4F6DB85E249AC340CA1E36570539BF9B5C30B05060
5CB66F364269E6DA4CCA777CD3B07F91EDAC559A220F29084DD86CD87FACD915
2362D162698BC6F7535E14CF202C75FD9834CF064F5A123CB8C7A62FAB9DD62D
D40022B4AB9AA6F4AE5AA2409548C3FA691051689741CF3E4A01E8233A8C82E2
74A0A0FC2BC1A334AEDA418BB909362A5804BA9741C4DF40D44C0C1726E6D6DA
A26CD5D563F5FD0AF513405D71A1206B2E906EF1099DA1BF5D64010350FD4F8A
ADCD73CB08A376CB8E95E4248C4A15C2E50275E46460F6DBAAB372244C84107B
983B1A5B4AB1E7A8E709E36725A1250C5907B8A7B5D6B23DA766AF0C1F6AEDF6
3B9F7F23FC291EFDF0F33BDAFB342E0FA129814BE883D2D4CFFA721D7D119907
50232EF1EFE6E2B12759D876E93E78E14FD76B97270E30EF0F0EE983D239A2EE
A5C4BD054A6A9EA3698E3F716795ECF80BEC71602E0E5B7E33A8466E4A855CBD
2A9A3861CD892B5DE3777908625E1A91DDE6077E98045DE9E504F5B6553AA9BB
15553DA69B99B6C48B3BB423DDE12AF914DBE32DD3C1292D965AA7AEE47502E9
2AD8C815CA35B7EFF8A256212E9EC4897DD4F12C7912FD2E5F4D113BDE26715C
0C6A0C24C1552C1CA77804955AABF0DF9B431F70B6C431AF283A075F482E564E
7B755477CF92FEA77C09E60D39A89CBC3CBBBDB7BBF41838DB34A0F6F874E8BB
47973D8D20D85812760BA68962E8A8CB29C6584BD23C0C34D077E4EEED50CAB1
D63FDF71131FFF47E4533DA66CD99164031767651C0A26CA59DDA6D011F79FEF
550DF52C435281D0708C3E9B5F81CED307128F7F523149B24460809E7A4B8196
6846D8C0539B41792ED8CF731016C85A4E04167DD72FF30455B7E6447D19E261
1C39EC0DE9AA9AF47C80993FECCDEDF261F9F4E5DF33D55934F6849597F5EFE6
712399F2C399FBB04C1FF805B0B734CA801F7A16A975860530147A41025117E4
7CA00E739BF74AE092DE641609B79E1F193D887A82449559F4602627CA0932C2
B938A071A719EC60F5AE59866B856D69548FEC387CFC2D956561FB18C9995D50
60C9B13CA0FE121D17B57524F6D8E00EC96DE6111008B70521E4C3F3EFD4F84D
C63083CC9EBA212AFB286FE90C2E836AC1073CE827813A351F1DCF940D847E63
D3C9AA412D183D0B4E320CB26E2BD241B993D1925C487FCE04C4033A115F01BD
FFB5EB6CF214440E4DCFF294E01915A3890C4BAE632762C6E7846A02E9EDBDFD
FCAAAA054F2290B8245254972A9E4781FCBAA506BD9D7CE361F2D0FF198F9BE2
D660F139C70DEF78DD68B5A21E57047C6F2A7D77A990393CA5CBCA996BE2E518
6292AE6038D6F737F19B1FDA0404D57AC0AE89822F3DC3F102503EB314B33C39
847F28CA33067D35107E25C31677E08A1B79D449FE4E828D323882FB90399D3E
02441132CA7252A18386FD8A4E1F4023DE13C1E83845F666E7A6ADF80D431AEF
288C08EEB86108134413C9EA2183744D33C42E50335E60CE18EC00E3C5746415
B123E649D5FFBCBC1A1AC0C0328F94D64D1FE6765657E47A859D89D948BE347F
B9399A53FFF0065CBB51A3A168E557C98DE52FCAE577C7EF0A72CB1F4170BFFA
48734F1CCE9AB607650FF82F11DF2BA370DDD6723C154C900ECBB7C89AD08FAB
3A14213EFB6D602C098E76E62A5EC287742AB64585BAF8FC671C6369B43827F0
C2FB05F9F7C5331FC7A27BB14FF676F11A4B59FA5393EC2C2FF189B3CE6FC147
0EB207D088EE8EED32F4DBCB2D43BE46A6C48C36FA0865423AB9F2CFB10D7012
D37AB76440DF99E6DC49E45093BFA353C055CB1D5DC86632B34169E6663CCDAF
DE9F0D21A599EF056F964BA02DC6CBB67F996D0B21E898720EAAC9912A6430BF
AF7FE21C487DC03DBE7CAC2CBF2D35244D1F9249BF0EAE8BDB0555567A2B298A
9FA72A2B888F7E9C40B98C36419FDD459DA9BBE01D0385CC5831C956B632AD6F
FF7054156B2B6EC19347E0D97206CEC98C42B1762CAC113ED2558401FD2547D3
7F634AB31665D7F80EDA5C590257F4F2D842D72B0956F346EA6562C59C5C28F8
A59243C32992D052178B421B0DC4AC696D6217E38EDD5A5B5960F824BD17D6A0
38CF189CD86719DC60923F7AEB57EF8C2B2E460F08676FD1C0CC72F52D8F279E
4959BCB2AF9EFBBFCE771549B3869410822C4DA3FB1A29ECC9DFC6179A8F984C
A14726AD93373DAC87127E1D17F804EC0C1C46B244BB13B52DBB4C1913F5F6C7
57234D7EDD3618CD33389BB0DEDE9315BE687DC0C5D496402627FB963A90B3C4
38EFB1B7F50E15BDE6D5431809F175C7567728FBC797A6FE0A044A36FFB5F7B1
FF17874AA7CC620939F3BA8AA5ABC5458282D31928C870512F628D998E53AF47
E4E541A01B9AB34E81116C955061B4CF38487555F73AF093F343C6CCA44E9244
5F4AD3F4F013108405DF82E0D367A0200CEDC0AAE2EE23F5AF573A9C560C53F4
EC10F01B24BD3061707FE66D1DCAEC7178E13A405DB7AFFDF91F37FA0152864B
E7E8FDEFD0090BD9A658969B3BA995F1D6868BFE9F953BF0C94F4ACF4C0EC8DD
28775C576552B326C74139B6F76F8305EE02A183E3D45562DDF34FFE1EDD07A1
3AD1F2EF9978D3B9FA37E8058CB1E37805C784A0205D94F0A30598BB7E548BA0
9BD3D79A1075895720C58DE9A24610FBFBE802FE062ADAA183D1C153BCC61B14
C231ECBC83490C56D54FE2A71AAF4CFE1A7FBDDD3F32E58A2A9EB97E4071C660
682B4DD67700D81FD490832AEE5010AEB42AC994C4B96D4043E6450DCD3BBBE6
79793092790055198EFCA05EC6C3E0C4957767CD85EF39D00AF0F37FA2971CB3
884245656DE62CB9EBCFD1505E80A48D4190664DFB169AF97B549A5C608CA615
DF817B68092746ADEE42FE071FEA0094A55ED4612289FD2AE20A0FB0174DCA7D
3B3EEB5AA19909F3E971ECC7CD98002FFA46DBE5727BD3BE976D4963BF1DDDBC
2F407F265666D7579BCEA6D053FE58FA2BC93857A26CA0AD4CACBEB2E1DD7F47
029E1579A62B5E34FD342D204D8D0EC8AB2AB23D244FDBEDE098610F35EA14D1
09C5ADF247BCFFC4BFA4DFE3FD4AE99F5A8595EA84A35736F16E783FDADA674B
361F951D5152C0011FE0BDF9752F34F87727C4CF78D5C5F114418ABDB446243B
71D8799A722117650C8F7ED57684A4CDF5D554B1CB65AFC8A2358C8502BCBDF1
0E7427ED7C134AB29DCECEA53BCF8363536C67F00F622D32DD9A0656EE7273EC
391D3FA9215A2CD263C77714E5F40109D84051311E6BAC3769B27E7539145E11
91730E2CF1B8B86DAF7D7032AA6408DB968EBC9D05679D290A356AE843517888
265E57D75503869577AB8678D40C3B58D8A7F65D9BA49E0247C276AA0C240230
221CC58CBAACA6B20499A21AF248A1245A30A710EADD0197F1ECCA581B10AA78
F426FD9085880AD43C82D9872307A2EE9A2445D0F569CA2F96D625FC6D8B921C
F6538D1BB29418F261C673AB9C4B486BB3B76D6276DA9A6A66EBCDF427FF838F
292192CEB984B3C2DFFD9D18F52673F12725F3FBED8B92A247E4ADF84A3ECCE8
5ED1F4FF5F2DC76821C33F3FC082B0DF92B117A34943E0BDAABAE01BBBF1C500
EA0B4E576845E25B9E7C914E0074C438B0B5255CCA4011203EA05D613301D6A4
D7B74026B1377BB50ACF8FBB2C8AAEF68EF9588E1EFA5D201B654E690A5C7442
961FEE10DD00DE3F6F1EAF14CCB7EEDD0B2DB3C07473913AE064EF77875100AD
C24295EB168EDB8C2969494B1E13F4D2BF5379B7F814CB14377D8D19F3659A22
37F2C677B8B1F332C0D02790EE255ADD67CD0513616B92B7645170A6A6B6C1A8
5D0058926158D71514AB58F78A4BE43408C7C2F6D4465B31BDEBFFA59B2D8C81
A1A69152E89EDD1922C10A3CA1DC2B0BD7BA4816DA16B8AC07831E41FEC9CC96
EF5CE410D2AB109B8F5D62531D2F5C1CE0B5E19A665B2495DD8BA454A8F445B7
9B739BC4E9E9942E8084627BCC1E0C4F2554BD6F1F82DB8605A210D59EB16FF4
89DC229E9D659F2B8CF183BCF76DBFB5783DB3C07678E2F7D5769D6B2EF307F9
D78605927104EB0B02CAE4F52347C6E3CF2FBDD8827D6CE7F1FD9BCB8256AD41
2FB0D6A0C0E3D0D1237B3FD00C91279F26892D97DA2F0E5BB13D2476B4ADF41D
6B2295A684E41149A77FB4D9E601C27E854D53B85D0A42A66C720631B0E76083
832EFA1CE06F313A478755299B7EFB84F698B3461AEA2EF3366491D1BB097D8F
06C3F1E32CCE73FEFA5C0C6801DEC72AA278378755108A69ABC257E8C3964179
797870B86875DC58F23CC3DCF4B5DA641882E8CF028D9C0250CAE03EEBD103E0
38CAC4306444AD1D52946C14FCFA772661F510690C4BBD7DC0BDAC636430D496
E772B134E967A87C75DDB0CF6D23D1196552E9231CC55FAAC46EDA9984444FC7
509374E4A1170EB43F0E12C2EE8285E41F5E39371EE40A46E235F3A88AF61B53
AFA57A14B7F2D4815E0733979B9FE7F13B7E5F85EB5DD9ECC1EB5EA612AA0CB1
A9B056402EBB948EFB6F1B63AF69A845515B38D7DD41EF767759375E22E3A883
D850F4F7E5F3A3B3D2F64D8C9A780CE75C1BA9AB9D861C5D5F0BC58BC526CBED
223A031BB54AC9628B1CA5E882A69861DDB635B028944A469B666571D5B7224D
EFA22BB0ACCB4CB0536E9D0486EE22E7EEFEE73FE7C6B2F44FF369069997934E
E0FAD7D14B1061233AA9915A7FF4BD4A78EBD78B3998FDC5D887F777D2C6670B
93D2BBA04B489AF91F30654219A71EB67B3B48AB7AB10734FA0475D4AA4CCEA0
42816BAFC0A72B83EF282429D430CE35AA150D692C3EA4057799BCC8825A46B6
D70EB017FBDE39702B4B8B60C24B78371518568DB64A9868E32D1914694E5FE0
559BB3918BC5F6EB13D52174ED5C933E8C8525F88E6CE48266186158B36D8726
402CDA46546996D58107C54259B102F4291AAD8A0F5E15870588344D7AF34C66
FF726298CDE6AEA62DEFB0BD38527EC8D1D19EF87422BA73EC097E978C1A3277
A9E33B6810E923D7161244DAB0D01AC800091119DE5CA7DA8A6A6D87679CAE81
D41805DBBC4BE22B74FE346D9AD20730AFDD020D7B237B00C1EB30A98240A5DB
BAD1FABB461A009DF7C2666BE9F318694631C461CD1435942732E9BDBD8789B4
146CAC54EAFC242357AC9357F3EEA3338FBEA7771F16DFBB64FA76074355F7FF
6C5587B98A7F631406E13101904DCF7624DFE8E9F01A276C94347B1633DE0066
3BC920D6EDD5A8F93CE2F571E3F3C9C616260C0CC2F30246CB9BDA7A1FB9328C
D416EC3874534612967AD795497F72ED1E0ECDFA7758362210962B3400AE0CDF
57242EA8A7DA9115A39FDEA28E7C1EDEC044D9422F1B1537040858EB3F562B37
CE595AC3132C7BF0E66DA9ED6D5D72499519BB15BAAE5AC754219A606ADBFCE4
1476F709F0B657C203BF15721637D595DA5FD64C9A6AB6DE6A5023EABBFD7F1A
139AFA0C776B5F6027EA3FD56E6B640D8A3743852743D1F6A0B885BDD576555B
4CD763803AE6795B23AF56ACDF306EAE85CBA7D0FCFEE888CC7FFDEFCBD57372
57132CCEE802732D4B23AD08E64CD0EA508DB893617833CCD546EDBF0CEF41E2
E467ED1518D82B08130625B70FF9B0F0215B2B0B1A7C67C3FEA42EB54F22E9A7
30AB8D4E0641F894BD39DCAEFBBB0536841ECB85068A365DD2BB69314EB8B904
108FCFB9E570D6206EE7C3866DAF29AC1020BB9A0546118C9BB6E9CA78AFB3C7
D87A1C043EA5E1F1ED6510E900FFFC8BCC3D355A4F3C7BB8FF0113F63EC8FA37
A28699D9C0F3EE94AA32E3C58F8D7F803B5ED202FCAA50A011D7D48BD7C93BA0
ADEEBDAD503879FE0A21849F2C6234B253A36D82E0B00686B0E8BFE3F4AE272C
759A9D582ECC1519AE9A23D52A6EB95161B324F36F5B8E2EA52E4183F35ABDF0
5D23A0031FF418499B3E3D0E18ECF3CEA7CE7763657F76AA9E4557B07D11A72F
0EA1936151A76B2D60E7A7AD55991FE366E1D0CBAEAD2168ABEEEF7FA4EFCCA3
0C35F607F5C12CAB51089E2BBC6D029A8E6564460CBE4D5EE06C24C4F502E4EB
6022E111E29C2B47F3381EF256C0F1A4490EE2F1C8DE42D0C0D53A66DD545E42
A1186979609CD62EF3C72F91FE500CC26EDF9639E4256570975B25C6C1F06CFD
B2FD903405D08AB9A9E70887177E32CF45F52768B6086C41EBDADCCA8CFFC54B
84B977A8CDB82BDDAED09691A6FCD3FA6EA40165D6FE43CBD8FA5C85EDCD122F
AC36F59FDA77E8EE5E22D705D78BCD6EF09105E2DA61C83A8CE2EB38CAFF6934
B5368C099B59A7114410C608C749D1B7D493E67F4B63AE9FE8C66DFDBDD58BEE
BAF5565EE90A4DDE0A23E2A993E726DD72DF4CA18857A3BD1BD163518B537E61
1A2D27741CECA6F2956BF0F2DCDF5326BD8683B5E13DC080B04F8082DD9282BB
CE221B7254BE58D9EE2BE14568D335FBF7B9029B67CE9029093EEFFD1DB75BE5
E7FF04454A49B792065BEA8E08F6D94B531D23170930551E83F6E25553176FC1
9609A26DB7283FBDEB0896586854605D96AA8A98587E80066B6294D98BE6A529
3EBD47B8E6B7BB1D9A4A207B4E0B90097B39C254250D453AEC9843DE6274B66B
0E936BD38CD0DB6335FC4A6B27E683A4B83116D297C764B1D4429450A21C9EA0
419C3A9D9E4014CC17E17E0CA18ACBCB28E31AC2C563B89563D0D5FA485F9B58
EF1B6A05F330937044F490D8100921143CC3675F46453F46B72A3933FF6C77CE
97F920D8887B8EA159861C435F0979F11E1746F006B749BB314CC4A1E70CC7CD
343C7F3C469158668DF598EA17CA0E817EA50B5ABB794D0B5138BA40A06B0288
E5BE5489E6449AB834ECB4E9407E0D5E0DFBD0C338ECAB53C7BE0D5E8288D867
78E7BF961524E86771B275D369257E42AA6F9D8165DD3026E2140737C6C174A6
A9985FAFA73C8FF2614D012539D1CFDD9459D56F70F30DDE2F35CAFD866D00AD
8F5EFC6A5A7D827E25030A14C79745CE86724470B9BBAA78BDBD55D2CBBECDB2
CCE5BE9885C3670D82BABFED785070A39F761F19C2BCC97B7E3E1222DBE13851
39E26C7F0D2ED33B200AE21D0404DCF32BCB28A7373F882021F87558C1A66144
F836F8EC13A5A32A91CDD341E13F8527DBB0D01AC800091119DE5CA7DA8A6A6D
87679CAE82897BD97F65AC1800420466231ABE4182F7AC1C2CA60341B6804D2E
D7323C73B78F89F520EFAD4FA8FE012052996621248D67285ABA2B390E51FFD5
A382C1DF88EA6564A079405F4F35C7BB99785482A577F9D09E7CBF020CA98880
C2B18BB27E655025ECD2C2936953064E169344F16D65F4C9FFEC3019C77E70F4
D2F5C6D7F44664C00B6ED7375ABE255870CD61C8CF7AA8DE567D174EC9094540
4C580F758C056EAB723941313444EA826ADD5FD8FA44B8F44FE9A6189925F23F
0DBDCBF69D5AAD409B239F1D951AAF46948F1B06A1B8A026B3CA477D4CC612D0
DC8CFFB61EF1E158C5F5DFCA81222542CE81F2CD52B47A8CDE6C31667774408C
D94DB0AA8DD8DA1FAEBC9263DBB3C52CA6002F96C1AB2C7AFBFD69EB36665C7E
12F29EC4BB72A566612661F780459D9932AF482B5E2351E3BADBEFFC8655C651
82B961927DE098C08A66D1E33FF54A29BD63F952A33F80DD8A8691F3FE1D7B1D
791259194675C17FAAE89D028694933C00C985C1D705E6921EABC65A47C770E6
2C69C14FDF4DD40530BA6B0049657E5860D03B533225DDE7E52E2B77D0DAE8D6
79C227DA8E320458CB81CEA74C64DDC84B93089563509B30DA152B9CBDD17EA7
5DE16C9A0704AF6A12515358D05E283005D97035874D2B9AFD4D3F29B4B1E6ED
E30C2A5A06F28D71D53750ED0F7B30F268BA2559C0B2578659905CE0E0F9E09A
AE0792954A1F2C0AAA8288DEEFFE528255E7EF2DC1C369371233298249463208
37A6F8F1722116C4BFE510F180C63CD039D399B1D9C4208BDE9E7C017C275BD4
96F93E01565EF63E388BFB5372277A76D4F5B0E7A983AF06FCF09E37E9D83826
C7818048068492F57CC1EE9EB90AA437D14EA2377CFD4893E36CE80FDC075956
62846464B25687240B575A6CBEEF06521A3BDB9975073092C7AB9D34C66DFF94
A30B87D8EE7D52C4E575CC630486B6BB9781640696C92E4756D7574906FACAE8
5766D0C76B2A404F1C74127034E2543ECE021E45E6D60B1DD6F4C4423D10F8A4
A0BD23D11844BE36E421823C6EF7A34037F06CE4252500F88DE62DAE2EAF5159
FB19BAE7C86D4649B944262308EFFDAD04F0767BE960612179D325BE5FBB5151
28DDB8A8331F4A04C9126F6A007AD664AEC0967FCED54F08BACF90035E1A202F
5363892C7420DEADD207EBC15F22EFE2EE81A76AA38F23E33E1C18D0BC2BD9A0
B5A46EDD524CB3345923C2981F3DC2668C37105B253DDAEBC5CE6923ADB72391
17B24D734BF44CECB039B86F475DB68A6AFA0948DB49924A446DF8C97971B91C
521C3C4DF935F68A9237EF9C0EC8AF43172EABD8D0C79104D2E173B080DD050F
C4AA8CC824FB8371A04B2624925CBEE7787D68CABBE0117036965CE161651614
384D7F83214B975BD1F082D7E510F11A7C506EE869389888C2EB57F251F7FC77
0D1B943FF097DA1B1B82FD8797EEEB29846B6DB84DEFD0C7F2FE5DCC57469300
17297841A20A8A19FB0824C590DC62DD04899AF332256FCB3EA78A9EB74B4B09
1BB5B674B00F15D0211451B71F926B4393A0F11A0191652C64236A97313E77E9
261C6E4CABBDE97CEB9F2CD07EB064FA0A0B34400A4BAF1E44C01217DD585C9F
AD7B6C7AE9040DFC1220EC7B27B429929742FA4FE73B31D9075B4D37B7845FF4
E8F39CF89CA0FD60C2A99B2938D436C3B46D661BD9D36B761A5E47340C37814F
E1FB817C7C68A5AFCE858316B16B4B33575A0CE6AC3E3C48AE1FC1A6A17F9585
98EC708F3A11FC2712B27C3157314BB5A8D210044D0E99FC5C0C1472F6404B1A
A6039BCA9DCF908AB3F675F827212BD673EBBED1001F890256CEEBCD45D2980B
707A7008CC7231669F79EF6C4527DE148B31E0F553FE1D44BD38CC00A2B6089A
597FDE4442B8D52EA04CF93C1271A1A35B6FA30249835F399A5539560C064110
09B6C4731F3744DC0FA06B1A43F7270575C6C15AC93FB9B1E24EE88FB207ACB0
EFFFE40644DA855930F6A5962CB9AE8BA6D11641B5D3E0D85A98CD8D71BA0141
F1C05604CAB42F896FAC235DC6FE071555D26BEEDF3943D11F3BC9CDD85BE932
D3213B8A30AC2CA5C10FD42DDC2898D307305271D998208B4EFE23917F550611
3918E5F29CB75E25C37C7BEFAE1EC6B5943863B35EAA4DFC8050FA52A1A20EAB
988A1C23C7B8940F5D2568FCC3524F6F89EDDF5B449A392E7CC944A3871301FF
9B6D68D84C4B105062E9D0090BD9A658969B3BA995F1D6868BFE9F953BF2A641
5DBB8D377E376DEB9A4C30C3D8B52925EBDD62DDC14636FE13D6FFE686B1CFD0
EE0B6B7F873F7E4A94CFA351897CBF7F8B7139ADF77EC4DA414C2CC5424CBACB
FF0069E1129AF438705D08BC04174D1CD50A27D94FB188B7FEDA920DABD2DE58
4E5AA557D8472935F85E54D1290CC0880C2DEF08A6B185F274EEB557DF134CA2
4FD6696AFC66AFB8F4EE72F16F4A83FD3B6F7C02C8ED058A8228686A3D22F128
30D995534A8D82E4B822F07B115E08DD7BEB1ABEED9E395F1F1DD95ECC8B4432
266F916627358226D27FCC210033B0316F32B9B4B3ABE76EB1513A99D6079772
4874212FCDDA068727E355155D9A3FABF08480D6386E74E94960260536938CD7
975BAB77F468B2A26E66C47738274E1AFBB463A91AAB97CBA9741AF74E086304
643B80ABAE1CB6A67ABFAD25F281D32B5519AC1DE6AF42F220B87F22913A4347
A4522359194529FA6F3620D0AE2009A796D322E5D0E429760DB81F141E24FE3B
5F3789A77B21A4B5B85EF3945AB516BE7B6C3CE9650716BD01069A1C345B4B82
89AF82FE3CE662359B4AE827864CD1D0B3A610CBB94F8082DD9282BBCE2DE1FB
46E003304CAF2BCF74B602EABE01970967ABCC01E4432BE645821E91161B8B0D
698D01E153568535B02533C33E3FC6AC10534A63B80CAEACF142C6E7740D9097
EEB91AF7DBA3274A10413F7F1D4C2912B3FE79BC185F5A91B8EDA9C14C3C7AA4
5C67039E7FD665998C53F28426E5E4E2EF70665FA751137683D119CA3A9D886C
A9C60D3A774AC7B42FC1E76273F4FA75CD5EE2C8A7C28C9978D3B9FA37E8058E
2BC9275AA5105A3A7422823D4A30D7FD19F77BB2CC4936A33004CE2C9768561B
F1201B86813C6B89EA16AE1B37D52CD8AEFDD97BD87B20D735CE102C0F60A9D4
4BFA106B18BF4FBCCE920C979763D14F31C5C061D9A28AD1DF3471D83495B191
505FC34349F8024C28F61A2AEFC4628B6863F1BDE63540D2F1D473CDB0D160F0
D82EE4D976BA9A90F152D68E756C29A24A789A87ABF3CF3BF8D4CFF06C5B946E
21D0F5A799CD011CFFE4CE5F673981D4C7797575C9D319B53086DD9F4FA1AFBE
716981C0DD45A62C8B6CD6D07686293565232BE739AF0DE8FACDA575786E981F
2BEE8FC602BBD6EDEE6FD119261BC40752E5E4D9771C3B3FC8F2156659677CBF
68EEB3D5F86FC0823EAECBD2ED27213AC1FE61719E1D3195F535C1536672E4B5
5A869C96FCA773ED5DEB089711F1E92E89A91B046BA4CDDCCDD68C3A8E085E08
25AADF5CA658B222EC0071C59FC33F36401639AA48FB347E8A5B1E0D054BCD4F
9170AA7E8C8753AB024B3868C0DD77370B3A4C7B16C5FFC37C096A431EECA107
58CF9F5CFB1B3156064CEEC693C16B023B3DBC45355460BE4E0C5D87B5B3B91F
8CD458C787BBC6A5AA19182C7E3FE4F4251B1887A2C605FE1895D30E49A93478
96DE4EDB781EC82EA0697653DFA3919067E6E3DC27F68D21D9BFE25248E9F9CA
FE7B5FFEA05997C72E5EC59DD39D8D40759EE9B3BED754A63D9D962E22590FC4
9AB14D19EDC2D37EA94239542DD31EE14548C3518A6070A2554ED192FB078733
FB8B1244CC7065084545444952F345C4B9D41C4A6A03DFF3B6D0E1FE3C442B2E
AF783EBC83564C6210BD97D28D5263EE631BE20CC1F6D56A03DFB8DF16CC66B2
5E5DB595D29361F8253C26C37E09B4F87056EDD8C90BF91F8B29BBBDB962DF14
66F27913394E9A848702BDE08D16FB934023F37DAB1F5EA886D58A31ACE631E9
3FB12B498A17C7ECFFAF85013B5C541204F798245660D13B36C1F9979D1EAD71
790CBFB48E5B356409197672362386209F1234B69484C237E2D1E2E64C0D4832
9329AF92F585986E868A53B43FC51E84820FEA672BDB5BA9A0569B162BF6F460
0DA9E1C448DF914D2766AD793BD0391A1BDE5E21DEE4186926592E09209CDE5B
1136E5BC9525964D8B66865C2F9A0F5373A4D397105BB491AC49E08AD9DF0272
752554A64DF129A72314EB00C07DCD7651B60D1B348FF1C5C47E900503D9DB0A
A419B2F8AC6BA8C556631A4A2D5AF05EA2047988AA020AAF03297DD074460AB9
90555BE6A705C38565CE02C0350F3C3908A688706E6171529E0E1972EBF20BA9
9B973D833C0135369EEFAC2935DC6FD4D20D3C2F3472DA36BAE42B05FB72A27C
E59B9CBDA3DCDF109071C2469B43DF46DBBA605CD81A683E65E160F7AECF2113
9577B58B735C1F44C5DA7B14AFEEA0B92BC6D1851F9133071CFF77F6B7BB47F3
08F0F5FD315EE4C1EA704A154645DFC342513361C9C327B70F560A865E724D3F
BD10BBBB8DB7B12BB1011EE8DA19688BB226882927FADEFEBD9D4E6097DD07FE
AC097632B04FF76A65D3AFA2F9436DAB7E1F3B2B1417451DF6A798A1CDF1DD1B
C4533A9C52D6E4EB10CE7B2A266F24E369FE2D7618C620CFA8516A13E5C22BBE
E1A7A909E867F3EC1086D96CACE0C747E60DB3C99088BA3E5E99DFD2791A60E8
0125314461E8012921C62D4E3ED9EE95AE9F340D5CEC2224E938D01DCD21A0D6
93ED15E7204C562ED89DB82014DE38609AB9B1A8BE2BA1F6AA8CBB9B5DC32EDA
308F149704EB45943BF2DC9E8985C068941DF37927BD4B4A45CFAC6CEC9EB9F4
417436692AB13A9F2183C9B0A4536829527A871675FB772B64C4DB0D4C915CD9
37F8BE19EF71F4ABCAD445E4B29D47889486E4F573A87A19E5DA17E070DC8FCE
D3EB7487E54DCF5364857EA20DB515C86F99D9F39C0C4E3421735658ED8E5B44
889B553AB3021AE0C0715D60E8D42636D3C64B8D2004835FCCA4CE0FD9483447
9279EE106CE360285C1F860C6CFDEBC07D3F1415F381236D5870F5DA60127EBC
1F408930DA173B4CA5A62F687C9C0E21F7697913C796CAC09567214488B8CCB2
721972CF98B94FB0C1C0F575F4A979FF04F1B3C17864FBC8B92B77DAED898FC8
1C7A93EC9FC3BB5BDA3619E904570286AF4C5196E18D4175AC6BE1B3456541FE
B1FAEA78347962552AADE8503CE425C1502DC3E14A5993ACB13E773416377350
5BC9DC74BD7558878850E7378D0E77A8333120193030D9076F46FC88E18E019B
8E51E7EEA199D39C2CDD22A13BCE67DCCD4E73F9288693726BB1E0D39DC3EE54
0409333AECCEA316CDE8A62D377AF3CE7952B654A51DBC5B9F132635E835D2D7
4CBBB259F1F07DC7F74A0D2455C2351E58BC51E25FDEDE60F0532E3B730962F6
3C8D1029B4348EAF26373E93142523E57CB61535E56121B037B85B57E3D3D80C
06EFA0CB7B6606ED644BCDB9A4793324BCF83A1DDB50E23253920D112AAB2211
BD76572BBE769C17E02723D58A635207F61837AC91AD6BD4A98A91E5A0DC2E70
0FA0A721748E0F4F02E605F9EC6EDDC31F4FE28B0DC8DE04B043643319E48BC5
8438C6183E0C47518363BB9C7DEB8602373CA4D8C3ADC82B06160E7483F00B54
D5B9AE32CD1C4026F46BEAF7C6BD6B8F8DD7CFC289FE93469C707D8180D4F078
B87930A6D5C0E60C80C539A295D808662B7F771B08E89597394FC627C1D5B50B
0DF52F752A1A312D0D8462C9389D0D7275D2BAFE8F4F592A9F5FB13EACEB54AA
027C1B87380F9EEF9D5576A723A007162F330F648A428C753F20205F80DE0240
57CB62822E409FD1491EACC6F092296AFF00D80D3B976978DD98E3C88E4DA41A
68F9D135A5D11CB6A9E46A242ECC60B162D9AF2B90DC7A43EA830ECF6D6772E5
E778620946112D96057F4EFAAF8BE15176E475E95DF937A6123984C8FE3AD961
3A6CE706DB90796FB0CD95E2E3A744633DF3A1A9D4B70DC521B212129CBBD99B
FAEFDDE463A278FF00A40E236B7BCA3A83192D97B128519E4CCA3A6C690D8525
EF5A5B34BD7C03CDEC68276DFFF44150CE7DB7329B88C7611B6007BCEE3BC786
94B314E18398769FDA84FA98DAA3FF437824330F5052B43E42A8D9BABC1C3DDA
7B54BE6A741CCC7FE20FBBC297B1935A3A5DE94E8681FC6842864F8D30AD14C3
AAC6F89947D155DC111130AF46D4C19FF419008EA8FEC3E81B8D3532498E7875
E1593E1DF8C0EF5E3048EFEE32C3DF4BE75CF00DFCC413B504773D99A14FB7F1
0704CE39D819D28AE19F5F271C42169287DF4CE66C37DF2447C343BAB5CF6D6F
7B82AE7FA98BF3654EEE30C9C000F6505A7C5AE95D9E3450E72C99406ECD9432
1E390B2BB6E073B241295747F4B23DC40386FD65ED696E38251125385AF1647A
4E4169D825AAC0866A06A2461418D3F7BEB8183EA2211316C0CAAF127E30074B
1889408F56BE5DD221F4E05D8C864F9DD3E99FF86030A2656377E02A43FDBC78
E4627ED79B16862D939F3A30061428AC72D636AE969256DC91944150153C99FB
FF32CD09843BA260A347682E02B4DDDDE88B08FF59908F843BEE09D4F3C596C6
F28C2EE0009E717CFEFBBFEF27CE94608E276293EBFBEF1509FEB31E38C10077
F1BAFD092A37A6BAF8FAD751BF26B2493DFEE44FAC4B0288339755DB8619D13D
8F541EB2C9DD4ECE1D5C657039EC1F6C63B7A8D824714345E89DB88F82BF737A
B469730545F151A957350AE15AB7B12CD019B4AF7582590C7498E5BACC09E04E
D65CA0335AEE2E38537138BB6A9C5FFF29E24E753C98E8231D2093E8410180C5
4A379DA75BB9DEA8661A88F5199E88AF05E9E6696DE4E39CA05A8F919A4ECCB0
F6FDE3F2558FD1C5ADA269CDC8F237A292E60D02EF0E7F275A4FE93755C89B01
CE2F1AF46EFDBDC92B4425B617ED27EBA786DEA3D1CD36DBE5110E1D36C2F94C
4F2340B40FE2F0786E979497CF2A3361B379302099EAE892EC4B4A1BE90C3436
EC6C1A358168848EA6901ADF9DE277FF0140A3918609C50CE3EE3122B527774A
74ACF9E4F8F07FB5BA6C7412E47B00C8822094FC1EA50095E242A5C5C84C1F9F
6C7DCD21433F540A8F49487216D171AD2C1045FD7E0F586CBF2D967E468B2E8E
763415D3FB694ADC97DA44BD9FA34500F72B7B38CEB8258173227E8CC91E3773
52CD4B970C802740F07F64C88009591478CA3CD3573A884EDEAF39394589F337
2502D683BD0577FE10D626A9235C76FC3010895BE4AFF551597F0B1E02E81522
FE220347F9D7D024AD69C63018054CB8AE7D51694CFF5899A0884293BDEB690D
C928A68EFFBD0C131646CF303DFD961CD5057F44D52C1B5FCACF66DB19F530C7
8B3750415CA80E8590F52DE971DAB656E0A43AC910946E1D14974A6F4FB99C87
4E748FD10B214773D46A8AC90E2749400B4D9A8BEA502B531A95D074A7642D5C
50D96939A98F9438064838B04146058A2C52D99BBF3C0E108B57F4DE855DE567
BF2A377CBA7931BA7412D4FBADA27CB1682C0331241D87492D92E8936325CF2A
102EFCEF6403DE4E2C2F75E5044B79C920ECBD7C9793C9A4B11434E4878F915C
F508B9C1DF08AEB3B2888C65AE271E9E352509A07F9623ACC0C022965EFEFCA5
6FDEA836D5F685C9314928780772064C63F1B6CE3B19EA98823BE8A1ED0BDB25
651C9E60B3A5D08B4068F1E152127ADBCF06A3372CA1DAC1ECB83AEF8ACB06C7
977F5BFC46DDED3145C2101451A5903126FD80BD493627782C24ED1508D1ED66
C6E93CAE2558AFA79FE69F6BD50503F90EC09921E2AA49C4DE54A05AFB1AA6C7
CCFBD9F72150DE26B1809D8E9487FFFB4C55FDEE648948F92CBC5FA902E2BA55
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA371F89A45ECED9B0651A8A701
27A7B6D6928D6393D8570186394FCC328B413F11A3968D9FCAC28875B34AB841
C3BA743A19C6C86A732C17AF9C9B220E0DFC4ECF5B462F4DCC6A8AE100116920
383B0A69281E3DD8A266D4832A90ABC6BBFFEBF0F70C0EDD2BD69F1C8B71B7D3
DB7D0DEE1DEA2126F3A9076269B99888609B62B7CBA5C6A712CA44B691274F7B
85695F5F2079000CC6A6A6BA86F337769823175E42D35054A32475D0382BAF17
AA04B806C99C6CA897EF92C1ABC25B8F3D000926B1E11B361B131F1120439587
FE9FFCC2F96498E0616C674CA5960FB7144D5DBEC3754928F3BBB73309C530FD
504D95C934363CED1F21A754E413C55D5713C9D3ED528247757063E50A9C170B
EBC15F22EFE2EE812C36C1E2B485259EA071BD08F6683C5AD462F825F1D3B0B0
E9797836CA0B1D5E7B98E15405AC35BD4A4795277C0923A9947A2F28A8BEBFA8
6F020869427242D783CF0D5CA4661A6578FA0C88C797C00EAB746B3E6A119B0E
7CAE91559DC6A5B3BAB55F5BD0F57357F4F5AECD3FDB730F5E8ABCD0F27FBE61
2862329C62FE8C33947B6536F365E33CBC385854729659B40E290D28C63304BA
3758C1B7DAF21F61FC2EE6DF51A16B4969B5619E2B15FEDB0B3FAF81E93EE651
23A9456E301532929320D07646B8F094F219FDC4AD5B38CE04E4C555757F69C6
69C5EC403158FBE37A06EDE5C5A6EA04FCECBBE13660D5360139F4B2AAE7CEA1
58E99E37E4773B561C5CD2EE10814CC2C3EBD2CFFBB8F5C0596D7DCAE8455188
E2741758394F27E413FFD1A36A573708C2EC010028C55D9D6688C530AD05412F
F5788EE038A491C9139A2E0332D08A47FC4450CE9D39485C226284125367D10F
DC376F2C32D769F3639EF05CB9568AA9C68C085E87B32EDCAFFCED2FA9A160ED
F1D3E0197151EFFBD0C3AC4C36967A941825BEAB6D0E62FE185C0962BAB12D24
7676FDCE51B2C79A29F57D06055175CA4F3CDD7CB1D87A11B6393F8133A84721
DFADB011D16A77A401799D65079F767F68BA44B66A8462F9D335B437B7DD0110
61B1EF585D7190F2C24F9A9A12E7D9C90E188839D61DC331EF31A4D5750105FE
B6F0C5333DD2107D819094CD8E14744B571776B1D9BC9C5442CF1B93BF524CA5
AF7D1406F8A10CE2D1A392ECE3E3A719CEF812AD00A931626533380BECD9A771
58110E3D12C4234F6763C471FCE09BE830EFAA1848D82076C95BF1122AB43089
76ACBAF5037EC19191219B28B56B22AB48CA7479F910B174AF933326ABB47935
AC900487A2273F69F0CAC123513339AD7F5B19D9EE63CB585BD427A7453961C7
11C5DC5DED743A7ED41E852DC45BCA016BD8174FB7808C5755EA09921F055671
01BA4EAE81E70AE166BB19F39AC4A5EC21778AC2ED1F0B89E277F52CBF744988
1C9002DD5225DAD211F5C72F3127A60A33D311387F17E4A948DA9BFA7CF6A3D8
C46514C0CBCB2F5EA46AFFF78F935C61493A5EB7C06CE21200E286D079DB6B48
91A8D1B7D0C8207A291FE4C18F6335FBA135BEC329365006AF75E07B866F2FE7
FD3294F1669EA97B3BEEEBCC20B99684E93D19A5833FA589993F6D8F83980871
1285EF6C021B4BCA8BC0A91867D9BBE00B986837CF9A24DD30F26962EFCA1E62
1ED2A65D66DFDB2098887BC845E63B0217CBB79A5BCE21BFA46CCFD6B4158BE0
6C768C73F474D5657ADE76E9E50E17C3EA6A106B7CE738518C29914C530950AC
F6844AA44B2CEF792935B7A8034EDF79DF564B3615DDA5F458D34D1C7FD302D3
1F1862C85C6ECE632060BE55223C56908D00199B1D2D941076B1C64D9DF2B570
C08103526C7DFF028D788DF5373AC68A0B8A8FBB5B9E3F608EDFD858AD4C7731
75799B685B89D40199CDF6BE0F813F424364678789109A668E707C52E55E9A5B
779D093C01C8FEFB74E98F68EC3A999035CFC5D31EF6217EA0BA3F1CC7C41291
F3A9CCB35952361F4C7DE8B461B6C7CBFB9CA8A0282200D23F300F2AFF2178E1
140C5C17CD7C109908D916ABCE5231827E1EA5D2A6B522CD3E5D260624DD4187
D98840FB203A1CF976CF7D846BA37480FD023CA07F1288CAAC5F9D4FF381AE6C
638782534BC1C4A78A3FA04E42F3023E1DE3EB90EF7000333FFB8202AE512E6C
A3913D2EC211607B4D127C63BDBC311094C560D193C07B932987B4DD68802BB7
568E5B84337BCF753B23AEFFE7DE50C0279703D325196FC7705756B59082F0D8
5B0E8C9C75EA234FA5B6D7BEC0ECBDA83331900F24D259B43E04EF1076D442AE
A437D5928FFFF21DF7DB66532AFFBE717084F7A40260AA66B6BB2CCCD77ACFDC
6ACB5199DA4E40B3AE269221C8F2972C6AAAE0362C72BAC7A450BB88EB770C4C
D6B5B8E5D4F84E9E45315339F1CF6D69512860394A6B3E371A137CF04FDB7C6A
FFF5B11CD25B68C1797C22E33DF8DC2D28028785728FAA26BB3A1E67AD79E2E8
88907BE0973D4EDAB1EB51DCCE8D5C024C61D1A74D2E0366322E3B5FAE003135
C49E77E79BB935BC5E655B8B3842E619B22E3118998113988006CADFB57EFA83
31A65DF6AB0E666E80CD86085CBA6608CF156E86927A6D4D8246882B3271AB3D
32347F125453AC44AE33F45EE149645B0D9EC8F735AB61209F071C71A1165E11
9A3936935278D7817D1818AA10A33C9D21EE7F2F4626CA1758915772735A00CC
9BD57953171B0B6052B86836B9EBBCAF87CF662FDD7E43A15111AC73E805433E
B087080EE09703BFDB37D603ADFBD20AB10EA3533311979C7C20F533AE5D85BF
0C363CF65500E060DA7547F5DECB8C4243F08FFB4BADDEFB530C0CF02394DF01
96EA4BCB09F019123AB92002863D00FB9C85DC3952A5684CAA59C47C33F7B3E1
7AB8FE9F8619C76F34EC98B5A634F3FF7824578B3EF843D43EA7E249CF4C52BA
6004065EED3D40D87CDE0EFF9ACAC05466CEEB05AAA1CC734934B86EFFA0AE15
732358334DF15246C45505CFE3509EA09BCB8BE02F6A2F89445E45D07BF7771C
5F6A16AB10131F3708BA530BB49151335C783F11AB346ADF4D3605E488EB6B6F
CCF8F9B0747B047595717D443DB711726B55AE1DDB882EB5BD580C8BA17BE50A
1934B7911CA4CDE74FE19D1856B9C5C0CE218E90B7607A90D796766A9AE70550
541503DF7B484D516680D9187496BFD27FB79D76EF0ECDF6D939F414A51B9281
D80669DA11F81BF3516A974AAB3B13B0CAE0AA2501B9BD5BC5B7BC73D7B47D0F
3DCBB24A6EE271073DEB00C49EACABD0B612BB2F4963DE62226E3912A59976D2
4E736C895D9F4EAAB984565FBCFFC4E11075CED748ACED3ADF143812B2FD0F9D
5CCF239A3E473469B953E935F628408321A228A5A2D280C1342E6D52514BD13B
B5885E88C01A514F95EADA03E393AD93E18074529ED940AF046C5C1A8B265A8B
8FC91C05A86CC48B2DE7277C5526E17643884F6A567AF3625714DDDDF759DB41
4106023813A65C32261301A8F3141D9BF352F086FEF49D7F4DE0BF14EF07EEC4
B6CC6B72A26F7C5BFB146E5B38643081A91DA1D968D1626417F84B67281C6D23
D511F2C19DAF7FEC872DC42BA6B4D429E0028C9CD06A7D25B6760FB682248071
8450260B942514E7BEDFAF9D142178BA1A96516DE4988705FD4DA3D1E1EB983B
46D04740FD642E89675B09B8B7AD66292DD716A9D2DF0E187BFC1246FB49A617
17FF3F6F8E459E580B5CA361A4CF20D72B9A3E819FA84A481BB958C5BBB3D5C7
224BE8FDE73F1F0A87D7D5F126D93214B50D46F65DC1166927CFBA23AC769B3C
4B13F7C69B5883AD5093F4C6DC0A910ECD8C5D6D3D39C3C0AADF9F46E5F1B340
0152DF1C1ECD12586A0B9728BA03A064E665A6D079FE250605D8813D008C6F19
649BA905B9635304001899A3BB2FFBE3F80F948261F84DB92237D022C47EB86E
D0505DC60133AA806F330FE06C641E201EAB8D36F703CB1444E1FAFBAE64762E
1638782F41718CC83A96D8C744C61861F938E192B4F8CDCDE1E41BB3F2BDD66C
8EA3921542DCA990C83561B17F461C93C44C2AF721077995948CB7CCE21BAA47
20036EA4A6DE3D4E906BFE5E76A9756ABE25A336D08059A21B2076925C969BA1
80EC94D509FB46888B18429D353BF35F7283C8433309B2F6FBEDADE097074D83
746BE70A5C1C7E1B4FC47D3EE8CBF108C762086AFBAA9ED2A9B45FF0F7A24FA5
0CEAA581A0E9A8FC173D1A178D9DB9D7C0922FE2DED5061C53D67C9654F7CA68
2204D653CC4BA312D36DB126F3F32D4A0C850C742EB77D01CEA50E0D1B194AC8
78C00266B0E48705CB53BE26155FA2FB0F2C1AB36095A65832237F7A88A5AB58
9D20B0AAFE86791D121EAA4A60105304542F9C6E51F8813451A91A91273D7738
3F7D7CA5C875BB7E580C6A759B9E96462ECD9297862138B3235403BB36A2B82B
07771AFD55246387C382CF68EE09D6BD85F88CE4A084D280FCE4AAA33B94E076
D6881CF61F49897445FE1C90E2E908751BD31182AB06ECC41832A516309F56AE
B8EF35139A6392E79574CFFD1C50E9BCD1885D15FA60353AB986ABC29528FB61
D670D4598579529C3366E08A7326D3713924E82BC0DC119D55A3D0057AB93F1F
31E59C9F58614AC2704F8D53314BB6E33CCDDF69C0BF7204E94F9449075333BC
D83A54C750FC2F2E6DA5EE0A6B5F03346498869B08692C6F66E14A80DD3C8F9E
47AB02BC3C574A8995E0FD663FC1FC92FF7B00CE0C5409E0FE9CF57C6AFB258F
73816CC190CAF25D9965CB11E69BDF168EAB3B30CD4F93304E9E0DB55DD4D849
774435C3604C6AD569B2BA9FD4066AA764CDF88A326469807913E95AA6B0C2ED
FFEEE3663CC8EA2C4E2928778BC7B84460D00B8EF0D51B0B29A751CA313E0F5E
92A08B87742D412A51C16D7095643B8F7C499DE378C289CD9C25331A9B6365DB
799AC40B7BB80DF2F5DA3EBFCE939369BE739A2BA1B7B5241432ACBCB0271ABD
974EEBC2481B41F00DD90697D172C5822DC70FBA9033ED76B763A8DB62B9987C
BC4D07FD5DB3815F144E1E853A54CB480B2D91077807A58D1ED7B995EC70F46E
AD69A962FC714F8A069568AD9879595A1B34D9D24052312FBBB5576FB7AC10DB
392997995A9979EFFD7D363C9B49D12A3C802E598E6DD0E51F8703611BFA459B
3FECE3B1A3D3D3DF83BCFE4830D5E87C63D96C978451155FC2D1CB3FB1B6C8BB
D4A04087FB51CD0A98A72CA02C42C9C7DFD71EFCB460D3BF7A31B2DC30515A07
C6C71E30383BAD0D43058F54E4FDCF6DFF700BD44F61E2E7C76E18202590DE33
3F200002102608DF0A06968A32A243EFB0F3C7B779602E1FF004FD756EDF9A70
2010AB7F1F2B4541F3BB0A8A5EF786102AC3AB528D6CE901BE9825A2207BAC0B
03E3FEBAF592BD0C4100FC2DA9748CF29872D9D143A04BF81C5EAFD20F06D85C
45286FC2120494FB50EC0054BCF5AB279168E46BFF40D7ADB5FF099F0CA84BB2
01CF66DFFE00C0B0B311BC285C65CCC948E06B72248FE3C61200EC01582970DF
345C37F3BEFE4A81FFAC079A4ADB4C4B8A898DE88E26C5D1FBE73F88F76D731B
3345627BBBB08B1144F5BDB37CE6EEE0C65D1C309A070190EAF18A2A98C6D6BC
3419B8BC757FF70CCBF3FD0D334314B542C2DBE1490EA16E4A40DD4423FA914D
F96852A5C012C19594E896350001D6CF5119B07C5857DBA0E83DA654EFFAF4D7
F6CA7119228A07ACAE9D7662D1B9A5F85E6D3A3B9D200A40A68E4799E302F099
63844163BBACC25BC2C7AD157D1C68D877F9C556ED155DBA5E300663BFF1B1FE
9F4AE58671187FC42C36C402ECCD97D02C96FF328560339A2A05D6A40C8AB98D
B62193947EE8461DF102C95048A84888798EFCE84A0F0B40A8EF6DACD4703788
E5C61F00006CDED6E97B9A7524E404549AD48B48DD3927046C9D7FDEA0D4B6D5
42F60E75C5C6204BA341DDFEBDD8B7C9A19737F2C4B6A83EDC0D7D025E4F9739
E9BF770B0F27EC5439715BFD8F854843EA1D080677F64889D3C36B985A4F973A
9A4A0FC3386F7AB0E8775B76CC3B68BD7175573080E67AB9F074981BA85FE7B1
9453C2013C6491ABC07FABD5959EB539EA679132F12265160BEB34563722C230
5190E68E3A3DF08794284CE3F6FA6E71C729CA8E7FB9D96C0CF0FF79BB3E2D3E
74CCC3D6DF1845AC47930D75C8AFE57327A72691E24B6EC289CAA842B5F9BEBB
8833EF8A88D3376EA0E77B9D537063931C0939837A46188E8A25A2CADDF402A4
7181C8342A4F5B1DFE2A637A9509711F2B354DA154B2BF1F3B8C1C33BB1F6C24
BC65CEE6E0CB0D01F429DD5A2EFDC3EDB7048F424C8050CD4CFB1024F6A3D45A
586F01FE26B1BCB392BD432CE86F10868948EE50059CBFADBF134B34E4E72921
666FD6F970A8C5F4354167D9DA28A62E32A88F21E9BF6103E9D5B50D361245EE
8D87A6A7F598BA0A29236B29B86118E58B4E24CD80926B1C8D2DF6CC78DAA0D1
DE1E940D92EFB688B96E2280E134782CE7A5FFFCF063B7C1D158E9F916ED15E3
AC7C6EA1747B09D86B46B8625EEE0383267967566BC5BBC90E3E7D033E2527E3
6BB6C87F39D0505579B2D0FF4DA9D4AA97197589671631D20EF5FC381131B7C4
C90E04DB61386B54C1CE34590D81873D531DF4FB838434FC4B72058205078B14
0A54F4FBA3B2D4B1CD759E027589FE97FC58F55CD50BCABB5F7512FB94113551
D1C759CD7D696C3147A55F3B51235C90B04D8DCBE5DDB19F4E3C17BB7B6EE60F
5F8F90F65309DC9967C905AC52E61983FECBD5C515FAB0F4DFBAFD395EDB9AE9
DAC04802A386685D519767E444530F694DE541D3B8EB853ACC83ED73DAB72A2F
1AC1D840169C29074B680191367ED29A5A7FBB4EB2423B73BF3BC01E87B7D7B3
EEDA7B21AB66C93DF06A84B1D55E3E3FBC13FD8C0C5255F62BD2B6A93C16A350
C7E870A32733F336B3D5C2869CCD5D7770121E33D9A959F5E64596F63A122738
061786D36E23129DF624B8959556A77842EE8ECE2925BCA645440126A5B3F292
916C323A4A19FA35C43BAC7F6A02F738BAE836F4E20A4B6763B2C5C20F0D0924
31DD32AFEF642FBC061F01066E04F8CE12F351F80768D7958A113D083CADEBD3
C2A9D96BC4EF69711FB26D09C83B087369A3896DD470D4DC49BF5D7E85930282
F102E66F4AED2E2E4ED0A53C6BA6B301D3F42EEDB6BED24CEA54F2AFC4C03033
67C1748D1F24E11B78183DADC466E11D832BF43473314CBE511F75F3A2A44465
5B5407DD9BB50CA67D75B99EA25726A10440FFA1D1183A66322D2D802C3A6006
2ACCE2C339200F80712D32813680847D9CF2EAF58B23B1494485BD4E7BFB323D
97A250556F5A3472A82A7799E645A0BD6FB4EA520EA91DE34F8132D591109D58
86BF9CE95E98D04D01A2D5808809572A0A3212DF20D343765D1724B1F322E4CB
BF9A2E899DB60C85EB96F7953472A8DC9047100658088A80E0A8DDD7CD91461D
8B48C5B536739F20EE960FAD87096CCD39E0304C35A9776F26CB8EE5290709FD
01881C2A498908A8DC45F9E7F3050BC3209CF70E9859065AE8541E6DE3FD3419
09D2744E1524BCBD2BAAD51F971E60CE7D9B59CE981F3557437FF9CE83CFCCB3
6151A25AA5007C67E5A60EDA863DA2F39A697DA3A09ACF053C288562BB9CC7CD
C2A40EAFBA0FDAE00FD6C1BD060256D3B5536F013CD7894D96B5664EA6D2B2AB
24E44F34F57355C2AC5BC589186D24D5FBE88A16453D4A1EF820E0E400838F71
8793ECD8173B0E7331D16A36A985490D4BBBA95E19EB13313EDCF14E257E394C
5D27F5B87027E29C538704E40C4EA19C87FC5B4811EBD9D03F9756507670695E
9A2188C6E86FC52B50009512E7AE01FDAE5F172390005E96EF9AB1BBB969E33E
3B6A1017423CB1CC5E6EFB2759A34C8EAD81C85FA3CF7A578FA3D29C3C72EDED
884CA9321BDC6EE944C5EE7644A661BB0F6B6966A3380F67C084786D192891C1
8FC29F097F6302CFCBDC29A8B801321969CD7BE508EEA14EE12E0365B64FB4A8
18BE61A06256EF670969D1C688B1EDB0362CDB41302E06538EE6B0622D725ED9
35E22CE7192B17079085D32B0BAA659A5D083893FF901242B7FCA8FB400D9D93
4A4323AF79CDC72A7DF4DBB948ADC28A50C95D28855B6CF8496351693F6855DE
BF3896DC8ACA092D122618C05D7100E9CD2B856ADBDBF5191C52513E04CFD2B4
13DC0BED36498AB32D6790E4D9ACB08700571F066F81229CE2F044729C66D790
E9E9BAFE9E1DAC9E2404FB8CD55D44525B61A947ECEA6F33F8BF5D63F08211E8
16465BD0C8ABA31F1D1AE51533DAEE09E785BE421E3632CBDFF06E2EA6916646
0F9410C3256D94E4FDBDC30C30EABF2CD14751F04C37677DFFD50AFD9740758F
D5FF81CFE4FB1687A50867043566AC7938C812D690765D24F678399EB8DDD0C9
028D5B251EF3AAD3551A6B1B2980BBD001F29C64C3B7D8724B03300E52B8B3EC
14F51457A8E35BB7A5CFD9BDC0FAC42ABC6381706F06F3C9A0C6B196B47BDB4D
6315F5C69D54C675C87A82B29620C6E097E6D7D8BF63F50333886312C17B815A
5CD20B2CBBDF2F444969B7FF0E0B0C1AD3B59BEB21D3C5E57ACEADBC2933C1D0
DAC18358D8F1EF06406F6C9C04B90956A4F444FB3EB9A00CABE47F64A01161A1
9E99AA1A7570C0B22A2D126276433F979AC88A6A5CC22BC63F7E3AEEFDEB9486
8EF3502CFDA10511B5519629D04D60E05901FE8FD762742A851A70854A2CCF81
8C4BC3AB412640CF62926A7C07761EDD4E519CC817E539AC4E87B5D6E9C29C2E
65C25AF8BAFCBE73D992ACDCE08A7D8457FAFC96CBA7CDA121F8ED9AA7DB5B9A
43CE2218AA736C08C8156CB114E6ECA6C475C08FD3ABD0E1F71F2B607C630602
E977B73F7DF6139E7AB603F0DD9E91DCBE75017676B532E5EC4E567E0E15E7B4
CB5C9FAE25B9CD0D26FD87FBB04A5ECDA7292A0F2FBB4DF31112EF6F8F31FD30
21485E3D8223D76F7112F36912841909A22195784271123555EDB4DAE4C5CCF2
1F0678F8E6CEDCF475B71E2E88B7AEB1BFD4E197AFE72A638653E0E70BC2EBBF
D5749F79A55C2CFE89F77935A4345A3F782A3AE83C1E8822AFEBD9738982449F
AFE4EAEA7678519EE9581518AE92E660307E75B4C628A1F09377B8506963393E
13A341F0BBF146F4F08236E03BB3326E18E2C24E981CCB2AEFD997AD21C556B7
1E158712EB6FD1A9C2A04A27200340603B4E777B0FB039F13C1FFE1C3472E1EC
54550818062CE8534DE0DCCC0D6D5AC3FC13D8ED3031668F6219595E66925304
72BB40EA4934BCCCAE78FBC464FC8ABCC7FF9EED335A76595E92A50F40154105
5831689E52ED714BFA82C7B080BC02E35C39C0312BFDC3F46BC00687D903FDD4
00BA1EFDB6BDAC34FF45F6FCBE6B158312D9A6C36D2043F4D6EEECC44C0BD589
CE964E93A42B436EFACE042B14DC733F131915CC4D781D3893462CBD17FFB8A6
233B52D483BCBE8EB5F743C497A77F96296EC26DEBC17F1AA11A8AFA6B6E3AE2
B37EF8134E798682EBAB41AB71AB970AB6EA457B02625938E5A54540B53D1332
5D1738BBB5823DA44A02916DE2FED1835055E7235DBBD01E6DC5308067156596
372F38E85EF19F496DD2B366E78A32F60AF460C5467AFD889BD42618FF76B7D7
477C08779C0180E034A90CB310367562B0ADDF0B441D5283638AEE03AEB67AB1
A3E8B894D6DF473288B1C63F58C465D87A2C73101C44335117110E47A87AB1DB
53DBB9BDBDE80DBAE509549C6E0EE2C2B58121CEFF5888E1076A75E703C9860C
4CC81D90C7D6A59A5972BB40CD05162CD749E4515933A46A1A87353BAAF0F0BE
68BAEDC09B59334D009D8A9CBE69D2B6F6077F58C3FD0C20D2B4169ACB7B7F39
CAB557DDB422977EF1D56C863ABCFE043691AC085D73C74CC6E0C0A0F6D0EF7D
0F8EE07E752B3D8C550E4C05D3AAD93092F35CA2B521A903285D5D7805CC1550
21220EDB0543C63C2C739E6A12DFD38F32770F1EB78C7DC42D45C3F7577B191D
E7BFB1FEF15E6E7D587F0E76AC7D607EA042C4F29A7EEACDFC05F176709A0666
9ED96F0004E9443780A01D8DAA741236D449CA8FC64EFE913B2E63077186938A
CD7E536DAF19BA7C04F029B072D01D47117C01D70565B4F1B043DE608AA42A16
78786D34C701AA0836863119C4AFDAFCEC32D12729662421089CBDE14721864F
29CED4516BCE054CEADEFCD37AD00997C5E88265319829F652FAEF7A2FD4E789
818F8474AC309F07010EB0E6EEFF2407B8AD4418C925FADD7DF27A7AAEAE52FC
E3DA1801C6A58B10B9ECFA9D92F96615A59223851EB04F3611EF768AB4A4BCBA
E436C4E6DD3154964383182F7197938BAC5EB0BDAD77874B211DEA1BA162B1B1
481A551497D958895F69B541A8D5A142D013B4E5D9FFCCF395975429ED9E8D85
9800560CF75744D4A81D8240468DC0E48B57103F61A9A170CD79FD3514557D69
16E9CED24FA7770BE6068F5403ABE805AB2A81CEC34D9CA1DEA2FBEB95AA8785
84A8ABDF1E8CF78EBE55ABDB3E745E553FFA5866AA125B2366483963E4DEF110
01EEC307B7838E8D2B8E98FC6F6185F7C13438EA9AA5461BFD2BAC10B28F8785
18DFFB3EEA9972A460C70810DAAAEA26367AF6A71E2F7C54F6FE42B64FA3999C
7952E1A99D241DF68FFA00676FB84F68044B595EAC2EB7BBF2D7FF1C4EAC2D0E
F7AEA37E4570C3C25B242C73A631A39CD960E8C952D7220BFF5BE2C6CCB43750
44C9BA5A1B2717EDA149A9134E9364ADC5AE2B641C61220F9F4C1B822A21336D
E0CF1B53F593D16A187EA70129ACCEC4A91BD2101449786E6730674694D50808
826CE267B40E21CC100DB6DB82FA152BBED304B28C825F48B74D17619495900E
0240879DABD67404C23E44DDF5EC69A180E500898A419C2685EAFA61537F9B5E
6EEEEBB5CCF0458D91533791BD3D811555B686DB95ED522F64732AFBAD9855AE
16105D81E852395390A3AFBB63DB74A5D79874B25AA5EB61C304909D84FBB1F2
A4FE427A2BE912FEE4570285DDF320482E9E949EBDF4B837AB8F3D991987A559
AEDD8D1DB7C98E7FFABDB9505D0DBF2BAC24CC99BA1C6F1C0A21A5AA68130114
621FB5AD72779E3765E95A290D59F3AEF8EF530CEBA4A2657D79BF259835B094
DEDDDC4A1867AE2413857A3018482C30DE542538B282AD241C4C2E462E0FE10A
6215AB01005BFE0D2A396FE7F7288BFBF1A22ECCBA37E52C81AA2BC65636BC04
954362B4FA22D428E9EEF49CA55FF4561519B7336A05F20F925450CCD90C5C78
25FA84AC3B76D282C41870013ADF5F0AF5D8944DF9C97F903A680719B0A29D5F
89BDBC1FF3045019A89D9DDABF3A11216D0DB046F494F95DA72793FC4EE8C1C5
20BA0A3A85E234B8D88A896C492BA28E594FCB85CC6BB4E59430319642C96F6D
3C578E869F3C32D0327FDD1B8EBE6504EA7C1337060BF4040645E396DAEF07EE
D4DCB43B0B1969257C334F083CB9F2FD857D60DEFFBABC28E61610050F6BE448
D913C606020C17814A41377A7696921E693E7163C7325BBFA3ADB3B4E4DF47C9
160837635AFC1E63B6D2B443C2E0831CC5C994153BC679301967EC4F26F3CEAA
224780C65D0357949E02469CE5295CFF5381619E31F0079F730AD2E766B98670
172C566C73E88DF8A8995FFDBE2B2EA5870452971EB4ABE0DC6CDEC18AB1C88F
EEAE1AAB3EBAC72D4DF51ADC1F8D0710318E378A508B8E2E4AAF962BE3B76ED3
6626C93A013555D24A4BD23C04CFE4EC3C5E8F62FB9F8B01DC94AA56FD2412FA
32317445B8B1722692952518398A520415D27D3FFC5810238EAF1949C4BCA696
2A5A5DE6FE70314AC81FBE5901E90D9C56B60326A42E3BC30F33AB55227A8D27
EBA350F5CE251D1DE68D2558E3CDA9737226B31C0606945A501624537A8E8E91
876F0DD9AE8C10E2832ED3E5E9F22D72CF86CE1AC14C47273C857025C0DF9943
BD11A0A78C455C560DD52D1C26B596C4BF214AEE0302B0903E361DAA5BC1326E
0488726E2D6F672352A159D53CA9E8C2D786CB4E75B9CED103496C03093961B8
24F92E003B8B5A81CF08A783DA026A6192DE5B0C8E25D12ACB1B5789194E6130
736AA33ADF4E5DD46A504C7E5E6795019263A17853D81CBA5E8C36CAD52E86AA
1E0BE05FFB1BD909855CB53FE376F086CDA35C7CE36D1B54C07DE48BB131FDD6
D15A5E4B14C749E17095F2C229917B9785404865783BE784755194506D5FB206
FB78D45AA402B5EE099644E30CE5DDE591CB23CC213E4115145678B3E1DA267C
FD9A7398E6A8E8249AF486F4654134C57BAA186858CA6C8C5CFD936105C36738
E4544DDA3367A6114005FF415EE9E26ACE8623398A3AFF16A048FEE6A039D9D8
148936F00F5D6221394F4C6CF03757EAE52F506ACDC46B5EE91E3A578F8E64C6
22EBFA14A2976D8E32359A8BD0D3D8431684EAB1BB0599566DC66EF6FBE2FF97
CF70171F7CCADD659E023687D7661D6B521F456E9EEAE6C85DA2A15CA473EF99
F82C6640486167706041DF40C4877051CB669FAED7B154E2F75F2F871443DD52
E453B83838431391156FDB064EBA25A20DC0D29C934B63A86AE38456E182F4B5
734A7D1B58FCA394CB2AE929E050393BAC27CCA804A4B0DC7ED2A8DA28321795
8A0B0EE4A0640B3AE5390B5E7D82D315350B520FA1C50696476DD60476CD88D9
7E2B329E178D6EFAA8E50F91A710D45BB0452D7895FED4BB91EB87E9B26A165B
F75291EF6E74899AB3A9D824CE570B0568EDCE8C60473C239DBA7010D3C9B6F7
9B12C6005B9C0BC8AB8FF8EFC8DA34C873E57D38B01DF48737721372738844F0
B691350DC0E4B38E4B5B5868A34E643E6070DB82699CC06CC8F3C38638084F8F
4F7DA8B4AEEED923606A5A011A3611548561CE7D6B0FF36D01D3EB5752CB0F41
519C647AC14E7625D8FF646D135BF584D4963DC17E804D6F9C78BFAA8D12A215
31E713B80CD03A5FF4FCEB8127803A15638AE470FC66B1AF719D4DE187F45F8B
43C465608CC0C56BC9B7259086881E2A8BE425C75DB708DD9D200E598B8127E6
B62BB87C1062C8B1DDFCC7CBEDB0A885C9E1EC3EE4A15A2B2CE521D7530309B7
60BDD2A6F158D4C8CE6C8C9F8C6B7C4D9E2FFB799522A015D41C58DC60374798
C6834AB22EFBC9BE46FEF279EA0D134FFFA7592C72D100AE8047C6F13A678719
ECA0FEBD3DE4AC9682748B90AEBF871CC3E9A071256151DA63F4E83DAF35E795
A2D32193DC2E11E51EAAEC0F6DFE29F4283F0863E8A8CB29C6584BD250000121
302118ACABB88325515878A4D73024842A5B4F0D5C8F8BED6C3ED6C985537661
7E86D89A62FD48E84CFFDBD0F12FF52ACB0A41C845E884D43AFF094650AE0168
130893804532E15124C570F82A7214A884199C66B2C9EC3D698C0D21AB90EE57
BC17191E84BBBD3D6FDB0DE6F63D2C570850CF194EEE8238031727B22545201F
B76CC3AEF2E02953E402B589D09E00FE06779E081F7C817FDF26B95211DDA7C9
4F44637ED9DB8797D2D9A40002E9325FD23F5E98F82DE74998BAC5C9FE00B144
46EDEC23AEFA3FDB17EE7A70C7AAEEBCCA32CB4A81C7ADB5A0865731C189D8AA
B0C1D6ED505A058192076D3330D799DBC98F0548193391BE5AC68DC12B4AFBC3
30512B769192F4BCDACBAC0A29BA417AE5939FF287EB1AA373E8CE99BB694EB6
7A0D1489D0D07286045CE90BA96D4AA8BB0EB523BA6AB44C3DE9968E7ECF2056
A81450548375A5301C12A23D89941A7CA917868F7F74B765A943E4509E6992C9
1BD1089225C85F5A2D6232C3487E25F6D9E1967AF219E221D87291DABC5D17E6
A856A4DCCE229793A3BBC23980DEA6D3A49A83886D4034801F7DADA8C3942E02
09A0A175036DE72CD4547DBD4AE8C1D33E5513CE33FE8F67AB7E99EE2151B71C
6171EA191935320EBF3E89EA8182D993627B44BA04306C54D73D83655895D321
F9F0E05BCCD097059203087232946E6A00C6D1F4A994FDF54E6F419A242E7013
F501402E4D52C583C73DEC5AC4DF0DDD635981C269DF5DC8F75240AD3157E0CC
7364C4294DFF3BB0FA391C7C304449084A11FAA3DADA73CFA3DEC72E83650F24
0B54E88E51C0650399E7263FBBE223AC4D7CEF6E1820098A0D068C1F6BCC492F
24E9FEF0442F2BC7C6424D724B6DC6D6DAA165127614E9987EEB7D2A574BA82C
90A63566472F628B117923246292D75A5247AA85618E398325DC502A87FC5A47
B9C1C34E5AB4AB84E661A98BAEA139869A090D95449FD8F482CC104E4F53290D
EEE1DCE3B3EBD39801AC04219E6DDD321D56A7EB2A3F8A5A05FD0E43A207F503
F51843FB0F7301FD6EA2E01C0CA4F161E5D1AE96F7332951F681405C6ACF0BBC
66323460330EB92222217BDDA0A53EB38FE37EA719A9D61A542C98C2FE2DECA6
AE8458D6011F5939BB511D14C6F5A1FE46E885881F02EEE710E359BFFC815927
B86DC28D9CA4672C3C1EC64AC4308D41417873EBED22025410444212233DB113
CB8DA4556A4E85C450F96368C83EFB7F63052A94D5FFA63FDC33004B18A8B8B7
729E16715C8A6DA4099DE6901F9BD7BD673A70B156B885171A83182C0E596997
69EB65D633DA2220083DB773D5EF1D7E889E32CDF69577715E267C376C73B094
4682F5285C230EA99069595DA14C0C912D63B6726DB5E056F1F3B6ACCD076F67
335961012649E0726E6171529E0E1972EBF20BA99B973D833C0135330277DB11
E05F64E18887CD9879DD14A3B6F3D9C63307E5FF5AA1E30934AFCE515523FE29
801615B46CA89C305575DA12A49A8B4312434DA048ED78C2823C4F8FBFF9E4E1
285CFCB47FE09C7BDDF51BCA6359471CD791ADFCE875BCA9550E20DF6A124AB2
7BEC0234C59554B5FBA3A1C5FA644F2EE53F6DD64C9571982039742230A411A8
43F1A39E0E6902753052F8728DA4A0EAF113D7DB46E9DE0E1EBA663CE4BC84EE
F8CEF7541E886EEF58BD94FD94C6C217457C8EDBF18B75608C3A5C3B5C4840B4
0FFB14E52B9ACBAF5F35B78CD823562CB6E64E486126604BB3082C40A65639E9
1B97483486C7B1C315F8DC9508220044643405C48F53A26455FE61F8CD9306B5
C1BAC0AB21DF14947C09289DB17C48C18655168910070B7A341E933FF7E8CD15
5BBAE484C98EF982F1616D1BE3DD1326A727288E3CAD1A2841E8A160369B6F94
F049E9778D254E401D4C2912B3FE793C6BC40C82F3A7EBD9537B307BDDFC8B9F
C564104A12E66ED0144D9BC80EFF6BD75843A1380B4C95188629BD49122CAC98
B4F567B91DD60C3FC4681906BD573C7A473787910AC263CAC0EAC45B4DE9FE49
A53A3812D7DBF47D9E8A2D353B486278946F7922685D87B84ECF255178D2D2C4
B7F7857E7F557079F20C4F652DF6A4537FC25299BE55008332B6ABA855E0DE53
68DB7C6022BCC5A3A6599E8440DC37D853338FF55C5EAA7B792EE1E4182ACCCC
676F923B7331B3FC2497B53313B32FB992A02C0DC90B7DD78482BB06C8D9BF46
1874960A851A5C8C81484CC0E4BCB03EC009663011672D73C22382AECACB287A
4552A03DDF0BBEAA28E83B5C94175DFB9E11A2CFCE24A5FBE910CCA9A8D8632C
B05620A24B553A27E1A8FC3481993F22458F76ED92628EF6550CB6B7F6BBDAA6
2A7454DEC873473E09F9302D1232938E68FC8EA33DA9F02C563E8545D12267B7
3080D802BE7341B5F4E5D109F45F80574485B4BA6D903E3DBFBF7F0ECD894085
2C3D730B3BF3007E1AE4141FFE4F4E0CFE68BC90FF26F027FA9BCCCAC61EC443
7D67DC469F2E7D217D8ECEBFC25C465471D923F7AD07B518101083E94631B8A3
0AB1D19D17BCA530F3F8C9F8B3CD2C2815EF3156A0594890E9DEDFECD81F9927
1D85DCBA02F2FE226FD5FE282DFE41EA06013EC4B7825F0AAB6C1F0A1EE6E669
0AE8FBC87D544DF295DBA2903489ABB6B2EB9F977F3F4D690B31E8F6E6B8DDF7
86D7BBDAA2A35EB13FD17790793B2B4A9E06AAC1521960E5FB11FDD2174E1F92
69DF8A84A1E7B30B684AA3FABE7529167111B5E309EBADB7CEE9BCCA216C1D2E
CCD60142EB127441F4B6ADA94074079159F6EAE77EC1EBC8F2D11C5BC1C5A5A0
8B942528B4FDF9E42A5F6B4520FE46A3E94D1F36A6BC7EC8DB829A20CB5E8460
B26CEFAAD3639AF8069CEF3AC8A3E2F65B2F01AEF2D237C29361E329A3E67F23
EFA6DE495C7C9D966924F1246290EC82534F4A6E7EFCB1F3262D98D7B9D72B0C
D6A1729ACEB582F367CCFEFDEF1C42C612D947DF7BF71424A98B9D59051FD85B
BC6789FC44AAFA6D3AE571FB0750B95768EBAC8B604B70B9F2A25A7DA7114250
F6B0A017C1AE99C60675E13A47DA58466500450A5A9DF9553D7B74EDC318EB0A
1BE8206426CA42BDD09D4ECCC615217D9DC7A1D01BF7402598F9D0DDBAFDC597
D3367AE051FABFEB4EDAEEA2E37494863A9E0C52E2591AB1CC1F718FF7844916
2C8A789B7FFA5F3F362D3796A9AD847424B466FC7AEAED5551AEA1C8D82C6CEA
9E2D526667D464B8EB9D3F55E61CDEE79CC13537E18E67F1C0B014E2B65B5A55
7A111222F954D38FBDE3BCD2A31DA0096BD2B59BB8794B56B59A0A3ED243DF5F
C4465A19DCF6C41EF3B02086788B431ED8640CB015F6CD3E4A2D87D6BEE02E18
B81627299B071EA7F9995A542B7E31EFEDE8A4D341210C976A63C1587C09CFB0
52316D4D96E57440D0CC6DB88A52EF741C41A0BDB45D751F6641FDAD6065A366
14A68527ED1B3EA2FBF4978B5A3FB15DA74C8C0ADD0B411CCA7ABD628A22130B
B3DDD657B1748C4B1BF361E9FB82E96950B6A7E769EB480CE60A8149DBEE51F9
7141125A74C71B1DBA97C85AC54FC15D87D60999F594D7F818939BA319C40D60
3B6D218F9741A9D0BC2BBB60C369C4183F63E8B631947CB303C5E516F18F719D
1676B676EA69F5B9B1973246B30E960A439F315C4093F4AA8854274B18EDDA86
BA112809CF872FC9564795D4EB9F2AE8FFD59E0816D860282926C0A88733A872
5B2EEFB8D468E2E5F3502584F2C3053D72B2834B1DC83866397ABDABDD139ECF
E22AC9B8466E91E9A161415478975E25D1E928C5867A495F88565BA6C0F4A25D
913D1BEFA7D862AA175758D7B3F037498541C5EF02E325643F78D02419611D50
402BDEB3A16A92F5B4352BE37AE7D10EA7D651D2118251AF74645D5E022B7516
073FCCD7CA9DEEAE80B0F23BBFC0CE5DF8D2AF5D33899B0310A10B11B89490C5
C7222AB3E57607F9F312AEAA53D1D80ACE9C3B873F2050025DD783829EB14AAA
9752283E94DAA8F0389585B31F61BDDE57E55789A5643FD07D8F6E372737BE0E
41DC054CC9153AE613D984AF04236EF9CA381B11F7E10B82DDE3B5CF65E60B5A
1B296ED9221ED4209A26A9B0AA986782B109A3F2D17B5AB13B75FA2FB566EBCF
15CA68D755C3FE902AA01B6227D10E0CB63FF2D6585BE860916930CBD39B8AA2
D25A46DD296F09D8EFEFF6C02E54116D8032AB362D65C77F144A456D5A77B0C4
3821F04133C558EB60286FC8CBB7109522E57F5448092DECCB9BB22757FC3E08
A242B2514C24CD74D2A6056E9B89886A6C6FDEFA52D5CA51A2D32C686D32579E
F7430063A09D8E6E24C46259182E8F03D67D73718EE565F9C9AE0CB5BC6D5239
CDFD85C441C0D7A174C40F2366A899776629A1997C0B112F18F889050AEF7C63
E8A7DD0258EFFB9381427150D0967F83E13EBBAB33588541AEEC0DE8C53E090D
5982F9CF97E0E1A56C6BD1F735F3A543987829719F1AE12A0C483FA973B10FA2
B2FED7E49F303E11DC0312E6A3D263D4AED0312728B38441B5B6FE9FD756684C
B30A51FE61DE94D66C33CF7BFC8FCB5C20143AC21AC2EFB424F73D1CB7518F20
7500359B651D485D7237A6BB79660666CCF6F02A2710BFCBE86FDD3101BC1752
D992F2ECFBEC965700730C46F4B358C2890599A65455F02D61D3586E219C55EC
4E248D59B26561F777DF14122035C2BBBC4B407DD43C53238B8F4EF9888C9794
9EAB8569BDA0D9FD385DB4489EA39B1945336E0989E393012334DB11EEFF8C8F
AEF2476515A41387CA09174006C8F2125DB22CDCA9125787095ACA9E34C45BAE
D9D91FF93DA9079A26E1B0E89038E0ECB73664581B21A46E4145A27F2492E8E8
67CAF897ABA531A44982160B0E860E9ADFD724137A4CE6C5771A62C9601E1324
CC89C16594674A8246B77CECFC964C28D31B77AEBF1D808DCCE0FCAA11675300
29FEB41C760E9F31DD83B4CD0F698B1FFECB52B33747D285F3848BB9FD0FD12F
31C064A3C4B0422CEC6F7B0BB69266D0FDC747F0F89C2635D595FD984AC12CCA
832C8E06573D4825BD184810AEDCD53E47B60790166740FC8EB5AC0AC552238D
5C474FF72CF5C3815CF612D871744EE9FC8D622946330F87742A612E41522748
D4F5BD7BBB34C1C0B252B2B115732959E1FF6C9CA993DF3E7C73B0099463C8C5
9C09D6607358809158C96AA69CB92C96236EE6988EB653EFE1B3C161E0965BDE
78E35F677446C1102AB00C81A9301E71B1CB307BA95D67ADED0530D7527A8C86
E652B37E911AE0E16A56949EFAA8B3ED2A3C733FB9D4B8049F4EF3B8397186F6
8F081EF98C2D1BD2C9B8A5E46E587CA34F367A7E272B51BB1829FEDEA6FC3AEA
2C9A685A4C4D38AF1752A6547B2F7F77A71914FDFAFDBA6E4F0859AFD74E7216
7A3D3BD86F381ED2C22D0EE71B367029E6C578F5239701AED514EDC9AC24E8E6
5A3A5DC0E1942ED8F335D5AD13FE4E6697F71D328B75CE52D68B9638361FE7CE
EA92A4B343479FC2F8CAEE1D1F96FA1DAF674810C412DC7D5EBED2497BC6D511
89F6C37041365C4E445B822AEFB5E3B639447E2633EE8D0958D8C16EF6DC6DDD
004816FE597DFF64FC3EA5285B5517039417CC891C8372D8D1ECA5A32CDF25E3
4A95065640E188384D68E521F55DB8850958B3ABDF0A4D18109D93082FDD30EA
F4830312CC56EF776A5C0B7B12151861E6001D875718B5DFA4F86FAB8F94EBD6
B5258FB7581BC0E605A1D0942CAF1AB822DFD34841FCB3F5AB7E1798B23757A3
613D6D3293412FD0F9478322215E9F59E69396C35AC4097C4ABCA7F53B1B5BC2
A9EC89E2F197FC11BACACAC5A99B1E28E91E23B646F91674EA513EE73216104E
4BC452AAA7E0F1D50321133AA3907E211E3B6E052E1597B542399476EBCADDBF
3B803477A7F6A67087C57B5519A98804735147BE66CDFF204474DB1355CCF8E3
E54C3BB8D661E4DEF3D5B062FFB88951326DE46CC1E57DD4B2A8821A8506BEF7
9EC52453CEEC152108D41E533813A8D6CE3DF04268CC777DB1312D458BEDF018
EA67683158D1B773C6EF553EA897D5F7D4087F579C8A4DD8D901A5B598D72163
9E2A82FC866FAA216C890E566ABB7A09A262E516D108DDEDD6D7DF35A11C4599
42B6D22E4C45DCCB51687CED6E30AC81F9D156A130D5A8944DF27CFCAF8E8C63
25B9401C2A3C7632ED8057723E0B139E4EECE9423FF02739D43F49E76C1CF49A
41482034C8C6FC29D60D85375C551CB12B6DFBE9C247CABF7B388D41DF549B48
4787D67AB658DB350E972F5BE2A4E6117E8D016D87D3B13107FB495939819F12
E7CD009AA2C7F449E810384B8FCE54B684B9031F9250D379B4752FB988F40841
7A93E7E8AF1747A7E7314010FDE34C570D7BE76A496A58242F51E73213890BF1
A0D133185D44F9D51DCB9AA35CBA2E22779C13D5E445AAF25F7B190EF15AEA7A
75F7C114E62D234EA99844F5B40F13437ACDBC56D765E247055D271D8C618114
606D064FEB0511693D0AB00550F4B4713E5DB662E87168ACE2E42AB88EAF6042
E58DAF96ECDB70A9A2E0AA9D1CEBD181D2B915218FA21336FB05138BF22D08AB
407F8DD21AF1B6A8D13F6A0D35D52BE2C9375CDE80642BCE84D2C73C8376BA18
203DFF4BB0EB989213D8E0FC90B21922BC40DE6DCCC4380AF5D5869935B537A7
0F9439B5E8BAF9E2EB03F07F09F17BFA35E2DB5A3A8F58DBA3D204B120661767
B7CFAA9F9B1296E15405AC35BD4A4795277C0923A9947A2F28A8B381DF87A6B2
D2FC1051E592D423E2BAE96CBE2CA63BACFE8ED9456CABDAA1061E50F0F79584
495C2C9A94F55231ED9E23CEE493004F0FF6F1819B0F26C738D1E8782D670AFD
CFCBEF6BD68AA64D66CD028B883EE21D9BD24B48E4D1E03E7378C05B62DC09AC
0BA06B30700D69CDDC416DCB2FEB5648089AEAB659FA6BE2808F1D8B26E038E1
1B8F39F3624BFAB0758A076B4589C018021C755A314148833EA395897944A3C5
A6EEA63018EECAC3D2E86E214C2AC3BAE0532181AC959E27201D797C8F635D7C
1D238E43F74ED732A6E5470C5C96F7C92B3E43AB3A70CCE5591D78ADCD49CAC8
F2D155ED859004CA5732F860785D6A859AECB9C5D8B3E64238578C13F82D036B
CC08CCB25B2BADFDB659F305315BE273E5DA128FF2284CEEF39CF2DFF49E3AF2
760915A0D7368D0032D9BBEC017E5E35F75607754854D96B761A5E47340C3781
4FE1FB817C7C68A5AFCE8EC755A449DD3141E35806D8F53E6AEDA93219EDBCD7
6D652D0F52B2BF744030374AB8A3CEE8C0B3FC046781194E960FE262E8151A38
AD6FA6AEA7CF55DE07FA3EEDB73500B7ABC994A3B57A835E5DE670FC939505D0
87B19C3B8A0DE31ABFB5DDD86DE73210964C011443ECFF92062F83F6AEA35B78
DD1273A1784A8BF70E99FB3BB29CCB2649945065438478D44777057F8C57C69F
700FE93A932C2779C3B008AF46AFF74781F045E3D3FB6E7FFAF7EDF2347DFCB0
70CF8E3093B06D0B80CED64192A51EA09A59B2A77880F18FED2CD2E705812299
7061C40D253F6B3B28D456A762A2D668003E3196A1B01624B6460A7C92094F00
C582E77F6E21A71D0C319A46639C8BCDD4B05D6E64436B8BB16543450619935C
25E15D3C158FB7E1CE4BA26EAEC884FEE2ED0A5E01C53369EF2AEF192EDC36B2
15429584AE9A37142A3EE61E7F06A60C41E040FF7C1BE033C5CE2200F52D72B4
70D7527E5DD594214CAA3C6265DECBE07C667227EF142D09CA09728011A4E0F2
D07A01A0C7B27C86A5A58A0F46070D257C6E4208F74DC71B56B74D07FE189B12
36F85F4664F5898ADF3D85107C227A10B4587FC853FFD83C16DD735FCF5CE3A2
CB39AD3BCADC83715269D66227C2FB99B97F231246D2FD9DCA6951A1A732A681
8A9225C4A2F112BB22F5B66EE9019E1685D4F82277795AEB3517A2D91CCCBBB8
753F92B3E0CDA5D26523B8450BF9B32AE780CC9D48C832833999E78819CC4FEB
EAA30E882455316E16C3790BA72034D7BE9025BE2E1D132BDE27DD787FEEBC4A
63D583CE7227EC10365966AF2C074E8E33DDE269A3E703626A0F204E36BEB860
6041ED55E4B12CFF282A651B6282D3DBD1EA51A98D6326267582A8D22446C940
6C0B22CC6705D4640256C42C40E13EA4E2A8751C8E333AB95902DEF39C6837F4
1DC5AE4E7E7C83EA8AE939DD00EB511CA34A70D944561F1DEB1CA29CB6B20F54
D334C1FB8CE7C6CFA4536829527A871675F05BD42BE4DADFCB1B2FA2EC3EC848
E309962083110D4DED3C8B3217E226202117CFBE3DE2C6DBFB0BB25BB133B429
25AB758638FE80694015EA9361C2B4BAAC0600461C4346D5E3FBE028D514C87A
680A7A532F0E53AD0E81286CAAF4200196EA4BCB09F019123AB92002863D00F6
953BC9C0DC1DB94102FB88F631C4237598824A3794A24A195D7993BCBB800C2D
18BD29759C845BD47E080DDE402B2679E21A616C85BB5E62B358333483A2C30F
1E6F2D0EEB83478AD15F4E8F2397AA96EDB97DF199549D54ACA1B9827D4B825E
DF0563FCDC31A1E01458BEC1117132623919BDD2F543EFC640ACA93435328249
AD9397720937B8E4CE1B5234EE22E707598B8A4ADC04F7BEBDBCAC6169AFB4B7
D6297FA50660935C2884FD4F649FB0AD52C949660DE735D022B7943613A57D4A
8A9C682BAF267FCE553513AF3FCC9BA70E336A50371BD3F69A70793D051FFF5B
94C59304876FAEF8A800F276E1C1F837B105D9B6BB9AD2454756638C8C2E82CD
9D161E9729DDD097218C48E4FD8F1183360FA321F531AB5402DD501B215E0C20
70C48C0BF33FFD68C77153BA523F4AD8EF8B83F8E6F71FFB030214674EAB94B3
27BBB119C6057DBFC2B0085C818FDDA774EBDBE7A9595B4CB3380C9702416274
BEA717A90D3B8A7D93D614A2F6417D105624C10D4D3190893459A5F1FE7DCF86
D9E02894D34A6E90AAD8D12B27CD69C2F5774F9FB61730F754F67A89F8EE67FC
86A86A4DE5C59198F5124711CAEBE7967B4050DD4313E4E95EF702B6CAB223B2
08068E41B02B3BFC25AF2EF6A66B248EF1D561DEA6AC23657688C1BA5A2D9475
6964A5EC1B6DB531DE60ABBF0D5737FEF579DD98C643AA2A5A7ABD3D9951F551
833AEE29D454F6ABCFFC8785015947E96DCEB79508FCC0407C0B4D6BCBAF4D8D
220686CEDE7809692DF4DFBFA3EDA081AA379231DB5D3C33234CB4C9892DF4A0
62BEA11998D025B544A987BAA117D73F82708DC404283546D7814BA53FE7FA16
1FF6264612CE581F77739AC97CCD001D32786D9FFB2410C7765A1AA3580BA145
57620F8E48D53D245E32149937E5B23165582519A60384F37D44F4096D8AE632
FB2EBC0DDDFE6B7F7EC4EB0D636C246DB228EA3168C7219A3E02208457004FAB
E1D0F5FC0F31779115C57BF3DC3E6D0C2535BC6F87463F834EDD2608BDA73975
6686E49DA384CB527FB25C118EE95A2A4479D59A73A9DA503BB13D7BB6A37006
BB78A920C3BFD46F9AD39C9FC54E26A2EDEFB4CAFE23E8BEF99C7E35ED6C0003
A9879A6A26776C97B26AD26BB98CEA38F43604E31BF70E2E0FDF33B18674848A
0FB0AE054CD40FF05CEC23564780B1342184D9B23A4C766557FD986923AD0636
D594C6044067AC7F723D7F0CB707ABCCB23D597FE93D3F846478C35010F28F44
27B00164D21F81173A9388E42122F85DE78252BDE0ABFE88DB49A9D9269D77DC
55CF94FAA08B4C3394DB14F2F59C5E4030788A0D823FF5209CECCF50C7FA2F3B
E79E3902A59168DE38F47DD4A3059ABEFA9F93B6AA0CAEB40E66EF88D93A3D69
EE7C3BF61E1EA8D93C4F30EA895698262F3284923497DB5073D5331A8ACFD51D
D8F9F0932F815B16B0E281264AD72C8FBEA8F27A5EFD43BAA7D48B6BA4B069F1
022C0C195419B302D61B94175E4739DCF7BCAAACC7A17BB322DECC996ED35EAD
2A19026132ECA3EC67BDBB3A71A776512ECD823FD477418A0327F03D3DDCECEA
4503C1D510A673FBCB6E3EF52864E4DD88F234ABF6FD246A07284755E2D86E79
D70534E3056D67EE305D2486BB4CEDE10198A7EEAD51D9C8385B580EFCE3B2E9
E7921E1624508321620C8CF5CEC7D01127341FD6719A322EE4DD7EBF9FF408D8
3B136859BDC8EE314E92A218FD230C9A6B9F4A6DE31EDDEAE699EF58AAF8CA6E
FB537801E56A51113F7967813C525CC15FF3BF6CF7AF80358FBBD6C57A12A580
7118D1E0BBAF96755F92D080A9C74617E1117001E551766385C015750AC0BF4F
7DE49C19EE20AC1FCCDD4BC56815D481189EFE42D06E6AC0449152367F9FD352
4F8537182D75D16BE0EC349B0AF7FF07743A7EE1FBCC9FDD5FF24FBC3268325B
2FCD1BB607865EE47B6C9B1F4ABA3F4BA68DFB970DEAFA1422F4CBF2DC03F3AF
2BFAAE29F6A474BC95D164B0A9CD855B890E84C9BA01A8059A258B905971F5C8
C859F7A9F0C51457E9F677D8C9569D4A6A14E1B8F7651F7B0B52B396A2A4E3A7
051D20676D78ED7E5797FA34D2F44FFF017DB4D8402723E351C47230EDBE743E
2D36679F4CB5ADD213BA5AA5535DFA70D1349A1A0A68FE564FC54E6765EA83FD
A3FC45DBFCC725319EB1D770641CDDF1AC53BB638F51075D7A263934FCAC3472
BB5C51182905FCBBA42791268020AB20566A52BD28187749EE06D76F744E7255
848460AAA5DCD9AC64AEE3EC221F1E1D4454BC094A6D52CEE21BFAEA24B5E7E5
A2C70A8B32806E19DC9A78CE3977CC928E59FFBF204F294A047B097D24C2FB97
4C72C037DB49328A77A1C7A730D11034B86683702E60950C29564B1E1DFD4357
4EB246DFE8FD82BF65995181DE00450D289DDD9AAE551C1E761FF51FF0823028
2BA4A24BAE00164E7137553A3F0DB212DEE105088B8D4C211DC265A69E51061C
062C824D4F3D19666435D9860BB7372E5B4CE5AAAA851223C83FC355D2116E2C
61FDF70D3AF7874F13B218447DA6D9EAD9F4C33C91A476C25DBA369FE077F2E6
D4384B423C0665BDB5D0710463BD116D3BCEBFA94E4B5523DC030C090211DB0A
EB974CF18F08702F962CA7CEF3B8DBAE75D42A7D2B7664F15575D0C70844E0EB
3F6E4D5D84A301A4497A941C9EDB6133A680CCCF6F700C495C16EC2630A32387
54BB4C6C16AEE19CAE1C6F64ABFFAF2A427AE159D51340FB6D0112FC19E198E9
E9AC21D8BF81B0FA5F6B29063C8CAC5DB008A64460571898F57F8050D1990DD0
8577CC4C5258A989AEEA7760A1E381609B7DD448C1D831E2C0E2BA72C1C0DFD9
521374212B1CD2390D77A3C57FCC3E40D5EAFCE6F3AA033461AC33407DE65908
671A81ECA28FBCF8D41D89981271A1A6FF052B9274FE54298865885FCADBE2D1
D44F91A84AA0FD0EC090EF22AF24628FBAE349D9CF1F1540501F500F37242A17
A01277F62F0ADAE8097EAEE996589B533C95EAA0083B034978BCF9026E36C7EC
A175260290D8B0339FBE3AFA91A06898D6CCAE7F4AD39E76B1355956F4124949
A68C1F5786503320B59B9BED386AACD22C4FFE5AA26DB122E82D1DC965B2C2E1
F26CF72B5D3FD84E7318393ED7DDD8938FB0F3C9B8552D19B447FE27D259426E
0A49B2734785B7ECA70B857AE3A36CBA053571A28051AEBA1B36E56109DE565C
FD5C72BF248AF8A015F21D504C32845E86E1598F3AC6D8F8E588A392867055F7
1735D92FE3593EB3959F6752AF8DD3300C369062E3980204C0BC13AD67A3674C
912459776706066B75A8CD65D70AEB6362D25A614E99A3D5937087070C98C7BB
774C6122EFAB437A48B1D71498C507439E9263F73B7693325E0B9716F1ACB3A1
D0B78A2B8DFCF6F1AF582EA92953C42B3DB76F677A4D60A4A5E143FD9B8FA5F6
FBA1D55B147D274D227E1A9013D6F7AE0FAFA42735B3A54FFB18C4C000F6505A
7C5AE9F1C3AF4B7DE51C246FF27E60AFE48EF20C07FB0957B3D4080178A35989
41E7DB8D7BD4AC7D0A90190ECABED9D67E2C76C902833907470EB2B2C20CA008
65892DFB887CA7292C404B4349D032B6EE6B19BB40749D32A9DF4900E0C8EDA7
5F72A51525D0CBEA8298F3AD8D5DB44108662EFB3C9C55F079C1E370779B4432
C642259B570DFD97522AA41674F9524B1FC7C88B3DA72C5AC401B95E1D203828
3C0945C246F18A43D68566BF267FB111678210D5957B0E14DB264FDEE37AC1DB
A8AEE85CB991715394C3D76103A1AE401D97F89F0F31F3A9129FDD04F9A07EEB
6DB4093A4AFD98EA42247C5E56B7738E6B44D61CA5614B378BE67B4231F71EF8
4ED5A177BBBAB4848ADDA15AB33A0482C7D0F42DE7C1AD8E6923DBEDFD7658A5
6C0318B909C3C99DFE11A94B61C828D9FF421B84AE6D7A9D9C1493A20C06D22D
93B5E97DD1C11085FC30AD3A3D5E19B3E51423A3B5FBD8700484F21414101EB8
6C49696DD31BBF6D2B655EDF26A0AD73049F38F69F193EE93AD9A43A7514710F
C808638CC2A615C25FA6CA0F2EA50E4EDAA65FD165E058C650D3E27B4FEEEBB9
8E76DC5386F71635E6693CC583422AC98415F97C26296A50F3CF2212932D5577
1FE022CBA49FABD2B6120CD80084DE34D895FA9A925A23A9A9A98F9DA78213BB
60CD515B1E3D0BFE4EDB18E2D55F38821E54A35415CF6BD4EADA486A10C16829
709C737F8F4B95381A64EE430B426920C249BF4F402DB2DD79528779D284EEF2
D0B619277944F79520C07E0F0E13ABF591B91744B2CDA7D8CFA0F290434B0A02
05B3FDA95CAB5DD7A25E642E15C2E1BE4EBF1659FB156BF13A67449C67698F86
9AC52E173B7AD5925E6144D2C6D8D1E8E22A6BCD619964436980B6D47AD18A33
14ECAF6551752508FEDE07BF44E51154DEF903AE0118E3FA2D382E8906C20411
BB7CC0E110FA3E2690D68471B385169F007F4981B562DC4D4DAC062229DE970E
22DCB44CD9A65E7CF99740A14732780A3590667316E7B63469CB340EBB3F884B
1721A11B6C064135566AC88470163B15D399E4C3DBEBF0F732559E8B545D8A64
F0E92081EB10CA52F59A5DC86198AE0E97CC0F0652081A7B4B17509478E2D368
924152C8D950CE70ABFE89E425CEA44995F37E9DCB8CF8B0483E6528A440264D
6C0AE0F7D225FF6FC394149ED5AC32E6D527FF40DEDF878E005BF884E5A15E72
BB084827C40B53DEADDB2EF337986169CC8A9EF38711C502C3E0A204A8F86CA2
6C447325F15EBA82CCB7F8F1A893F4228EF7DFDC499F18469C27CB5342A79738
D607382308014E2CA164E79A681F03D61530CC41ABC0322E3C6B1D4121C88222
5ABDEACB7240CB0A330F2112C893617EB3637CCB9807DCF8B56E13DA1ADD2CD5
7DFD40FE0E578176F27ED7C4542F9F0039B10C123E7C8C1A72DB1BA1CF48A71E
1730A230B9886D8921EA422FA2F6AEF2DEAAD6F607AAA2AE9AE3E7B4B0D798D9
0D8BBF4C2B6C042A0456F249CEB63EDBED0C2EFF1BB7BA3EDC713A6666F0748E
7CF63AF5D5DCAA5DF33202CD2B6A7696565AA4654A73F2BD78BCAC5428229EF4
899CD07DCBAF0DA80E055F904A54ED2A321C77A7164552AE036D3093F5E2B642
F68C99687B4507460604B90F1E2CF54473AF0AE804D8F781E08FDE65B1B8158A
91A133202B4262BF11C5658CC2FC61330B589DAFE4DB5566CD68E63ECCB75137
2F59282EB026918D9C90F0DC9FB6791B62597DDDA045A49D222EB1D3B889EBD1
1BF3523F494DECC4D2A5A0F514C3ABE4FC9D090039324DE11E472B0926EFF3FF
36E2CE2B9FB6EF462A988F8BE18489582D048DF691D9DC363C40DF7113B46B9A
12A71754A215E1B247CEA304BBAE028368C444222EAD8B2606CEB5010B6618D1
89855321F862D69B6BEDCC180D4D1F03F63038289FBEAFAE533F981F8922FBF7
E1E9A53CA4570A72E8E8C742F0E62CAE3089E2A311999B1647582D91BAC3EA6D
880CFBB482B4A479959405D4A1B462F7D2B1C54E8030BD34F3C2E5E3C031AE60
64A538989E74DAD3B116EEAC507034544A7FF072BEFA4CD2BD4C1E8A97F5E685
63E5064250F2D16CE8F91642618758AD67BF5A77F62C8339566B09C30392E2BE
E1DE4E2DFE30810B11060D1DFE5ECA38034FEE2E60445F02E0DB411356CFAF7A
660629E6508E097B9F068D811ED4D9F0E750E8E299AFD25B436FD75B7BA26BBB
45AFFBAEEF472AE1F1D3BA39DFE6EDAB046E6BCCDB3FAAF88CB18CFF74FC2EBD
2A711342842E9F90BE5DA85708DB484A18CBF2788133195A16EF73A27A12A9D3
D93F2150B57950F863FE11DB79615ACB0C43D270A481C67146B71E6713B98776
F95DAC8DE6B1377A06AA4FB3E00595A99D634D847C1CC477865B61FF0136983B
BD8C876D352BCF4BE7C8E7FED97D54CD5059AD55D207F730A314B3E55EDA5ECD
D1293C32D9AF0E15AFC60A1CBC9A0369B73AE4F8F8B998CAFD23494BAA265F03
3B9E4F3F5167310D335FCE27AE239A7553BE2B06CCD87F74630052B46511BD79
8F42A66E39B0E83F78EF08F55F483A42E4D5D7B084F9959F8ED10D2273DD07C6
67CE0EA7FD70F5F55AB1762E46A1CC44A5E76B11577705EFEFF28C43D10A6B3E
AD150700072A1C803C3258E719DF2D618A09FD2D83C46395472E8E75565EC613
0F1653D604A62069E60EDA17619C99E76DCB157ED24A9EB0A00C1CC9A023FC11
63DF651A2A7DB7DBD1E778544FE4A284E205D73C728DC6FD9D888CECA3E22513
D6D2DDE1B07E6A7CF21679A17D20D0B3169FD81CA6632057262F7E3D5E45117B
6A62E0A4A0E4BFBB50F3EF425637D9CEF904EDEC7E0062D802EBE95656ABD9C1
A8EFDBCE19A27FEA42624FF57C56821E6CCA3B8DF3FD09310B43A60CFDFCAB81
E0FD19299CF510E808A5A768EED2648C7F46205D364D4C76A47A1335CABDF628
807FB93D6B40399B7CCB6D0E538BFC58F91170F7BF0A301EC9F7A07D462935BE
9043F074EA970B482F72C6BE385FB658EA34AB7F528088A58D07966383AA9F7C
E593D2E38507053E07923F8AB2CC42D72941579783EB990F6AA95FE1DD8D3F3D
0B591C5E343F293085BE3693F144E98B01ADD1722A477BB1203F35A16209ED11
8029365AED172EFBE225C4A638F94DB0F57E0E4E79E4D361053414EB6C9456F2
82EF539589CD8FEE71D4D6FDB758FF78A1270ECE2467C34C2A5D4ABE41473F82
52E34FA9B1A1A11DA62C29E5596C04312404AA7BC9413777F314407563D05EFC
F4608115F0F1896F2841E6390EBB0334546F597BBB18F4A4C01C7C37610A75DE
C88182B57C1E55D394F3337EF664AB11AC9FAC413E3A653F17CE3D9331F6860E
D4A261B45AAB4048CC369039CBC0C2E2EB8A0A915C996CC41F868EC12EA0C845
B74E9CC2E373ED1F6F3E101170596B915426AEDC2E9822D2A2C41684D8E9CC01
09990529607772E3D15C0D860E77C4D4B4C56E14EFF9CF17BB894F1E9D7AA2A2
0EC115CE2F849C3C094D48609165C7417E292EF79976D91C003D40E70B95FBC5
A3D9B6B58A5F0ED9F1ED9F0A5C602752026B1A90CD650E36F55078CA90D475FF
620E6066CE322A3492DE4E6DA1FB9540FFE2A838BDEDB52F7FEEF3101B8BEA08
D23A9B850FE9B3F946CE8D7834A341A3033EC0565C6B0AB3D7FF00B75DA4818E
6AC02A6033FAE85F24A0C001B71BFEF484B60A08E38505D8565DB8644FE201FD
268B3387CC50E7A7D08335F0E91464667CE730680FFA93F011E6F24215BC01A9
41C90D831AFF6A5519DE51B2657C79A4D8CB345C75592F5F118C2FF3BB6A13EB
B5F90ECB94FEDE0A25C90697964A7465BE8F7F3321C5B14A7C9C5DB7BC72D618
DD10ABF4BFB7693C5303A63A632D06013F6174A8021C6C7F346550FDCD4B05BF
DEFA0E815117FF7D74E0F00EE1FCC21E1B6B53125EDEF468DFE4996E440E7AB5
D260A72B6AB52DAB110BC13293DF36F2AECFE5730FC438108EBDE8C61561A33C
7457B65E7268148D8D9205BDD05D7C8D28E3715554F12F8A0A5FB9F8447FE8E4
EC411D2B625297AFBC1C6931EC53C7329CA694B9A492C5668A392008D402BC8C
B21441AEC2583D5E364236986B2F77E9EA11692BEB6AB08B7EB7EFCCE9298D2B
C52F0667EDCB714D4368D3742BE3A0BF3566692FFE505DD6C338BF9ADD216EDA
583E0FBFD7F1EE7AA44EF8BA4F78E543A5B43EC55C6D23915384CD8D7006071F
7E87C04C8C0D515336C969BB60FFF919A0DDDD11B75126873EE027933B3C1022
4D03662C66AE5E0BF7724A6D48CE6C7365DA63732EB72F941B7E06223455EC62
EB7352966259EF448AC22E5967F50C1A350F68D1A6DFAE5EBE7ACA4B7E9EC21A
79E9059ECBEB8B7D1380D6213FCDE5768CC8A3D42B04151A2639F0DC90CA8B23
9940814E98028E1E21D5B1BCE9A96C4B52258C295C76425B1195D5C92B98C4FC
30400908303A2BE88E9B24CCB838FDFF16880670C36EA6462A871F54C8AFE67D
3AF7F5940E56F580CF86901DF1732E8D2EB94CBC3F1DD497EBF92734D05FCFBD
C32F4B3441B9AC7C647A6DFCBE5BF856B325E5568FF3E2CD04EF3933EC59F73E
9A52364D225420FC3613B32ACE567D024CDABD007BA70A28F74E9CA435190A40
F1688A66D74D7B09C3FCE6C63DA4EEB478A886BEAF4EB610F3220570449EAC3A
44A43B2D52FECD00486BB5028628BE5F0831E0976D7F98232BF3E1ED9B9F3DF4
A0F1F252DF124B8B424AD3AAC9D164A0EB5B7B75F64D372CED07397EA492E50A
3E19E2AF414423CD382F9D4B7F5B01D35BC90C694BC760444F0DE0AB4777E8AF
2CA5F99DFD16EE7A7534665A255F50F5EFBB16B1A9D67C9DB5975FC9313D3189
DE87EA7CF917A0A07AD7169CF56E24BF91248458FFC99B02815AE1DBE5E35F57
9C7A0CD1360336553B32C064B8D6BC7CEAAD3A80ED5853ADE6246154566B6041
7F8373D8CC8ABC7707C46E946364BAFE12EC91FD7CF145B0C473DF191E67E80D
7D7C00CBD60AC5F0CC1E1BB3F660900869B0D8529246DBF4FFF4454185A8ECDF
C6D4EB6A5DFE57877ADA5828167448A06C2CB329CCD37F4D94410B1CFE1DF888
480312792A7797E91545105E6485DA84A8A083927F1FDD45531096DE765998D4
5A5CD3211E54010AA02169BF78B36C5165027AEE00AE74A1DBC1E3E53C206ED8
F6C8144CB403F735F0EEC0F52D43FF251CC264647B2756E6573E3AE1BDB394F3
1688A93E404AF63F9BB6A3E53217FD3EA5F9D29BB6BF712C86BD7445B8138711
63B509860721ECA90039664419CBCB4BBBF7FE0670F6F0AB8D532C9A91960216
1C8FA3B0A8CA5D1C3EB40652B73381A62A1F785071237921CADF2901B2B49482
711ED69693FF65AF9836E0631DB00371D1CDA4999EC2E57C42ED4C199BF176AD
D591BE6F268AAC4CD8774E8F9392105F04172D9211A1B941C2A58BEC33D1511A
941192B6F2EB29CD4F50D01B09E264D70E544E342F4F3E3DF74C9205C47C611C
D7D5ACF8198BFC24A3E6BFE57700D89A8D609EFA503FF0BA384081A7BE8F6B37
0CB49738D781176A93CC612B8D232AA41B13503CAB5F26418B5E8213D6516899
9CC8562AE2888082852A6B597C266FCC8764025A75DD3189FFF2E6B914EB9200
7722530BB5E9B28BC3C74CA098321FE35A05FFEBA047C8C189EDACEFE2AA7E20
A998B8EBACE1BBE2E3E65F0678F429651AC30DB0DD4CDCB0CB7DEC00FD782303
81AA9856E8D7E7BC3937488C45D1F0109912B0C806E862B8448D8179F5619A44
8C728001B4162CA3A7BC9477B498862CBF9A16551989525709C34D20E977E9ED
43D05D03B8F365119AC3F540DFF47C362412C1F25989DB99771E6E39394D0ADD
B0DB0F144BC0ECA781012A56ADB24DB93602EEFB0C274E85CC0BDE277392ABAF
1097914DB7F423E8BC28BBA5A0AADDC8DE0DA5577C8F264EA6F4E326661E4FA0
2CBED0FF5FE8B4E8F529F8E1C4BBB3C5B30C3CB73BEEF8C22176FC33789D0F76
8112AF400D6D4F2B6FFF3AEAF6AB7DC2DC6E40BBDD564794491B90BCE701E4B2
978E3E90DBAE5E2A7EDC8A7DF542EA064FA4D04B0C8CDA87D593627BEFD0F5D3
42DFBEE1A6A1CE6CFD371DAA0E04A7855FE71FCCC1C672846D89097F1AAFA0F0
BD7FCC0E2F94D59D4458F0EAA550A50A33471B5C101D4DD3C92224B062C52CCA
16FCC44EC738C3CE8B2AE0DAB3DC558648EC911F59589E02A7E313811C66F25C
2E6F66574C3DB753731E9B6D0C8A568AFE5E9F8250D849A9C0547A588C8FF28E
38C69E4E47FFAABFA9652CE711F73C3A6E0A6E38D7AD00A65D6BCBBA9CFFD7C0
7A26D604010343FACD12B5C689DBE39DBB70E3084D421F8176706154F0353D37
4EF930C4E967E294B5667A0CE9389B0612F457BCD25295C622FCDC838330DF41
7A181727F9F754604FD6F1B33BAB1B71AFED586E46D2F39A5CEE355DB116E9B5
86F8C5DD092FA0586CB00A53A581FC2B244CFA8D0318D58D00F355463B518318
C89454E6C57CF6F84C2548A3F33B185DA878C610F5B416E99DBA2C9A3E1C1C1A
AB086D5FB38228B81C827EF69EC670F9ABE9DC4C1398502D0F2F28D8E62C117A
CB4DE738887ECDF6A321BAAD1DAC0276098B92F164C6D66A7597728A7C3CBBF5
E58B74239906528C72DA3A42233B21035F3FEE9FE033FB6792616F47C73F01BC
9452537D774D2656DBB716A653A02C909BDB758E58EED9A6432E54D0078ECBCF
FDEE7BB315DBE2328B3A70A008F7F9CA06393EA308915F38677E9C31DA8C8410
ACC8CA80CC9C7F0A45EF1CA5CEDCD32980660B7EFF0B2CF6801027D3CEDD27EE
4E5DC26212043F2C7351D12DF42A66331A620737FF601DB345CBB8B5EFE1C32E
71762E2D1C723D988158CA88797E458598DBE6B790403C479BF5025F9A572851
ADAB2BAE02647B3E6790B4FE3E589EE7972CACD9DEFF7E65F6B503D221CB0C24
4E110903742D039D166601D5410203B424036482EE66B08BDDB4FC966D332769
DD43B3A7B50C8A624F5E62A45AB257883902E681446F49D5844A4E02E01AE5F6
6840C354244BE5B89E45A32306FCA236A19C4DE48AA31E35B937065A0B739B90
A67D284703223578D72B3A89F733C96882583EF5AAA459BA0EEDE9DDC9F5C7D4
0B3DD5172B0F2E238A18CABC4AE0787C5BE884032CBB6584691E037E1415B9C5
0DD86172ADE8FA257AA60DA63D866648B75738A5C88CB25F4304750CB14947E3
923C1DC7A3011A3DBCA7EF4CC0DD7AD7642C8B462FC494026FD8F62E6A898A1D
8F4122E44B960D8EED5853C4D2CD422747982909732F898ABC07373F4524EE81
6CCC8AD3301125351796BEACAB4F583320C64EC6392E771A95C21F93E16E7571
E1ED88E13999DDCA77BDF52BD098770FB0D0C625168E49B71F0FD593E9DDB390
804F1B279E6F1C7CB7C53BC4EA5C1A09C487B4B4895D38D52160744AE362A451
7BA9D55E7C5C1AB0463617D283A047DB6ACAB34CBFE7C3A86E9CF255F0848025
EA873936EB692AA3DA253054B6CA7F73A61C66A0FF236945171C8CD5D1A28772
6A74FD74B84C76E4BA713519C836F8300653A053D0BA214FA77948BFBF6C9EE6
F5E3C4D1F86F8C907B3F2FAD14B9A0ECA891BFCD0323265E8D68A12C7E377B62
E1ED758EC50F0EFF0B9E4EC1EE6D519F5A7047B89F71577444DAFD4709855AF2
D1DE7CF93D12510586FD58717417ABA734C5AA05B206FA32FBFCFC040190E077
CA04B673EB7DEE4C2D56F54FF2CF27012FF622BBBF1A19EBD650E12764128D46
215F7D09FA138E6213D7345C0EF9B8670816FFD1D9B69E952F4963DE6F74FA91
358654F6818384C245A74A735698AE989F2D9E7810E13F2E6DE7AD2CD81169F9
E785CCEA72A8524A9837AE05E88E03863FA67DA6F891BEBC9E2E89B78154ACFC
65B24FACED6F47059CEEBBB91DC9C234E3DE8FBC1F56ECE1E0B5E1BE1F0D71B5
8D9403A96B3D6C6B393E29025D322D8AA0C5738F2176A8A900344609915CE005
3C369EA27F0F62D39059607E74887779EDFE21FDFE62BDACBF9F86BDBE28B631
2B24BBC226C5D86B6611E7D3B01D5D350745ED4C62E998AD32971A7C33BCBA9C
262F6E84B51D8C3E4B86EFCF5671406F1FBDD418D99192C9DFADED0F71BA4FA1
B2460CF65FABC10CB7B1F79FE59529C70AB1FECFEA5CC6A794F7FD7F968FE02F
0343A6AB939B50F31C5A7070A5730877E465A4CDA31388C97548771EFCDE20CE
E74578EDF499107FB92E82C24F2988476023F765C91C7383122ADBF1B0F99023
CDEB9C27B0CB164266E0F29365C1D0E2663FA57A28560042A17BECB310DD4BD9
902B1AFBA22245E2D283EE6194475E0D89312E31FD003D5F7AD354F5F2196390
6D54A85EF0AE63AE15993C0D52D67FB149CEDE7B3652A78921013CE098E6F937
E10B208F6358228D4E27093E298DD4C7797575C9D31915964F7704ECA94004E3
53961592E741BB15B61A3C7F979FCC21F5A6D7A045A16102586B545A07022FDB
B15D64B00148C4547751726615FFAED91F8D6BB89B9531270DEB923FF31ACCA1
0241B7F679BB09260CEA7BABEAD46D9D9671C9BDB41A9502B54DB023D6D83CFE
ADCD1CD49D9D5C1366FF35C87A48FC49B80E98DC7EA6AFE71B9C76C7C7A4F2AC
6F55F7D12FB5ADE56804BD08C21A6B18DAA1160F290CACD600A7B3C60C3E0936
BF198819281FC50AE2BDBEC0BF3F5CA4BC06D17B8D6AEF1FFFCC2DA821B53DE2
A271A527E2DA50212592216F9FCA18F76607FC75317316D7C02D5FCAFD0857AE
30B3B7214C588C219263F40C72D798E2AAE5D90639AA4D7E1ED9D2F2F0D89BF1
CF446C464A1DDA695177CBFD4D5EBF3B7E237AC2C897057A87E47CE552E98694
F734ADC8815E03AE2492733A2D9FB17B7938126F3A76919242BDD64811E1C9F3
6DEF4366C1C08E0BA5B92C8DD63115A42CAC03EBBFF7DAB2DCC3867D4E2FD26E
6A89D59DF8470453888D919EA0D8B881DBF4756B58168F9FFB578D5C27490886
B2D90369AC7517CADA2FC10E18979631FD77F5F25A331768DE436983AF03659C
40A15D92C58088BFFF37C2948DFD474D5724A058A8BBCB036FFF0C5B8F3F48E9
396DED9CB1F7A6A51B32F2BF122FAA45E025BE6EF25D1D4C5E493CC26224037B
6C2148CB2854C328DDE6375C1C962925ADB50AA385176F74CAA244B7ADE86E3A
6E89DA667661CBCDEA3B6BCEB9C98C71138523B282D05205E131D4D387DF77E3
AA52E008D1A1233AECA83A96AB7233F61DBCB739BFF33007EFEC1BD82F4B8389
57C96B1D6E6B98C9D3B692C5E655C9B0A12EBBA11B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748073
C80F344B5AC259C63097D5B123C457F41C0C1FBF1FD20DB1F21AB7759580EFAE
05DA4B5F5486FD79F660C4DD1912B77B3EC68B589410B00B4F8BD6CDFAA2F49E
AFDDF799D8C0926DE86A140910821EF2C61BFDB7705FFB5C319091904D2215D2
8DAFF056AEC4ADE5F7EB16708D2BE2CA052982FFE826BC709269D8C09A4DAFBE
BFBA800B42B885DDD5652727A640911B183955048D808915D7BA588590785C36
323E2D204512584029A7E941946AB7D45710ED4393A98B4E23A17008844048B6
23673100660F383E0D2F633C08A3EBDF22FEFA476B92D1B071F543002AE5C575
C80EFD0638B2AE4201F8617D411C52FA6EBA773553E69D68E57589A437A6CFF7
12A5A5B7750620F67F4A68120DDA56FC6E466A3CA47F0F2383A6052C86BDF393
4AD0C66DBD3AA4D7C69CF73A2E6E359FE4CE07E98877AEBB4F2B057EB2A57F13
1B22FDA486D8368A13DFEC733E31721E2356F2474AF114F730722C5EC0B4359B
F24D2951ED1BC2195F11D414400F81FE0DB9EA3A9CA1A4FD2C9CF6C898EE6510
A2EC593B475F961905D8C31B9C3178133782ACD3465C5CA2D45C688AC8EFA673
A3FFB3D478EF32B286D1738E60C074C6C2BF8A25F7045055F1CA7C6AB08B5BF2
738588458A23E61F44B8F265B49C61F77B59BAD929E3E3E527230A882339CC0E
ADA3757405C7DA7FC6553F598E910BAE0EC317E7334EF4FED8A0F7EF263E1949
E769486DC246EEE3941B8DD4C2373FED8F31044279959B5B9F752C488F1BADB6
CF0CE31B93F38B2FAAFB738329C177544AA329821D133634BB98DB3F008C6A77
EC1E68D3E2567C479F70400F53664093067F31D2FD4E828D32E45BC7841152B5
C90D173BAA9A8078D7AE82EAE4C82760C149909C0624DFAB25C71E32612E2496
33E39B1964399CC6CE5217C8D138D9E07BEDDB64ED082BB0F18AF25C32531ADA
DC06AB2CAD95C2E52B14DC76ADEDD967C7DAB52EF2E3DC5ACF145358D4894CAA
4AD4B0B218DE728A5C2C9AC4D259CFE361E5A22DE12211A46D5FAA4C18AEA81E
9E8F602799930DE5E33C3C89127D49DB2C2F91C02593B87B90E3184B908F3682
C356032136221AC34038732AB2355EDAC97E1D670B1D40F1AA4E2A14F22293CA
EF90F941F55107E8C5B9DFFAA472A33B73ED7547ED37A9DD4C09033B77EF0020
06B24A5DA35FF39027610737CB42966EA06E4B317CB318B68E8515E728012A24
21C73F9F1FC4C1DE9525055CC0B7333AC1AB759285C72026118C2E2E96C662D0
B0508BDE930C8E990369C1183BD7078A47D70661512E3CE8C856BCD3063664A8
E6BC436B343FDFD2A2F2118F59384429397AD7EC583298DF8F42E0F6E7104839
9787217BCEA9F5823E3498B2EFA9220DD7EBEEAF55EF6434E4CEB595C2BAE17F
65580F59FC09AEF682C3DB39C219BF2F9352B98D62271B4F67441E61393DAF35
53A5328128316D1F0E74CA44D87390B61B68CFA60B11A56F24F8A1C254BCB7C7
CBCD9F9988D5A8239A3ABEB78467E272AD9D54F15AE07ED03336F5808D3AC1AC
A238AB8B29F707E61FFD9C96A78A730C0E0B0A1765FC76B49718197843785241
2E05F8D6D14003C671AF4B2C82063A451D92D2873049D87288A8DDC2D7BD0DDC
E24D6397307E6B8D0FDA58FED35CC96CFB69C19BA99343F69650E2366C1ED10F
F2C16F57EE901070A024D69DD8BDB3CCEC3EE3C80AD06EE105AA7D96542F152A
A40E65F4C45137F1848A3687D5BE45FEF3D084AE1B3C243A830BE79F5E0824AF
B010DC809783AB31CB4CDB3754F89637A3099F1E6F704C5D05B3DE9003CCB879
6F73D05E979D8392C29DD5D1EE9526E6C38D5C2B0E66943605C0423997ADD15D
C7AF14CC711AB028A4D6909F6D6C0424AFDC77383C560F54AB4521EAB76721C3
F12001C1F080B9033452963C8D8F0D50BFB987C1B1B320A7649EDC40CE9E6603
DA890E6CBF9603065FF859EF5BF011F10BF7E0E9DB95ECE71239F668A2E7192D
AA0D6F9E1EEA8D75D9A93A375C05DBD0FF4DD60F4A12976872F59B63BFA4451E
0260FEF4F530C60447FBB0C3A3A15EDC6C87355C5F7C8F822C67228943095A02
50411E81644F995A049EEEB89043DF6F9CAEC0D5C3C68A433198010C94B88ABB
8D8D04FF8311E955631DB6480CE2CCADE0F132943AEE55FC59413B373AEDC78A
C0CE9918EE8E8D4BBDEF36BCE95A03167D702466832B32DC035DFAF601E2EB66
15E111E1B87E5EF34B3365DCC7C3A012E2A56AB34DCBBC1C77BAE6D06BB1AB0A
EA89B6683EFB7343EA55CD31D4796C8B7268EFE5EE6B0CC0781AED1350BEEDA2
81FDF9E782EAE324178B35316D55536783294509A4B3A64F1C48527544E28F80
8AAC801670C3D6BAB0DA057D0870B7575D67832B87E025992C81E31E226BD219
0F2A19321B7CF95EF16323FAA568836ECFD4A813D4FE2CD1C5811F86578F44E5
BEB7F997758232B7EFE2E171ED2FB13FB2FE1EFFCBC719BDC2448BBFC520C012
65591E8CAC11A84DFE3F09633B0FDA0643215959028A64683C37CDDDA453154E
F41FEA71E4E811982A72A978118AC0AA3361059181C4A4577018E8150705598B
FB0E0CF46A06EA698545C376603E34B998965B9CE4606AF1447602483A341A59
A1B95EA285C94FA7FA0484F7A6760120FDF31447C7E8D4905084C826AD41FC98
7A55ED58D87566C8DCF13322078DE4CF1E94975CE161651614384D7F83214B97
5BD1F082D7E515E3C85DA2A15CA473EF99F82C6640486167706041DE93669BC3
DC2CAB97F476CC7CDCE3DB5DDF931CBD6ACF13A31E124222E5DE4AE81A1E16AF
3354F24886A4658780D69E25CB2C0BB3B0C945159998A4AA4E2F34446DCE772F
4B24C9343E42C3D897DE532796B42E8B6589ACC11E82553D3DF4A5BFF200843B
EF3B3DB3C0CD2D87A629277C36A190BCE3C3128378B8FF538B67E3AB60AC1B26
10D72BF5C0832AA63EE771FA86C429AE98E2212BCB115345D433ED23F7B0B9A7
414BA06387A31369277E9FD612C7762E866A6E4C83D0AD28BC51B81447179F72
254383E9BA1DDA5F6D89BF203B4CD51306877CBFF217C746FB1CD32238A764D0
EA70E5E9BC93530A263D604E53091F7B9738BAEE1BC63DF9EEC5E0C6A67DF2B6
51C3A7791556B1DA71AB27885183D284467A94555961414D80FDA088CEA3BCD8
8B74208798D0E8933C0625142C335D2ABB0A692F1CE5062644A462A135EBC938
BBD745F701B259F9C797559384AF8C68BA3DD3558B16E94DD6CBC32B1D163236
8D09A1EC0ACB4D27E6C934A2155DC2E79631499FB05BB37B3E38B6B9A5998D6B
F35919DB26271A70FD551FDA55D9C5B79E97D0F2752100481BBD994D8880B4A9
72C8A214D7171BAF725B98274C1DF15F81DFD2B70EAE0836575A237C9637BC3A
58D7BB96AFD1BD3F1808F70FE83C1BD05637F157FAA4BBADE2474758D2E81F02
3E685A01A7EE18656AAC3D73B851D54A2FA55862DD74124E7682641E7F09BFCE
B269B2B71D44B77142FCCBF78A04EFF66FDDB2710B091AA85ECCBF7320050ED0
A386815826A0132FCFD809E2BC34AED85936859171FFD7C73CBEF771A594437E
6E1C6B0F15FB3102DB7A38D183CADD3191DFD0C105CB6FC5F610237BB3C6E242
EC5A612AB6CFFF3022D1FFC91F6F2C6B28808CEB9BD6E81DB4A933234276082E
17993B297043B2F75674AA08F9AE302803610B2F3EF9F080C1730B1A0DEEA5B4
5583AB81D0CFFBB8F5C0596D7DCAE8455188E2741758394F23ABFD1B9A96FDF0
798A4397FC6B28F7DFB72F5895A6BBE8F28EBB9D06F88A3574A729998B80506F
4C56D862C0F3D2957AE93AD7983D200E243F3C6B71DF1AE09BB772289279D885
40FA56F817D5C1B557C9C11D2D1E7D8E99CBF5EFE31EA84EE8F4D9D971AF27AF
1864D018EFB621F9A4827CD0583D9F91D8744ED7D04A96240A6E17F35C49720C
96C7B9CA647E44F7C808B103D657353EB568DBB17ABE23572C4A4D920C03B960
15CB98814BF8B5377D99E0C6869D1539010908F2FF62AA3B202FB9C5CFBABEDB
75A2E9E29376CD9085CF1097487E91DFB017406F9438FD39F5A145E8666B23A2
F3640094035258FEA58F5A61234E3F2AE8321A9425087C9D6E9E809653AAB05D
C10FB625736C0A4CE43458490BB250FD882244D2F8D400CE844F72809484AFF6
17B5B142C8510C8B35AB76FFF17362291EF71DBDD2F243539D026877BCE8BC46
C25AFF9BBFEB92ED5B3BF6BE08729788DCC4135EB19AB94466E243FA2E97485C
CBFCD07F7965F253FE4F1FDE01F4AEB41B6302982F3802691CF7A9878DC31484
CA7D186302BE234998195D172D4BBF5B654B46504FBF6F513BBAE017D4681AF7
F29562CA9B06DF3D20C1E130B4034994F5A36BCAE3C00CABC6C53161EC44DDBF
2996329B9A25014E2244B294F4E887AC7E839E79BE33BC58CFF7B958F332F783
F8C5BB7A15CDED9C6681ADE2F36A9BF1FAA390023D44EC449FDFD2DB31CDACBC
7759A814F52246A9A377CEE767FD1F83161C060246480D0558806BFCAE4E3B1B
00F46AA047A864A2C3CAADC412FB5D0147B81CA50C8D3C449CEAE936C917F63F
8BE32BE3A349FEDF4A795AFDD8A8EC1D37EB6A98DCD29F918989C3D4527B175E
7CB06C61DF1BD2BC3388AF17F7C95DA33CB47E9755B2F745B1269FC2D50B52AA
E6B0BA1004ABBB0648FC8B09110ACC80DC425670428AA142A12C1C4B992AC5B6
7EF4A33BDFFC075C9D5AB2BF328167B10B13E96F91769C65A0342320F50D4AE6
BB97312CB2EEC9828EB364C7F718B8A992F9B4F7C31FF7A704A66C0AB7E2C701
92B46D9882CD68F30A442C6F3F26D82B43154E7B14E93FEEDE49C17E088BEF8D
3C21DEC9669D5C144619D5C357E57A3855D07A7C02CEF6E9702C4DB16973CF92
2F07C7274FE8A9C75C0A23B1AE45912D3E17BD1CA01918486805825813E942A0
30B6D91F7A7705CA66445301CB6960CC20C14B19DFB46665EA3ECD4E0926E2F3
DCA7D477F632AC1C98AAE5E8BF0FCC5A41BB682391FB003837B348FF7C55F401
C6F78646A2DF87782B983629C7B9A9B73604B58764FA5388EFA9D25968042C18
65E15CD42FE47F30E817E3B1B978654AA8ABAC601411D518D8677434FC0CA752
97AC8BFB543C0A894755E2B2A9F016487D98CD0DA421F3C0B4D0A9161BC793F3
56C503FF1A7583A087EB718FE927A1C62BEBDF23381053C9A09CCF58DBF75B62
99546A9D8FE3E0476BE9FB8DA711319AD81940DC8572C8595E55011D49BA36BF
FCAA4D072861D966FBAC2402FD149A75A6C422C98320C6476E073D398E079C42
96FE8EAA4F7A6220B8657974B5EAA36B0774179551907E6161343A8034B87067
5C0BBF435B2C52ACAD33D7E65FF7BCD6FC78F5849295E4F86988DAF4DE7D8CEF
39B437A599B76DD87D5AA1E7FB290A29F8A0A5B7503C826E3574C996F5657069
9591D5240946795372934385308365A49D163EB152969588589436B9D78D6636
D776E24CF7775E9C7CE9A997C54A3266DC7EC2309AB6B4DE3930C636F632520A
38A98B5D4B73B59E0CB07758F2E251A0F9634EF86DF95700C41CC7FC6E866D74
C80E290C1AF0D64D3E982D5670CA6623A7124A01D15B7E2DC8C8A8339136CC97
8CB026C26B7224B662390A9043801D81EF860EB348DA301292F43FC9EC13E0CB
007832611180F97BC6C22EEC2032E4E90FA1932D9913EFE5D7657CDA87CED4EF
32BAA2A68FA224FD5DA5C4C9B959F21B14C0EAE1DCF5CF4890BB5BC1B2FA8D4E
A8133F0026D75C49A9AA14DD0F6DD0CC1E67BA91CE2CFE0223B39FF9A95161EF
098B9C6F2121F2F91CEBEBF6466067E94691C510231718DBD9D996A8A07486BA
F7B802CC6273C0EEFF8FC4AEDE582B4BDBB40276A46427A311C2B8649F727C10
FACF24B51D1E3CAB30210AAE472CD72644F6706DE6F1668091880B1797CAC09D
E57D88AA0FCA2B0B2A080299D3824773FFE9502341218647BAF2C8D926775115
B177A0B9ED009375DB6F40B7868863E8C585E473A4A606427296DED53DF028C2
0B3DE886AD9475E2BBF0C813B45843153A29BDDA0415388497260058C6626206
D77D0CAA27A6D6452AD2B0323374CA2E39B9022C564F34457F1FD34960205FAB
F68D39063B837428AA71444CC5FFF4178302FF68028334A0C72A479BAAEB4D76
5470A9940B4B107487556A3EE87A03335915B40E952E7757CFCF56DF5077971B
AE643E7DF35273FDAF7B014E858319E959CDDA6A50395A9C13B7AB68B7DF8CAE
1778407DD75CFB7F1D8B77E240DB701C5F563BE34981DBC866B2D8DC648067DF
4F415FD57DA608EB4C38145F901F516B6E9744B27D1E372B821173F80DC4066D
D03130BE853AB4141CCAE920B0170653AE640A87919115CD2984C25A41816E55
58F95FDB37AA3236A7E826DFAB9BF8A16CD0327A87D66BB42B3F44FEA45B9FAA
BC935E0F38D4BEA11A97A52D1D2794BDD2E863217467DB8C69F2D163EFEE36BB
11AB9FA01CBD17BBEDBB2539A5BD4B331044B49B78A96BE5A31870CFE98D6267
AE20ABF56E4108A9AA10C2B34B84E908BDB7CCE42D2E5D75C98927538278BDF7
F4A98842DB2499D1E3E75BA3973CA9FE195B4709BA733E18D33DCE1AB9B1BF10
1E4B5BF32F1D890B0ADE111F08D6807A99434CEBAB70F394B6D11293167D72E9
89910265D01A6950F8E0742916BE1CDDB59C6A059DD974E6D62A9ABDD7474040
9D782CA907E21ADF2C9B8FEA06FAA93E7EF7997802D92DE4420F96F74BF5E94F
52F423688F2F8F99513EF1D932BC07EFA5AD6E246D0EF077CFBED66281E9DF71
FCDF8ECE98319FD967FFD6C35A2C131DB2DAC0B957A5A1A8D0D380A9D4DA3163
5AE7F5C7197B8C1CC231AF7E81BD915B7B24E82FE4CDBB3743573482400A964B
0AFDEF37EF9E2820553AB0F2A8B0A6B44BB92F6BC6E5D95A262B306C3EE69A8E
DE4B8DC8117C1CB1D8ECC8618EC67B79414DBAADD1C7C4474A3667437D155BE4
A824DA89285D1629C6B5CE4CD460F0E50EE04CE99FEC492E44CF415CD455B333
337127407FE63E9A06CFC0CCF0E5A700541CA84F118E9F5F38CEEBC7E360E486
E6DB320F371560212529CA343B7329EE939FEBAB5D82C34B8CE06C6059AC2603
F926627E69A21EA97D5F616C55BB9F9CEE17070FC312F23598EC800E6230FBB6
021236EEEBAEA587F9852F45979B5262DD7B22672920C0F72DE159452804460A
4F240C94B3DA5DD1747461997D08884BDD1977B8917F7B32B0D01E56A8FA1604
0CE53CDB113DE9DB5B6F98FDE2FE24F19271663E78648B19F97017B14C739146
C3B1B0A494F53B09839EAFB9A887B785C2140495B967BF3295BC2D76BA77AA4C
B791E9E0485666268CFEE58E6C3B26D366A6EBB7AAFD79396AB8142FDB79C4E8
E586D01336DC7856C24E48CF209D90E32C44B201DD39E6B6B413C269A17ACD5C
E7A7E17C22A3A622ADD256BE1861556299A93DBFD4871869918F4FC45EF629EB
6240074ED3C5DF8723F949E94727CE1BB309B6D0772865DE5C46B6455D763DD8
E53D4CE3B09A506E381CBE595CEFBE227CE64814EF66D785AA9B83B74E83681E
FD101CA2DC5233A4C87EE1CA1B18B46F914E0D3F4C705DA4A50246D0974165A4
3E8EBCBA3C37315551B03DF18C0951FEF7BA66DCF4DDBC18F0437ABA8EBFFA36
ACB8377C34331AA06B3901BC256F3726AA4590CF690F0B1C5217D894336B4403
7E7E4DDC7B53474006C6B7C944B5EB71E016E6473C18111C86C664FA30E41D84
C1ACB0463667CFD22298BB34D0E12DDE7CDA67B3A7520D1861874EC724F4398C
70DBF987AC4EC5CFD6D6315A01E22B8D35224C6C7D5F114C96989AA2D4590B19
22F3BA6698F8BF33880CBE57E3FFA9F7DB29C37026F5A1180DB63766A5233FDF
B1650AC845F6512CE870E3751D4F777453CBDA58F4B3F16F6792F0B03732014A
63A251A73F16575244DE6ACF5B93C0DB415474E3209FAF935764769698E231A8
8116E0483B9CB1836046A8B77C9E29D7EC620DA38026BF0694649B0A618D2FB0
6F3FBF397A33A098BF627249E9632F981A2137B984BF506DD5A3CA93E8B82719
4B3E12A9C50BB48B019F125B816ECF69C54DBE71AC6D3D4C4E4E471F447F0ABE
BBF44041DF8514712F6CBD5491D5C5D857B2738CE9E1F4B3CBC0B9AADDE03C29
6A798ED0F0417E9994185FCED937859FC7DCA954B770F7B71C786908A8DE3389
EB552FFD0AA97F60B0E3E8AF2AB73B335713B255D0E863B10214674F9CDFC346
5E35E774BA17867D43AC68908948C4271A5C9615A13B8FF05EAFEE3707DD03CD
206EDDE688AC74F3AE7EEC48A38B6040EB8EDDAC5931D18EAA57CF5562E61D32
13C263D08354BEA19050D94AB125EDF2548FB5870C1CFB176AA278EF88813056
7E26B71F57682489C86ED66719D6EFC5E117C1569298FB19C14C4F12506CD59F
AC07A6F964427A1C4FBDC0E7E38BF4442AFC990B547E5856B304B88116E5EF98
B8366F8FD5FA4C3BC56D1EF5F2D28DB2CD69EC94D31AC97A5B86D2D98B0FA174
FF6184981C30971DCC34525F8D3B5CA3F715ECA53E8447FD370D4CA4E1B3396E
0F25EEB91A3315A08B5A21EC18AB51639CE639B844E6902D5C064718AA4F9D29
9BA6036B4E8B141BB6EBAB82FBDF58D6FBC1533C27968D972D4708E41295E463
413D80DFB40CA023A9C2418324655404194C307AFB180B2336ED897BE0F474A8
26D01BEA93204A198C073091A488BAC96191D8DD425DD5C5C48C1C04B55D6461
CAABC2A695E07E5C8F4000A69F5F45712CF06878A9CEE2BA154EC60FF16D28D8
B1ED13C55226B884C270FCA34738A30DAA4EBFF4ECECB84DDEE2709D38D88FBD
F4AD5E0F795E431FEC33A17B49C13087CE781425A037536424653FD40D9FB49F
3E00B993374914F9A952558C098066109283CA2C7B3C629144A4FB95147971BB
5633FAABCBC71C5577F4CEA21A1EF0867B50EC072228693DE37986F63FFE7BF0
0DBB1BCABADFFA08E6AC3D8AFC9C292440ABCC9DCB3AC3F6EAE61B98E4877855
5403B82E4F2AB2FAE43AA64516A2EA26E203E05EBFFE8EA83FD93A5696BA4225
763B4D922F045968C8CCEDED20C30511A8CE57D05932FF7D31A92647E0F28621
CBED144710B8FBA67323875DA15FD4E6CD9CE36C4A41B4A2A55AA31F82241720
C6D3C568E0DA3CF4C1FFBFFAC7CF04395504588615C5CBF61F93ECD2A4B55B99
EA2643363A654223FA241CF6F9AEDA8EEB693C6333C568ED3616E0E44D8C0C0A
A781B217D60684F5D26854A07E736D860BF754012F0B778415E05AD4FE810D27
2B9C679393BFBA4F1D0CF2358C00879C8F4C7EDF502680B25D9F923844D21FA4
469342C5BA12094B854FB24D0435C92EC1F13D26E223F34F4A3D9BFA68DE0C41
37610D4BA0458EEFC07CEF313CC3ECF9C62E4DF329E974D9C0A335EE27A51EB2
DC881692A87067B4541A03AE6C6402397E316682E601F245F7035C28353514F4
CC1A3752D636EE892059EC380DDCEA0D5FA5D9C4025E94C1A0EB2DCF68D0891B
A2FA1208B9F6371393EACE00BE94BE1DE4A324D6CD7DB5656BC059B12A3D5358
803630C944C74DE28C3DC1EC1FA92E5164BB6D2BA027393A0EEB9EBB43D15D70
212385C4ACFA422DE8850018C8FE0E7BABFBD4D91B8C3337DCE3DF70D71C7BEB
ECBE56B822FD9E90986B7F265AF1D56FC0F9B646F73D2471C3928F11349FC06C
C8F39144588AE5B1B8277EC046AFA1C7B7C95D7A9332429682E2262F87559A13
20D7DDB5E8DBE767E0E844F873925147A0EC71B81262997DEF1BBCBFA671AD83
2BFBA1D5D543304E765661A4A006DF3A17177499D4F10B4DFE39AC9C41074DF7
A70D9F153CB5CE450868C049247CF482248FFE6D9329A97E366C4323F4E07777
6A66496F3FE5C498BEEF685D73CD7BB412F90AA82D82DE6B4A27EC09FE2C7358
43B0959C1AE073DB7D687F39A39EF4B1413058FBD99A695CCC4D66A5F0941CD7
57E90B42A1DC2AD5C52CDF9D88C654FC09BB51BF858A5CDEA89274FF15DE8CE6
F559BB0D45643720695CEDCB46690CA7FC28405E2D9151831C8C38DB1A165138
0545F2901EE1DD3CDBC4E9AB06D9C32E842DED446F5BC224BC872822B1298C82
BCA0694E228F109AA5E3F8C4CE020C5F9080BD096D93F2AB4B11240079605C74
AB74B6BE1AAFAF78DEBF434B83F8D1C240DD334EBD13A494B10524FFBFADB41D
4821DDA39F45501522716D8A4DD6F0C769F2789D0AD44BC438B5EE65FE7085B2
B82F495305F60E05FB97508275B36DAE994651C6D50E1C6C97F66CB446FEE074
506EB875257548F0C1C59CE2B3B5081321D4CA52B8C3F23F497DCBC23AA0A470
C8C52C626EF0DE51C29124D1BBF1E43F35B39DD8A24A5920071A97300E24DA0E
87B4E2DD9BDA63C1BE840B2C8E67B88E9E915028B96E3AA1366F587D51588738
6DA844A5DCA3E94B455B521CB59F9555C1606E1A021A0EF4F9F7FD367E530E13
4329D97501E17C0ACAEFA2A2B13E7B9401B2ABABFD1DB084CDE71E4FB859D3D4
83390BE3AD8C234A2F0407469E993F8A8BE6ED2427CAA73179256D211CD3BDF6
F858A0812A56A0107F804AF15859C065765E0E13A599501BB0CC265C72F27112
0C1FED22A819318E710EF9316D387E295E1F05533432CFA8A85529DF2F0F61B3
E4A424FC28711A0D1A5C9EF639DB84D5498234F51D20FDA53182313816FBC9FF
0B2553F558FAD3449AD7BA62E81626EB683207772077EC6E69ECDA08EDF6557E
EEFC26E9BE4A20012A4FADE1BB20A9FCC34A436A2080587E39EFBA570C0D9EF9
488DB3944C9A213FB080AE42DA31D4470C1D221809FC41E3E0F1EEC99762F390
9145037BCA229D45189D9B6690699560E6D6E749F6D9B18C9819966655818579
139AA6B3FC2A715FF2D7396103B675288FDE93D80F77BC8839F04E53BE2E4F48
02540C1EC0B191175B1FF0B04D85A0BC2A20041861FE5B72FCD80FE9DC47B6B2
74FDDE7CDD2BF00C73F97CF81F02C44016DF78F9BA79CC4B6AD658F2F9F2C6DE
AB23B7FE83F919220B40E2694C4C4A392077F3DCBB27A18CDC0AE05F7153E05A
7E682E21D03F22B3979968526F76305C3D4603955206B03A826188BD738E0BF1
B73834F7E4545F534883A7428357A07FB4712D3F21F7C800047C2664C65808B2
A878C132412583BDF338FE54E3AE0A98A3989FBE959AA850A096848150EB714D
61747225B84C79CCD063BB5FBD44FC37F1CC64B70B922B157A17C87869A6C6C0
EA32425B3DB88E90E48BF68B02083A586B9579B854A87D4ADAAFCCC2471FE334
0A8FC97F6AD53B01AF9C40E7B3644B0C2B2365E5D86F27E27199731BE917ABCD
284280978CE7E9628523FDC3CBE6681F543C5331E0C65951DE2ED755C31C9F66
5F822ABB7081C1D2195C3E0173F656C1309F6CCDD6DF80DB75AB343B9C570B73
20D83C9BFA5B3C8F263213CFFAE10BAF561FC88C4BA46E3C2E0914C212FCDC79
FBB3D5E2D65CADDF77AE34277E12F2F995D79879CA37FD0F15CA485AC32005C6
917D6219B682F412293A010B656AEBF48B9513D55C178EDB75DB0A73AAB89D1A
293883C336E2BF205CAA0AAF1BC80331E2F1D04FDDD0817B5EDA59AF70FDA6FE
686CBED6D632F781B2587A835FB39F3A9FF9540F1BB5085D540224955919B8DE
D15CD8F9CB87F97A3CAB3896D0BC93F44EC4EB544C85C7346DB235A4FFA1602C
30381D705D95DFB1A63998BCCBAA18197A735CE080C673133666E6EBA8B0CC1A
D8285D5E700F5233848D1C2EE776E4CA15EDEA787B650D7695332BC4CD4E86A5
A89DDCF1299287D88930BE5F93DFA068131577EDF1512C42DF5F392DECE11D44
1A8605015EC633A61E9F7DF949E7CDBCD318DDA1D919127CCA15ABDE074C9F86
BB4257467459BDD5DA77C6BC385C1BA25018891AE44024F3AB8EBCD508860FFD
16B814F6AC5DDA23FF85C188C6051F9D215F11D6A3603F37E03C2AE99E59E7E2
BD04ADC8A49444BD9A1DDD6D499C6ED5690A89B08B1C662B1C721C9CC1439C41
2887DB03C7FCF4221DF796BC2A25EBCF8F277464074179BE66990637F1D346D1
3E1426A65CBC6E21AB0BEEE306E0D71B88D354E9A2A9F5AB0CABBDC07B7A5827
36C620EAEAEDA3CE9BCCA6E06E65B5C320997A20F9A9F0ACC24F5DF0B6175A33
8F1CE86F135EAB29C68B8DFF3F528989A4C95E763BB1050D795A73E5A9328A72
29B63856DF1155626AE680E5344444108B49268FD32AD412E2CF3023BDDC1391
AC68828AC863DB1124E0FD5F38B0C441823F0A6CE682393BA6F96C9EC4E2546A
5E1B1210ABF48544E1E4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans12-Regular
%!PS-AdobeFont-1.0: LMSans12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans12-Regular known{/LMSans12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans12-Regular)readonly def
/FamilyName(LMSans12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMSans12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-411 -308 1407 1154}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123833081E024C973A102D8F460BD9
75ADEB5A09536D6F3C9E0404C494A7531556EFD108E97E770410E56FEFC620A9
58A40E61E443EA13AB10BA1FFC9A8C5A0AE4B3A70B9DDA35CA4FAC9678E39054
2086BDBD692C89708EFFFA5F235831F7A839BBC56C877DB8F713A2D5393994A8
357B4DD54096FEC1724D57F143398862CA36F1C982DF09539CB8C9F0E7CBE7D2
13233BF5F8C425FABD2185591D3722ABE7F23FDC6700C38136752536882D7EF2
65AF1EBCE3D1D0DA11C2DBD4DE61169AD2010446EE632BF9DF6D929733846462
D10A17CDA1BF70BC1B45EF8BDF72CC5BF96901EE0E7FACDC309AD744B803E28D
170937F444782DBF1A9F10FFCA1E96428C339564080B955D616BB9A3E6C6A801
ADF0609EAF23845FC74ED07C0FD09827EA10884C9B6B900F3FC4C2DAA80823C3
52199CAB38314687E16B2402A698EF5C895BF425ED9B2499D4202D0A8D1216A4
E1187557EB50C8249AF9CC836B1B1D9B4A28CCE970EDAEB57538E662AF941CE0
53D88DB0B078DB739F022E2F92A79F2EB23F089A0E3199C3C2FAE7B93A66DB5C
F10E6763DAC5C342EFFB9104ECD0125C6E7D32D5CE68D11C2014A33EADEA70A8
03A83F22CAB36A7EE9AFD9569661D2B65FB216AB8D1FC7A52F1A471D48B5AA41
16746756E0A8DDE70884DB4D1DC78EFCC745E00B803C7496C6FFC65CAE5FF981
CF760C9E8224BB781DB61934E01B2E9197BB6702E6B1A57C454FA5DE2100267F
912D837CCD9A027E9A7B3BEEEBCC3AF72685CA319212891B6D217650738552E1
048F13CD46B6620DC526A8164D1FE7D9D20EBA6F65CF59CA7A611B1DACB00CFE
42BD5BAAF8E4C6076820DB48DEBAE7E5D36969EDD94FF0050D5F880823A40F9B
6601CF5E16B62AC684179510113589997DE43DAAF37144199ADF6D36E3DD98D5
D4B7A8437E6E7F9B01D636671DF223DB8FE2188D1505B5E82FDAF2671D468141
8E63895C1C7A4273E038B5B3B8EF260A0A35D2FE2A391274C38EAE50A6507512
690D2DD4D64276AC5E544B36BE0B51BCB83CE53A6F20F4DC5E2F347A7E54C91D
69204A83F1D46A59DF25AD24664C9D5FEAC7AF6488D173C2BD855385676D8C39
2A82F8DC836C8BB653E4C9A19210AEA6313E62E70EC9BEF8C4560812D60B1472
F6404B1AA6031C346E175A9CFFF3EF2873CFBFD2C69574A5D7DEF679902FF59E
3B86054DF5B3FDF83856591650C9E72BF8E2143D43A1481140B10252DC8E0EB4
8E2446E4AF11C73D52910F14BEF067F255C44923EA6464AC86DBC3773EB7AE9C
408E9CE5EC893F4705C65569101693F0D22636A00F432618538766332BE25A0D
74993713AB2FFA10EDEF127303002CF111DF1BCA43019F62AC6FBAD2A4F2C83E
0B909AD58E95EE807B83CF7E1E095CB10D5CD3263B03C83FC4B7BE57C6625B1A
B3426B888F236D57DB2F5A50B37FD8E60F42B30857EC5CD2FB4EFA5A8E48AB87
BA6E9E942DF5E90DCD355962158491A8FD8AD2C7F470E48D25BBB0F614F72326
C3F650CFD4308DE0425FD9EB666115759EE22D9F51DAEDF5873816653E5215E4
36CFC0C51C1DF9A1CAD2BC6E812806D30B4821F1AE91968E038A3519D4236FC4
73CE71A6377E32DF8E4EF5950273E98803BE1717D7FD9500E68B2C77DBDA49C6
C7CAF82BFEF596C524B327969A71459F9B49AEB06A762B8FB0E039B398A8725A
856FD9955EFF184CDF0D4ACE998AFE92AA7EB62E988B0D3CE71048399787217B
CF5D071A3AEC9EE2CFAD51447F0D660BF7CFF7EBC4AC5BC957AF14C2AECE5819
AB516CEE0E1C7AF3DD198DA7FF834DFA815E1F3765392D2DB2F4AB03FD01A261
24DE5DADEC1223353192A043D952F5CB93C8A1FDD997A23BECCE71AB67639EBC
8E9AE584A91278748916B90E7D89DCEE471A182A205D85B6DB655F64D923D876
DFA6452E0BAA0519CB64DDE6282787A7F448D78C3B99F7383E534EF6C936DF6E
D77EFB07C3DA6F0368792584F36B0027977D6B37B2827E64FF0CA96215E4498A
8FFC2B984B99A6CA7E077BA5CC45608100C7EEE908F27E984ADFC4099E1610A8
F1ACBC0DFE56DEF2EAF845F1C42E9EAC8E5E51949710ED727C5D7E7F3235C489
7D51AF17B9562670633526DA154F2FC6BEECF7C3DD43EEB252FCD82555908CD9
11F38C6954DA675AE9F70669113065923D7A6457012D7D59BAE248FC14B9011E
4D789FD52E782C10FBF3263FB1CAD089373B9D48292FBDEC55AE303FB7ADF8AF
A0646A4031EA627495686545D11C0E99DB92988762E6585B31D7586A3A14590F
A2407BAB1E8BB563A9C89C0F79AAA6185F2CF7FEF8C99C29BD310590E1B613AA
B89F20B39C6AD3802E41B372B91DD57238C1FE2E084D1E275AB283D865659D9A
45853C24DAE4C4384D6A6C0B4E1A3B36FA9E6A3552760C1998BB54FE1DE1ECB5
1495B569492215D28DAFF0B369FB7E14A12FB3D4E764B326718858F60B40D0CA
F340B83A047FE949BF24C35C73E75ED960797BBC187FD33134CEDB86D1A59923
04E47019BA9543F0A89C4DF01C43A24BFE5463C9619F0CE9C083EDF570C8EDF0
185B123D619284BEDF7FAE632E58059E431CD83EEA8085E3337E32DEED5C9FB4
9D201DB2ED5B28AD0CF0A7C36886429F9D70DA0C55A9A2B4CEA62AA27DA04D2D
C9F3EB1838B3E3E37097799C0E5E098F847FDDA0D4DC48817A0848201DDD7E18
4C0EA50044A2E997DB689CE85F6312A6A94F0B83CA610688293CCEB93839EB03
A684528FD6D2338146CFA3EB2CA630B01A0EF0761F13888A4306667786F6967E
0A3CC6EFBA5BE1F043F38C1E3B3CB2173152213DF026DE53C20BBEA11B7521FA
D2EA53AB06C46134B09C79B82A56592F27FC27F1D49D5FF4BBC0E16231807B97
254749D04EBC0F1106F62A30D3F714A33E4F65F77CE340AD3A923D8C7BCCBE3D
2F962C2514671FBE41774ABEF7DD9C5953ABFA381D0F9F5B279256E80137AB78
1294F18B5E7ED330B352D98EA20DAD98F7031D30544A0768AF6483293056805F
5D584C42B434EAEE621F08E02E3209022918E3011E2CF876AD6F2CAAF668D1E0
1B09FE682EE128C28E930169DBAF16CB02291747D4AE034EAC20E15E45079F16
873B5839C3823697F6197061B7E0724EBD5B2D76FEAADC98EA7FD3DA13B764CF
1DCE3D95F87F1ACFC209EA16B2A6A5D0B83978C06F051212FE8E4E330C001617
75A4F0F369ADE9F609047DB5AB1D11EF4A587E569A48CB4193904A7D2C3B7252
9D338E22402A30C823DD655DAC472358DECBF7FB5979EF5F012CAF413DABCB32
90E29A0CE86EA2ADDE6F26A46CBAD656899D01B503CDDCEEC86FC9C2BDDF196C
16595542D8F32E962D41213E6B67A4DA34531A21651E03B5EE5C4FB7CDAF903B
C5C04FD4EEE3C936A06A609F48029307D8249FEAAB72F6E1C6767884C5430CF3
79E657FF3FABB6D3F28ED73B01004891222775300DDF7F463EA60EDCE62116EC
CD472E7C1BE6B07E1C5BB164A3361765B4356C4E2C8E6ED1E1073535DA36AB23
0E3D91EDC1384F92AEFFB951482AE6821291164B14DA11FB16C0E671A6104082
94DA49D02E83697425E75CD6015C07D1AC0A3728D93B3CE879C967DC7FC302C4
D295E606E3BEB5DD0B068D657A4C5A856537C06F75BAB024B682FADA1E3A01E3
13BD1235E05FB023A6E44AEC660E02AD5C0E438F964EF1D3B08A4B47513E1F8C
DC2763558C93AC71A4C6AD7F3C99DC40C53BB0F0A68C7C49C128507F648221B9
F62D64499E6F41E0452EA291471F6AE12C9B18AE1E1328DA357F0E30D9AB91D1
F73B6AE9F49AF2051EB2FAFAA81AD2E91846D59CBAB89268B6CB0783681097AB
0CF27C1433A5B21C85C42294C5C5DA468B5307FE39917C6C2E033240C8670350
8D2380278FB9B8E125AB32F3F6B1F8FF071E03D1BB27C6A591AAF6BEBA129620
A8CD622F9B0C79E4635A10CFB39EE250AD0FEC9C672CC2DDC0033D035B1D76DC
14C0E3A5055D73EB6DF57E174B90F05D39F5763EA4D257BB4ECA6774D2B04FFA
B082F33CA61BC587A5132CA4E82F35F9DF4D9D7A31B075801F323729C9FF29E6
81FD7B0C080A5B57E37720EC786EE39776EE06BFD3C04FF933CE48AE61ED583E
1C8F4C440B5BAC980CFF66BE9DA2BD1B660010CC68949F79D88540FA56F817D5
C1B557C9C11D2D1E7D8E99CAC3C3C3AC7708061FAC0F21DE18CC23D29A563527
B6439438830C4C8235DA5F8C16BF26533B564B2A5DD9A9C13F495391EF6C45BE
6D1FB3F56C8F84A7A13CCCA4C1520D58AFA94041A69E4805ECCE506F008FE43C
D00F569C46DA4F15A736793F0C6BEED9FCD9CF230F4B05040A5F609792475E20
A46B230F55327E35FC4BACFAAF15F672ED14CFF0AD50200A157151F7625E6329
6E325E2C36D0D6AAA10FEEA3CC3D11A56D1CB957F27AE487F8CE7038159C2EC2
12D7741D517DCE40C6943373DB96EF2F40120E7CF6054D70678B01042D547F91
A3D046DE70ECC2B19CBFA85D103528A79957F00BF8849A73B9D49874E3A3AF63
84AEA13283716F280C3478C8EE4EA63876BB37A6A154348ADD815687DDB99DDA
88F1E2C5887707CD4C93907A62DF68C3DE2065A772019C474B05142993345742
272BA4AC57FFCCDB5AB2208DAECAD14F460F8E24FADFF6AD1ACC1A2DACB18A81
08B8CBCB5FDBD2B0B197153C1BE419883FF01BB562BF7A8CD1C6CD40BBB35A56
8664466A6F28FF39B59D88927CFD0276CE94CF640488B6626FBE5FCE6EDADB8A
3512329E3473F6983DF6D12824B219F996F4AAB4425E9D7C3C8193004DF6B0E2
446527C658D57C494DD907E1E6DCAE729D19A6F9ED2ED65CE2F04C2ADDE87C26
088D33E097B393724A08324ED1CE78B360E7EAA7A5C7B9BA998A3AF778BC7E1E
A555A3A3EFEA1F28DEECBA64BD825113E613717E3D948CDC7C93B089D631442F
409F848C2646EC58EC8181601B97C41B9472BD6082E327E536BD4963C6942FA5
ED9933A96CE6B476E6310B54D76C35CF2E4A42B114C565CF272B577AD0616D09
DDA2A16584C8D40E7F673FBC8F8CDF3950EDFD6CEA20D0649071442B2916EBCE
5F4D3A00818AD62A83D27A94524FB712BDC72F8DEFD25B8B70D7C07F365BB9B8
17A766BEC0F198937149ABFCBE4A67BDEA7365C463637218A766F1C1562C0AFB
78905D4A1224349EB92BEEB557DF134CA24FD48D07660C776EFF8C4D4B6B7AEE
C4DCC76F083CD0FF0CCEED920E5DC26327B3C606DFAD347BF28EE45E633D5573
BADC79D3796F440720BE08EE3F855A597B65071E7946D818327A2EA22AF26931
3CF93D62BE9F3F102122C52BBFB697ECA94867E63CC03ED3A5C17C70BBC9515D
BB6667A7B7736183FDB6FB5F3E4266B7D327312EFB770916FBA90D89A8993679
CFF2A83F7C0050DC2F5DED04CEAD7FC1C9440005EBBB793A0B71577BD408C15C
2152DC52D90BB96C4C2EED449992426730E1A4338C14F18731B6968624DC634C
B7956956787431C5F75462EEDBC507DD0FF2EC8AEE38FE96A5EE6334C12E55B2
4E5CA3AD0E78C5B63FF9941BF214B5B5AC3E4D781DE2C5A1D799C37EB4975AF1
B31505C0313797A2C62016519BEF23B160A29C67BBAF30D4EB72A67C5DB42A01
4CDBEDAD13C5F886C678E102C27F36EE9B552645B83D67BA54D4C2D3463B8201
5DDBA4372B858D2D40789EB1A68AFD88B506A966D126982A37208271A1A6C794
D2BFDFC029CAFE08AD0BD8A248953526FF8967B38478FD9A143A1D7010531EC3
868D1C4A2F5A13400556D1D07217CE900C16506F570143723FFCBF332D5EB49B
E21977146C8872ECAD4D82A933AF0CADEC15C30BBD458B7C032659C5F89187EA
9BA0F213A5209551645EF4A3399C2832F197C27808D7DC3A930D9C0E8F192EDE
4748C0BD5F348BE3BE857EE4576C8EB0C82D8E1C74333BD4CC3B52AD7577C8EB
4BCC88ACBC5A62EA1F054D8C429DA845C3E5389AECCEE733A2DFE5343CB6D3F2
45E3863774D6B474EFAD513CFE9712A378B73A598E2E26B11AD6D15487F42614
44111E1CB316702DAA740300CC2654A5692ABC4EB03896F32CE12BC890FE7866
22570A504018E479EBDB07EA3A7D588CC01789095BDF3B4570651844C3F57051
523EC8C785172FFDDED3B859563F8FEAD4BF250A8FE3F66CA4FC3BA33700B81E
87582793FE86C6A756247B7737782B74497CF608B2937568560967020310DA0D
DE283183FB057FAC50C227D23DCA95729794727ED4EA28EDD5367CC0D134374C
C5FBCC1DDEA0E7B467FEF1FDA47F843A6972A781290D136A9B5D69A31D428F46
C49406B6D6E9979556CFD400721EAC67C16221ECCD01B688F4343B283D1E9906
259C74BE3535877F54B6215D3A6955981C414EF167481A4A921BC2AF4DF19476
5FA7B8A2C25F2BFAE740EF719D1C27F71B50303BFB33BE530AF19353EADC57AD
57642E6BCAFCBF85D00F5DA5480AEE170BB118A1BB322502D578F815327B4D93
3326D9CA6F604491CBF50E1AAB4DB1875D107D8180396BA6046C28257C3F3FB0
FE3C6A0F9989C65473998758CB8376842CAE4145856413B86B4B6F63D03A8CA3
2BC46B30A03AF2EBF1516AAD7B89846E96852878792D64A7BEA283E5D8CA7017
D28C94EABA89EDA72DB06294512B2045D6C2DA0558ACF08F7C784508366CBFCD
223ECEEFF45CB2E9B62BC2763D38121FE0F961527C3BD065D70CF3B60077B6D1
29AF2ACCE51092BF2DBAF4E6124BDED04BFE6694D400A2D13141E35806D8F53E
8F34D70DF5C324DEB56100BCFDE53B3B31226325A27C50FC50685C434D4EF1B4
43907B41D1DA4F460189CA64DA2D8AC35DD10A87853A458CD34CEEF0FE8FEDE0
1A7AAD5D667300F07CB0251ADB66564D07D976715AB3D87BA81F0E2E8EA0BF22
33265A6B04D305815128532889B531170C4B10ECD0C976C7A9DF84C04787B612
DD3A2FA850EC3326710040E77E88BCAB8DF111003E63EA4E8D843817DAFD6E9D
833942F2DE1EDFED677569C646EA23E316AEE1EC29BA8D4A7B9642BAFF30E18A
42C47DD0FA1EE3521C98714EC451AB5DABDB3B5B32E6F3D5BEEB8A2D7BF5E58B
BB72495C099A1E11A76AAAEC1C8ED1C42A4C6D58F0683E9AE3BA17701AAB524D
0A8C9985149D040C2D3DD064CB1E86D5B0FD13DDB7A07895FB592B70D96E3F2E
F5D976A0689E9EA28659C1BF30B4AA716C348026B414FFFECDAB638B9DAB4D43
65B6F54027C158296377C57BA2DBE0E10AC009677247D81DE4C1C11ED538F0FB
F58F37942B3ABB615C574286277CD3EF604179CE6CC5A45A7241643523B8C6A3
BFB4B3DFDEF5363899F97A9397559CBDBB8C1EC91AC0FA666F6A4161E6593F9E
F18F45ADCEAEA2E477EFB20457C18B596A7ABC182CB4A946697340BB8721E5EF
326085016F9E506375D1E089C675FE4FA63F145C16F1812AB2F8969F9BD74705
319E03CF6E93F929FF69A8CBD1565CF3B86A0455B9121D1B79B382C13397338D
E5C961B3AA70DA22E24F5D5F7DF0EE62F44E519C647AC14E7625D8FF646D135B
F584D4963DC5B3ED1C118B40FE0E15AD22D73215F280FF2CEF63C5018A99778D
B1DD2B545FF4B9938D2EE9029BD66526CBA3365B18D8CF2E912DBEE22944E6CF
716D3B3FEC178E2FDF1B066E0025917D1BDB7E9E37AD935833B94133FD5A8805
D9A0E71EFB7075790A3A1E11482D57964C8C345D7F297AE1AC22C56018B34C28
C5C1943613DA224759862E809CA9240E0BF42374C33F5DD39F1E0CB030996BC2
F12ED81160B6A5A4468B2B2585EEEF01CD882063EAF594FC8F9F4A0FCEE7B11A
31731DE6B46EE9D1C3D61DB2A0F414AB944E0B3949BAB173449FD05F2D761B67
600B9B590952E32CFA64906B285C38647F8E221462479F248198554057B9862A
120162EE8B3F4E8DA71604E693340621FB2AC18758359E92F6E5F49819178A98
5CF7B2AB3B35E7FFCC75FE1811BD701298F763AA466B7843770F5CA2FF86846B
A1B1B2BFE36AF9E311D31CB4D124C5ADBB70994AB0353B91D6BC325ACA18621F
9F14916D8DDA0542791886B52275052894C39DAD40632EC98DABB7DA1FFACB88
ABACCB2742EF7F6773DD8865845DE5781CB4AA7B2C6A41E086DFAC2247BE094A
885352C70B1CECF3AFEE87B9ABBFC82C68A2D816A3DCD667B80FB1086D998C0F
06512FE791EB65AE23598A51E2CDF7714D94E9A898390970697E79A5F4F65FDC
310F85FADBF2F7E039F66790FA0C776B5F6027EA3FD56E6B640D8A3743852743
D2AD1EDB84A77AC0ADBE695F365835E3C5F9582E3BDEF332D469741F1ADE9006
57709B4DAD35578DD3E41C38F74C9CD426AF9CD9C35372E0A6B90A6A848CEE1E
2837245FEC25E2CDAB7E3E2BD29D6E460691CBD49F4CA39C2C5C89C3EFB53818
56F76E79BE7F42723C95CCA984D9909D73CBF0FD4C582927E6F48151E720E33C
A846C5D59265755CEF317497B20CE477C46C9CF5A2EA800482A6B9FC7D6B89CA
8103F7C53355A5E7C09E211F59083D4A7355DE49D65F468A51513C6C0C4E7C73
BD8E43A845AB9D442DBFC69A0ED01AC4044F17B810E8E46BE9689B9120EAA244
AC1D2C3E28B6F4DAFE97712E8EA0BF223325A0068F1FFA5FBFF226D3739A9150
AB31AA85EC4C4EA80C645EA6AC56160496E102C4FA87EE82799CF60EF345BF35
4AE7040D28E2027A98BF9148F4B1118179748A72DBC727F7C1E2D97BD87B20D7
35CE102C0F60A9D44BFBC683B622204AEF7778AA81055BF4B7E8C455A6398D78
56DA702CB01A0043201222A5A45EBF34945E21DB85C6976CD9C242AE6B9BBD92
FA207757BD5012E76973C9A16619D7518FDA16DB9280B9485C4867644D32D0D9
15351D2B7D4307DFE77A4B16D1848D485679E592C1AB0CB6C7120BB118A1BB32
2502D578F815327B4D933326D9C9BCE0F0786C7F4EF8C2A5A242E84CFD4DC50A
DFEA0C2AC766B9D3BF598A13257E2415596166E303FD2376DB59BF3DC2D02055
70AC830F81D359DCFAD0313003AF5B1A1C7A7DB16730051EDAFC10D2A983B5A2
CE0505CD251C5DD459A96C113F239B3FDDB442396970B2C343CA8659271D622E
4A7A73B41920BA2F51F6627DBC1F119BA6B4867859F77E4972EF4477EEB05A4A
E105D57F922B7F2B2BB5E83BC884BDAD2E7864F2E521ADC7C069C46B465ECD0D
65F4C45137F1848A3687D5BE45FEF3D084AE1B3A4C14994E68833BA0D64D1D33
C91D1D85F6DE7DD73FF355EF1ADB8628B9430467A2B760BE974AEB670A7EF502
CFB37E6B882EFEDDC7E7567F116654EF98052AFA60874BF174292909EE79FE29
4598B8493F9991DE93CAFECF773D5BED5199C717C8C05CC48AD62E125FC003D7
BFAC6730535735FB2F12E8DF9C6EF0F015C8184493FC6CD5447F35C53DF6B013
8A284A29A37284134AB99755852C1421B94EB181D2943267C158AC94F834EB78
FBA8079CCD6C29F308EF10EDC419BF3A54256E363F1E05B58EBCBB2DA424073F
982C9EC093D7F96770C73499AC0AFC3E26ABB685A7B72000C7B2DAFF6236CD77
3386E362EC7FC47766BB8045A2D75631964EA9A34813F7315679AB24938AD4C6
4BC099FB010E66C05404B4321EB4D3FCB27B4D5756428E2AE9ABB2ED239303AA
D05165D1F22B1B03033C7048A90823CE9BCAF917F4855BE88DFF74875D842C71
1D6E09587C4C0799B8DF9651B5B2A9B70EC43DD557CF42C853E4936F42086790
3CBBD57FB065E3B9EE8572086FF769550AD34A047DDF4DCAD48C79C13C76BDB9
A98BBAE6948FC4D1F6F1052FCB5BA1CBEE181912E3FD187F98241577CDBF8AA7
BB7B1925AC2931C2D35985FC76CED13AEA4AD9599669F4EACA96CB516D417B86
9F6EA4BF96CF880E9892434B9CED332AE162EEC85770D85BB679419099F0279F
6755E232669B65A7A46A6161F9AEFC342CC65477008F94133D944C5672FBBDD9
6C88817DE467096A39E6210AC25E07669C5BB03EFD1554FB8106CCC32384015B
ED56819D5A7AF7CB389BC5900C4305D9F2EE9BDF168EAB3B30CD4F93304E9E0D
B55DD4D84970F714B6D200AE32705CFBF7A12EC415F3FD1B6DCFE6A6CAB055F1
528EE862FF17A34710083C6F7294C927613D73FB1C2D25BCA2B4E479414E699B
812685A5890DC3F9512E97A2B342229925F735E97C672C57F9804BD0F195E369
BA9B877B857DA39049F5887F6C75EA22E2C1A23F52B93B79B89DE7E561195C68
53D22BF99D85992FEAD2417FD9AB8A730C0E99E1D5E76ECED3A2597A37B05784
55B6577D3098BCE77E3ACAAC49AE0FFF2957BA9610ACBFA0126C66B7EF67D7F0
788071415B1E7A6CACA81F27926269038DA257DC2063A50DEA9C8CD10A4D19EC
D6F04C9440876C1ED130F192EBD571DBDEF885B59E018381A22425C461BDFAE1
AD42E8AB26F4FB688CC3ACC6E5F8A55D547A3094786A8B0306926BEC3DB7FE51
F547AE2540B689C8AE581CE6668FB9ACCDFA2245364CCA16643841C1067EDFC2
807B3CE00CC05F6CA1D87A1C83530D89EDCEAB8C3F498D0AE331A2DEF9D4E3C0
6BC4ADF8132A0AF58175DB7A2F2DCF94A078C5ECE127ADA570D5CA0EE28C02E4
71759DE406C018F9EE020A5F6C02176DF5B8FFC6D0C7CE429D9BF87A7718A844
BBA2C252FD10651905C03D64576524BE0B1B9D79A76536DA7036198FE44F3EE6
444B6DF528FCA00A4CE5BB7C3E53EB9E4F12937694DCD6BAE7F438E85B8E1227
FBD00719732AA17F5A5AE3F9E02A54FB4BB5E0C21787CA3F7FA1A6AE0B1AA5F4
C987DD89D27FC33F11C257D6D6DFF9907A732FF8E21FC00C9CBC224D66AAF8F9
0F1242DFE702B81B3B95A6FDB1EAF5AC8A2EB991A9A70D398853D6355C337018
C53C36E479FED7E7D1445D90E3D3812EF4AAB3DDE4ED62B0E74FE29AA994343A
57474BCF49473BC0C120073E96DD4AE86F022260FCFE119FD4617303B5431392
AE9068155217146338DE3D4C65A18311D0D8FE3BD2D72E438409C48B74674163
2E040D458B5F026B67859F13BE58CC190AE494135DA16F1B90356C4C9C14D82F
6727BDB414C852C8CBC4738EFCA71AC9B1C90A59126346AB709E6836BFD11C73
D77F4E2C514BE5E06C5BB5B4F65D63FE9DE188DFEC83406B1CBB11FA4CD07930
E09F25E0781529C8E718C225960F527947EE72E320DDD93541EB69CE0F6520C8
4D910146B206F55EB11C2187F97C7B158B4E8F7E6007FD5D79D53EF7D334AD8C
B8E8A7785555FF98140F6CCD858B1A4E9FD7D26EA65B0C82EFC57F42E20CC880
EB0682B9BB414C8984D47656ED2CBC816B173B01048BE9D1E4B54ABC02E416EC
634A0AECFD4FEB93F67D42DA16B20088A5B19809A011BB3B9054ED721014A303
DE6E4EEA5A2EA61CF4AAE256929DCDFFE563DE5A22A319285634E1F092DFC497
489051F908C6577818634FCA96CCD3DBCCD0D2BF9640DFC3D0956556D6D7E350
51CB83C391EA6FD011433001ACE5040433D67C1A098D23D2AD5A142763BA71CE
104B525873C994A70B2194642BBE17421176E00F249554B7E32AE99A8D9A7C82
6C628131FDAD0DA86DEB772C3173C9084E0D97F5FB8C4A0D6A8C1F2DCBB42D21
34986ECCAF8449D92D4F1EB6697656D511EC7D3FDFB5D96D98E1D822242F70D3
9C03DB01E36C56A386F7949403628747FDD3130152F51499014ED2AA3A3E6BCD
63BDDB99AEBAF9BCE3D81E2CC477721A7B7FB7820D5EFC490F4925922419B3D6
35AACF51D5A44C841A968C8DE9FABF4359979B400C493522A4B260C55A31AA19
39D0287306183F7C8537A5FCD09950C59D0B79467CED736D9EE1FC660731E9CA
18F182EF865BE434330FD6B8572443E10B06E061DDF52FAD0AB9815F70E9FD16
8C02851FCE51F7AAC96EDC902B83D15EE853A5DFAF99239703FE05CEDB40870C
4FF92C19C3AF991B3613B4F89D2B37E93AB287AE4B9AA65B6286E982EABDE52C
010E02776FF2806EC476D1CA670A2EB9BE2D44B5BCE7AC1D74C1BD7363CB2E13
EADD443BB6E162BC772AF7B58328046D79C37033CB8C3D1A08EE2AF0A2E8B422
CDB063D8174B5AAB1B4E0FDC3A82D3C35D36AEC8EC6DB5BF5F48A62C1F238AB7
B166C4CD509A9AF2273B83C2DBFBB4EF256B7156955121EFD5D365D188736DDC
DE002E74BA03A2B15E0529E61DCAC207A7145094D285FB329D2FA4B7F5017C5C
07405A6C3A7062E15DCE1DE01C840FF89A4DBFFC31A9576E828FEBBFF9502D99
5113E1B59AA5F820C4B36393621BDF53B39234CB9BDEE09C748A3AA319551616
0CD32FCB548A161C49FD8F9AB3003C3D5A24DA865F585C0D32147CD50A0D8D22
2B9CF039B3737C81A3145CA1E66C75E2658023FA7446DF0D6CEDA2138CB70C6E
41B33B67AA651CFB16E92C7A390E1E324C159A70FA5EF93BF5BDFDC0E113AD24
75D791B43BDB158C5ECA2A116244B8D7EA49270C2A8F7D50B895A2993EB643E4
8CA097E019AB04B35B9260A7A9D8443532415C86954ADB38A38C9567765135C1
C12A374012E8703C1BC0C47A4B48860872891023CC7DD4F5E2996046854A2892
4B2CB6DAD323811A946008743118F5F985261416AC40AC78C167A0E5CE18889C
E0B44A0315084F5C57B7EA356B72A26F7C5BFB146E5B38643081A91DA1D968D7
187596D1AF192E8FE34ABCF54AFFA384D3DDD6B5376367D1DD6A2119FE27AAE6
442E5086084C35FDA23C4480CD7FA11C350DA338E4764D15851B308E56463C6C
FEDE020C96D673F463FA5C7E181BE31049D5BA334BE403FB133A38820655A160
4484D3C2AA113FEF661AC07D433FF4D5F0B747C26B417258A347FA3516D012A2
C4E078C4B37430AF88A3F85132DA00251F5A4E3AD99E45005633E7F349157850
C07ABAB3785EC358AB38BA979F052EDCB9851C35D7A31AB6EDB393CF2EE6DCDC
36670BFCB52AA9D4FD71639AD9C915281C2F4C435C4F7A972F76AF8310D38BCE
2B730B9A7A7AC1A3E0FD6FC3384E76924D0A6D9AC04531C01450286FC19405DB
16C42D1F5F66E7F073AB3678AD325FC4E08FE4C042560C3A4FAC284BD50D9DC9
B4F3007D6DCB2A974E04CDD34141696BAE8F8DE78325FDF8657327D41340F9D2
987CF9462B74259F19F9A268883ABFF42B4C55ABD3F432E2D3D9A96182E60BC6
720E97F77B4F77F75F2E2336B76A11D14A9518E4B808DAFFA265501C47B6D7C1
400C3EE6688FD5D7849B502507E4294DBA53E11A43ECB11D072C68D2131BE1C7
C43CB9D843C0CE8A2DF6DD952B33819FF58DC3B451611B1DACAC71AA4DC07A70
26EBE9E2D290B1EEDFE0322838AAD2F04AD675AE81DD5C91B731F89E0191BF23
AECED19F8E90DC45DB0235C7B7C1D182C9CFF6BF212142E5DC4AB2B15B017AEA
2735E8E862CCF28496AEC62C6D2A9117340E0078172FADA65DBF0C00EBA9A358
B189F80CAB3A5536FC910307208321C365A5104F1AEAF8EBBCD44A60F2BD3B1E
103DA708F2393AD051D68085AD21C982C71F0EDE52336EA0E0690CF237B5C9AA
6C2AE6F49B7895C1C62FBF075B80842D5A9611AD49611F2EC4AE30F411164382
E360B4E19F5065071C9BEC4CC2EF965369AB76E108E2B0DAE2A4DD41844112A8
300C7AE737DD81D4935D6E4BA842B2DA264DF7A88FC29DC6E8BF9A9AA6112330
45CF0CD5B3414419F5E85244AD0E183ECD4B097EE47C0591B39720F9E6A25F53
AB0F25FC269D3986C4167C3772DCA9225133AB7A081C813E8A6172801DF1C297
EAA26623BB4AA099247C870EB1033F07DBABC8B72E337E41A4615E8586BB328E
01894D99C4BE9E6EE4B306C97C9CCC20ABDE11FB9C157BA35862BC4E1B5025AF
C238E1E0444E5810C493EEEC7F67231BBF0215EA3369C569A0DB36BAC272451F
BA3DBE756A21FDB61E68078DE690DF3FC96DC95C657A484BF7A29EB0DCD2F4F1
0C28ADB9054F1EF53F19060E6B43DFB41FED0DAA18A96E78E95F2D64DF693B5E
51D15A9B58005BFC62628A5411221B1CE3D8837C328CB1C0322CCB731C9032F4
16801BFF29280E8DF87C63C5AF11C6F9E7D7EB54EB32197604302C9DE7574176
11B1D3136ACEC99983BEF0A714AA95EA9F1BC0888AA8940B122BFB165A5C675E
D9BF72C04CDDC0DE4A91156AA427F1B06848E8BC5F048B0811B8F3355F1BB213
E92E077EF909BE4EB77C01D27035CBB808C08E6F118B82596DCE1F65EC688E9A
64DB6CE5FCC1C5809D82445CB5F22997110F5D23A59FF98AD4585187CDFC445C
E44B1C31885A508D2B610CA73DE025BE1ADDC0F3DFBA621DBA05FE953D2FBC7B
17C910075A370A1440ED15A786E9EA7BFD9253C78FB2A765892E7989F65C97D8
D3DB27D17E0D46AD533BEEE066651BC342695398F8F36DB986C6C618AA75E527
C04ED4016B8B560C40827DC6DDB7D589B843320CB7CB1C1159054E684E676978
A12FC9B997E8E599100364D03CA46469BBEA56C64D83B3A4E0EC929AF1598D41
EFAC35507BCDECD90FBFE0E1B178DFFB185939283167A1451C795EA3428FF0D5
ACE86099E043BB19DE8A07FF884C9940EA1A747BF07A3A0A0DB23197068DEAFD
EC48042ADFD12FD6DA9BA0FFB366D19D8C69701D7E8ECBEA885694AF31D3719C
72C2FB8B8274AB54A6853DC6784398A6BB0A478BEDF018EA67683158D1B773C6
EF553EA897D5F384629E8039F14A0F012805FAA475A8655810C8F92B8D2A088A
49BF075DEB3CBC9528577E0EAF228BA967B97E800CB528E880E36926946A84CC
DC7C4DFBE4B841BF8F025595E257069A47979A1AD488627E97A5D010C7D7B9EB
1919CCEFA5DCCFA45FB5E6F5C91D33E6F388E1C1C7839B309F0421354ED4AF82
3FC9137D9E686101542A0830AC0D9A363D739AA91B44329AC890C19E0B312DB2
4894111FEA3B9E78F91554791ECEB97C06A56A945CA4A4A4DA60E9C9FCEDD11A
585524AC604119029F54CA5690679516C69324A87BCE67B45A8E0E7C9CC523FD
0C2BB3BCA04E365588B6DF5E97A6608F4FDB7EBDEA9F2F8D1000640AF2F7DAB6
C750448F7A92F72EFEC73C72EFDABDCFCCDBAEB6F4E16902630393BA4A1F3BD1
B8490BBFB1C3A0C6CF7962A86B26F3AB70A8D25526BAD00D4DAE73DB39BEE3B7
90E1D778EA2294E84A32791E5E96831F20AD8E052072B433E5041DF32C69E0D4
F050660F51649E94E2E4C0A29284FD2C9A8740851EDC442490FAE839F142D290
CD8F7AF8845CF78D4BE9C7F2E4DC00372532B7A5BA59945F0D1E677AF88B804A
02E9BA9C87712276836F4DD29D9B14C25FA8C2E8F6CDE3B28720EF13D11D12B2
81B0D37FBE4BF01A7ACD72502D81A9F7AC2A2F6C9241DE7DB9FF51AA964B0EE8
1C32D22F40D4E6D8AE494CF8272AD6D095FC64A4FA8D39B08B35641FEE00260B
500D1E3902D306BDF393ABD5FDB4FD28A6ED41D5F9A21559C307210E615B56BC
DDEB8E688933804EFBC6E426304797617B9815E5C1D06AF1859F45140A382AD6
E69933742BC03BF8D4CFF06C5B946E21D0F5A799CD011CFFE4CE538BC49DD4B8
8BC6F4D49FBFEEAB3F2E9FE6A9BCF82431E1FE33E745D31978E29ED4F37D57B6
1C96A427B9A412928EECDF403BCD3BC892094A5128E251260C8CEE49C4702019
9365941F774F8CB1F07D5498B68A580366AC13E2427FCFBDEEAAC67F14F71B45
0BC562A195E9F1CA35BCB4E6E27332E5E230434D41C9A91D2F6D8AEBCC0FD307
9EDA8D04232285A78C70D0D08155B5F74C62CB69B3F2B6CED65B8858853D8331
F371CECBC003DF54B7391950BC3BF98BB467DEDED13A24A54201197D7542BC10
E7F9CF2FDDFE83B006FE1A6D13CD8F297F9CC94D3224E75B5764B9DFAA97EA45
4B7FA5E13E7E40B950CA43B39FCFCE3085E4EBBE1887EE01FB77B3C18F8D7420
49016DBF2EBE83E22175FD33DE7F7281F28AF229119A2752AA2AD62BA6AB975E
71220D5E3D26704195108131959D62AA6D345373B58DF4002F04E2F442C635EE
313567B047C6B35C47D1DDAE0E00521E662CDC6883573E170F08928D7B75E13F
68D31203BF4FDA6F6867641456B8764D231F6E67A925C9AB89E142758EF9A41E
BB356F66B6CBDFE9D437F55F17C33AB41E835231B5058FDBAA07A27A116C80E8
37DC740E86068952F0A57B095C5C2D52F322CC455711C0147CB76F4723BB0226
4A6A3B48739C83BEDAB386C9B13FC9996591ECBE650E4D6B1B30248B5410C7C6
8DC45383A6470A21648D9F06A8359BAF6A18DC9B42E3255D9F5B6B98BE298A39
99D919618CB298D4B56B91A01E225A773224878068A9224DBC865A180BEB1725
360319CD3B6C808BB29CE0999C0817EAF613BDE7A2897E69408B6925AC50729A
5390AD55036DC8628DA7C0A7618327CF03CA722B49406D37C55A9EEA7F6FF823
03C2CC1B26C78B74DA6A52A4DE356AEE0560A5B2C02D360678126BC086FF6FFF
378E0AAA0718A30B8D06E9D5471B7A2E074D659C5B0561A34A2F1605CE97B9F9
F07E996E67B1730C0D64D471BDD24DCEA030AA03C684C1C89C0B70F7654DB9ED
F8305228BA8CC82092B06953EC634C8BD5A7A63F99C76DA23FB3E8BE62FBE7DF
36B2148573DDB07F5E27A40BBE00964DB325318C07E290980359E7E046E29182
F0F0D1F7D5055B426B1CEB2CD19CCA3E498E6672788DE2F61EF7006D89EE6E8F
2B7CD8572F94B028B708C01494CFF389FAC46B17549822D83D2978F0C710ABDD
EC6CFDBE96638BCDAB5B5C63C696FC7472C9F7D2039BD0F2D272C1A834E24BC8
CB518D7981761DE89F68F04AE0E61AFDF45FEA58F190043D1A9E8EB366AA299F
C67178BBC57EB673F38730E2C28D822E3E158A14C9BD02E00781B20C4C6894BD
CBA10A671A4C63C9D0A6A9BFAA49F87C4FC0A7241808AB8A493DA0DB3B5B32E6
F3D5BEEB8A2D7BF5E58BBB72495C099F1D6AC04066CC198989172D7838B09D7A
E5CCF00A362F172FB91CEA4DFB1C7C7682105E23A374BCA91885E7449A62DD81
CE07ADE6E6B2935B26BD94ADD389BFC649D880130B054334CBF42718BFC37FD6
202E62A4E2018D2C9204C441C636CCBE2B4B4972590BB01D053DB966B7D29AD4
2BF3C564785928E4CE7D352FBDE6EB1E09BC6C8032AB362D65C77F144A456D5A
77B0C43821F042E6D9ED30955B9E08D8BD04B6A33FE4897153F85738B8B4C883
B0C2426B358A2CD7AD380EFAC172D225FB2072E3AFC6E0AF422C91AC39A18D0B
21CEE508528C5E62F30713EFCD0C6E1D1FFE3053925EFB1C1A29059487E75AF8
2AA67D4C205294597B09384BC11B0F1096BB8B09AEC197300AC5C68153E7DC46
AC75E4031836536A9FF8FFA0FBAB6C9B5D06C1992CE930EE2913F287B3CCA268
A071C64D40EA659C24098088BEA26BF5A725FE56025D191BD82E4108FB815ED1
D54A3661DACC545C7C06D6F28A8DCDD13AEA4AD9599669F4EACA96CB516D417B
869F68F13554F89637A3099F1E6F704C5D05B3DE9003CCB8796F6141618B71D6
A0C183E57E6099B9E4192536830D9CB9E41C4099C3807A01337FA4063B870474
66804D6AAE9C380CA0AA2C44D0E1275E30BE3FD062801BEDEB1BA91843370C34
78FA5F3EF565FDCCB00039E2259431C05AE758AC6470333C22FE29D5C49223E0
E1223EDA803F464A548DB51DD56DD84D56199DB129442D4ED35DD408564E7EF4
74F381B059D2EEE887DAA334E2FDC585F1E45E61CAC2221B02EF8532A8962EF0
DB618EEEB9F1CACEBF7299500D3DE2165FCFC898D707553AA90560AA32BFC1FB
1353D8E46062A6306D7C7C3F523B2AECD6C05A0A8366D4EBC86DC9CA9C8FC97F
AD356E02CC507E81CADD7262FA3D6C4E186D6DC488FD13E33323F969C14BB298
0F7880873FE2B0C3B945FCCE0E01F764EC4EDB23202CC5618424B0FDC58C7828
5DA59DB52664C6E1AD1A4021E7D782D9901E78AA828FB9ABAC42443EFEBDA807
87A0F0A969EBA7C2C61AFE1C7FD58404CCF6E173D56F8D3D3CCECC39E2976CA3
496814414270F4A67574C6667EB5AE787380013313A6E11C75D16022627B875E
2A5A006C333DFB972F11B7020A2D36E903F851A54EFE91D6C9987BD4A34F0D4A
2C4E81DBEE2C34418B805EF51C5C3F8184C7446F17F0A3661C091D322D3FF135
7B446B13C8880EF56A23FC0EADF9D03849B9CE01575003819BBD14E39725330C
1CA0C559AD8DC9780426676724C864184A3E809E761BA76B9E0D0920C9326B49
9854BCB7C7CBCD9F998FB36512DBD85CA66FEEB463995EF7066EF0AFB220FE1A
50BD047372EDF021028D8240697E45A45DBCFD9EAC43E54B387ACA9492AEB601
D13C01F568CA8236BDEECC277C8D49A9D1BECB8C59A9F4763F2566A7A513A6C1
1F5765A1776B8D06259F68B9877CA7D618C9740E920185026700AA3854294DA6
2F57F8C0D066CBD371A4A0FF645A91B9258A37008484F27750EAEAE17A63DC63
6EE6CEA9566B528AB762B09723AC952E6D0DCB7D728719F0CEA7EEA796931623
6284A571A5A3063CAA9DD92C9048EBA35A1228DA421CAE132B0C35181C92FDD6
246567D330094B7DFC9E691906709AC46D6632950282A4CD40C3B8D91A403019
E16FE252C76C2147E8495CB3C2BF2D19E7D8E0132FCF3D02609755B814D2F9B7
D52EFDA805A84FA09055F4B9A89FB5659AF715D30803CB35BA1E03A91A608406
6D7FAEB32B64D6D37DD17C7B6C78392AA062A73365BEC7D1115ADF2DE08AF7B3
1448DFC1C98EE686B4A997C6FE528A33C4E84D465FE6FB031B48D904C5120D40
27D36EA23AE03874442F3FE5099171EB974085C36024281CD11B73A278E437FF
D71428B0D84F44171C48CF73E61764658A058E234468B01FE40756ED5627E1C0
49C42CAC123C976C6D8743F78DC7D08679C38C7E7C399B808C81A7D65C103575
63DFE6085FAD3790BCC95E85894F8359F04B3BF096B274A94FCD5719F163517F
B66E333C8B24CCA4F4B970A594F67A09C43611AC9EEAE94F2C9B4A24ED82B2F9
D5CB5D32B93F2CA8FA546DB1A5A2BF3487999E1327D0ADF92820ACC78B0793B9
F0307C776C250EFAB892DECBE1E9CF7F118F554E5688D5246D21E1C4B171298E
5E300A394A9E1DD257A096A966C527C855E5A072EEA5713D78F437DAE50160FA
C28C1C21FCF83DE763D159C51EE7A31E4510F5196DF93DC22D53B21CC59C1C95
98B25156DDF8176D929CF6922DA1704039DAFC5F90A93199BD45A3407A477D1A
7D972649F1E5AAA05725A0365D26908E23E6C11A20D3E8C9BE47403C757EDB2C
47C8FFB13F08DC13655D7241194A25388FEDA8896ED89585FF58BD0E3ACAC93C
4FFBEBC6007D613F23E810E14EFA9686AEA33CBBC14A90191909AFAEA9BDCE78
71DC58262FDA3007DA70EC6C4453AD18ACD9EBE68622562F7E2608060E2CC989
BA3E13B958C0DF5AAF91F50D9A6E3CA1094CAFCFD1AA6E87F704695C32C3FA66
07A0D7DB0B4C3E713FF2C1B9B9B53E7C2AB98E9FAE78A70296753508A06878E9
B177DF9D1711C6653A12A443D87E143EDCFA8F6F08F06BB44BD9534030A4D459
3C5356214C58108B155787439EF62CE27FB2A049346C8F1199E124CB8A788732
A709957CE23D39B600EC0B3691FDA05AF2A3FD4608C2E2C56EA5C8F822C59141
1144CE72E06B4019E62ADDCC2A5D4F1C948FD5F508EF79A6E58394BD8311F9DA
2D83EE0CC8AAC15778A233397B42D6F3E389C51E5696B0F3DD668BDF76A5F474
B850CE6400C544CDB704455AEC212BB664805A6ABBD010D85C3565B2ED2E163F
5C093F777A6B882F96B951F92E5D4E51D532F29BCDCC9EE06D59CBC90EAF9BBB
F55ECA16E6C8231463C898D5B8A110ED791CB407A7959F6668F66D3D48597A0D
1D28FD9D2762CD95B4BE8C22431014B54551378F52F29CBB2BFDE84254187F59
74B1DF0E0975D5431D458B546303CEB73239EA4B42BD9BDF1CFE6774250E0262
64EA6B1D044F85D6A1E672DD1096784ED2206D80192C2787656F69C502EADB54
5806ED3373D16487801F7A6CFE211D89E217CAF6881D65F8CB127FF9339190CD
044880D04A84C3711FA121A191239DE0D26635132611731EAC2F77F346B24EB1
28DC42D7CE97C28789CB23DBE16BEBED01CB8DE3DB9DDD2FDE4C295151BE1F1C
9C1A407E38BAF13F7EA262D27BB30312558EC7AD3692E77A34193CD294F996F1
A4A8E408604369101BD16DB8A70A7E46F92001D2C18BF465FE7C2844BF832E4D
54880BAF264A4431884239A8DE0E622021E0CFDE12AF9ED20945DD7A6C6B173D
07D5203F8C21D9CC04E187BE53F8FED4F33633BA03A3D1F9CB8EE7E0A553ED1C
167611B98529389D46C775E966EBD24101C91398605EF9467750D982CCCD4B93
7C796330535735FB2F12E8DF9C6EF0F015C8184493FC6CD235660A1170816ED4
00EFD373D263AA62AC5F6B51795D3301080ACE7A8462EA4D0A2E3CE3EDA1EC59
EE43FA58DEE5D8326E1A9D0DB17A1D921E3306AB2B2A0EAE2EF6681A050A1DFD
CC768878F88AE90E87FD781289145C5D862147EE3C628F9A334F62DF98CEC11E
91273A1462E031C8959F392DDBA187B24F6075F39DC5E1DF623E1CDA10F00AC0
1C286AE887979C2FA424A13E91220E40F11CBA7C15D695F3947BC776B062381C
25057FEA90D02F11A4C96F312E7BA4F23F9497EDE5276D2E75E43898FCEC21F5
09B2CF0F2423C2904D3139F00CACD6246FA607853A7B1D55F04D2AAD7D1332C4
08C18C647FBC4AB1C185D9D9037832AC20085EDA0954F8CE227028F10E36B814
67F992CE0AE4FA23E512640BD887EB65D2F4C5B17E298172BBF1045055F162A0
09CBF703FD54101BB80A110C2FEA10748F81DFDE2C7EF5B3C5422806EBA4D2DF
543D9736D46BF9E112781D53309A054F063DFF43BD4DC9648135C5EB0DD6004E
AB05E713C34C35EAE0B4828C6D311C890B95CC690A3E78B57B908980447EA9A4
AA17AABB95D0B41A5A86074D3095B7A1E942933FB399BA1D1DC296BAE0E9E354
60A54CA23292A902C1A2B93AC197F513B27501361CDAFC36D5786B1943A28A4A
5A91789529C5A59B07C199F94E3DA50AF9C3AA06100A7ED2E690C3B5B252295A
4CCB9D4320925AF1FEA65B17FDBBC6389FE3AF63F5DF5FA763D8FD3889D306CD
872EADAA457FCE853E384D8E084498A132A127E47EA5DEE197B62458F69B6E9F
731B075C02BABE20B60FCF888473890836421662B423C0D3B1DA66DEF7C1C437
7CFC60FB3DEBD243B2BD25723DE6E914A3F183CCE2E71222CF34B0D07E45C567
2A15ED3D21E158EDDA88CD0092634C4938793050CDFCC7D359B463996137E387
40C5DB6760F27EF31C45E92FEA03DB08FC5D9090EAB1386545156D49DA30C013
E25FEF37091723377A30F5DD2F41EF30E19785D144B9DD88BC2CB0ABC575DCB8
719981359E51845E3044180DB5BA5D3EC18EA3453197B5521333C3ECD529F393
F7A9075AEA04EBC6FA6E3E864C1CD9FC1D08AC1A4ADFEF6D072B3719FC609D79
89D0C22C7C6C2DEA7403DE02C3B15716A62629DF6DE6BDE1DA40D44230922D7B
8A9E05E59200E4DDC04356EC6CA515D68E4059226E0C6365B4BEF4E79A0A60F1
8EEA216ED74D4BD0C51B54B5C77B96DF6EFD38C498DF5E556C0FDD996FF3C961
C020CDE0F0198DA96155E68E5D4E4D5422F22A8BBEAE8EEFF2C8478FD8141228
EE027845A0D3AC7A84420398B08D2892D3EBC9577B1B1F3F7077A9C8CAB84CA9
4EADD49258C371159F0D61B7E12BDD2F042248127DD69AEAED3D98A7D157E62E
8B375B710EE1DC55A0C923CE39FA059F2DBA1E5502046DBD4BA7D013D5E78C93
2BB3B1B624B25AE6632D7842638BE4E6AE9C04FE42D0D6311772886B332D13FA
82460C04943B1A840CCA56ADD2519E9924BFC3EE5F0133FCB8C93C144FD17EAB
19192BB65781F8BE7502516932BBC41050B9FAFE993CBE3B5951B557D62C7728
7BC66402CCCDAE4770EC72BE8E392CC5B31955E1270999E600419540893DF871
E16F52290B1D22DA6A0A4C3788CA5648FD3266964847E789FA11D9907AF4D3ED
CF0267A48E640FC74EF5726A3B3C44A5BAACC01F119B7FC93523C45A98B426FD
708EF3334514C0474D77B555E4C866B5D7D2D944EBE0524AD03E77789FDAFC84
3F9B84CF64F65F5C986C9EE1AF23BA1C1CD6E1C3A76F93A2593A9C24A1CDD079
5800C3AA97EDE42EC548626C8F51C2434A063F3BA7E5B56A998E506C7E1609FF
4CF27F4ADED601DBB8CCC9397353C23423AE63D8E15573D12B77414032B63988
301D55F78BA7EC05F73F4DD9A48E3FE28152517E4E15D26A74E9BDCB2D4780B9
B415179913DC9A7A34DC1DC20860A339F9B36660806308D8540E0B12183019F6
01200E8C8E6D7527C665B9D50FD32FA1999CB88E34656ADD93070071AF67DC28
21C5A31677FBDCFE76E6FEB489B3CD8AD2C5DE776267F3CA8E1E4DD8F65C1E98
C29EE3975AA9A6D6CF9E33C062BCBBEE57B6626035C0EEDDB7439D03DE51C493
D726B0668BB9D813FC292A572B4E8A4646FF6928C2AF3D239FC55CF30CE51668
3AD817D86524132066549F95CBAF7F65ED0394CC3A3836DE8429A9619D47D459
F4F919629DA2C0DD4755BAB8D03BFF44F22EA3669A5F4C5C74DF7D2C59DF2A8D
383A09E26B44B01AF5865BF2739290BC7FFE4C557C5E7D758F37ED81B86C0359
A060DB1F9281CFB8BB836235D8E0E4F82F23552EF111946F163CC89CF70AFEF0
1258128C368983BCE2AEC95547A8E3EF7339327CE3E61D6A086379CBAC9A4A05
31505DAEAA2316FF4872F6FE68207F3A056FA639F9DAFD02A3CC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC13F154032A
A1C45D1A3DD9230A4903FE5523D6EE9BC66EF49B2617BE3C1AEBFE2BE26C3778
EE778AB577C5B9E476CBB0EF69EEE350BBEA9712CD97BB2821612964B30B01E7
B08AE39BC8B715A5C11A351E060C8ACCC73F7D8B3B33CB35844961E68842CFC3
601BD2FED84DC32546F253D218276A5D0FA4EA5B7097CF596003D3617599B54F
1906A591A51E07E62033C058BC757D174B90F05D39F5768E81C9D713F998B6BA
743C51CFA8255B90F4E82F3C619A92AECE2660BD3019B098629A171AB308C6DE
05CEF99710AF2F9E27704C61242B4B1983A5D0B134C8052495CBAA9D2860D28A
6887CEEE576D4111DBFDCFE9B3458F27264F85501EB8C86C9A1BBDF3E1C9FA6D
058BE17FE12B410940A6DFD0667DC444D6342205506A827D20B87734D27AFAA0
23B97C367CEF276C725B73F6E2282EF693BFCD7FD07158CECA1F10A5D75C8B02
FB448272CA2826E882D4FF6143BB5933AE882A540B806AB24350A792BFB5004B
54A8631F85FF8DEF675A72FA6DB3EDD6C586F5C0FC8BCC3D355A4F3C7BB8FF01
13F574C1BFA5A90471B7D471C3BDB86F519E59A0C711962F9EC04E63E90381E3
A52638877B18EC6582059C00D8FB590080B9F865D19D39B03D577C85C3A6B25C
BD5B84446144E22D8BF12DE44EC69231F93CFF3D70D84F79EE7A2B16F6E7154C
5700378C724797BE7D5EB8BF9DB860D1A3B1D4E0739E94D61AB37B6A19F959EE
20C356B2DA3ACE94E43ED42A06E762ED399892BE451C923DE1BB1F1CFF7FBC47
340BF6C117E621CFC9E65D46763364B28BD51FA22EE09D57EC86A35BBB05098A
ED54585CB5D11B12B3F992F6D9FA3E25086393D9C42E4C00AE7B6B014EAE4513
4AE34CA73B1499B395127BF2453FB7F04A266A90491625B27267DDB7191C8727
7C0193F91D9D898C2B07CE49BBD3AF7E6E68A775B21757D17CB5968A384B521E
1A0480E9DFA13A54480898D17FBDF12A3CF279047EAFEF211683EB8F6FF2306B
741C9455B48094D1E20E39F00BA99FBF0F58790DB69856591230B56C94DFB195
96012837CA40EDBAAA2ACD2B44574480A071CB1B55F16906620F859177D68F37
25A5FBD84954BCF71CFDC3C481050EA61C554759720D87D83B605BB462648765
6C1A822C24636E6FD8026C79AC276D5AFB3015FB04F216E2009FFE57F64B5AD5
DE36AA4B12A6CCA4CEF206520D6F9C1CB39FAC3A4088D4779DF1D884B39A369F
BC1755FBA3B699C299F20EFFA823A8EFDE727FB447795CA639A5C9057E97FDC7
95EE6B7C38F35424EC1C28487B7D93628E039E14526B19E4EC1737C84D84292C
1307A5CCE2837283F96D066F4EEC9D62B030D96696E6B035E3D0FA6ED6AFAF2E
7CD81AED58A5C111311744B77AEBA5674EF5FCA770729FEF0BA8F9F66D9078BA
BBFE2E4AF4652A04541535713971EC8F3766ADE0663431603335D7B80447936B
6683A17EEA450356BA244DA6594A98B9DE4976D3C70A30574215A736793F0C6B
EEF77AE26FBE72B6251FBC21FCAF911B096D89B7D1EA60049F26D5C5E4B40C94
2883C32C33A77196368CFEA87CCFE8E09E474EAB65AA88E5433DE2646280F64C
7FC24C7E431E7C0DE9FE74342AA440BA16EC2E851BD7D7E94FE37C1FEE0B6ADC
EA39AA118EDA9510E7E768C6A31BA5419B360E7507D2AE61A10931C30851DB46
594BF4D608E3C46ACB03FD405EE5CA4751FB8952C9E6425D4FA67A18F9FA1312
5D8B037CD15ED251475F05FB83958C19FE47220CE594BB6B7C714A83862D0944
AF4E56AE47C3076B863D865D83ACABA65AB50BF6DA3815B7068AA7BDE38CE6DE
CFAC838E84C783E6EC19E06DA7CD76DC2543E8BC5F92DBA192EA6B406ADC87C5
ECF0629813582057F4B7202D52E153E613DF20F445F4CB31BEBF86220EC032C2
663AEF3E9D78475D2DAD7EE799014C462BBDEEB117AAB5238FCD665837F024AF
34CA09C49B1E09E4044F8B2DE730615AEC47B8086E763C18EAA5617EA592117D
E424141F1F9D2AF99D4A8A3DEAE7A49443F9F4083B75C000F0A5932B5D7CC2B5
2D23A7C263B5A961E80D0D77D131B66704D73182F04410A11FFFF85555BCC0AA
B8BBFE5C88E15A7F10D7BA5451B1241DC4A8B6E10AA365EC5EB1D04367A1F79F
608EB2D1C39420BFA3EDA076C134C4975555659D1F3CA268F806B0EDEE827695
F6C581D5099067C0576FA0AA1B9A7B9E2F60B1BDA2BB70FA498878739431CA93
8371BE2719E23968D45D1E063F32C69E40D0F63977B44DC57D2D73A7B25D92C6
F51330440DBE02AEC0C2EB6B1A43F7270575C6C7707473437C06B83385AC9411
C3D47D893F2AFEDC6FC24969F073BEE1699F55E90CB69B74A7E9FD538C4EDF37
81D69EEA4B6603E0887ED037B1BA381D130F9E252D5E1906A2930B434E45A0C6
24255E2F2BC444234757D8894876F46A2A4BAC73AD3C0FD804C49181CD2E97AC
ABC52E9DB146BAA3A8A02B7C530BED308AC936CE2364A75F034DD192697C4EFD
4B9DCFC50A59E7B9476F2EF2991878E11F38FF36D1F1D67E0A154F2F82FCF989
9A47ABF9F7DF911BE3DB9CA9A3E19BFDA87D7C1CC51A6FE746AC8DCC6047885F
4105DAD4C60A33E46FF64199038C006B0D8740BBDC815EAA108DDFD724A5996F
B17B316FB033D5ED3452B1A4945EE57D62BA071FD8927B319094C7935972F474
E209D0560CC93063D0250513CFAADD10DDA1184D42188C17FA1426AA5F4F5EC0
409AFFB86F2ED31B536FE67B89E258E228B0C0CE4EB218B881220F18F94E02B2
2820FA6AD72DA54FDED1E9DF363286A23774C0E0E8BF793DC3D2276D5C5E989B
17A3A72248A138A3CA8622749CD7481172458363E5A5504D88A31C2EE5CF4421
803E88923A4156B71F03B1A9968E53004D5D0561510D62F881B564B672BB2063
2C49E4671C9168366BB2CA30F4D8093B35D1B2EC412E383395F9B9E7C66BCCA2
1889F0365AD04731C461CD14359427CE75FB0E2B46B3E57B2CB0B11ACA917354
CD7B5811508053C9B5914FC368A6AEFBC3FEE825B1DBCE083E5DD35010B87C93
AEFD7F4EDFAA0539291B9B8004F29F21B2A9D8EA7F0DAD21092F61C4D10B1707
A805221A03D0600F5E53BBF5F34CABA5139548EA09718566B9DE86D04C3628DA
170A83560A2465A0565E91E89D1335338DDC277E410107536034C9C7D5C18FE5
C273C0C08E671CDD80A6E1F111106F20D14D13E3848CA95BD36E5C55162E3FE2
6DA017072BBBB3CFCB08EDC07A3A78A397E95820907CD098C0051E9E8D428C91
DE71821385F0673399C8470F5287F2911E8B35E7F40E02540873E685FF3E1C15
2FD1DD1A67F5A8CAD0298E18FA9A825742411EE64288CB887455654E52ACFBC7
FE59ADF243D5AD4170B22E2178863F6428D8141AD14C9A307387C8AD0A4EF08B
B2C518CA0778BB265DF795438ECDA6041A2A52BA3E2BD761C0A535ECBEF75CED
8626AFA20246DBFF548D364077AFCCCD82CFC2F68309D4C21092A91536EC7793
1C0BAF38DF81B70BA833D92A3421988EA0A7D167ED4AE71401EE8488638D8025
E4B4AE476822CE06859CD22DD03C2E0BE0199A2169551FFA35259E85FAF04004
45FAFA1D2744FF441CB6814EBFDF5782496ADD2524166176661F6E187F7B8134
76268323EA09EF1FA4D487484584C2F7356430227146D0495CB5F6302C7BF689
BC9A13BA20AB469A24328C2718FD61DD12AEB2F205F7524BDB04A711A65B6E2F
84055F651E11ECF2251A816700DB03746AE51BC9E2F3B45CF3C4E82728E71049
46B91F8C3F67B17670D5F864D1FF357DB06E32E1C8601E02D98EB0220D6F8F82
727E36172D212BFDAE8F6A4844A683E10AEFCA2BFD60B06F2DA1F451D3D8C5F8
A069DF469177524ABEADF4C03633A05806DE76CB92EF93FE83F46FC83EA55689
DF418DF2882D5DA555C6A831A9821624A420320B45EAA8E7D305ACCE79E0A807
29DA7693BF364A4E8DC80DEB9A7AD2B328153B21B81883962192F7C83F1A81CB
E6414249A001344090E2AD127CA19EC34C55B240929D21CA5A7FC68242A4F444
E3818EEE8F7DA3EC10182D8DB99454AEF0AD00BBF27A4BFCDAB821B1302795F1
4B7913DAB3AA301580CA1F9389D3E9EE5F3F01FEB4197411C6C5FB7DC2598707
F190EAAABED9E04F9382B459671F628AE506C35FFD8B4FC836C4924CC89A3E63
980DBDD45DE6C8EA63B689B3238F2E2280B0C5A781E3B9094CA519C9E8B24E18
487A737F5F96413EFABC51DCCE51FDE3A2543F979E53BCD775A3293189784AC8
218ED43C956761169D9D3F4E0F6220F6063DD3A44072F1D24EEBD0E9D5EDA22C
31E1C6EF6591D09F5D7A2B063824722B3A494B244EEE4B7EC79E0A4FAE7578A8
9FD9F68939B28C0A8D519A643532D83D66BA937077A733EFB93F057E5968169D
B441F1C42E9EAC8E5E51142F3293BAA5B80F8268AF5AF225E25644064E169344
F16D6E357BD5291B9617F305CDE3E744390EDBD1CC4F312D1ABC979018C253D3
71F052844D9A5F91C78D9747EDADD940B62166FB7CBFD0A9025C3F1D660EB7B9
78F637C428579113EAE379D2B1679DD64D65594D5BB7305F7BE45CC423A5814D
24948EC82F9B75285184D89B024D3CF197E493E02B1C4343025317D36F6A40C8
7F3ED051565C245CC31260DE4E702E5D6E77411F5BC9167F560F297B67487F42
DEF28B38AE222BA5660CAB3D7C4C7ED062309A02D487FF6ADDCFF26D7B493278
71EA80F3B96D2DB436F876BEE0003029355525526216171D5E9A5776D01CF9A0
FE5BA493E0F039D10EFDE31D8A424F764F13268A231C3198A8A93CB88864338C
F2CA1216B1408212BD9BD84874B43A3D1C2B9656E654596F8369028CCB95F054
32204FE04146BB13066C19ABFA42ABB6BDCA12EBFFD4B8093177ECE2C947C113
AE197DF98C40DCB82C0443BC3C57E7E195CBDAC59C6559D46AA9AAEA9308CF94
91B63E42B412C38921E5CF8C26A2BA2299074E853FEF2F7A3D2E124CF0D7A20B
A693AB9974D370366117F1DE8D851C9629B978FAE714DD5F211191AB0B4CC7E8
D6A35D0978E3A69B2CEC74F776C547E4E3B21DAAF39BED0D05B30EE9E88EB8A4
E19DF2A8D6F909AFA2A828E97022EBBA5C743CA53E882810302448C4BA6D1134
3AD3B5ADE9DB717A5622311128C82893DDF4A4CB08F6D98688183FD9E2B027C9
566489BCC94AE5888A7A4FD9AA2E6BB97750E25A8ECC95247D56ED5E8BFB978F
DB99BE3015B3C4D8A0DB84483C0FDEAAD2E3120A0E23493AC52D898E171D2781
66A4083D34431B0A08C98B169C29C7815E985BF2BACB80215E50267EFDC5B95B
D1274D46D239F911FC0DD9D54BAC747CA0E41C10D021B8376F34BCDC63096A6A
302E6A4C7426584812D88EC50D603B6D218F9741A9D0BC2BBB60C369C4183F65
49BFC59A1F36166742B62B8333A1B484668A139C7357D1E671E62ADC8FDEAF15
8B62BB6FAC9FCBF05F2E6E93FDFBBB4F507FADCC056E24D889F83EF1AADD855C
9CABD5BCF75043C536D112E785B55521D97A6240A9557391484276F12360DB67
B9015CF2AFA80BF8A43D6F3310C7D2A0F703C8D32A1E0BA16C61458B6C93A160
2F5EFB8315D88D8AE98E2882439FD744C3C3AD4D9C843EBFD391FA2E8C705B41
11AF3E5B9F029FE21C39C9777C95230979D99132FD2A7AD488B4258D77999377
D092F851907CD5B12437B8331C464C0A6E06AA6AA8809A3E23FF4FC154D34DD2
F84FD919E311B6ADE903B47245CEDFB38717C0D90AB406A2F62CD9027E5A7B4D
1108B2B745459A36D8F643413CD4B4125AEE2C4A30C933C060D8EAC571147637
3596FD03E57B1CA8E39FA995C4CA6D82B9FB181DBCF8B1F5AA92379424BCF1D8
FD899BB0639487E3C56D4978D17EEB2C720C85A83E32331660740D05DF733587
6F57D22AE2797EFE0990B7BB874D25139EC88671715A436DD4EFBFD0DD181896
5337B8CE9F6B90AAED797FE8C30572AD06D66F8A5BCC988C5CFBCAA4D3B87D29
081E15818E9335C70D93850F9073E30FACA807C5A385AEAE24E4C5005CE8A280
DD6F01F240D0F678E9B4E179DE22B2B0BE63B115BF870CA06841F1183D0529A4
66C6A314F88ACF586586654038EC562FB8C340A7A231DE2D0658B16CE0B77700
680D76C4999A7EB3FB9C5287C3764AE154657F8F56BE5DD221F4E05D8C864F9D
D3E99FF86035AD76EB71799DADD1A6BE6D49998860482B626C62849BB7026E9D
3068A6431ED97A4122FC32E50F7440F4CB92C6C9CE24D66DF5DBE2E04E256278
38C93E0ABC541424D3C32FD3EC6A3ECE8816AA5C60500DA5759D88CA15505B21
2389354F9F6F408CAE1E41803749A8A0F7D3AEA7D849482763C7D6E78D608A91
27F1AE3549397805241D1CC2A53CF3E5E9B4F02C682FAB8EF8CF034D3EA18109
0A584472E37FA6AB06A98D112379480F86E78AD80FD15F6DE81F942C3F0980C2
73F1D335DC79591719102119E9410FE8116E5F5C2F25A54FE587E55C037EDF4C
9BC1D95FD7BB389F1A8CAFA41289633BA01D275A4878C535AA8703244230B982
6E6322C4D6231EFE10719E907FECF478F486941CF1293E86EE719C9BAB626347
0C7009C3933DA18D164923D82797A31C3E4B34CC68F40F0C4D87AA91FD55F68E
3EF9BDE4FC610FCA4F49F83BD3AA7B7EB22F3337CE5E8509017722958A9414B5
53E6F77A08AE9F90684AC640F3FC2764F52DC679F79C6E949A88E1B96A058572
76BAD62B027FDFAAF9E4E70DCCBB695F0B2E8147064491D7B02919007DA6DDDD
57C8D7AD298F656C2A568C880734B9EF3EE53F5EB857A8653C10EC34E95F4AF4
E42FF483CBFBE529FF087715BABB97F62E89B545CC8CE86130886086AA673054
B6DEAF2AEE154412BC3DE79FDD0B1957AF4D47FA9ACB155418D258EB50DB956C
8CAEFE1A896705FCFD536B086546EC242AD81878AC951F6316D7652489B6F841
AE9D0E81B9E23B2562BF5A3BF78EE9C293F3698F50F3F580A8430967232D797D
025AC434DA295A85D3A5D048428897E3014E09A59FBF432F3CF0FC61515AC38D
05409D1BC06FD143DB8D98F1F507FEC112903F981911869FE147CC290F532B47
991A3DD2D575BCB61A9AB412475580FD1326BD501D119DBED7B45C07E1050B47
A97D7DE7A5A8ED291B075A751EC5EF2504C25A91004807C6294C77AEB658E18D
0E9E2EB57D6A2EA692F83BAD8CD89A2E4B15780303EFD10F5AEF6AC56AF7B043
9108D57DC50AC6882EA10C646F4457BFC547B7CAFFD75EBC2AB9D8102D087025
C8292CA7B8BA349BA9A26CD6DC3C5C06A6E50E8FC5EB642FFFE008E09A7EFB70
B5EEFC6E40382CCD60E1EC5FC592B08E8536427754A3077D02D5607A17C91355
A5F9EF4BA1D1BCC907868E8C5D2BC4D8FABE7F9BDFAD0A3389A54D5D5DAE1A0F
430EA0BCF7C05A89281F244EE05E802CFB258373B5A2A1E7B6710F45889AE7FF
20368AF5692E656D14F5D4226DDB8F47B8CA655572B77001C1AF4FB07DE99AEC
34404E23E0923BA518316BBC74351D2E1CFFB4A9E444D44D78E21ABC47026D05
78B79173B2B324C4A966DF447ECF82D3C3801369F9C199DFF5C7D63A88436E28
8E0B7CA284D2D531FB6A1716C09D2AD5F2CDAF5B9719E7E9919C1046B392FB50
EEC4EA3F89CBC261EA1509BF7346DBF2D602287F883994DAF914AE672BF268D5
3A04DFC92105673EB1AFD7B397675F0AE0C572AED7A8E0324BD78459891A8756
0D800072B8871725B5FBBC727198FC0DC0D86FC8E7FA54921223C8CF29FD2DB2
80F1341E01C4391BC8232E19F97D86571F0BC7EFCA1FCBEF057DEFE3EBE16306
257A1445D161F3BC9C525A93083CACEA2ADC582E6DA60B2E034B49E0316AFB93
873AAF18CD88838A848347AF9C0F63D7A256A9FE1C50296BECC0680D942614BF
93140B45AC1B026FC8E3A0DCAE4EDF2851124BAC5F6BF25423C4B6A54B264E87
B723A5E730AE4F10A99F79C8B80EC514976A747B28292D8067DD94FF175C0D94
62A605B422385AE8C36692D3067DC940EC39004E9F0ACD26A771CEF015515768
DEA3D10FAFC5F2A41E1070870F50E2CF8CC0504E85E9A0DD5385065429C88CD7
B519760E276DD6319BD88BA707BAFAE4613DBE99D3D063385E8696C79F6B2489
8B3165B329848ACD41DD220B52B3C2EB837556B30AF0B2D7D3CED317CBF5BA83
FC6D900C4A52472896B14A16A4871D52137F548F10AF271A2E287E53E6A68689
3151973EA9BDE8FBD9F7783F16F93CFE592B4D93403E65A25A75E5A98CABAD99
78D951090105477FF126E86C2088BBBB3979ABC74BCB2EEC216A0DB301A27CBE
9FCF30841C4F435436BDA99A04C612727B0F3C8D71991E22A7762D843208EA00
EB16CA3BE03DF26BAB5549AFBA5317F320F8BDF597EAB7D3C0E2B50014F66170
5EF2C6783A65631952D5CACBC8BF7AE41067CEF713EA46314C891407C7C14251
A313DC0956496A96EB8A0C74F8FCDAE5FE419AB094E27B8F7F9A19B5F23ADC16
5098BFB4D5EA4E78760F8A25C6094C7FA8B62B528A59B3B34456D058E1ADF682
48D0A6C761C6E9F398EED43BC2163AB6B9B20010A9EC31E1EBBB7A806D5F3CBE
88FD75DEEE03A6B9AE1AE673AE3721D4ED0392FDE404911B2994EAEBA41E4F73
C059CFDE3721FA1B2A24F605B70A39C66AA5A43F48C23F08859F9D4F79AD4DC3
3C4C76659A653CB1558D14A563B64CCFB5D32A55C2FCF1DA65083CCB474E9F64
D8F99FAC5E82A512D027A66CDD106EAC27B4B301AC7CAE60A94EE124101C9CCE
5C54E6AB461F58D9390236DA413E6D7659F7D84597813143C6CC1E52DADFBA93
972BC7092CDB1D3F54FA6F320419A899C877A1F71CF5571F982C350C62505B00
BE7138CD715307EDBDCB3B2BC345CD391971BED481B3C9CD4EF1921E90B94D91
7801BB7BB34ACEF12F80F2FD57123A3EBD32805F36A8D1E80EF5DFD677B9CDBB
078F7CCD2A6845D3587E999DB5FA21D4214D504377CE634BBFA5908063C5B000
3E8E8E22F63F6BAF146A3F001B15EF01EBCA3FA1A2A6C9F796B809F9B038E1A4
4D5B0500AFDE149101F88B511FF8380BD2290E069326849C82B59CA31A1E6E1C
DB28F21EB5988AE71B8CB26995C005198D116046DA6B089E3F021E029C8AD004
7EAA4CD433D12A603BCC7DD7B5F10B0D9ECF2BAF91D99D13F1AE6A63FF24FDDF
CF7D35A0A6691BB4CC99D401332ABCFF65917579CF4F427C22EE5F549D24BE65
851517E5D40691848C43DC9560E46B1F6D063D08E6DF1586914583E1AAF9A724
0227C10D5C2E82E888FCE5BAB7D6E2EE1741E68955DB1E5EFC39D937ED8FD643
7400C514195E5C6EC155A1FCE5F6932C48632A686F5554E3EA810D24867D722B
91725244DD314ED1A4380981B8205C3044C518950BA34375530881
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (thesis.dvi)
@start /Fa 29[46 72[56 24[68 5[37 44 1[60 42 49 30 37
38 42 46 46 51 74 23 1[28 28 46 42 28 42 46 42 42 46
7[68 2[68 1[65 51 2[62 70 68 82 57 1[48 35 1[70 59 62
69 65 64 68 6[28 46 46 46 1[46 3[46 2[28 33 3[37 37 28
17[46 21[{ enclmec ReEncodeFont }57 90.9091 /LMRoman10-Italic
rf /Fb 134[59 1[81 59 62 44 44 46 1[62 56 62 93 31 2[31
62 56 34 51 62 50 62 54 42[56 56 56 56 56 56 2[31 46[{
 enclmec ReEncodeFont }28 99.6264 /LMRoman12-Bold rf
/Fc 212[55 43[{ enclmrm ReEncodeFont }1 66.4176 /LMRoman8-Regular
rf /Fd 133[34 41 1[55 41 43 30 30 30 1[43 38 43 64 21
2[21 43 38 23 34 43 34 43 38 3[21 1[21 6[55 1[57 5[48
5[50 12[38 1[38 3[38 2[38 1[21 1[21 9[29 5[43 28[{
 enclmec ReEncodeFont }36 74.7198 /LMRoman9-Regular rf
/Fe 206[30 49[{ enclmec ReEncodeFont }1 49.8132 /LMRoman6-Regular
rf /Ff 206[35 49[{ enclmec ReEncodeFont }1 66.4176 /LMRoman8-Regular
rf /Fg 240[45 15[{ enclmmathsy ReEncodeFont }1 90.9091
/LMMathSymbols10-Regular rf /Fh 133[60 71 71 97 71 75
52 53 55 1[75 67 75 112 37 71 1[37 75 67 41 61 75 60
75 65 19[128 13[64 7[67 67 67 67 67 67 67 1[67 37 4[52
52 40[{ enclmec ReEncodeFont }37 119.552 /LMRoman12-Bold
rf /Fi 201[95 95 95 95 95 95 49[{ enclmec ReEncodeFont }6
206.559 /LMRoman17-Regular rf /Fj 171[96 1[98 1[90 7[99
2[90 1[96 1[99 65[{ enclmec ReEncodeFont }7 143.462 /LMRoman17-Regular
rf /Fk 133[46 55 55 76 55 58 41 41 43 1[58 52 58 87 29
55 1[29 58 52 32 48 58 46 58 51 12[73 58 5[99 63 82 1[40
2[66 2[76 74 79 7[52 1[52 52 52 52 52 52 52 1[52 17[58
7[52 21[{ enclmec ReEncodeFont }45 90.9091 /LMRoman10-Bold
rf /Fl 45 2[51 23[45 1[45 30[68 6[51 5[51 17[51 6[33
76 8[51 18[68 1[51 3[40 48 48 66 48 51 35 36 36 48 51
45 51 76 25 48 28 25 51 45 28 40 51 40 51 45 1[68 1[25
1[25 56 68 1[93 68 68 66 51 67 71 62 71 68 83 57 71 47
33 68 71 59 62 69 66 64 68 71 43 71 71 1[25 25 45 45
45 45 45 45 45 45 45 45 45 25 30 25 2[35 35 25 71 76
2[34 25 2[76 51 51 53 5[45 21[{ enclmec ReEncodeFont }99
90.9091 /LMRoman10-Regular rf /Fm 138[48 24 43 29 2[48
48 72 19 2[19 3[48 48 2[48 13[58 2[58 9[53 4[58 65[{
 TeXBase1Encoding ReEncodeFont }16 86.3632 /NimbusSanL-Regu
rf /Fn 27[113 105[103 123 123 168 1[129 90 92 95 1[129
116 129 194 65 123 1[65 129 116 71 106 129 103 129 113
10[175 1[162 129 5[220 140 182 1[87 2[146 153 178 168
165 175 17[116 17[129 29[{ enclmec ReEncodeFont }39 206.559
/LMRoman12-Bold rf /Fo 139[17 30 115[{ TeXBase1Encoding ReEncodeFont }2
60.7301 /NimbusSanL-Regu rf /Fp 27[43 105[39 2[61 41
46 32 34 30 1[46 1[46 1[21 2[21 46 2[40 1[40 1[43 9[84
1[61 61 8[62 9[59 8[45 2[45 45 45 1[45 45 1[25 30 1[70
43[{ enclmec ReEncodeFont }30 91.3242 /LMSans12-Regular
rf /Fq 3[48 23[48 106[43 1[63 43 48 24 43 29 2[48 48
72 19 43 1[19 48 48 24 48 48 43 1[48 9[82 58 63 53 58
2[58 2[72 2[43 24 2[53 3[58 58 6[24 7[48 48 48 1[24 1[24
44[{ TeXBase1Encoding ReEncodeFont }40 86.7577 /NimbusSanL-Regu
rf /Fr 138[67 37 61 43 1[67 67 67 98 31 61 1[31 1[67
37 61 67 61 1[61 10[74 2[74 2[74 2[92 3[31 2[67 2[80
67[{ TeXBase1Encoding ReEncodeFont }24 110.419 /NimbusSanL-Bold
rf /Fs 141[52 2[82 82 1[37 2[37 82 1[45 75 1[75 1[75
13[89 16[97 66[{ TeXBase1Encoding ReEncodeFont }12 134.08
/NimbusSanL-Bold rf /Ft 133[47 47 2[47 53 26 47 32 53
53 53 53 79 21 47 1[21 53 53 26 53 53 47 53 53 13[63
68 3[68 79 5[74 1[63 14[53 53 53 53 53 53 53 45[47 2[{
 TeXBase1Encoding ReEncodeFont }37 94.6448 /NimbusSanL-Regu
rf /Fu 171[82 89 97 2[104 2[75 2[37 97 2[89 1[97 89 89
25[30 39[{ TeXBase1Encoding ReEncodeFont }12 134.08 /NimbusSanL-Regu
rf /Fv 138[96 53 88 61 1[96 96 96 1[44 2[44 96 1[53 88
96 1[96 88 11[114 96 105 3[123 13[114 65[{
 TeXBase1Encoding ReEncodeFont }20 157.741 /NimbusSanL-Bold
rf /Fw 139[79 132 92 2[145 2[66 2[66 145 1[79 132 145
1[145 13[145 18[171 65[{ TeXBase1Encoding ReEncodeFont }13
236.612 /NimbusSanL-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -41 -890
a
SDict begin H.S end
 -41 -890 a -41 -890 a
SDict begin H.R end
 -41 -890 a -41 -890 a
SDict begin [/View [/XYZ H.V]/Dest (page.i) cvn /DEST pdfmark end
 -41 -890
a Black -249 25 a @beginspecial 0 @llx 0 @lly 511 @urx
47 @ury 5110 @rwi @setspecial
%%BeginDocument: graphics/TU_INF_header.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: dokumentenkopf__klein.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: gilani
%%CreationDate: 2/1/10
%%BoundingBox: 0 0 511 47
%%HiResBoundingBox: 0 0 510.2359 46.3003
%%CropBox: 0 0 510.2359 46.3003
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 128 12 8
%%BeginData: 3916 Hex Bytes

%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFCABB8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB093CAFFA7B08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C
%8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8C
%B08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C
%8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8C
%B08C8C8CB08C8C8CB08C8C8CB08C8C8CB08CCABB8CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB5A0CAC9C9C3CAC9C9C3CAC9C9C3CAC9C9C3CAC9C9
%C3CAC9C9C3CAC9C9C3CAC9C9C3CAC9C9C3CAC9C9C3CAC9CAA0B0938C8C8C
%8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C
%8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C
%8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8CB5CAFD2DFFA8B5B08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB0CAFD2FFFC38C8C8CB08C8C8CB08C8C8CB08C
%8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8C
%B08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C
%8C8CB08C8C92FD31FFB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CBBFD31
%FF8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C
%8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C
%8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D93FD31FFB58CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CBCFD31FF99B08C8C8CB08C8C8CB08C8C8CB08C
%8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8C
%B08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C
%8C8CB0C3FD32FF93B08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08C
%B08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08C
%B08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB09AFD34FFA0BC99
%BB99BC99BB99BC99BB99BC99BB99BC99BB99BC99BB99BC99BB99BC99BB99
%BC99BB99BC99BB99BC99BB99BC99BB99BC99BB99BC99BB99BC99BB99BC99
%BB99BC99BB99BC99BB99BCA1FD32FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Magenta Yellow
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-02-01T15:17:02+01:00</xap:CreateDate>
         <xap:ModifyDate>2010-02-01T15:17:02+01:00</xap:ModifyDate>
         <xap:MetadataDate>2010-02-01T15:17:02+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>24</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAGAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AIPzF/MrXfN2s3Mkl1JHp&#xA;Cuy2NgjFYliBIVmUU5Ow3JP6s0mTIZmy+xdkdj4tJjAAHifxS63+phuQdy7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FVSCCa4njggjaWeZhHFEgLMzsaKqgbkk9MWMpCIJJoB63o3/ONHnK&#xA;8s1n1C8tdNlcVFsxaWRf9coOAPyY5kjSZCOjyWo9sdNCVQjKY7+Q+3dH/wDQrmvf9Xy1/wCRUmH8&#xA;nPy/HwaP9GuL/U5fMO/6Fc17/q+Wv/IqTH8nPy/HwX/Rri/1OXzDv+hXNe/6vlr/AMipMfyc/L8f&#xA;Bf8ARri/1OXzDv8AoVzXv+r5a/8AIqTH8nPy/HwX/Rri/wBTl8w7/oVzXv8Aq+Wv/IqTH8nPy/Hw&#xA;X/Rri/1OXzDv+hXNe/6vlr/yKkx/Jz8vx8F/0a4v9Tl8w7/oVzXv+r5a/wDIqTH8nPy/HwX/AEa4&#xA;v9Tl8w7/AKFc17/q+Wv/ACKkx/Jz8vx8F/0a4v8AU5fMO/6Fc17/AKvlr/yKkx/Jz8vx8F/0a4v9&#xA;Tl8w7/oVzXv+r5a/8ipMfyc/L8fBf9GuL/U5fMIjTvKn5i/lLewauLtdT8qiRU1aCB34pE7BWkaF&#xA;wOJXlUMtffbBwTwni6eX4+TXm12j7VicfDwZ69JNbnuv9B+DwnMZ7p2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV6P/zj9ZW91+Zli0yh/q0M88QO4DiMqD9HKo98u04vIPx0ec9qshjo&#xA;pV1IH2vrPNw+TuxV2KuxV2KuxV2KuxV2KuxV2KqN5aW95aT2dygkt7iNopoz0ZHBVh9IORlESFHq&#xA;zx5DCQlHmDb5W/Mr8m/M+ha7czaVp8+oaJcSNLay2sbStErGvpSIgLKVrQGlD+A1OXBKB8n1Psf2&#xA;hwZ8QGSQhkAo2avzFsM/wd5u/wCrHqH/AEizf805VRdz/KGn/wBUh/ph+t3+DvN3/Vj1D/pFm/5p&#xA;xor/AChp/wDVIf6Yfrd/g7zd/wBWPUP+kWb/AJpxor/KGn/1SH+mH63f4O83f9WPUP8ApFm/5pxo&#xA;r/KGn/1SH+mH63f4O83f9WPUP+kWb/mnGiv8oaf/AFSH+mH63f4O83f9WPUP+kWb/mnGiv8AKGn/&#xA;ANUh/ph+t3+DvN3/AFY9Q/6RZv8AmnGiv8oaf/VIf6Yfrd/g7zd/1Y9Q/wCkWb/mnGiv8oaf/VIf&#xA;6Yfrd/g7zd/1Y9Q/6RZv+acaK/yhp/8AVIf6Yfrd/g7zd/1Y9Q/6RZv+acaK/wAoaf8A1SH+mH63&#xA;f4O83f8AVj1D/pFm/wCacaK/yhp/9Uh/ph+t3+DvN3/Vj1D/AKRZv+acaK/yhp/9Uh/ph+t3+DvN&#xA;3/Vj1D/pFm/5pxor/KGn/wBUh/ph+t3+DvN3/Vj1D/pFm/5pxor/AChp/wDVIf6Yfrd/g7zd/wBW&#xA;PUP+kWb/AJpxor/KGn/1SH+mH63f4O83f9WPUP8ApFm/5pxor/KGn/1SH+mH63f4O83f9WPUP+kW&#xA;b/mnGiv8oaf/AFSH+mH62x5M84MQq6FqBJ2AFrPUn/gMeEqe0NP/AKpD/TD9b3n8gvyt1fy/Lc+Y&#xA;tdgNreXEX1eys3/vEjZgzvIP2S3EADr1rmdpMJB4i8H7U9t49QBhxHiiDZPS+gD2jM94x2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2Kv//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:BA943AD6D010DF1193A8FC7EE701FED7</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:BB943AD6D010DF1193A8FC7EE701FED7</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:B9943AD6D010DF1193A8FC7EE701FED7</stRef:instanceID>
            <stRef:documentID>uuid:B8943AD6D010DF1193A8FC7EE701FED7</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>210.000145</stDim:w>
            <stDim:h>297.000089</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Standard-Farbfeldgruppe</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -46.3003 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 46.3003 li
510.236 46.3003 li
510.236 0 li
cp
clp
[1 0 0 1 0 0 ]ct
510.236 20.9063 mo
510.236 17.0083 li
510.236 17.0083 510.236 0 493.228 0 cv
17.0083 0 li
17.0083 0 0 0 0 17.0083 cv
0 29.292 li
0 29.292 0 46.3003 17.0083 46.3003 cv
296.693 46.3003 li
296.882 46.3003 li
313.353 46.3003 313.695 30.3359 313.702 29.3281 cv
313.702 29.292 li
313.702 29.2891 313.702 29.2783 313.702 29.2783 cv
313.702 25.312 li
313.711 8.31836 330.708 8.56396 330.708 8.56396 cv
493.937 8.56396 li
505.096 8.56396 508.917 15.8701 510.236 20.9063 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 13.0
%%AI8_CreatorVersion: 13.0.2
%%For: (gilani) ()
%%Title: (dokumentenkopf__klein.eps)
%%CreationDate: 2/1/10 3:17 PM
%AI9_DataStream
%Gb"07f6TKgp*_mR^cR'`9SP$;1+!dhJADGKEPdA1A"p#sHhY66:NN,d>g;+)`C?OVPmD`JpO)SuY;)8@>11jAdZWtjr-GgjcW8Nm
%qHlg0,\i<-A)L/,)CNE<]=ftHU00o"Il%a2^j>uf3!:a%rJ=o%^(Kp+_P%*WXgfG>QLnqHAC_uoAIIhCRUME2qHsXO%]hg>Yuq$?
%Z01O!I;63`WAV"%Con".!M>LjIXX4[N$!5d+jD:7iD:@T%eW[T*>UJp[%d$an_IrefT#.X@PFOsG=tcV_Lbl3I;dNf/a,9H:4eK@
%lFj4);rB,!TC]0F?s+CiKUL;i%i9,q9eSG`_3RPX%jp<8Lc$.tr1S?ZWqa]d#GXS-agdrO`Il_qiD5-E+_r>=K+@sJJg'n7NpDUZ
%UApV.ImOj/Auk<frPkULc:/XF3G.$7r>Q/-P)/mcZ)BN$-N3H;/puA)BVr,)D=K#qG7"1jI6FGDT\i'Le7&D46(n6KnInu;&""fZ
%"V\UVm'a7n.VXkU>S3?]g>FWQ&HO^HoW#TR7\07,U2arm')'?h?2ulNTnnsZ@L6f]TE%:ZF;<cMOU*4hgP)cF2Yb:%@#g[`ef)bK
%3a3o@Y/U6KAi:E;1)@7:nH\?m5;)ar_>fS.#tDS`dOVKTJ@#Z+YoSGcf39(Wq\rAdC+obR,(lOocoC5]Sd)kV%^q"c23]5YedD@/
%C]:Lh,VT;t$\dMO1^ZG\$2@XOn4uCppbrn=V4eGO%>AaM7DZJ'>L=k#'og(;d3u(2NP\lH-q3ZC-5*OX+p%!T^d%U;+ouI*'!N/L
%#!ZOu635Xe']>I7!\>c7?lb,VV%aZ(_RCs$Q;\KH#PT)0(\\/%`22rt^-!+8f\n3Z"iga1@4aGcI\aI^NX1*N3cILV'98R&"F_/I
%$%B`uE('1/[Y41(>D=AST5`TT074,I"CYbU@ed/C*#JO+FXRS\j6$[@*9.lG&Ru,ri]$DKEURo)ESiHlfQ2M%p_roLX9HWL5@I30
%#4\X3)4iSX(Y42uj(B3="htGc#=%0#3''2%n.YO95(T?1(*"Fo`3Y9!"QL67LCe_LJ3E)[LS$BX5E'_e$fd5e$Q_=r4mY2s(P[iP
%k3!-(i;^VSE-+3R_U63/nYgFV*$>*3[4m$HnR7sGGMspN"%R"/o9@Mk%`TKCJ>o$9@@gMEC4e[iP_*V#k6l`61#?p=0\.s`N&TC1
%IRa+;iP*354ET@>INOp:J%4[/1GLcI3QJYG/PtXQVI,J?nN.LJc`JC(nTY[\+&b*opEKRP[m_4p3F/.d*m<P*^`N$5KPue$i;:[k
%Q\ULR`G^nbJc<L#==TKh^L.V>Lk"s0E#ATjs5JMDHR+38Lk"s0=:G3Fs5JOu3;sqZo<@91^K_88Lk"s0Hli;'s5JMDHa/C!Lk"s0
%;@3@=s5JN]n.3]`3-Xj*cR]">s2'9%pk%Hk3!-;gq@PCAM*q9OfFNDjTDNdU<6.p9/d?gAs7H<-\+OP#rO(:=IImIjfNPZOc^HTX
%Ij@MuEeOYk0;SUa83__FMSF[5+\hH.M\komA,bI*415<&f_GfGgg[JnW&L</r53.UrK$d_-$AFDcXVeS<=G!(p%Mt@i;Yq+-e+F]
%8Qn1\SL6`D7O.p5XQdK*^cbC;bYlXA7B$HH;nu:fcljXSY`Jb_d'j[=lU,)'V2.8)SFUrU=7GUE^YnK(hpd:L,;Bt-?">Uj`mDoK
%h[8Zq%#M4$s4q5:MtIdN$/\SdnDnd4*(W?0q[[I=Ha\Oo^#]9[`;@fu%MY1rokni[R]J*dgituXXj+]UgR;KrX"iqGEmJd,l%5Ld
%^3?V,^%/l)fYR:=bOp+h!&\Mt5A6[jJq#K/\9)/d)&UVd=rY@$HF/B6L7?#>V,rh`^=I21V2a5ENF3l]Z0%Gpqe^2Rf*e;,XUY6t
%fjM(QX]TnCkdJ.*9/H0he%=j/%NMkn0ORXP+_V)Y"Fnhsd&Y9?*mIF;W%_=)AlE<Gq4<SqH<q?0C";YC'dc8Xq&qR,_H)X2VQ>40
%oc4DiW5IGnf^4.h`#Q,6L6eG``rDm>>(8,Zlc"fgMF9(BK"pX"+7/0$#&':,,(:<]J\?]qCeD&+p>9(>l"^L3.DB1j!#4Z(GZEf:
%r3Z#9%)j!?4`Mc1\*d:,lSH<Z"/!B3QlrKL?o;>nkW'/Fg:m5t"mB\Thp25*/dDb0c_,Xg'FBGrd!hc$,dpZ!qgA7W3e9q3XF'ir
%Jn?Tcl>$:\$N71U617ii!%RIl=OL6R-.&)42[c'--*.O`+5!/hq!^1MIJF9K\-HAi^nX,r@;F]qp-Dg$i9ADuWqS9W"AmFH.>p%`
%n-o;r5dlg^"5l/GI<OOeXmKLR*\cUb'8+?pT*/+m:%sClkREst0U(M'(sZt3&-\.iW"[FL7;IkdG)<WnXh6J\Q=aG'_RFXnjj[o/
%<ee)s6(f.:cmVKD+tOF91]J9c(c8%5W6mTV=ao`C><_ucru4WZr&#G024+F9(]*NHX3\6/"V%hLDDt_rci7F)%0GdfZ^Qm)@mC;.
%Zo";G-_saU#oQ97D@H`iVBuDaO;63*$P:]LQr)9NGbPENX)g'6O)Z2W)TW$6CNV67ll856q+'d`]i@05!3(es71&H5&/A4nOO\gX
%/AaOfXVVCpP(K5/KA*K1:BRQ!B)e_CJ-!foS&#:;J=S99?o0Yf#<8Z\3ETe,Ckld[gXZsAqr5Wi;Qi4`oVga`5lTAUYl_m.J08G^
%ghgc.l[^%n$ui?KF;&;#?W(\3%5]:sF6EpNki#1na7c\GLL96;MXCEu@+Z0d,G'F]<W<meG'mTjSCORI''P2<#qPoG?]#jHnnAbn
%=fd0k3];U.^?1gho@S$lB4s/p1bgmR*'f0bEFCsnC$d]Ns,!*cFYR<>r3O4Y6(9$F_ccr-)1;XXJbARu`TmIt;CqX!l+t39k"5A5
%7u'[o70%B>RL4Sab`_"9S1d-7r]sicrrSOmP<])`gA#Su"*QC<rO9sZIfCC#Ant/GWQG+NAZr<EcsS\[R2O7VJ+mV#,iK8g,&sC*
%r&G^7^Wh^nX8)FL.NJ-!m9<&4qPIoSD_ogHW;6/t9COmJ"uKS'J\>!W-X46Od*0l1ht[L*IjF\jlQ%dUd8&K3?2F^EolkUg8T+iD
%?jrU[O2QnR\/]R`(,OGdWJkd=KL]GFa>sp-1^j_Dq#6pVgGNI]%Mj]IBKmadHY'nF/nQWf\u#G72-6!t1@$qr`hZ)cd:0PhNn2SL
%r0N\BVgu;ehUoUL'CuHG?2m2H)]89Xp\R<]Gt_=Qll,;q[LV7g%mV5gHA(5<'o_M/C%ba:%\`*I<SXFPg\cF&Hu:WKlP.CF@FYo4
%CV6q,DEnC(k+e&0.&%SpZBCm\4A>r)e[E\0`GPm1gdZdE0$M=9<etW22E>>^g+7K'O"3VMiF#p&Al-oQ_lAk0(tKE_5ftFJacf(2
%&>lilSo"_Mfj_Dg9:.T.!VW7R[D?Uh)bas]F1pP1/d3V?Zt@>M(lMb#`j#^helu:^S1%"S(7]2/rG@*]88/l:'a<Pg#8FQ-mY!K%
%;@XnXC5J%24,Z-4&9U\)B0Gkh$ptM%8gIuU%6tZ$[OEdMQEhDjT5B<JTZg]Q5T(JJJYcfDUg[F`UMtA6IQ`>l7TMLE4Zq`oCSNUm
%?*-Qk@%FE]Lfq&?I[#^tpNnS.jMTf:3&^o6'AMB5\,qn,"\tLL8YoQ@U?Fb+#(^D<K(DkP/<`f<G*s5,B97-=X"c!''_9/sLbJkp
%$qVeW0^K]'Z5eL*,;)p3-MP#8)\Msi<N08]03laY_JjX-N6-j4h_H7R!KX4d%l7g"57W`g1XBb!?NPr,9kRlD=E85S)Wdl%0P5`W
%hR+8&1)LJ@I)0?T+N!TMrO!M3EuS^SR4T+V6W"*X#<h)V#5LTY?K4:]cj1.;DV,',DAW:,4W3T%>JuC]Y<2EHLTb^j7Jk*K4.@rm
%iF6B0;k(&V`prs5DifPe-`so30`Ds6$M,p$NGku^G0MJ.81^WFP7dbf3'li]`L_f,K_MO-@,4'!P6jm#NN.CWWi:mJ1!S"@X+AK*
%;QYbPG0"qIL(u!kXBTVY%VOPX@&%'Df4"B4]7&gD0L.LuJ/6hT77`uP_O?(b!P33FU\dO)fY;$kA26CaX>g5ioR"j\Rj/H'>"Gni
%gJXG-#SluN1"c99:"K2/]5O2'Epa18#I(2PnIKpH1QXScB&3Pe[[h8hq=b+=W`0M0!g\Re6kU-[loHt7B#(u3W!<24i5HO,'HS4#
%;MP@/eNkgf#Z+!O!B3U2K8Ia&LbM\-+s]k3QAUNtAp(V)JsH)a6tN(D-L+3LD5+I*\F%P_A@;)k(E6tl?Kj34#&%QjdXa5_or"2M
%"6g&=ckWK/0d$+(rbLP,PemTl-YbN:B#G7Za%;ulSkGb`%m/Y%/L"su`kACP"BFL\DO/h-N%>G)KoMCJl,c,oid1LHgB+A\#<KoH
%?@m;Z29s=aKXu,QC/,HMnSh=*Q8J$n/FJnQ\$aK-ZQV#e!MJ+\#*<UCZTp%8nY)_$AO9!^l-_=^hFArpKE;.Nj=/T-ZG*='1!p-S
%<Y3L)=G_PhIn6;1lF#9l?pXC$):m868@[)[1&=Ou9MqA.MUb'CW3`$HKJ8Oc]P$1=07u;V`Z"(NL6n$;?,g>I2C5AGf\MW2<CgDC
%/V(IHd,?8d(e2lMd?T85H4"cQ+*ut%!Yq)=/,_L:&rPKGhduJ;LI1`^0ErRMX!=H!=@S,[.]-f)!T>GbEbYnW?uP:%iq6oZ@l0hc
%XNo0iL%.pgA(TLTVeA>fKsB"]X[]0U!ieCcXnXJkndnKTY:'^o(q@>sTGmN4S'<.2O,PKis'4Nr#3b]<gi1LO<7L-^JuG`NZdi0u
%>2Wb'+Ld&6ek=rNs1)b(:SLB[=3DM1<=*r<md&nN+9j)%lY^$<kCdtCf%6tqkSq0)X5Z[&_or@`&*e7@:SaD>s$npCCa*&d2a;]2
%3!Y-*E3R;/K:&?h1,J\uRj@W??iI3ko_#d'hpeAI^%Xp`&E,*0ih1L\isk>6$FXpCG_:gD&4M1[I(U!^(L`E)\R*L)okko'j=M+t
%X"j1+n&D$>fjr)ASpHscGSo/`&F!*NHEV>e70a$bI*Zcrlkhn%cN4pI"m%_l.n8i(eYN"P_S[Wc:%0&3R^kR"i":"=!9f,sq3piE
%&@'`[h_m8petK^t])sjX[Bb=2XQ(1W<F_]o%%*58kRC5;ZOZ6Q&gjg,7_lQ;=[=2rU9q,C_3UZq#7K)i5kp6&3EhI6_sEdU;')16
%"W@UG=P?rA2XRo(EhV!?gL3&@o=n]<h/"A@@U5&b1C/GD"k!iVeV74&RDEoXr=cjBDne0u\)+6E-sd.)4^^P$!NN9Fs7nmSDtjLD
%!WND<Rf:Y5^"CW-1uCsQ+njfCd\Ah&J@i*k%I#l,,iE_/eo,Gd!Vd6_gR+2XH"]k&ApULM$CYm+<^q5%'c@".F`<k,dHt3Ne(%j4
%0c;j4?tqd@JQ;Yf]?1Ln,o9A)``"%^]:$WQ9cE7O.fs;Z%!5H/=sSWWg(lSHke7&hd%*#aB@(k=QI-%&.cj*#ijA"jM--P9)#[m;
%am$#d)JNF8R]8Aod`0,i.i,u2L71&WWUZ7Gkc$s("s\k74$9gO-1"5X13M**'gk>O019,<?+Zs;*+be2J;a7,\\ggr+Ai1P-_0&5
%$Mr)M_'TZ0,eH;"Yk)3GYNmDN_D@6_Kk"U&aV:r^](?OTUhAPuQ7+&h0*@0B0\G=>))L-Z!?NV5"WJfm5t,kYic7J=WdJ,/e%q-#
%b5lCS0j*O0rV_%UD;ZUPp/uja];iDBiU/<>.FJe+YV:IZ\:4%F]/Pc"i5L$b\o.<6=f/k0:/4m!HckJn3XW3ET=p,*.])??1>=6j
%lJ^K.mG1Xc1:pDB.L#-X3uJN8&d2G:.8IRp<AsO7GA#C]%@^q0_19Lr:"=%g?g3$/T2m"KflWU!'kTCm;:4iV9_Ug&`]X;T<i#*(
%fP>b:r;"Eh?[^edEa<0rGHL8A-PO2K;8r$)2ug4'F=m4GKX`,(2Kfg.9Oc>/Dst5[_>gSG<*CsNO\O0$O)1!P00Mb-I7H<@j,(a8
%O@=QuV,s17FCY,8G4C`cjM/0Xn(9->6c[f$ECAB,Zft[a(UjLXbSEC?T53r`qR:].^9cpLnXljebBLM6I<ZWgG8>Pba6=J,7Zg2R
%iB,gjV/u@W[3u"4rUOJ,NXf'^GOE]HrT/6<1`FTs\!a-NWI89t,S:m3R+^"kEqXcCc7eOn%Nj_VhrSUTlX/:o=#P4$%8XW04b%!`
%X-$oV\Z)J.Z/tl-//AVtP>I8Wh3":SOq_(>(%9ggJ@:htNcd_-3&rJl#%2o%qMiteV=TUIF,<E6X4ah5]C][Dj@r$E0J@WgdE>4b
%Yl=9jT>tlli:-:>24Ib%_14:<pEc>m[qI_s\:StJjQE\EO!Dp4EK))*0'gKl+FQu;4Kf0H&qpL]W"i:N@OHmHG@C."PG-F[[rf)Y
%`RP@QdMHdPfF-O:dX<9$R7t^A/Da-?\9>GBl.#Lki=jJ3csb:-,9Pm;J4fWaT`ZBG#>"%&'<FTWdBeW\?gK":"#K!r*.<hGN,n=F
%O/FrD<.@PnJ`A4%*HiJ;:&@R2f-o^L`CXk=S,N:V:+c0e\C^.YAA1ORYGFGIH-V1PEXf&De*Rr`5LD`2ZF!E,_Sf.M"D5AWZ)@+q
%KGSS*/uuNPc!@0'Y&P3:L.=(tI5(QQNW7CIq`OYm"3O$lK5@R$]u[VM\%DU4.539g"$[ANN/_bU"ZWDWfNRX<f<K`Br(>i^$0jYm
%66qZl8lJ/D*H&&.^J9/+k=Ub;l,<-+JLTdUS)#5=J[%c9FC-Q]qY)80R'^LiqP'LDW]s"LgTNopeRoeE7#m;kmO:G#cKgIjn/ZqG
%QTR,i,uQ4#JDM2:Qr[o0.5VF"C3^8CG3LJM^IrAo2<m<c@^!VNEXnP'`NuZ5MfQr&*@B:5,Vc3t"cGOqY)b_2_IO:uI'#>/lRf+c
%WE8N,-@ff&5pBD@fCp_,gSA*!7>`Qa?A"hCq9*EUMrOl6)GR/.0bVZ"I>qkbE;X8.fo(@r"(*!krb"<!jqk)]Fft]AEWqo1H@uJ\
%-1C[R86u+%Dn2df[fa;:ELi/:C>W,s\r%.k,mnt1rl.j?o__VG75t9DrFgtbm.BED$M^ga0`9bOFmL>R?LKrLe:(W?IhoaTP%^R6
%!)UW)of\G_c^gOCPqJ7qM/7ZiEY"s*!P1ZCX@Zm2.lhNs]:u0"PQFI#DIZVl4hA%&*rkf,maqi-fV?V\T%kpSEilPB!`ti3I:^lm
%JfdtfH3R9?G+C!fGPtc^f+*_8W%sHEi5%1lN0;e;[\WicD5;(hKiK[)*F'6Oo?JpbF`&Vs1!UG4Eh"BBHT)9/%2ZNlT>7o:?N@jW
%!WWD;K:^q<?U-^6'K"cra[k:)5KQ3Wrs>BTbp"S22-Ad/1q=.fVgtci-pL/7*5'2^ipBdt=SbnGOgg:VeG0Ee02)3c@;dDcNUmF5
%3**a+DK.imme'9?2]`kU,lHoL\%$WhYNe5r\PaJY#S[L_+U^0NA,^r38E1NTkAN@p4/d!t[)$5WN*/OV!e:78GQ:RMFp<6VJB:MW
%>$[X-!>?;o!\qco>='GP`]3=tA.P-U^$0pPeTd7@pCPZbfq*2sOlC]ugUM<T2JR/oVH=#IM_NuH=AG<5e.hc$,?bV8OtA@#"I`Zl
%*]PQ6>FC7u3eI4t`cDtF&GS]\)57e<0b2BI<!F!F6p(=6)`P'p#R.H9(qn^,"9F)3WNrDBqf6kF&;]folsXbTZp](+:t05Pd4.M`
%g+roOK>,q#iYOhM;j$eX\hqYq$CXF$JZ+f47UlH]b>Y]M+-!4"KHae98HD]:ncD(0K!<I_.@A;&\OGc.[@aKM.dNb^^k%jUV0XPP
%>6,I$X\iHu?BVV)rSI`@9ZD>k_KTRr",!O3cZUs'e&(IXT.Q&b^XlRT9!"8u[]/X?8Z`k+=5-Ag(T0IK/[d'sGHQ-eFip46i\LDt
%E$bqL];O7i[JHAZ%Og54F&/iG,MW'*L;;DEP"I,DjH:c1LdaPqqkDYN3A(bG\DDaSqn+A;]^7sJl4*S8mO4JF:5cKk<0<PamJC0U
%7#T%0)0bQ>L1IA`gB;c6ct,s'W:`Q\$.-I\(qf!8#O5+R3S5u,Duh/dU;m@Pre#Wj_`]&S.37^F*:31qgCau+Hf?fIqK"8M54O?!
%WGlq*Z-PG:lfC<kXCF8^\>J?T$F9NRn$"4q'hDj7!J^i(kId!ZGmBp02'6r@!3Tc01&L+Y5MA?1aN>jtb@F9M:Jqu6OaSQ[ob[(G
%@KQef3997''gTmeMcr3okYqSn"7B-37E\cKprl.$DLhi2q*fE%VJn!f$Wb\Q\kt$)m5/4Sa#&a?N5.C@[_0-f-5)nLpd*bQ9uH]s
%3tTbDCQ\:?GGi1k4#qVuD$70c>CppHgMRoPCE>Bi,m7T<Q\FmP>7u%ghreYP_[hLfYNG"j&+FJ*P;"p2Ls..:2a6j)i/LG^'$-V7
%NgC+T:=Ho#ooA16FQqU7YZZq]r,?"@V:FuaBMU2>R'+)'JN&KM*ZNYto8h.41[+*U+1R@!HM6.S6gGW$n9dOr-c?V7qO35bGJbb)
%g\;Rr[Qu_GO=bW5fV_+!$'NFdb]h*:%k$]!>6H';gnqfYdo[_>M8GgZmD^J[abP(cK(O4gRqrSk5')Q[eL)'<_nZ1R%[<9l=m"_X
%6FgCYYf.*j<>W/>hXLqdV^IAe]56ADXJ'HVppnOj+$J5tDbk-Qe6h2?dCDY+n&7^F^>_<9r_h)Nk'bTf>:G2?$N)DiXR^7`H\9`$
%25^Idg^>t056$AU=Jj0SC>:?(#io=M@BLu3)*<`l-b_NIFHq:_W'+j:e3rdkdd3_<BPsDg6Y*`(?(`Z=12_H3>eT8X=7),[?7+Q/
%+3):i1?%?:cZoQHs')4"W*EeZqUW*6+3,2%MX'%dP4[?`c/GYM%-/6(-PA8j>)?i]nt?`s..oglD^[q-[:OjZT2%[^I1(-%Ui,hI
%%PX$TK0!XK)?sM\EZ53Slo,Uki:M//$4*ZGBo/;5@M`h"d\.:ZqJ6T;^c"bMJMV;27NUPP(Nq,HJH5&VYq<bB%p`er\"2jEh/`4T
%O$(2PF-#bO2##Mn:h>"L,F4sc@g3f#J1In(JecF&TQp33F$jHt#uq&T3SdU!I(XlUeY;o,f=g/Hi%)Qu?[7S(:7"m9DE'^eC7bTW
%RB_U,eE!Y&/[^X!TOFK]T@f=I*M#aO)k<s'5Q@."^=mH.a>GZj;d4?JURq%=[biGJT\4PALqC-:RVP7:Y:/mEs-ZQD1WNuGQuq1)
%<U<`@C."38Mg/,AlaM)C$E'"tQ(Hg:LJb(FBI?5u]&kD'Q[G0tAgQpBPm!7)6KVG`lD)#I\fJ$3&!eni)FE#o,n"fdr>Sr_\'^O_
%iM#ag/(eta(#_Rn`qBV\k2.O?ak:$XFi[D_i<ST6DU>D@gk+YM^^p4H)NETM^Qin\;2^6"0K4u`QaYnLosHEr0!6CKYeuIU.W`("
%REbdZ\]/s&8^o*gGU695=fQ(4q2Nnpk'E>:Af4rb#A%p6(],%6'ISa@5j=Qj?7YN5pgG.ZT_CZt\b10aXWS@Op\FS:HLNP1*d$]@
%:-q46RqP?P5SEZnWL\qnSrhXX02<SA.M`_'?Rns2'lkBpWfWc8<N^5\]3HO6cRC>`<H@N"luW&A5c'BC8T0,)^:_N6]C[p!h_9IM
%\5Na2'Qgn5C]Q##IOiF<3Ds\UM&h/LUs"\mdZ]NQ/(rh3<)8l..$M]p&dtK7O+99?Y-ZH<p.j%Z-@3EWqObdAD"?Ot/htYf7lu#_
%XU<j@Nkhg4\R7#("M.C?1'2td(4gE#o8?*rB<lUBW&/\:asY@J]gJfaG$Wc_J/3LHq.1cafr(1W$_Y;tYPEI$F93m-[KAn!*J"!_
%blDC;Qn0O'GfP8\Q0jg<RUn*9\&HIXnZ*4;!bfiX$SE=1:kd#.BV0]:@PGB?&"l0$Mn461R1[9Vr4?(VfP+`&,bd9*4*l?eKk=8J
%o5<?;cK.-P&MHR6r<Zb`SOY+R6Z/eP*aqrP?k\fT+MX$6&9+sokLjrhF"-3>h@'JC`W8XE"RCJqAiemK0&ioq6:!meTqEm6S"EZa
%%;8F0-XBQV<G<.M!Q[I>9*JIY>c^r'^`<!8\TMeq-gr2mJG3du2#q6<^Bl9lSqq*dmKpSgg?i[F.8JD<H])0!pd.ZHfE*C;YB!&#
%Q?i[%ogP*74XO(N<]7^?Aa^P+FAY_(j^*+]eg$<"iOQLK'n*ML\7/I554XV6p'S>Ch"k[uY$&]u4")bRP.jMV&On5Z6.@D;,/75r
%^6B,?>\V+Kb2mGA)A6b>e;iZpN8fHE@R.iMN_?kd7-'rj[;F=Gp`8sldX3G7>LY;3b&qE?&cD\delp]CWYBr_-ko;?\+3KcNcJm?
%]Y4T1qbL1/$RmWW3fqu?^Dadns$a.@;VdM6iU?gMIeqRd#%'#^#AdMU!g"kG0'$n.]qAVdOp)e0fiUn&mf3aq(*6))0<@u*lt\p%
%O(^d;c::qHqBldhHXM#b9QMO4?]"&$!`:'bUPisTAQm6qbNp"IW;A"+^$iKsG*Zs%:0oTiR%IV]aI1p3B1:[;BVi)kjl42&<2((g
%^jUVN<.M*[-;p$JbpZ$Lg0G+Xh@QD7LhNNtA>07/m1r-%VqD6DrEXbd9YXHcp**0q5G/JlW#Gm58@kC.H*^mbVXB_$1eXV"76_U_
%q(D^o"+r;-+>9CJ<cgMf+-32CSWDrYm']_>I(tXoTT=5X9g=@rMq)S=6<Jk@^6YJtf;3<KUB?J#fV8]8rLin/"Jkt]*9c2"-MOm'
%FCdd`n<.?g0,MUmIHVp-]$,*R>(pGthAJT"U6(1gAq&S1`DL%D/D-\D()ZG\/4!MIP"H9`n$5(\c.?(pl]QfOQTL]5,eg"f"?S.3
%AGpM1.cFKuf:JI:Bag*Vc?5&onAcMBdl&]_9&_<0a%+5fNQluUF'miB#VW>QamjW*:-O%8GLY6bmMkTcE'T9Q%LfGq-&hL3*C$CP
%dI:/4`AKo1`CK$]C^dd16e3fQm;3t$bP-#pacup::EeKoBo0&QI%d2'5<kQ.\_RL.0CL;6/AIDR?Q0NCY]V_Pq=M&hJ0mT`Qcq+1
%A@qaXDg.k)qh"4#J04(UV:*jaYf=()02)l!%J%oWKuB(5G+.Fki7X,lm^iQAi1hp"b[]`M\r>5p)#OhZhWVaa#IOJ407Nioo8;i'
%7enFP0iIB2[7J7mYNfspX5E`ngf60QAlmA^XM#LP7]f*3qC#,0gDu1+8n\1orK;2%oC6(\lL)N;3\s#dNi`ASaG\/3SoKRdRU:?,
%[.@EP;8qL0:ofF]2H=Sol\Y,F'^olP65Db7"GTO>EWH*>PiIb8;?VtcBjHsdZVU$Hf.O@HM),:AfFiM6DE27CIJH\Fq^ORU$D2`A
%8e*=T,KHP,_EMuhmG/M4Pd>4J`k&L"%l"15&\ajDH[pU.4G\1Z[q%,0N:C#+i$c2f:+tM.E)W$2ruOks.%H?17t*9mGaLQ2CQ+:n
%QCh5OXAGqQ66=2l3tlPFg0DRln#H]Yn%TG_K^ZfpGR]VR&%<AIk0XD<rj;jH55!RM8E^M1,l4*1h3.h^GQ%hdj^n`3Ja<,]AV:1?
%q/3bf3X#uS%)g&2'%1)<EV!UR5:oPkia7-[4kqcJO/dtJXmfm;[$+>_7!8O$-PQ<5H#B70!@$I$]03X\gCX8u%&Y22+edgkpkB,R
%U"f9!&'Te!]Q3gi1P#1J7OSFllm_dJF+l)&2IF8iA?jlOR<dNKH?`0:]\bMAoJQ0n4M,.Ik,lB4D*F[8,Q]nf-NYBp'jQf.2TPr:
%'e.GG[uIRb-m&u=JaL's7DUU`JP7U@.Xem9Yqo)9Asi1-*q$Ab"Ik6LdTo)FILSN.R.j[Vpe(55e4o@C6is](`Baf94aIH!pCi'Y
%MeW\;&',im-*@6fp+"TpL.SXe!5s4S"Mu`Q%'aG]SD$.35M,LB@XLloa:5CWk(@'jT^DO"P:>7hdD4/B'^,Gq)_[!,^Sr=EZb-9V
%pPO!an'"<#rD=SK3VF=^hL56#JUUog!*_km<Wj>3<QfQ.TP9mZ@7`PU%^\gALG+6N[g:Jm(W!BeDr%;l2"L#R3-llnT]+`85nWOr
%.aSQ<%.qUU0[Llj`_'(pDG^LLo[;T4j`4Ni^PMIBCI\Mbp:CZ>bJ((<DWlRI7I^3#+Na_%3ZJM!L/QdF(]afI3%W27Zj/#T,C'4g
%_7K>Qec-E!W>@YsBR%3\8tTfi'51q(\Cc[(77tR-#L)A=rE04N22\OVd?#hS2YRg3!a5UA>JKj^l=3Oq3*Ac<RSa10m(Q$&bBa!Y
%Ta$aS&uCNm'L7f,l;d/<8Z;e$pHAlJU[k3AdL1q,g#mqLQ5WS-h3G[c#E>uX0-0[AgX$e:/\nT[jqS$ahF$`Vjh?^cD05h8[^"JM
%A$*`@4Uu/Ok>VG@[VGDH%(,XjVdq$#bn@Fn;FCtm`QhdhIbEBOnhH$;.Y61,bY/[`G2=n51k<<NLfT[N&Pu#.$3XFYn's/[h5UNn
%ol!ct5Tei5pN\Wh;"BD!$H0:2-*E-`Mq[9q2'%_;W^*1ljB<41V]7*<&5\9jAZSnkGn\>8!!W)3BD3pS$FG.AFK5EG1)Y]2pN,)l
%#(kaM`(-Ti;@!'FR/X`4dr&0Y+'\ai!XeVDr`GL]ch323:l=I$rhe4s2R4st/]SV@5[cbsJh?rrU)F;t=)?[tU5"4/0",=Oe(c^j
%mTUM0p$=D-j"f`mgb&DR/'$7#N,l",m\_QFkWIg)BUW_2rX_@\K8tns+p[CGf]i>\"R6YO![sRhW;1<!QVe(ic*D\jn9pkC5]<2>
%Y6)DG*7]"9THDqL]aVTWN[Ii;\Hbq2fYG3Lm#\q`mJ7%fV05J(bj<p"!DPcSjWgmLo(MB+!ZJZ;e7o7;KS%6jq8PmYDbUM%fL,-q
%iqhYGqfi?r#5=oLP8gYc*d]<;?CHoWRG@,XhX=IfG6;'<\9msd2+el,EkjRdeOmXd:gTVSIoV/uC(dC!"R[.M7DeUYZFQo]Dg59Z
%<k;aLNK6\";(Be=A\3qcRFdi&gNV8XCnk3\e0s.MWd"3(XEnTGporCd*`$=E;',*hA2?<&7VR"n9ZEZPWho6@=-D126*CX8C;cAk
%QbNFHk]LP-<m#*?VOc%eF>p6K'ei\3]=V.g/?eSe`S3%6g[FF(oc3XGisN?H9-9aU7fHin-'(OkbKhr^#(dbibMT^G:<1mXHQUMr
%e%gar<Pd=Cqb<aOrO;[=cb)A>.36&(D_A[W8df/$b6,/cB[H$_:Pb'Ma3WRqC8noD3.?&)*cBM#)<RgrBX*>uO%q&Rp[=FRo6627
%r">=`#pCYI?a@*N7o?[9pQ]j3m:k;k.c%uZ.)0c4ZX*;jHonZSV)O"H[m<>1PGhab+R)<o^7#5A22eHEAl?slk,tRPS%&1B[<\B/
%JR@(P[r'DLf+*7F6N=B"o2Y\'(4)Chn8"G]oc3V$Pst11aFSYbjT+`4b76Noa@htt"gF>Eg!.kI/A-lRE-DA(\]J(Z*B-\7kNlHU
%V(+HG)1plJIYjVdiRQC^WqW>t_le3#TGQ+U:D5-BjeE7oT[?Ej-*9M5^'IaD[.gO%ZttY6""fk-ScBJmH'<i>="\ut]6><0Gp,]I
%LD4F3FX9KFA+iIqFF8Lb.09ZL;N&hQ#ZcLa88T;gT]'3Q)s@G_-"L70#E*s7%A:M+"MVcM$g9hh.(%";6rJ*-a<K"7$LNt9(4*Y<
%:i'FYa*Ms3QrVQBC^gLgIH)[6@5g)EYAm,aG[I6.7H;C"U)pZ,cg;?Z!QQ`^bHLeI"m^cL]hV@Pbs#P##N#m8rjtORi@uj%I(AbM
%E*W-X+1HnKI"UEGd'!k)T;;D7]E[BCnQ+TE4a>,%N[EAGNH<lU7Z@ECI,LJHg>U)K!5P]BF)fSKd%@ckl-B<*YYk`c+c<s,VIZ$@
%!6HYCgKYjo;Rq)Ob?*YW/&X&*Q\kTqh2XZA0ut=DY%J2P"@Z*u(og+<.)C8@df_n=U#t(>&Nmubg7;[fSPjP9Y0_IA#KA-Of:Z/4
%;?<&60BUR1G/d'C+&>e,>\/;lA@89m5)W]-6M*!W.B:Xc3.IXVkB>Zprk*B6?D'LcBl&9PTXQAZ5-iDY?b*QG@lXft3fQ:<'>)5$
%K%re*&JN4RMcn18kt8aYPd8m$i6"nW#kM5E%u?Ht1?O@n52Il;aARhcSp."F4f.ni7LDBt]j123m"Vk:=X$K\CftEqUlN62opR\Z
%<4T=,hUq,e#K_-Br-4D0?2&;>Jf]#69l+TdV+YlCTrV/#G0nUs=q%2&rR)P5f9h?#3^V2GIRbBCPf@7/Ea>G;WJf/qG9^0&"p<;8
%0W"N<?RB1a2O)TL5r\boEa)g19ptSL01(R.:Hf7CPGIeM91qJV7,sP/Z:CgtK)a(`A*QbhY*6h41W/-Sa`iAqg91gse)rb[aTG/6
%UbS4mOr&UeF%*7]a^Q*u:n(3n.ENqOIW/0r"gM'@@rP9m2/+<)^%U50qLp=Xq5_oLi,:=LR^cE@Uc7aAZ,2`(,$R^_bi9Y]P^p5)
%N396>.sf@b*c!eb%E2jg1WjBN>aA#_M-@4;&"MO&I!<*nUsAk1o0]!2ZJbKZL0[DVkibXD5:0&b!:Te_X%QTUpW_!VVFef7g&B9j
%C\,_]d)`"=5C\WbW^8foT@2BE0du;\b@3EbR$$:"f.YgG3,2-FjprQ0B[rXS@rb.f,0&[Vm9klmOY)U?K)(b):[Y_n+KL_:[uSGA
%U,YC(cSf8U3@"g2\f@2?1sKfoIF#]0[hUAb:](?uS5t4`]6s8O7iAMmma'tfeh5s:o>D0[Nd8)Ei.eQipTRS60$T+_1rb\e7A6Bn
%0.*Pfcc&h)"C"Ku>qqKDAicZn/W[c*&_lmtiI,6E8\%f#<;r^950PCp9:A2'>IK=J.u>%`T;8/tB5r88!0*Yk*F@\V+!<a((^.?W
%(ReX8fFR8sOTIe@0aZ&%gmq":JFQnelL/MKml'uDf13Bj,gqTTd8hq9c]D<#dTBlGKDd.C6WARZH]i=Meh?m):+`+9kDkpk(HiH(
%Bec3qimoZ=CUu[!QNWEc3<<8%WQ=kGfd[gYat`I9B>WsmN\9-<)-e[YU)-H&G4LoID`$kU]a.3n.L?1\7S^4FOR0Yo^[m\;GaJUj
%iA;M1J<F8F$/P'LjWhV]bBnhQk?X!O,:6iB5kd>R0fk4YPV.'Cp^N]]N$_^>PWj.Z$q)UP"0eO8YE;bh6uL-k%<>AcDG;J=VK>gP
%9$<?8Z(!GE\N*2E?64qbhB'T5d9`"lZ@lf!gJm9L0I6D3%T7u%a#!3X<N-(]T_%6>%@,rGb%%3oU"bSjA7@e>I7g[mPho7=?rI5*
%'`.5W`97F6/c2PC_j6#/M&iIK"BuYr@rbT4EdHgD2o)@u>5EWEcZO8##"&+Goa)I_pF4+p[jl,N?3M8UR,JiTA,>^rfGJV.9J.GJ
%QJJ*&X(^(+<1[W[caY"+,C)Om`&2PacH.&^>'X2hlm4F_OEM,`HP1g8V(qcQiB^(8[Q]L(EbhLn.H.USXY?DjA;.l\3q*4JWjV&c
%]uHs]7(fm$U/GHL>3p#'\KK;T.MAk)\4"f'O9",sK1'54b117u(;*7Lg5A/-Xu*\@"<.`?DCH<NMpT$pQ1m@T'(#t]mi3t-e7'5m
%S^Slgk<*O`W1CZbdTMm/\"*LC+,a`AX!*t:'VXbWbE`XgD%sgpjLX=N%WKFif[OJUj+E1O="hmgNjSU.Gqbe(6<8oX+!tSc@tt=m
%`;?!4[^S8EpOeWs-][)g`I>+D!k0.obXiYhG*Ia:6+m;/iS-A<$Nt35eIpYEGrKP0Rr^D\En/\CeC]=L5<W<9j^K$HD:h"j^6]Gr
%q_-BOVg3[:__P%rJfHStL7g7Wm\?X3P^+%;Z'/ZM"Y`=9e`g8=H[&(S<JtuqZ0u8+E4YNa/_3q.n'tUHfF?RiV%**?+YR7.(\Q]8
%g/+INiKeGdW!bU6H[B+[g5Z;+s.Z@u79q@u4=+m_d'NsA^HOO2;&Lhq=6`:,TX/$6;4=_2H'o'Z1W>G&/7$V%`$hXY.r45`>M79H
%,aOab*mom;51a"%"fq^aA*gk/+m"]mdj_o)cD6hj9sBsN1&4i!;GU4CBuZ>o("88pERH[eY%de14lp!r/QA0H0&VTL?fq4!OkD=)
%"jkc&;RK'Xje1-Cf\"b3&K>3'9KZHnAO&GCOHO20Dfm#J0JNq6JBm:]5S7sj.Rt-Q':mPZ$gTL5TTQc%OD$?+:#RSkUh@"nT<;W]
%n+TTcB#`A;^::AMQ9f/gT-oCh5D*i,A*CuR3rKIJm(K!^6`6PBVjAu[8.M2>#+[k\nG!tar<t`FrB*)^qAFC4Cr)lfkk$[p/GA\r
%d-52iU"p`%aJ%(dLU*PtO@,q<5pqZ/SWZ@<T0^NNA&^NNndW^p).jgFCKkun]QPVup@k44Bgm?;f8S+sm@0fu7)"o(l8ruuD=cIh
%8#Z5S0>LNXOM0`/COAj3p.hrHn?eg!ZbOu5D)*!Q@j6^Q?fTULb^8pUO9KEi3G3egINs:rNHE-KNcCDm1ER(C?ohTI:RQj_d0#Tp
%bfQ<F=2NOo]fh,s:`ZbT"S9@YArt?eH.M-IhGMg6U;M__CUsncD@D`bj?"Lq$OlV&jj])@TBrGhCnpWc%$TM-g'T$jQ2iX#lag!G
%eBeYU9aTJ]=RR?aR!]8Wn6*pUq2,WXnB"Zc+&0nZ_8V?3('f]FCQY/r\2U+GAs2CE.Ag>kT@joJA)EkU>K`>bA'3/dET#3M+!qkl
%eIm[u>HsX;[1iGfZG=gn"jK06\#mA)EC_.Crm:nHpXtPLRQHJ)H`k;[Q$-nGAp\m.d3Tf3=tKdd3i0Lp?C3cPo9ZsBg&lgi*oBTi
%XF\Oso(WW7@^LtXQG^m'elnW"ZG`"=mECe^)O"s%'/B2ui3aPX1$tg!K*TLiZstg;&,aG7]o>eA%'-VQNcZD@'uL/DNn$#IQ9+h^
%8nk!LJ1,@n1EY?sr\39umHp/F-cTW8g"Qo%l8X,/B1)mo]o22TRXf*SWa:V5HPL0s""2Mr\Kba#Iq;%&kL!%E1Zj*qFD*<^.`bp0
%)3T%UN6n82\Q&3^4:t=M0kWu\5M2Z:DF`P$A]<Yf+l-BF51=.e8D%Ct<T5SVh#o_QWM?!rV)AEGfjg[JG-bTb_&h(De(/6!?1l\5
%*#=0%RDkA1'h;"#I"n1@&hqIee*N5A*uUr^*>FX`ku-_!/Z+kCB.bB<Zod)3;OgLKP\53qP4u%%+qqO[C^b\P1D-$ZZ?gNe0"$$>
%&K,#:cbOC"hObFCOl&#]<ZS(K9dLu.md;d$L3@f07O;7mnU'U,@Hh%aAY^B6T6Ego7O-1h&S&2shILX:^eN;m-(EX8OkoCNRO91o
%`r!d#(sAE63H>aN4/Dk9!Af`?Nl"fB'@]<8;qj;_f>qRPcu**DDj"&_QVH#[ecit`0u_]IX_^:u]Xl#S190b=Xd\(LVk7$<l8[Tn
%@H.e@.(N+MO=D\*S(jqJ+C@/DgXa1sVuD]-XQV3ikBidF*tIap0aN]0S.Bhfq.#3C_l<*V5'K3G8NTmGkJJ2(:d%`@*0SDkF.cAo
%SEbs(Rem2Jc%f6cL>nR"cC5?BEpb>lm*,9E-;Fk,6U%#N?DLg%cC>ECieqM%lbH'6YmYZ2Hne6cJ5#Eg<#dWoD-NI^'=kSFi],f`
%S=X$tKojEIOG</dm0knd_@,*q37!BP7^0p04/_5nj&YmPB(\=V`Y,DK)\>s9GNO-WQOQr\nmDfoINjf2$&.,`e2+e`OqH6s>#%$?
%q8T#63CcGsBsM13]luk*WPTPYpc\d!p,6PD%2cLJa+i`h=4GM%Caa-(0]@k$h;EI`f@/8Ge'd#`%3(KQ0k5;DR^B'-di.0N4c1'l
%HtI%alT*IXN7@8U1/d"Zc^9h%)EV:qlML#f1/c5Pa>l"R#8_NdIOjP9;F*Ala\>@@R&O"Q%""c74rp)SCAo&`WCs>,Y7E@DcCq4m
%DDHekl6MqW4Z5tp%48qs>`27/e!+?T9ne5nR,O&Hq&k_hL!uKWo;9Bq'Xooi$?qkEH#+t#iXDPFo,gPX;iN8s4V^^B5%`5-"8^K*
%-r?G+XHWE)h]QpkM==,aXEV)TeR663+$S7?HdG.\))`g+M#7ApB#r+*)*VkV6(X'Bn-;W=iTP)`J6@>J0fg`t'?SLV/t&L@8T[p#
%4`D"+7so*B.QR*t+1`RN2L1e1MQbNN.i[.'CF/-7VLR&Ic:Nr-O:U,jMjO'aX*ErE[;XW'SgaA7DM"=;!ql+ZNJ!8871n:-.,6>0
%-U4XW]04qAF0T,i%U)HbPMIj`HVJ5L8sTOE8J^0/>01Y8RTX:mAj0*?_[]tQXT:8)#qsj.cq8I;aKXEP["6)0[5ENP9=:[$\QCJ0
%L7KOAXVhF;JBCg+crJNr:h?pO]HD9hQ!kJPl"&FP:]nHZ:kG^ERi4QNI=1bX6h*f"fr_HEluj,o#$QJgHkh5#h8a/Hbj#9^TMIW4
%IAf>F!X3VG<9d<N=hVZW(@^4kg['+ORt.JaT`UpdL\XAAPPB/GF!b)_,hLe6W&hb^HXW`o.XFYr'noi<gN.;Cj]6*3!jkF%nhm/9
%M%*5B;L<9qVeV`Bl'MBHid6$TZo_8AfMAN^cU72.cZYMBg-'JVB<%JDPMC^d\@k8UNm<Aa>O7$Z3TBUXICbcd)=6ZNdj9%'j3tO4
%c/`2:__)h`2..?e-FQgpc;Hb'r]'NIZ8O`s?Z!EU\I7V[,/&bEdiBB_3@pXpbmtA\E9GB@;p2"959K$PCc\tkTF/H(QqaKE96W_b
%irR?URQKntcDFO57@@A.VJJ<$V@66+3B3L'c)EY"OUoR2;d6/^kfP\me#DHW.98p`OA2VgB9AeoGE-K#[91')]q-aD:?S.J1M5+8
%jjM9FNh.Jb:/,Gtffs71SQ_AE-QA\L9rBn!(AgD[WJPFP[J<bW%<YQ,h0r:WG7#FS9rDi4Shll(+H.>39t0!o4A5(sflY8Dm'(:e
%2%RlNp1udt##K41=gRAB)R,_pRndh.A8`"Vak:cN\TCI4p%3&][Ic3Lb/cTKl-sb<PksM6CcXFaaDT0^9/`>t9Wg0^e#DHWl.j='
%\c[3C/2G9I<89,b2)$aY-A^=hGZVGF_d)2bBk`.#Mf[cWVq*/"lf+l?l?'-9F*KIQfiCS<!g]'ricc^X$ZdRigklCFRT[u%S_EOq
%.8aL<G.E7h8ZbX1GK682I!W,D;VOa9-Xh,d7%<:E=XKKj,>qZk?J`k*K$#ueS]I<hMeQO?G<jHBqDEKfF0<`TjG.)`V_)?F9rnkp
%^#i';PKR2TSZ+E]p%KhT(YtWAT_fbFfVutE-Eam8'2cD,r43upLn`0`G@kl\$@:=Zn[WRnliYgt$AE@ZSkHIG+*>fYVL#[5Mqd<f
%WT7.@/P9Da8a"4+4I`@M]bl8`KtX8HM0&sR'c>D4Q.sW7L.")?]tY=])2?k736Z!26,Z1;ZAGZ_)>[90ZC)Z?OGqu@-Yb7k'qP3S
%:g30J0O;qQ`.\Q@h,(6Fm=oAHF#R(AjDHAuNQo_E=lqN]Hutpl'S9N94:^.U5HLF9<1_<,6LC;cJZ'<;m+0;n2W!,@)Db-ie[^6:
%R91sZ;(U[rnb%mUQ8X4B+De-`4ikLh[eX?A5uTk_-+Z__Ps;W[JP$UM^$6FHcrtK>G>Np)b"J034E8V/e=D4cGFb5oc?=g`e<O[i
%fR."@-8HRXqs<+f775(_O"'h&k!WYXPiAH=X&1s6j`>1lA$pMKnZeiehNN3B76Cn]d8+:4E.o+^?LGKp#03oUAr9/<4R%S^0u$Wb
%Nk;(=E:8Onj6s*6jG#`:CE2/MGE0nfU?>3/jVb:`l'q7hP*_tea5+S,;E``\0/(Gk7?[u6E+a.IX*6d_AUMCdfi-/S-C(n_G&c7o
%[(TQ4M7%to^-OBQ`I).^i*rW'1,.[?atb'bOBDDZX-VRjkW)_SSO9/TC1fqbG0Z1O$X;RK3pHNN`pIH3$Rab6,<6E81QAA\:k$"`
%7rRIhU0fOF$6-^L*7pA/qkeeGN6D\aOi5a^'Y]l<M]&BHm:Cs=F5&#4U?T2&S@f_4_NcdO_UN1\R/2cYG<arfKSc:4PF."bL%b`e
%_!&,5?p;Xc`#5P'ZY<+1%)[\SV_AN&P_.dXQ^BT<H^][4g37OMNbeXU>P"WpeMHO]$140!@0UV3fbGHb1$'F87g>&`;l[[U@r.OG
%r>UKL$bCNiSpoMUO@:YF<7\C\7-j*/0Vuj:f#r%J\X*RuI@hE?50]$=0[)+_a!l?%gK;d20>:>tG4DuYA94#LqnA0dNs^SgTF//J
%[PkeXYqP1oj.]2(He:BK`LC$pSAbu%e)#1!\pI+/V5,B[L\%<2%BUngaLBoq[]QA]=e;joSbpH6:ud'Q:kEHF+4YmFm._V[BpP,!
%ka1-`GJ8_5W'!_3@?Va5'"^tHF;KE%Y,*sqs"9h1WG0TEMc<Ef!uOB2:8aD@46I;lG`(8Kj<K*%bPYQKAMI:umbbV3ec^;)UVFiQ
%5\W*Kr4R%=LW:3*";@Ve\$?4bGXZe$Tb?Q6!\2U=Q\[N0%\R`F&nZ0&p=8K*2!]..Xa/Rf2,c)]>tnRb;j4VfMUBO%0""pMh>O,g
%-dJ`+42#Kp*dkPhiYJld[FtLgHFipS-sp$]RY[&=V^250m1R]pd-9%G>@FlOS"L`_e(1P.U?9HFGmr7l,cU$)DF$'5F_WkA]G1t3
%>,@D_VEB.ppoH<I*LbbI=B"k!<Y4H!H[CX*CtUZ1P+4@/pr,)<c0s(InRT=45j^Q$Jc)7K:FhA#ZbJG"0!>-<]uB</=)qZFH7"t=
%EV3Hi]6pRkK14tCS`SA2&tJnVAKuVhcEPFnLA$(BI-e1]L3"<MS?"5E+*as]Oca5:hU0b3%\\S:J7eDl%)!G/R.`-a1\!3=VNG;+
%Xj!4S>h&DdCf\C]K=c4#a<nd?-A0.!k+4TGRUG:S3Z56gg4rt5L$TAjoWFHF-UYs5&<r/M>u96"R\';aXJ6aG9-fF6NUKOqSOiIR
%4Qeu"h1KdMN/T\u1m[UYIf>8cL=SKM^k=QtmF'iTV%Z`-jml_8PuD\JQ$+Y88b4=QZZ+\^qp%Y>c[LT)5H1o<M13RQCNUOO]_qL8
%N#CL@@t'NUF(-\B:5jla)r""%hR<t`IQ8__ctj2bE_#j9$">5d:]=<&XX4J*N_SU8_V%.;$W&j5=uh+r*NDV?!UAiem&c0dR0BN3
%'ho3[IikcC%%VF6*lcj;=b*e,dE)FEbH]J`a!it48UTSDZ2h;E,`e3=egk`ip-tm_SdrK!n":WQNkU`RITtBQl;BgRW5A?`jYOW5
%m2VJ`@3=0B*^".Cb(j"1&%_l2LeIQnU2];1PY_%&jKi.7BD2>I'/&C17294.C>jAr:,P)0;M-iEofL4I;".f+ZXe*Im;/`Mme)bS
%9psXU`,8f0Hi<T367Our8)<L/TM!2*I`J#hV7bDU5:WJnM'$uGT>h:Z\,'g0%<^mJI\nOhjEpjtGD8X4=!uhiB-NQ*%/9VW9J3Gd
%Y+T,s][or/B`%O**d=f[riLW>h#O0iYFkfEe9@i4I]oC/2!LWII`/pKqE)tZc@V?la)(U7B(D)&l9"6:5CGtU<dDu0YFkfrIKuH0
%V0T8:^8n<>$i8e.rR?!bM7<>PHlq5`Eo,'ul_iVIRf,%tl_hLj,2(@ld_1,+M6eZLWCPe1VnSh@hs.,LS`/dZrV!_:8T4:^pF.,R
%T#0=LV_?7F$Jfjk]md!I1kH$b]qj-Gp!_f;/^HsNra%flrmor.IXC6_*I4i\4p(O!fhT64:RBZoOHRq0YFkgZn,`:RST'IAr'%jD
%o,cD"ofG:*6iC=Ur?Yq?h6r*pl_e[Cj.,kmn+G/EeaGV'Bh%tU/GA\jl_hMSXP?6`m(IlE\,)Y7+5[*g2"^4r48CQNiE!_"grF'k
%9:IoS@K0ZK6a#EI8=7lop"N-JOPT1LA.5#RYFe'dWjhgFPEg=$RA3>`#N"dEBBHl,!e:5$p\LF*n(%2>5BD+RVr$_eZsrTDo],B4
%4)E6.b.W8E-c6>$qT8.qQED\XSF`P#X.RZdB*[8YV]j)?1LO":*I4i\r^Ng!R*q,kqIueHKoIcu53FBZ1rkk/hs5KR?[;"OIPSaI
%GH9UM]*G2,qWUq3`FP(^k[$K%_baH,4Rl`BrIe9M,G0._TDksA.e_Llp\O+l6.goPa1Zq6D4&f?oom^tnlA!2m+MR0p!ZtP#$IIn
%n+G.2%\0?uQR_r\lCf!Ekq^ftq`?tUk=UH2'(Z+Sqi];Y>/f!%BDmhao!Ci>*".+cjJt5k1:DBZV'.K;R"Yo6:mqBV!Yq%+]9PI6
%?q-O.q<$DaHiZan+0$Wipe!E0@=i=@k+4>h!M;N#*U;3#\Ob5fIbt=[]7H_D`tRmq\#\*ggYLFlb>D&dMr&)'H.D1d(@C]nX6-(i
%2a3-_g8b,FA+O\WR[npkHroQ5,4Y//q0d.CS*HgBrA\#'b(9EW\R0M?qu),ep!\is1mUj3C9mBBB"*`4j`E1MkfS(RVUki1EV5lC
%^",[!SqO$0bktd!CQS;XX!5I:-CZpf8%ELFjr4\(C)"r+'QKTcW-4LOb*VE!U>1"gAsh8RO4eqo*3@'T0SBP;ELE,\hid.LrpU,i
%`.l^sLsg@Gc`kmq9?<A->#c\bo7HO+1[MRF9''g;:$uU=?3,oO&Tm)`T@B"2+N(>Mc5!RIRHuF"@-^!U4_eKG,MdeDYM@b'Qf_:1
%[E.*lXn'0cX*&V":0cDG*[*NX9[e@1(TUjA!4))jlihOpZSAcs5fk^2o*M@]"s`</Js:\tljHs4'q,e@]JV>P:"2@)4P[pr(-jkF
%@(=_2s#t&t>B_f'M2iLG7-'1+hb'a3UdO3?g21a"pf6A?j_JP*_0jR-_JG34<AN[='7P"KMI-1?E`VVraO4]VD6XmhK)c3*B2okp
%IhP6.AaTs".q:4E)#X6'Nk^0-,(/lsTJ1<8o?_@;_N1/IAc&;+3C?1W&pBt@!+X\>pmLcITBOe%VdJp9MqW0$(25Gu(:m,9^Snm4
%X\)8NZdW`jAn+*@X4!#SM:Iqhi0G,mlpIHHmMqN,Fi^gajHgWUD^IdO+Xundh0nku%k]\:Z<Y!Y#gYW3ZGhj)QTtEnTu\TqVn>S6
%n6(9?$'>Go-7gaj9!efElQM)=*e)gs[N@ZBb&B_b;`YtJ')chSLrB\hLO&OP8u$&C#_*KNfQ_F9BqV)'Z_Q,2'"KGZTLX8/p!u5.
%9&!ZO)K\E3!a=<,*X^l;MA*fpb?j`d>bB[`nU)W/8Nn..H^G0/<T/(PAcmo[/a$i6O>KT70%mV0P@C8S:A>tKq\VE"0:!-[?<]=J
%P'_,`gi?\1F4G1&9-gm;CH%jV8EbB=W='Il2p`o<@QG#8?ggP0!6%e[K"_7X/hT1Nmcj0,'<utij;R[bF<K(LP-!?+NEm_."TD@6
%!&3RVL]DPu&:X@bX3!sC0mb5AgZS^$8\Yrma1DtL\8;+ip64qcW5GDm(ItO-/g2SsdTg9h"gGZFO"12#aV'1#Kg.9'BO1cm^"a6R
%e'E&*NVFNe9$`8:(5V"u?(3%YP@-KjcuR+k.6YFF/9ZjKGOWm6A;^fKiL#<<2Z+sI!uVCLXXX@2n72\C``s(LN7WFXO:dmtjqijZ
%Md7ML&0Co*Yi30`aWamJjFg?andB!u!B4<0o8AMA7=$lrU3N;:';.sM'WQQ?cklEMM*UmVc&WE,"A"\R"4V;L6W_AKd36X#KaG]0
%3=*T<SB0^".Xae%KKa7HM=DuemD`an%m5d=E96C_]IHcEka?;RA5NGj`e&#JYDKKqljm0<9?o#s=hCN]'@KWi+-,HWCS$1(6n]g#
%F-M5oZfeNLVu[1cAot`<6p;`-Jtu_qUkg3KE;pR-+:I<j;I9T>R8+&cC1-0uAe9+Vc^oX61PE"S'::XX*g+d"p&@jRnGu$^f_$jO
%>2\WK]Y/pbH;7^cf$'l[+B@<(c9&HVZ6@UhE5+-$+gM[K;$jJ%qtD-6gCi=5Mbc"I7iU`k+F*0(/tOV!')fV<LbL,cAh:J)#4s>b
%:iImGH=@rQW:ekR(XKf\h*X<L2,Rmg_Qa)uX/LH`XJ*Nf^A'K.DLuQ):k<\4p%/`qUMq*p^>epDb1Fm=^#')D2\A4?M#^TA<\Y_=
%WeU>+i/VEg9dE<P9P1p)!T/FbVeA=6+lSHH4J!D"M"lE@^qAn)@P=0okV2'=+$'PhP[SZs!S%B>+#[#UOl"#W*Fj+FKOW]2fqPi[
%L\,R!"s:i/hQ6^`%":fa!jSoYikPu_!lL,\Gb;Yt=7RO`Lo4TOc#Wg8`RU`48?j4[(HHM0,GYu$J+=)7b-a(1@7\^,#1!bCIId69
%^(N8"+":0"blCCUJS]9YB0?:ca'!gp-QGd/bNX/BYPE+4'Bp3Qg.;]VlS1?,ed!"85ak)YYXo<m_&EK*(B")g<.HG%lZ'"b-)S'0
%].^*gQa@m?*Cr#m7p8m`#\J-XC,UE'A$f&DO;;X>U0BlT%IO'Hg<gpdOST+AN`5ER*k]pQBim';+8e[("%Ae-Y\@),;33[W8<d.K
%<c4PfcUYIgjr[>]&@[^,cIBRc,rm^GXeXF94?;ug^kmOLE45W1*CSX,ah@5s6-[9qA($\TgE(T_OI`j4?+r"'fX:o;6.]s3"ehaM
%`=u,DKn&C52+Nj6Z$L%uM9BqVm^[qlH7Ub..o[Fp!r%_Hd`u@i7d*Q1Z>EpqjcA$g1tUGebt>2"-8b;IJ6t]J%=[Y-Z^dN<q[E"j
%e.,,'n(X3p(0r"pIQnSj>B^03M0D8?_[dR]7Z%st(BocKn660Jj5WH<h>gbI@k)GW*FR/CX04MJDU<9;pc<:rDN:OnD'5_m.W#5R
%6#LVM1r,\44m56oW&W0M6\PT&33?T3'-0U^/Ge3cLnt7"nKBAJHj+$;0ANMK<I@!D"Z)VDQJ9J$!McENg_qNSO9l?GYS1bh5;@=B
%P8oT=8Mgi'E:CndW5F__I#-akYpd.7'76kr^?2s\%+Qr63NV_*GtU(,SROfB^2hd,79H+iIbFadZ,GXYO>S(*8UijoLfsmV]*6G9
%R+ZSiZ?e)O9-AFKP+C-J9eeK\VZ4%UY"-)M^"QYRej-B<\@[YhMY(RFVQD6a3:[dtbRZWk[p1%.U_TT@e6/:eb4Ed;e'4OF+aP$J
%:(h(E]0_c%(qk:%fPSE#9&!S]Y6g]mHNoAA-@VFsQYb?fop;Dt8(<1D+Ou?VL%=b14Sft%^8?<ce2l.i&RuQR/orhmGrH9.fkQ,`
%`%1)TT3B!aT1dE*.tJ1/6\-m9T(aJ;[=i-W&eE(^5ljgd7e$"Yo0.Yi@-9$u?ejDF\_FZnbo<Gc2QnW8[!DQ/Whc4>(TK`ab:X*h
%U+I_a2B,/D9([jK!c`1eI)eFYj/*XOrPq+M,<h]9hc]_Q#_uA!_D`k%1rqn!3WC4FnoDYUbnNBc*VgKRJol8C<rOGl;h!@JH?KX]
%&.;=mM_E-Q-k^IFEEgWU7<1=aP[Tsu+VmVbQ]iiojcVq7*.fYM2u$;Y]1i#gZiUARJC6%$!h<@B2[Cg[4P0ZFPWM1`2W3r<2Sh8t
%/9kP;0;m*bG<TGf+C$)+XO=3G;'c5#"aGL@-N^ll,kr4oT.d]W^b<KJ8+YoTo"4YsdN+cJ!2VrXGR<6rF&3FmVs$q.V!oD$)Yli"
%1+j_A1po"YMAoJHMi%Q5hGZ\A4cB:6(-@2&.m#]36EYC#qC6m5Wgd6T\*>/T$Kg7$T7E)E9PF&R'*;Ye;0barG?FGD'/nd]eDV'!
%_r.LG0)TR*nVj34?;[HteXh7"<FBL5#=p:lVd.`501:D9^teKsT/=CXLm]FTbLtaWBs5?3?PTk+D=]<q2(8!dTtIGZgqT0a%/e$R
%dZZ)HX0*ntW$d]g<7d@Ie<=QMQ+EhTURjk^,DE!OSp27KgtR9(/n<!=\Y+V,!M-;KrY&F5b4s:O+a5(4OIfGR81nTYhH<Ft!8Qpc
%F^*:Ps$S=Q(Ra$`AcN,s8!I:qJ=nP>!C[)+qo_Vg-T!Q!8lknP@_rfdB;kHonqF5FD^=8QU)-94nX:hO#,@3-r9T('LQF:N$*Csr
%#u2,W"1)&7Ta:1L&#^9t`3ViT+'e:i$;"XD+UO)Mn!OQBA4%-E(`It.jTc-Plj$!V1`QZgHEUdcKV5@0VDOspo<*<S;sO$Zlq5$:
%E)H<G#BW'HrD&N]cCkn&E6qE?hLmPf4Xqk2HHe)Xn+Z]X3Y@:qK@WEn1abUE%Hq1H[>Ei8m@+Q*WAG_`Wl;-u$`tbg-O8@1LW/OX
%)Xo7RaW6Rka=mmZfsh@2l?TclVBA:1f49e+kLIJKio)Fp;S,@rKCf@::mfP=dsA%u`=`"K\"ls':o^KSm1q8o!#;#8Ym,42hK'=o
%o`$T(rZ`1uiH5)90&lF+KA((@meSMM%u0\9DUDkV<a</Bf`-"c\)P7V>f9WH\dd5"8d?3&^;0?\;8Ub.%WS/2-]?Q1Wrgq4&&O'l
%-jYb'IX`m#[19QI$*TeM_QMn82Y"`UMgg8=hAS1\d#k_aE84DXekFPNS;+iGAa@B6\X>D@iO4PrY#;*C[9]\Dr<lPdn,WnXS3G9;
%>S<qOqiI3b&)Z=q(ZbcnLrZ7N^];,O=sJjEY^3>_T8`oQ@+rC>>(1iO/Cqa1b5-U!/1KL!hiVHaZl2S)65I0R4DE3th$-o9o^h]s
%[]0f9U)=>Q`W$P.5PQ*h=NOt+)N7)"NsL,:)d8c.+haVPUruqG=mZ)PNnG1\U[;m2)DHYDPOQsm^"0_E>*Dul[h%c$XA7+]U(;!k
%+r?2*og',c(;cLBs1eJGfmu?s$c-snDBZNMJAT(:O*gBX#<_k3)Re5!D]aXT%,ZE;7&!P.+rHAlh?Nr+:b63a8tSQNO\d<<?&6hd
%AB5i!LD&0/3!#T^$1Z-D,o6'l#VmelJhQtqM4gX[s$18q=f<!lL],%[;"@X<)Y43O+j^t,A`:J3,np[]6h*]@Hr`V\,-cs"hSKn_
%&UkoDOYd97K]6C@Z$=>3,i\Sb+rnE^+<tlA_'4A`HDPj#:+0G-K$j4d[Gq0nLeMc+L5Blj)CHa.?kCfinA,bn%%`.NM)]`5&g@2#
%?m<EOJQO&nZ$:l]T1#CcJ!;4q!-^/I1_t[=Pg`^<:mR+f@<K/_03q4&O3&(I/L"(7ciNk&?qRnr_/'..G01<oTWNjsC:tX(km]&G
%:)TMVXr5s9I]rd):V\K.F[5p8b4>Q42hBLB~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 2469 191 a @beginspecial 0 @llx 0 @lly 171
@urx 46 @ury 1710 @rwi @setspecial
%%BeginDocument: graphics/TU_INF_Logo_gray.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: tu_ffi_typo_grau.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: gilani
%%CreationDate: 12/22/09
%%BoundingBox: 0 0 171 46
%%HiResBoundingBox: 0 0 170.0635 45.1973
%%CropBox: 0 0 170.0635 45.1973
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039
%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">tu_ffi_typo_grau</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-12-22T17:02:33+01:00</xap:CreateDate>
         <xap:ModifyDate>2009-12-22T17:02:33+01:00</xap:ModifyDate>
         <xap:MetadataDate>2009-12-22T17:02:33+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>68</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgARAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8Aj+uax5z/ADI8zTvDHPfy&#xA;kvLa6dFUpBApoAiVoKAip6k9c67Hjx6eHd5vJZMmTUT7/LuWf8qn/Mj/AKl68/4D+3H87h/nBH5H&#xA;N/NLv+VT/mR/1L15/wAB/bj+dw/zgv5HN/NKhfflr58sLOa9vNDuoLW3QyTzOlFVF3JO+Sjq8UjQ&#xA;kLYy0mWIsxNKWkeQPOes2KX+l6RcXdnIWVJ4lqpKmjCvscM9TjgalIAox6XJMXGJISrVdJ1LSL+X&#xA;T9St3tL2Dj6tvIKMvNQ61HurA5bCYkLBsNU4GBqQou0rSdS1e/i0/Tbd7u9n5elbxirNwUu1B7Kp&#xA;OM5iIsmgsIGZqIsprq3kLzpotk2oanpFzZ2kRUNcSLxVWY0XevjlUNTjmajIEtuTS5IC5RID3j/n&#xA;HXzvq2uaTqGkapO1zLpRia1uJCWkaKXkCjMevAptXfenbNJ2rp4wkJR24nd9laiU4mMt+F5R+dHn&#xA;nWtd846npsk7ppWmXElpb2SsRHWByjSMo2ZmZSanoNs5HPMymb6PuHs72biwaaEwPXOIkT133p55&#xA;lL0LsVdirsVdirsVdir3v/nG7zzrFzqN15Xv53ubRLc3Ni0jFmiMbKrRqTvxYPWnanvmZo8hB4ej&#xA;wXtf2ZjjAZ4DhlxVLzvr79numq6rp+k6fNqOozC3srcBppmBIUEhRsoJ6nNk8ClumeePK2px3Ull&#xA;fCSOyiM907RyxhI1qSxMirsKYqjB5i0U6fZaiLpTZai8MVlMAxEj3BCxKNqjkTTf6cVULnzh5atp&#xA;7uCa+RZLF4Y7sAOwje4bjEjFQRyYnpiqpqXmjQdMnuIL67WCW1thfXClXPG3LmMSfCDtzFPHFVmu&#xA;ebPL2hW8Fxqt2LaG4BMLlJHBCgE/YVqbMOuKpdcfmBop0tdWsJornTjK1s9xK724FwUDQxgPGSfU&#xA;ZlBalFBr2xVdffmJ5W0u4FjrF4tlqaqn1i0CTShHeMScFkSPi9A3UYqyK3uIbm3iuIW5wzIskbUI&#xA;qrCoNDQ9DiqpirsVdirsVdir5G/JLzRoXlrzm2o63c/VLI2ksQl4SSfGzIQOMSu37J7Z1XaGGWTH&#xA;URZt5Xs7NHHkuRoU98X89fyrZgq62WY9ALS8J/5M5o/5Nz/zftH63efylg/nfYf1L3/PD8sEXk+s&#xA;Mq+Js70D/kzj/J2f+b9o/Wv8pYP532H9THfPn5yflvqvkzWdOsNX9a9u7SWK3i+rXS8nZaAcniVR&#xA;9Jy/TaDNHJEmOwPeP1tGp1+GWOQEtyO4/qTX/nH3/wAlhYf8Zrn/AJPNlXan98fg29mf3I+P3vDP&#xA;z3/8mtrn/Rr/ANQcObrs3+4j8fvLpe0v7+Xw+4O/Ij/ya2h/9HX/AFBzY9pf3Evh94Xs3+/j8fuL&#xA;3P8A5yC/8lhf/wDGa2/5PLml7L/vh8Xddp/3J+H3sB/5xa/46XmD/jDb/wDE5Mzu2fpj8XB7G5y+&#xA;Dyr8wf8AlPfMv/bVvf8AqIfOHy/WfeX6J7K/xTF/wuH+5DH8rdg7FWW/lj5MtfOHmlNFubl7WJ4Z&#xA;JfVjAZqxgECjbZPHDikI97qe2u0ZaPAcsRxGwPm9g/6Fc0D/AKvd3/yLjzL/ACJ/nfZ+15D/AEa5&#xA;f9Tj8y8A1zT007WtQ09HMiWdzNbq7bFhFIUBNPGmYL32mynJijM/xRB+YQOLe7FXq/8AzjX/AOTD&#xA;l/7Z8/8AycjzI0v1h5X2w/xMf1x9xe5fm+jv+W+toilmMUdFUVJ/fJ2GbZ8uSjzvbeaYdAXy/NqD&#xA;65feYbmO1iSKGK0ZLZAZbr4lPH4o141bxwqxyWPW4fL83laG3bS9Q07zBYy6QknGZIILyf1YPiTm&#xA;rrFIWr12xVVubC/03yrrflSS3kutT0q/g1U3MaFpb+0e6SVrjvzkQAq4r2GKu84X0XmKXzTrWkpL&#xA;PpkPl6Ow+stFJGGuDdNMUQOqluKN8VBtirJNf82aBrn5f65ZaXcm5uodLkaSIRSqQAnH9tVB3PbF&#xA;Un84WWoeZG0Ty3bafJf2tlpn1y/jV0iAmngNvbHlIVHKIlnp8sVTCx1W91ez8h3F5G66hb6jJbai&#xA;rA8lnt7SeKQt/rFeX04q9KwK7FXYq7FXYq7FXwPncPDs1/Jj/wAmfoP/ABmf/ky+Yev/ALmTmdn/&#xA;AN9H8dHvn/OQX/ksL/8A4zW3/J5c0fZf98Pi7ztP+5Pw+98nZ1Dy76x/5x9/8lhYf8Zrn/k82cv2&#xA;p/fH4PUdmf3I+P3vDPz3/wDJra5/0a/9QcObrs3+4j8fvLpe0v7+Xw+4O/Ij/wAmtof/AEdf9Qc2&#xA;PaX9xL4feF7N/v4/H7i9z/5yC/8AJYX/APxmtv8Ak8uaXsv++Hxd12n/AHJ+H3sB/wCcWv8AjpeY&#xA;P+MNv/xOTM7tn6Y/Fwexucvg8q/MH/lPfMv/AG1b3/qIfOHy/WfeX6J7K/xTF/wuH+5DH8rdg7FX&#xA;p/8Azjp/5MqH/mEuP+IjLtN/eD8dC8x7W/4kf60X1Xm4fK3wz5pl9bzNq8xFPUvbh6eHKVjmhu33&#xA;HRRrBAd0I/cleLlOxV6v/wA41/8Akw5f+2fP/wAnI8yNL9YeV9sP8TH9cfcX0l5i16x0DRrrV74O&#xA;bS0UNKIgGejMFFASvdvHNs+XJHdefK6bcyLpuoaZPWOC0mv7XhH9YuXEMNQHqyrI4LAHpiq2788R&#xA;aFNrEWuyes2m28F6fqsVKQTEQ0+J/ib1gx7fDTFUboHnjS9Z1a40hba8sNTt4RcNa30BhdoSQvNd&#xA;2BAZgMVR2p+YtP03VdL0y4EhudXeSO0KKCoaFObczUU2xVKbD8yvLN/oFtrlq8r2lxdx2Hp8B6qT&#xA;yuEVZF5bdQevQ4q3bfmFY3epXFjaaVqdyLW8ewnu4rYNbrLE/B6yB/sqd606Yq61/Mny5c6jFaot&#xA;0tvczmztNTe3kWzmuQxX0o5iN25KR0oexxVQj/NHQTfRW0tpfwQTXjadFqElvS1a4VzHw9UM3V1I&#xA;6YqmFp568vXNrrlyszRx+XppoNSEgAZWgrVlFTVW4nj44qp6h+YPl3T/ACzYeY7t5ItO1EwrbVUe&#xA;pWcclqteyglt+gxVS1z8wbHR9Vj0yfS9SnmnYJay29uJIp29MSERNzHLivXbscVXy/mFokM1xDNF&#xA;cxzWs9jazxtGAyy6igeEEcv2Q3x+B8cVTHSvMmn6rqGoWdiJJV01xDc3fECAzUq0SPX4mT9qg2xV&#xA;8OZ3Dw7NfyY/8mfoP/GZ/wDky+Yev/uZOZ2f/fR/HR75/wA5Bf8AksL/AP4zW3/J5c0fZf8AfD4u&#xA;87T/ALk/D73ydnUPLvqn/nHO9juPy4jhUjlaXc8TgdQWIlFfokzme1Y1mvvAem7KleGu4l5J/wA5&#xA;DaHqFl+Yd1qc0Z+p6rHDJazU+EmGFIXSv8wMdaeBGbXsvIDhAHOLqu1MZGYk8pNf849aJqF7+Ytp&#xA;qMERNnpcc0l3NQ8V9WF4UWvTkzSVA8AfDHtTIBhIPOS9l4ycwI5R/seu/wDORV5DB+W00Tmj3V1b&#xA;xRDxYMZT/wALGc1XZUbze4F2vasgMPvIYR/zi1/x0vMH/GG3/wCJyZmds/TH4uH2Nzl8HlX5g/8A&#xA;Ke+Zf+2re/8AUQ+cPl+s+8v0T2V/imL/AIXD/chj+Vuwdir0n/nHt2X8z7AA0DwXIYeI9Fj+sZdp&#xA;/wC8j+Oheb9qx/gMvfH731jm4fKHwr5h/wCO/qf/ADFz/wDJxs0EeT7npP7qH9Ufcl+FyHYq9X/5&#xA;xr/8mHL/ANs+f/k5HmRpfrDyvth/iY/rj7i96/NDTL/U/Ier2GnwNcXk8aCGFPtMRKjGn0DNs+XI&#xA;DzH5P1O38s3EWmXV7rV4l1Z3kdvf3AdmFrOsrJGzBQpZQeuKsb806N5l8x23mrVINGurMXmn2lhY&#xA;2dz6YuJXiuPVkYJG7gKAe53wqyDyp5UvNE8/avPdC51KK8tIfqGt3UhlkRFakto7bDdwHWi9PfAq&#xA;d+YdHF75j8tXZjlb6hcXEnqRqpROVuy/vWJBVWNAKA1P34q8ssfy28z2GheWbmxtZI5Jrm2/xHpp&#xA;pUG2ujJFc0r1VPhb2pt1woZv5K8nX9vqms6leXWoWZfWr64gsVm42s0LyVSRoqHkHB8cCUpsND81&#xA;/o/QfK8ujPGNG1aK/uNVZ4Tatbw3LzAxUYyc3DU48ajvhVBx+RNYhuNL1W4hvL23g126nu9FeQ+k&#xA;kUlxIYbuKNSN02cjflXFVkH5Vatf6lrN5NI9nZ3+q3ranYtX/TLRJxcWhSm271BJ/ZOKr28n+cdW&#xA;0/y7pAsoILTSdHMdz+kOYja5u4jbuqiOpLxR1IPYnFU40/TPNE8XkX9I2cgu9GubiHUZOo4RQPDH&#xA;NyO5EgCmvicVS7zd5R8wajqfmcW1vPHHqGp6NJbXUVAwjghVJpUNf91HFWT+RNG1Hy1dah5aMLvo&#xA;cLfW9GvjuPTmaslvIf5433HiDgV8cZ3Dw7NfyY/8mfoP/GZ/+TL5h6/+5k5nZ/8AfR/HR75/zkF/&#xA;5LC//wCM1t/yeXNH2X/fD4u87T/uT8PvfJ2dQ8u9A/J78zD5K1qRbwPJod/xW9jQcmjda8JkHfjW&#xA;jDuPcDMHX6Txo7fUOTnaDV+DLf6S9+8/ap5f8w/lbrl7YT2+pWgspJYpE4yBHCVU0O6OvvQjNHpo&#xA;Tx54g2DbvdTOGTBIiiKb8ganoHl/8rtCvb+e3020NnHJLK5WMPIyVY9ubt7VJwaqE8meQFk2umnD&#xA;HgiTQFPAfzh/M3/GusxJZBo9E0/ktmrijSO1OcrjtWgCjsPmc3ug0fgx3+ouj1+s8aW30hmX/OLX&#xA;/HS8wf8AGG3/AOJyZh9s/TH4uX2Nzl8HlX5g/wDKe+Zf+2re/wDUQ+cPl+s+8v0T2V/imL/hcP8A&#xA;chj+VuwdirPvyN1LTtN/Maxu9RuobK1SK4D3FxIsUYLQsAC7kLuctwGskSfxsXQe0uGeTRyjAGUr&#xA;jsBZ5vp3/lYPkL/qZdK/6Tbf/mvNr4sO8fN8y/krV/6lk/0kv1PjDV51uNWvbhacZp5ZFoaijOTs&#xA;e+aSPJ9mwR4ccR3AIPC3OxV6v/zjX/5MOX/tnz/8nI8yNL9YeV9sP8TH9cfcX1Hm2fLnYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq+B87h4dtWZWDKSrDoRscVXvPO68XkZl8CSRjSqeKuxVcksicuDle&#xA;QKtxJFQeoNO2NK28ssnH1HZ+ACpyJNFHQCvbGltZir3P/nFr/jpeYP8AjDb/APE5M0vbP0x+Luux&#xA;ucvg8q/MH/lPfMv/AG1b3/qIfOHy/WfeX6J7K/xTF/wuH+5DH8rdg7FUw0HQtS17V7bSdNjEt9dE&#xA;rDGzBASqlj8TUA2U4QCdg4+q1MMGM5J7RjzZv/0L7+aH/Vvh/wCkmH/mrLfy+T+b9363Sf6K9D/O&#xA;P+lLzjKXo3Yq7FXq/wDzjX/5MOX/ALZ8/wDycjzI0v1h5X2w/wATH9cfcX1Hm2fLnYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq+LvyzstBv8AzxpWn69bi6029lNvJEXkj+OVSsRDRsjf3hXvnX6uUo4i&#xA;YmiHkNJGMsoEvpLPR+TNvF+X3me9kgaTXbC9uRpcnJxytLGURykRg8W5Uf8AZ60zC/Pk5YD+EgX7&#xA;y5v5ADDM16gTXuH4LE/za8vaD5b1yw0PTIBHc2lhb/peXnI/qXjrydqOzBarxai0G/TMrRZZZImU&#xA;uRJr3OLrcUcchGPMAX71GTy/pA/KGLzALf8A3LtrpsWueb/7z/VWk4cOXD7YrXjX3w+LL8xwfw8F&#xA;/G0eFHwOP+Ljr4Ur/k15b0XzH54g0zWbf61YvBM7Q85I6si1U8o2Rtvng1+WWPEZRNFloMMcmXhk&#xA;LCJ/Maw0fT9MtoovItx5XvJ5eUV5PeT3AkSNfjjCSfD1dTXI6WUpE/vBMe4BOrjGIA8PgPvJX/kl&#xA;5Q8ueaNe1Oy16L1LWHT5J45BI8XpOJEX1Kqyj4VY/aqPEYO0M88cAY8+JPZ+CGSZEuXD+pGaz+WV&#xA;t5e8i+Z5dUteeuaVqUFvZ3waRVa2l9Mq6oG9Mh1buCR06jIY9WcmWHCfTKPLzbMmjGPFPiHqjLn5&#xA;Mi/5xa/46XmD/jDb/wDE5Mx+2fpj8W/sbnL4PKvzB/5T3zL/ANtW9/6iHzh8v1n3l+ieyv8AFMX/&#xA;AAuH+5DH8rdg7FWb/kp/5NHQf+Msv/JiTLcP1j3uk9o/8Rye4f7oPsPNy+PvgXNC+9uxV2KvV/8A&#xA;nGv/AMmHL/2z5/8Ak5HmRpfrDyvth/iY/rj7i+lNe1uy0PSpdTveZtoWjVhEpdy0sixIFUdas4zb&#xA;Ply3Stbh1CGSU21zZLGwWl7C1uWJ6cQ/XFUeZIw3EsA1OXEkV4jv8sVQmo6xYWEcMk7/AAzzQW6B&#xA;PiPO6kEUWw7FmG+KqlpqVjdmQW8yyGKWS3kG4IliNHXelePtiquJYygcOCh6NUU606/PFUBFr1hL&#xA;r0+iReo97bQJc3BCN6SLI3FFaT7PJqEhfAHFV2ja7p2r6fBf2cn7i45ekH+Fzxcxn4T/AJSnFVtn&#xA;r1hd6hqFlD6nPTGVLuZkZYQ7oJOCyH4WZVYFqdKjFUeZYw4QuA56KSK7+30Yq0s8LDksistQKggi&#xA;p6Yq55ok5c3AKqXYV34jqadaYqgrPXbC9lgW29SSG5tEvoLrgwhaGQjj8ZAHIg14nemKo71Y6Iea&#xA;0k+waj4tq7eO2KvhC0ubiyvYbqElLi2kWWM91eNgw+4jO3kARReIjIg2Oj23Ufz40if8xNF1WBZ0&#xA;8vW1nNb38JQeoXuvik+GtGAeOI+9Dmmh2bIYZRP1k7fD8F3M+0onNGQ+gDf4/gPJvO/mD/EPm3Vd&#xA;ZBYx3lw7wchRhCp4wgjxEaqM2mnxeHjEe4Or1GXxMhl3lMpPM2mN+VUflkF/0mmtfpAjj+79D6sY&#xA;vtV+1yPTK/BPj8fThr7WfijwODrx39it+UnmvSfK3nODV9VMgs0hmjYxLzarrQbVGDXYZZMZjHmy&#xA;0OeOLJxS5L/O935MutNhbSde1nVr+OUARanQxpEynmympIaoXHTxyA+qMYjyTqZYyBwylI+al+XP&#xA;mnStA/xF+kDIP0no9zYWvpry/fTcePLcUG3XDqsMp8NdJAsNNmEOK+sCGRar+bVvrf5SN5Z1Qyvr&#xA;8MkMcVxx5JLBC6srO9a8woIPjSvfMeGhMM/HH6XJnrhPT8EvqZH/AM4sxSG98xSgfu1jtULf5TNK&#xA;QP8AhTmP2ydo/Fyexucvh+l5R+YaMvn7zIGBU/pS8NCKbG4cg/SDnDZfrPvL9Edkm9Ji/wCFw/3I&#xA;Y9kHYOxVUgnnt5VmgkaKVPsyISrDtsRvixlESFEWEZ/iHX/+rnd/8j5P+asHCGn8pi/mR+QS/C5D&#xA;sVdir1n/AJxpjdvzBndVJVNPmLnsKyRAZk6T63lPbEgaQf1x9xfQPnzQ7zXPK9zpln/fzS2rA8zH&#xA;RYrqKVyHG4PBDT3zavl7FPzD/L7WtS0yz0zRwb60H1lrh7+f6xcpJJGqxNHNdidlQFfiCUbwOFVa&#xA;z8katHrt5PeabbXjXlvGlvrUk/72042QtmhWPgxb46tsQDWp3xVLrPyf55KG5urC1S6s49GitoEu&#xA;arMNKuTK5L8fg5r064qp+YvLWoaPpd5cWFnBY65Lrgm0G4twGab65yjMUnpqCojikk6mm2Kp95o8&#xA;i3D6JoWm6baQ6jZaQjwyafcv6SScrdoY5iSr/FG7c/vpvTFUX5M8nXej63eahfLFNPLp2m2a3wAM&#xA;ryW0TJcEmgajFY+vXiPDArEpfyn1a60tIru2hku7XSJ7ewf1SPTvmvHnidSKUojD4vowqm975AvT&#xA;DqFwum2l1Pc6zFqM9oxSMXlslqiNFK/Ej/egvJxbau/fFVTyz+XMtvrOm3uuW1vd/o7SoLa2Zm9X&#xA;0bmO6lmogYf7rR0VXp2xVj1p+S0iaTHDJYw/WxolzC7CVqHVjIGtpetPhUsOXbpiqYXP5f8Ami98&#xA;9Lqt5BatY8pElmX0h6lvNZmApMvp+rI3L7XJ+NOi9cVUT+XHmRtGgtorO2tXg0eCwnto5QsdzLBe&#xA;JNKGZFBAuY0JZqdW374qq+ZvIWt39tpM+k6FZafdWgkSOxM8E9pD6swcmSGS2KnYVrEwYdBUb4q8&#xA;Y/Ob/Bn+M7z/AA36nP1H/SX2fq31ivx+hT4qcq8u1em2dVoPE8Mcfw7683lNf4fiHg+PdfkwPM1w&#xA;nYq7FXYq7FXYq2tKjlXjXenWmKvrX8jv8F/4MX/DHqf3n+5P6zT6x9Z4ivPj8PHjThx2p78s5btH&#xA;xPE9fw7qep7O8Pw/R8b528p/5yK/wR/iQ/UPV/xNxT9Jelx+r04jj6ld/V4U+ztSld85rVcPHt8f&#xA;x+Pm+teyX5rwfXXg/wAN/V8PK+947mO9g7FXYq7FXYq7FXYq+nP+cdf8EfoO7/Qvrfpv4P0t9a4+&#xA;pTf0/T4/D6Va+9ftdsz9Fw0f5345fj9D5l7W/mvFj4teH/DXLzvz/A6vXsz3kXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:25971E0EAEF0DE11B753946C71D6A8A7</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:26971E0EAEF0DE11B753946C71D6A8A7</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:0B1984F4ADF0DE11B753946C71D6A8A7</stRef:instanceID>
            <stRef:documentID>uuid:0A1984F4ADF0DE11B753946C71D6A8A7</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfxid="http://www.npes.org/pdfx/ns/id/">
         <pdfxid:GTS_PDFXVersion>PDF/X-4</pdfxid:GTS_PDFXVersion>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>297.000002</stDim:w>
            <stDim:h>209.999994</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Standard-Farbfeldgruppe</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>100c 38m 0y 15k</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>38.000500</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>14.999401</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=75</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>75.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=100 Y=100 K=0 1</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0 1</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -45.1973 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 45.1973 li
170.063 45.1973 li
170.063 0 li
cp
clp
[1 0 0 1 0 0 ]ct
53.104 0 mo
89.1689 0 li
91.6885 0 93.7354 2.04443 93.7354 4.56738 cv
93.7354 40.6309 li
93.7354 43.1533 91.6885 45.1973 89.1689 45.1973 cv
53.104 45.1973 li
50.5835 45.1973 48.5366 43.1533 48.5366 40.6309 cv
48.5366 4.56738 li
48.5366 2.04443 50.5835 0 53.104 0 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
ef
4.56738 0.000488281 mo
40.6299 0.000488281 li
43.1514 0.000488281 45.1973 2.04492 45.1973 4.56787 cv
45.1973 40.6309 li
45.1973 43.1533 43.1514 45.1973 40.6299 45.1973 cv
4.56738 45.1973 li
2.04492 45.1973 0 43.1533 0 40.6309 cv
0 4.56787 li
0 2.04492 2.04492 0.000488281 4.56738 0.000488281 cv
1 0.380005 0 0.149994 cmyk
ef
74.8174 7.75342 mo
67.4541 7.75342 li
67.7305 25.7646 li
74.5396 25.7646 li
74.8174 7.75342 li
74.8174 7.75342 li
cp
0 0 0 0 cmyk
f
74.3428 30.5537 mo
67.9287 30.5537 li
67.9287 37.4434 li
74.3428 37.4434 li
74.3428 30.5537 li
74.3428 30.5537 li
cp
f
100.853 5.104 mo
100.853 6.94824 li
103.396 6.94824 li
103.396 7.77295 li
100.853 7.77295 li
100.853 10.3311 li
99.9248 10.3311 li
99.9248 4.27979 li
103.834 4.27979 li
103.834 5.104 li
100.853 5.104 li
cp
0 0 0 0.75 cmyk
f
106.498 5.64795 mo
105.545 8.33398 li
107.426 8.33398 li
106.498 5.64795 li
cp
108.104 10.3311 mo
107.684 9.11572 li
105.27 9.11572 li
104.849 10.3311 li
103.86 10.3311 li
106.103 4.27979 li
106.851 4.27979 li
109.093 10.3311 li
108.104 10.3311 li
cp
f
113.688 10.3311 mo
111.971 7.34766 li
110.939 8.57178 li
110.939 10.3311 li
110.012 10.3311 li
110.012 4.27979 li
110.939 4.27979 li
110.939 7.32227 li
113.439 4.27979 li
114.573 4.27979 li
112.589 6.65088 li
114.779 10.3311 li
113.688 10.3311 li
cp
f
117.754 10.3818 mo
116.508 10.3818 115.563 9.54053 115.563 8.29102 cv
115.563 4.27979 li
116.49 4.27979 li
116.49 8.24854 li
116.49 9.05615 116.989 9.55762 117.754 9.55762 cv
118.518 9.55762 119.024 9.05615 119.024 8.24854 cv
119.024 4.27979 li
119.953 4.27979 li
119.953 8.29102 li
119.953 9.54053 118.999 10.3818 117.754 10.3818 cv
cp
f
121.357 10.3311 mo
121.357 4.27979 li
122.285 4.27979 li
122.285 9.50684 li
125.231 9.50684 li
125.231 10.3311 li
121.357 10.3311 li
cp
f
127.775 5.104 mo
127.775 10.3311 li
126.848 10.3311 li
126.848 5.104 li
125.164 5.104 li
125.164 4.27979 li
129.459 4.27979 li
129.459 5.104 li
127.775 5.104 li
cp
f
132.419 3.65088 mo
132.419 2.73291 li
133.21 2.73291 li
133.21 3.65088 li
132.419 3.65088 li
cp
131.93 5.64795 mo
130.977 8.33398 li
132.857 8.33398 li
131.93 5.64795 li
cp
130.563 3.65088 mo
130.563 2.73291 li
131.354 2.73291 li
131.354 3.65088 li
130.563 3.65088 li
cp
133.536 10.3311 mo
133.115 9.11572 li
130.701 9.11572 li
130.28 10.3311 li
129.292 10.3311 li
131.534 4.27979 li
132.282 4.27979 li
134.524 10.3311 li
133.536 10.3311 li
cp
f
136.968 5.104 mo
136.968 10.3311 li
136.04 10.3311 li
136.04 5.104 li
134.356 5.104 li
134.356 4.27979 li
138.651 4.27979 li
138.651 5.104 li
136.968 5.104 li
cp
f
100.853 14.9614 mo
100.853 16.8057 li
103.396 16.8057 li
103.396 17.6304 li
100.853 17.6304 li
100.853 20.1885 li
99.9248 20.1885 li
99.9248 14.1372 li
103.834 14.1372 li
103.834 14.9614 li
100.853 14.9614 li
cp
f
107.547 13.5083 mo
107.547 12.5903 li
108.337 12.5903 li
108.337 13.5083 li
107.547 13.5083 li
cp
105.691 13.5083 mo
105.691 12.5903 li
106.481 12.5903 li
106.481 13.5083 li
105.691 13.5083 li
cp
107.006 20.2393 mo
105.76 20.2393 104.814 19.3979 104.814 18.1484 cv
104.814 14.1372 li
105.742 14.1372 li
105.742 18.106 li
105.742 18.9136 106.241 19.415 107.006 19.415 cv
107.77 19.415 108.276 18.9136 108.276 18.106 cv
108.276 14.1372 li
109.205 14.1372 li
109.205 18.1484 li
109.205 19.3979 108.251 20.2393 107.006 20.2393 cv
cp
f
112.895 14.9614 mo
111.52 14.9614 li
111.52 16.8569 li
112.895 16.8569 li
113.513 16.8569 113.934 16.5083 113.934 15.9136 cv
113.934 15.3184 113.513 14.9614 112.895 14.9614 cv
cp
113.968 20.1885 mo
112.68 17.6387 li
111.52 17.6387 li
111.52 20.1885 li
110.592 20.1885 li
110.592 14.1372 li
112.963 14.1372 li
114.123 14.1372 114.861 14.8765 114.861 15.9048 cv
114.861 16.772 114.329 17.3242 113.642 17.5112 cv
115.051 20.1885 li
113.968 20.1885 li
cp
f
119.934 20.1885 mo
119.934 19.2622 li
120.896 19.2622 li
120.896 20.1885 li
119.934 20.1885 li
cp
120.899 18.3867 mo
119.93 18.3867 li
119.882 14.1372 li
120.947 14.1372 li
120.899 18.3867 li
cp
f
126.066 20.1885 mo
123.24 15.9302 li
123.24 20.1885 li
122.313 20.1885 li
122.313 14.1372 li
123.163 14.1372 li
125.989 18.3867 li
125.989 14.1372 li
126.917 14.1372 li
126.917 20.1885 li
126.066 20.1885 li
cp
f
129.296 14.9614 mo
129.296 16.8057 li
131.839 16.8057 li
131.839 17.6304 li
129.296 17.6304 li
129.296 20.1885 li
128.368 20.1885 li
128.368 14.1372 li
132.277 14.1372 li
132.277 14.9614 li
129.296 14.9614 li
cp
f
136.162 15.2847 mo
135.947 15.0552 135.612 14.9106 135.251 14.9106 cv
134.891 14.9106 134.556 15.0552 134.341 15.2847 cv
134.04 15.6074 133.979 15.9473 133.979 17.1626 cv
133.979 18.3779 134.04 18.7183 134.341 19.041 cv
134.556 19.2705 134.891 19.415 135.251 19.415 cv
135.612 19.415 135.947 19.2705 136.162 19.041 cv
136.463 18.7183 136.522 18.3779 136.522 17.1626 cv
136.522 15.9473 136.463 15.6074 136.162 15.2847 cv
cp
136.866 19.5938 mo
136.445 20.0098 135.904 20.2393 135.251 20.2393 cv
134.599 20.2393 134.065 20.0098 133.645 19.5938 cv
133.044 18.9985 133.052 18.3271 133.052 17.1626 cv
133.052 15.9985 133.044 15.3271 133.645 14.7319 cv
134.065 14.3154 134.599 14.0859 135.251 14.0859 cv
135.904 14.0859 136.445 14.3154 136.866 14.7319 cv
137.468 15.3271 137.45 15.9985 137.45 17.1626 cv
137.45 18.3271 137.468 18.9985 136.866 19.5938 cv
cp
f
141.016 14.9614 mo
139.641 14.9614 li
139.641 16.8569 li
141.016 16.8569 li
141.634 16.8569 142.055 16.5083 142.055 15.9136 cv
142.055 15.3184 141.634 14.9614 141.016 14.9614 cv
cp
142.089 20.1885 mo
140.801 17.6387 li
139.641 17.6387 li
139.641 20.1885 li
138.713 20.1885 li
138.713 14.1372 li
141.084 14.1372 li
142.244 14.1372 142.982 14.8765 142.982 15.9048 cv
142.982 16.772 142.45 17.3242 141.763 17.5112 cv
143.172 20.1885 li
142.089 20.1885 li
cp
f
148.7 20.1885 mo
148.7 16.1431 li
147.292 19.0923 li
146.604 19.0923 li
145.161 16.1431 li
145.161 20.1885 li
144.233 20.1885 li
144.233 14.1372 li
145.161 14.1372 li
146.948 17.9023 li
148.7 14.1372 li
149.629 14.1372 li
149.629 20.1885 li
148.7 20.1885 li
cp
f
153.168 15.5054 mo
152.215 18.1914 li
154.096 18.1914 li
153.168 15.5054 li
cp
154.774 20.1885 mo
154.354 18.9731 li
151.939 18.9731 li
151.519 20.1885 li
150.53 20.1885 li
152.772 14.1372 li
153.521 14.1372 li
155.763 20.1885 li
154.774 20.1885 li
cp
f
158.192 14.9614 mo
158.192 20.1885 li
157.265 20.1885 li
157.265 14.9614 li
155.581 14.9614 li
155.581 14.1372 li
159.876 14.1372 li
159.876 14.9614 li
158.192 14.9614 li
cp
f
160.876 20.1885 mo
160.876 14.1372 li
161.804 14.1372 li
161.804 20.1885 li
160.876 20.1885 li
cp
f
166.921 20.1885 mo
165.203 17.2051 li
164.172 18.4292 li
164.172 20.1885 li
163.244 20.1885 li
163.244 14.1372 li
164.172 14.1372 li
164.172 17.1797 li
166.672 14.1372 li
167.806 14.1372 li
165.821 16.5083 li
168.012 20.1885 li
166.921 20.1885 li
cp
f
100.607 36.3579 mo
100.607 37.9414 li
102.789 37.9414 li
102.789 38.6484 li
100.607 38.6484 li
100.607 40.8438 li
99.8115 40.8438 li
99.8115 35.6504 li
103.165 35.6504 li
103.165 36.3579 li
100.607 36.3579 li
cp
f
105.864 39.21 mo
104.987 39.21 li
104.546 39.21 104.317 39.4063 104.317 39.7422 cv
104.317 40.0781 104.531 40.2676 105.003 40.2676 cv
105.29 40.2676 105.504 40.2461 105.702 40.0557 cv
105.813 39.9473 105.864 39.7715 105.864 39.5088 cv
105.864 39.21 li
cp
105.88 40.8438 mo
105.88 40.5078 li
105.606 40.7783 105.349 40.8877 104.885 40.8877 cv
104.42 40.8877 104.11 40.7783 103.882 40.5518 cv
103.69 40.3555 103.588 40.0703 103.588 39.7568 cv
103.588 39.1367 104.022 38.6914 104.877 38.6914 cv
105.864 38.6914 li
105.864 38.4297 li
105.864 37.9629 105.629 37.7363 105.047 37.7363 cv
104.634 37.7363 104.435 37.832 104.229 38.0938 cv
103.734 37.6348 li
104.089 37.2261 104.457 37.1021 105.076 37.1021 cv
106.101 37.1021 106.616 37.5322 106.616 38.3711 cv
106.616 40.8438 li
105.88 40.8438 li
cp
f
109.225 40.8877 mo
108.384 40.8877 107.559 40.377 107.559 38.9912 cv
107.559 37.6055 108.384 37.1021 109.225 37.1021 cv
109.74 37.1021 110.102 37.248 110.455 37.6201 cv
109.939 38.1152 li
109.703 37.8613 109.52 37.7656 109.225 37.7656 cv
108.937 37.7656 108.693 37.8828 108.531 38.0938 cv
108.369 38.2988 108.311 38.5605 108.311 38.9912 cv
108.311 39.4219 108.369 39.6914 108.531 39.8955 cv
108.693 40.1074 108.937 40.2236 109.225 40.2236 cv
109.52 40.2236 109.703 40.1289 109.939 39.873 cv
110.455 40.3623 li
110.102 40.7344 109.74 40.8877 109.225 40.8877 cv
cp
f
113.582 40.8438 mo
113.582 40.4717 li
113.323 40.749 112.963 40.8877 112.587 40.8877 cv
112.203 40.8877 111.887 40.7637 111.665 40.5518 cv
111.378 40.2744 111.29 39.9248 111.29 39.5088 cv
111.29 37.146 li
112.041 37.146 li
112.041 39.3994 li
112.041 39.9756 112.373 40.2236 112.793 40.2236 cv
113.213 40.2236 113.567 39.9688 113.567 39.3994 cv
113.567 37.146 li
114.318 37.146 li
114.318 40.8438 li
113.582 40.8438 li
cp
f
116.48 40.8438 mo
115.766 40.8438 115.456 40.3701 115.456 39.8223 cv
115.456 35.6504 li
116.207 35.6504 li
116.207 39.7793 li
116.207 40.0635 116.311 40.209 116.613 40.209 cv
116.944 40.209 li
116.944 40.8438 li
116.48 40.8438 li
cp
f
118.822 40.8438 mo
118.122 40.8438 117.798 40.3477 117.798 39.8154 cv
117.798 37.7803 li
117.37 37.7803 li
117.37 37.2114 li
117.798 37.2114 li
117.798 36.0884 li
118.55 36.0884 li
118.55 37.2114 li
119.271 37.2114 li
119.271 37.7803 li
118.55 37.7803 li
118.55 39.7793 li
118.55 40.0488 118.682 40.209 118.962 40.209 cv
119.271 40.209 li
119.271 40.8438 li
118.822 40.8438 li
cp
f
121.591 41.5801 mo
121.518 41.7842 121.429 41.9307 121.318 42.04 cv
121.112 42.2441 120.839 42.3096 120.552 42.3096 cv
120.25 42.3096 li
120.25 41.6387 li
120.441 41.6387 li
120.758 41.6387 120.869 41.5439 120.979 41.2451 cv
121.186 40.6689 li
119.881 37.146 li
120.677 37.146 li
121.569 39.75 li
122.438 37.146 li
123.242 37.146 li
121.591 41.5801 li
cp
f
127.232 37.9775 mo
127.092 37.8389 126.9 37.7656 126.68 37.7656 cv
126.458 37.7656 126.273 37.8389 126.134 37.9775 cv
125.905 38.2031 125.876 38.5898 125.876 38.9912 cv
125.876 39.3926 125.905 39.7793 126.134 40.0049 cv
126.273 40.1436 126.458 40.2236 126.68 40.2236 cv
126.9 40.2236 127.092 40.1436 127.232 40.0049 cv
127.461 39.7793 127.49 39.3926 127.49 38.9912 cv
127.49 38.5898 127.461 38.2031 127.232 37.9775 cv
cp
127.8 40.4502 mo
127.557 40.6982 127.188 40.8877 126.68 40.8877 cv
126.171 40.8877 125.81 40.6982 125.566 40.4502 cv
125.213 40.085 125.124 39.6182 125.124 38.9912 cv
125.124 38.3711 125.213 37.9043 125.566 37.5391 cv
125.81 37.2915 126.171 37.1021 126.68 37.1021 cv
127.188 37.1021 127.557 37.2915 127.8 37.5391 cv
128.153 37.9043 128.241 38.3711 128.241 38.9912 cv
128.241 39.6182 128.153 40.085 127.8 40.4502 cv
cp
f
130.094 37.7803 mo
130.094 40.8438 li
129.342 40.8438 li
129.342 37.7803 li
128.914 37.7803 li
128.914 37.2114 li
129.342 37.2114 li
129.342 36.6426 li
129.342 36.1104 129.666 35.6143 130.366 35.6143 cv
130.838 35.6143 li
130.838 36.2485 li
130.506 36.2485 li
130.227 36.2485 130.094 36.4092 130.094 36.6792 cv
130.094 37.2114 li
130.838 37.2114 li
130.838 37.7803 li
130.094 37.7803 li
cp
f
133.162 40.8438 mo
133.162 35.6504 li
133.958 35.6504 li
133.958 40.8438 li
133.162 40.8438 li
cp
f
137.45 40.8438 mo
137.45 38.5898 li
137.45 38.0137 137.119 37.7656 136.698 37.7656 cv
136.278 37.7656 135.925 38.0215 135.925 38.5898 cv
135.925 40.8438 li
135.173 40.8438 li
135.173 37.146 li
135.91 37.146 li
135.91 37.5176 li
136.168 37.2407 136.529 37.1021 136.905 37.1021 cv
137.288 37.1021 137.605 37.2261 137.826 37.4375 cv
138.114 37.7148 138.202 38.0645 138.202 38.4805 cv
138.202 40.8438 li
137.45 40.8438 li
cp
f
140.164 37.7803 mo
140.164 40.8438 li
139.412 40.8438 li
139.412 37.7803 li
138.984 37.7803 li
138.984 37.2114 li
139.412 37.2114 li
139.412 36.6426 li
139.412 36.1104 139.736 35.6143 140.437 35.6143 cv
140.908 35.6143 li
140.908 36.2485 li
140.576 36.2485 li
140.297 36.2485 140.164 36.4092 140.164 36.6792 cv
140.164 37.2114 li
140.908 37.2114 li
140.908 37.7803 li
140.164 37.7803 li
cp
f
143.627 37.9775 mo
143.486 37.8389 143.295 37.7656 143.074 37.7656 cv
142.853 37.7656 142.668 37.8389 142.528 37.9775 cv
142.3 38.2031 142.271 38.5898 142.271 38.9912 cv
142.271 39.3926 142.3 39.7793 142.528 40.0049 cv
142.668 40.1436 142.853 40.2236 143.074 40.2236 cv
143.295 40.2236 143.486 40.1436 143.627 40.0049 cv
143.855 39.7793 143.885 39.3926 143.885 38.9912 cv
143.885 38.5898 143.855 38.2031 143.627 37.9775 cv
cp
144.194 40.4502 mo
143.951 40.6982 143.582 40.8877 143.074 40.8877 cv
142.565 40.8877 142.204 40.6982 141.961 40.4502 cv
141.607 40.085 141.519 39.6182 141.519 38.9912 cv
141.519 38.3711 141.607 37.9043 141.961 37.5391 cv
142.204 37.2915 142.565 37.1021 143.074 37.1021 cv
143.582 37.1021 143.951 37.2915 144.194 37.5391 cv
144.548 37.9043 144.636 38.3711 144.636 38.9912 cv
144.636 39.6182 144.548 40.085 144.194 40.4502 cv
cp
f
147.678 38.0137 mo
147.508 37.8457 147.375 37.7656 147.117 37.7656 cv
146.712 37.7656 146.373 38.0869 146.373 38.5977 cv
146.373 40.8438 li
145.621 40.8438 li
145.621 37.146 li
146.358 37.146 li
146.358 37.5469 li
146.55 37.2842 146.934 37.1021 147.354 37.1021 cv
147.715 37.1021 147.987 37.1968 148.245 37.4521 cv
147.678 38.0137 li
cp
f
153.501 40.8438 mo
153.501 38.5898 li
153.501 38.0137 153.17 37.7656 152.749 37.7656 cv
152.344 37.7656 151.976 38.0215 151.976 38.5537 cv
151.976 40.8438 li
151.224 40.8438 li
151.224 38.5898 li
151.224 38.0137 150.893 37.7656 150.472 37.7656 cv
150.052 37.7656 149.698 38.0215 149.698 38.5898 cv
149.698 40.8438 li
148.946 40.8438 li
148.946 37.146 li
149.684 37.146 li
149.684 37.5176 li
149.935 37.248 150.303 37.1021 150.679 37.1021 cv
151.143 37.1021 151.504 37.2842 151.74 37.6416 cv
152.042 37.2773 152.418 37.1021 152.912 37.1021 cv
153.295 37.1021 153.634 37.2261 153.855 37.4375 cv
154.143 37.7148 154.253 38.0645 154.253 38.4805 cv
154.253 40.8438 li
153.501 40.8438 li
cp
f
157.384 39.21 mo
156.506 39.21 li
156.064 39.21 155.836 39.4063 155.836 39.7422 cv
155.836 40.0781 156.05 40.2676 156.521 40.2676 cv
156.809 40.2676 157.022 40.2461 157.221 40.0557 cv
157.332 39.9473 157.384 39.7715 157.384 39.5088 cv
157.384 39.21 li
cp
157.398 40.8438 mo
157.398 40.5078 li
157.125 40.7783 156.867 40.8877 156.403 40.8877 cv
155.938 40.8877 155.629 40.7783 155.4 40.5518 cv
155.209 40.3555 155.106 40.0703 155.106 39.7568 cv
155.106 39.1367 155.541 38.6914 156.396 38.6914 cv
157.384 38.6914 li
157.384 38.4297 li
157.384 37.9629 157.147 37.7363 156.565 37.7363 cv
156.152 37.7363 155.953 37.832 155.747 38.0938 cv
155.253 37.6348 li
155.607 37.2261 155.976 37.1021 156.595 37.1021 cv
157.619 37.1021 158.135 37.5322 158.135 38.3711 cv
158.135 40.8438 li
157.398 40.8438 li
cp
f
160.361 40.8438 mo
159.661 40.8438 159.337 40.3477 159.337 39.8154 cv
159.337 37.7803 li
158.909 37.7803 li
158.909 37.2114 li
159.337 37.2114 li
159.337 36.0884 li
160.089 36.0884 li
160.089 37.2114 li
160.811 37.2114 li
160.811 37.7803 li
160.089 37.7803 li
160.089 39.7793 li
160.089 40.0488 160.221 40.209 160.501 40.209 cv
160.811 40.209 li
160.811 40.8438 li
160.361 40.8438 li
cp
f
161.695 40.8438 mo
161.695 37.146 li
162.447 37.146 li
162.447 40.8438 li
161.695 40.8438 li
cp
161.674 36.4165 mo
161.674 35.6289 li
162.47 35.6289 li
162.47 36.4165 li
161.674 36.4165 li
cp
f
165.063 40.8877 mo
164.222 40.8877 163.396 40.377 163.396 38.9912 cv
163.396 37.6055 164.222 37.1021 165.063 37.1021 cv
165.578 37.1021 165.939 37.248 166.293 37.6201 cv
165.777 38.1152 li
165.541 37.8613 165.357 37.7656 165.063 37.7656 cv
164.774 37.7656 164.531 37.8828 164.369 38.0938 cv
164.207 38.2988 164.148 38.5605 164.148 38.9912 cv
164.148 39.4219 164.207 39.6914 164.369 39.8955 cv
164.531 40.1074 164.774 40.2236 165.063 40.2236 cv
165.357 40.2236 165.541 40.1289 165.777 39.873 cv
166.293 40.3623 li
165.939 40.7344 165.578 40.8877 165.063 40.8877 cv
cp
f
168.509 40.8877 mo
167.897 40.8877 167.381 40.7852 166.938 40.3555 cv
167.433 39.8662 li
167.735 40.1729 168.141 40.2529 168.509 40.2529 cv
168.966 40.2529 169.327 40.0928 169.327 39.7422 cv
169.327 39.4941 169.187 39.334 168.825 39.3047 cv
168.229 39.2539 li
167.528 39.1953 167.123 38.8818 167.123 38.2324 cv
167.123 37.5107 167.75 37.1021 168.531 37.1021 cv
169.091 37.1021 169.57 37.2188 169.916 37.5176 cv
169.444 37.9922 li
169.209 37.7949 168.877 37.7227 168.523 37.7227 cv
168.074 37.7227 167.846 37.9189 167.846 38.1963 cv
167.846 38.415 167.964 38.582 168.361 38.6191 cv
168.951 38.6699 li
169.651 38.7285 170.063 39.0566 170.063 39.7129 cv
170.063 40.4863 169.4 40.8877 168.509 40.8877 cv
cp
f
19.2354 33.2925 mo
17.7725 33.2925 li
17.7725 40.7813 li
19.2354 40.7813 li
19.2354 33.2925 li
cp
0 0 0 0 cmyk
ef
29.9072 40.7813 mo
29.9072 39.4775 li
26.4365 39.4775 li
26.4365 37.6563 li
29.3916 37.6563 li
29.3916 36.354 li
26.4365 36.354 li
26.4365 34.5972 li
29.9072 34.5972 li
29.9072 33.2925 li
24.9746 33.2925 li
24.9746 40.7813 li
29.9072 40.7813 li
cp
ef
40.9229 40.7813 mo
40.9229 33.2925 li
39.4609 33.2925 li
39.4609 37.8779 li
36.4951 33.2925 li
35.1904 33.2925 li
35.1904 40.7813 li
36.6523 40.7813 li
36.6523 36.186 li
39.6182 40.7813 li
40.9229 40.7813 li
cp
ef
12.9463 33.2925 mo
11.4219 33.2925 li
10.2539 38.0156 li
8.88672 33.2925 li
7.79297 33.2925 li
6.4248 38.0156 li
5.26758 33.2925 li
3.74219 33.2925 li
5.74023 40.7813 li
6.96191 40.7813 li
8.33984 36.2358 li
9.71777 40.7813 li
10.9375 40.7813 li
12.9463 33.2925 li
cp
ef
22.9111 4.4165 mo
27.8076 4.4165 li
27.7998 17.7393 li
27.7998 19.6875 29.1533 21.4375 30.9707 21.8989 cv
30.9707 26.8149 li
26.4414 26.3428 22.9111 22.5127 22.9111 17.8584 cv
22.9111 4.4165 li
cp
ef
9.61426 10.5825 mo
14.4443 10.5825 li
14.4443 26.6357 li
9.61426 26.6357 li
9.61426 10.5825 li
cp
ef
3.5 4.4165 mo
20.3965 4.4165 li
20.3965 9.24707 li
3.5 9.24707 li
3.5 4.4165 li
cp
ef
32.8633 21.8989 mo
34.6826 21.4375 36.0381 19.6875 36.0381 17.7393 cv
35.9951 4.4165 li
40.9229 4.4165 li
40.9229 17.8086 li
40.9287 22.4639 37.3926 26.3359 32.8633 26.814 cv
32.8633 21.8989 li
cp
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 13.0
%%AI8_CreatorVersion: 13.0.2
%%For: (gilani) ()
%%Title: (tu_ffi_typo_grau.eps)
%%CreationDate: 12/22/09 5:02 PM
%AI9_DataStream
%Gb"-6l#uVYdP,ubJ9uelKGcn&D+I!\+b>S_Sf&3Y(^#-Zdm)]i3S3d!3re%U4!f08N@+e@])/S8p3O$L/6A*/V,C;b-2ILnl#P2m
%9Kij5Iq62`hTH:5L).EYPP"YK[D@!(DQ"/F=H8,NEJbEm:_sJeBb!=7is_:6i2b;5ZQ/]dMbA'Dl-8D1l"DQl1Z%,`f#2pdqLgdZ
%mpg8mRf;\+N*;dGa.GRf]iPE5?=bUH>75@1:8'G3GqU]RU[Iquh!U#LRn]Vdp)QN5SHC9jMLJ4;-^2hhg$N&Hb[1$S%'SjX"ojU4
%2g^GdZiUN,J]?^&A"BD+9'-))c^1d0]Ea+G_qsH3,f.4ZNG#$;U5,.%ZYVbc'tALO:=Atd\Mgeuf8MFH(T1.[`Z(]%6C_IdcC7GS
%nT6P*H<Hhro/nBZ9&j+DY<hXG%'Z`fQn5-+0<)XOK9!mK]XVVbrWu:8!0A>!"`Gl]MDIBS4aMUk*;.8)a^?8L21LdT!1Zcq]huem
%W)+t=(1IN&s.d!:;MCU+pt8k:s%c/.`F(_-I$FO93i(1"dh=SA(UMuZApT6sN[7Uq01Rhg2!0gbVUMW5VYIM7aV>rV]R3>jLAshQ
%&J,(3J^$PH>sckCLkF$i,SNhIPMR.GNjB_C8f_+N#@4H=H,_@*IrI4'!q@qGr0->uVCr^uM+g,>>4G:=6W*B[-K$LP]#EnNoa/^%
%^X*',5\*@5:[+GH)o$sMQSYT]q"al9$FQQ0!N,$"^Cf<U7n\),'rT7.aeV/o"S:G`]B?kD/\YU@oHrC>a=EV=-_I0jT_#R]^jq8)
%/a'7T5KD7@EWe6<K>2^e?%mN=0FQRn\.Oi_I<mR#hn@;:TkVhVbB\"mr/<M"K14*(<jRFg-[H0[ErP16R8-7%g!*[gT7b^.2OM^8
%,6QWqGP=7?ps7gfo03^*aG'tKJmSQrr!<>CrR78.8%m3p"cnPCd:i"u[Urm!NZ$r$m=!<FI&0/:IIFlVQ^D3FMhr]^X4YaaF/WK,
%G<)'ErX1E3!jfmIJ8+&Y'NanP\31iAk$q-,M%]'^Xo'>'qZDp[d>Q&O$3sF`e/?Jg]u<2P+R(T9_HZC0[gJeXlbfXS(m.F+0+?$b
%7P!ar/bai?iOo=gLo:H=i^0k=X[u1Xic529$/^(b!P)qS(PBK8j44M%1Sc*Y,!l%)n5JeKYt:K+MqKWH[6I2TDp[j`pbN!#,>k(,
%s.8-RD[)XdR0%5^o@CG7NHu5^!>lM6jXoT-n4<.)'o0nNkYW[;b5:Z5*_t\72\c5X9mY-uc``SB$`+Bc\DBU)PJF<n*dG=(kSs<3
%!VpeXd@,/]@e\C^#oN]M7kkG;Y,S*HW57g$IVR)HjR=Jf-)_MO`+@\5AXt!-k+3<WmBQh$:iR7E((/e7EB9L_KDdLr"DNbYGZeJA
%V>b`(e.>^4nNL&;U:b..mh,QLO8+rEKuR@ohZFjsJc=6ZR3pmo!`:FP(=]33/R1fG)M@iPf:+:l`AN)h^GI7MOu*RKo7+m$!6@uM
%!F-sPZ"-M07Ea_@:FOO3AE[aS60;]Nr.CVocY%mL!\@C!ZHN72J,dh7$lUCf@)7$%@Vm_cA@;Vl'&'BQ_Ub#S[c0R"J^Flec&3i/
%"JWSe#41crFg![n#%t&U=/nW5'*V4nhVbn$+%eu/;Db"?(P\Y"W*lT\K0E(]hXLe9n].K3P[)Y)N^Tl-!"f[">"lW]/N!9Sd;D2X
%/G%.j1MFRO0O@(]#"V8*=>;d7UEqPH;s8(:#FY)dW_a4Oq^NhfbJe-Kl$;G"EB<I2m43BMK,FYX>2UK/&\;j@EVO!tpah#?Sc/eV
%3U6OQ3PQ5Q;/AfgJIg#^W7G-;mkpu5ed1rs*5@iT26VoQqalXG8\VoQ[7<B5<<i#5ei3n[0blJ=mN:K:"CB-A-/tT2>U[6.OT2@I
%C]Q^sX7HL<LY.gPKotIcH&MYQrleo($gpgQmsha`q#LmTAOMY\s([OZ8mPC[\#;5_#FJ3,>kdktarQk;HS--kRY'YYFi,)nk*?/A
%\*[o@E8ZIod5DOGd&E3-FD`1'HV<20+X^r-::P'=!%AU@K(%?ms%NSYo9\d:NiN)J,oSYE".nRqr9r0Hs#N0aJ<'p+0s[?XLq+8@
%J,-SS>5j.Fq>\;[SbN0`&"\d\c,3pQ)Kbu5FYTFZ`d(Tm(!"4lX^AcXkEh[cV:PS=.UecedAXebh8P_M2TZ^6]hMC*ZQ'nVa%_3c
%r4<m]'<%/Re<GHm;CVY6VPnC2<AW@X"kWm9?@O+M'"M`,l8S_Do0-3"c08-mo^I1m^O>*sl07)"_RR'gFhnRAP`GBjFR424Y`g$j
%+t@*IP#;BB\j2./,=8ZMHC`#SoX7u!etfVj*AS)k/:.=uXOa2\$=`I35"/,phDSQB!c""bLf0H=$7_V>k$Mk.$4!08g01[3pu)@g
%>9Lr_.E1@F<L2&6^K<+#:r+286\Mrb@V[`k[@k](IfSo0l^b*(1+ni$;jQAr0+I;R\ukfXp(XKFX=GbAI#:KNJoseB+Mb636%EHN
%PlP">&XQ)umKNg1>ODt:XnH-Z=Su$C9bFn#J8(c9q-:?lHeus19^0+je8_%Yf^3f-D+?(#DrQ/Ud(S!<7JX6G3ZH9(N@L8O8HQ&(
%L_c-_@_DLM'h4Aq><5]7Yp;/SSbSebj1mi(rl3?&X>U/EJCK#@oJ@Mfc%gpS)b0!EA;aFR5niEE6ld0E`SH7!6;FFq[&W6<!g]&c
%%nudIeQ?CX.QrNXT!]oYO^d)kP9_7n`Hs=,N1G<bl6o:>"q%-sc/Qj%O=Kp"r#NIE*ae7u7h5!K!XGi_kUF,n&M)q\lM)n$3UrY@
%I*l>p3,$:oHe`J?bjB"_\(0hJni5*C$(U+qAV[IRR5;ZT-^2.V2(sBE5,6V6mbfZ<c5fAeoA%"(,Wu(]6,P'"Pti-Lce;ADGF7_S
%Mh@d@V\G0s5$(Q<\rVB&03.ofri*IWID6P\:U+S^4Di=6-dBV3,g5R-/#D=`IGoMe\G,bkIHn1V$>bc!p\DG%kEl*@0n*bpPcU3s
%boI9EYIVk>5)tl%radBXmIi\lbcJt-qo,kjJ%b"QUYP&Vdk?)#MI68pX^fDlI]5[nIWC4aJU7\5O?>21ID/G7fD\S1UjM)O`.[Tm
%Ho&2mO_AuQFdF/!qE#PYPWPkF@.>cCIW1\KZhom%H1W>E.gBlA`SNA?]fY'K3p:Zh6hG.*.JFcg&n[S)[!6SppQ6?+STYAcs)B/.
%7UDDV7W\S7d3$LOS:7^a5Bh)@R`eJfJT9c7lla-*?]G=QT:#B+]\#6<,Jsql6L9q3kBF^"51&?Y=fRr/'GE(^?i'+;(lS(p,Q;^7
%[G\=KcP94cGON`&FD;<aEq7HAB)1HY/TQ*fIEjP6h,b"C47P[jZ<VVjFicF`cWs6VT<a/ZLl9BLH.Qn0o]tpJ.FC33YP9;;,/V3j
%(N1,tY2\tMm@BFdrZ0*]%cq&QpZ8tc]bi>N8ALT_joe*HJVn!EjX=%gr]HA&g`IOXFMH/ZE)3J:"2'OY9#^pt$E#?SY8RF`nE:cj
%l6UFQb#^")@oeqBoA_+j`-lk#2l5t6WLp-hPZt9*?@cnL?DT=R&%D@m@c=WBD[q5:5HgJNO2$d(]Qoj2q8@EJb3sH5Y)n%P?W9YT
%p[?);2jZMfO8Y]9@R!Ng"1'(3J)-Z1pk7eU\=UHKK^4n$W*>U5UG,l7IH^XK/:J<o^2*[<%E`]X.sGs=fZE$@/s`P41N8Z<K@1>B
%U/(g?KTU=Q>^62.Vlp&`q)CJh;3dIfMacRnj02D_km0d(Kk^D.fN3CEOr^TFKHrRu?h5T+'"!ARdqPSGIm9d7`#M6Y#9T4=^E1^"
%LGr"&B^b=b,"0`eDL%f@<J(+S;"9IU*gS%1GX[fq(]]UqUg]_R/s=R$%'&h]1i50Nr;8%jq1Hu[Fe4(lmYuX6=W?2]@..(<Z"Q49
%eg9QhY?pkro/C=<#\]TA\l<?*%aCrk22QY08%oLdVT_k120lV[3K)'Qk]1cA.A`W'8@J@,oD#_:6*!'F9"C2G$XE&X%P+&/?+Z#(
%Unu#M/6qsVFN9*_jDLF$q0LZq&G:hd?ri:_c^Dq)N.9,[pV-e!g$=*<M_r-nD&Fhr"#UReSUO.6Y^H1A;cG_!W5%2nQ/(QM"&eV1
%V0;Fq5(Dnebk:Z&o@GqI,N3t`42`%3Rg9"Pp3q<[*>XCGfq<@fV1XG=J%?-!8=mV%67?W<C+mcHURumMVD5^e8IdBJ:EZjm>^7uM
%6k2uSIF-W;h,Jr3Nh5jeO40j$2P'lh*S-*fW:Fp5>+i--TV%P=q<%5pWP-996'"=J3%&l)qbh?pj"l"$G^NAYn9hpW9:ZQ2O/[GE
%<e3Kk!`c/1H0Y%l-nYC\?A+?BiE&ZtJUX:/J-CFT92??7!/LOV&Aa,QnW!03[rTV9_P2V#=JX9iMbs7Jr^2/OE>=Go];3)pDe(>h
%O*/5JYB5F[B?@X!2hZWb<Z6gn+[C/X(lQsGV31t$fIa4%VU6tQ%6"n_L'gZNgS__@Kt[%]KjtsbN#OP\K2jm\]!s_a5!0iLk=IWM
%G)3b,\-$U!fRhMC4pB44M[ZL`+<+##b%,Xs2cNOC]MjMMhq`s9a;gDSo8m1W6W^kjak'?W:/@S5qedjHW?M)N_JP,hOH%8$s&,nL
%qF0dhXXtLb4pH]_'h6qd0b+SJ$*$[[@coK^``H0E?pZOVccQNG([?7m.)U)"!gC0rB-ibU^p9`Bq;Os>Lfo7AQ.RUr79'm9TBX_P
%`kHo3&d"eVL+$k[`MPOu0c%*a,[5Cb2(LIR4ODgGPs1H#r7&a#.[R;nO$TWt7h@2-b.'#WAedlqUX;YJ2(U3nYnk\CXeGeP/==V<
%QpP/okUjqrroU@IWT4,o)fQqr$onipo+RLC59#lKZc>bY(QNuB]llkA9Sh>m`t&AOBpcNi^&9JlhVN>8cL>IRRNVtf-+17ip6%s^
%-?=%l-&#!aZ-]ad;-oiI?F6\1kJU60\[t*\?2Rl45F(O,T*!]=_L!qc4Xj[tRVuXSI'#,?`"Km=8`lN]]cY6X.T>`JoJWrfH3W:#
%DH?0nD\<4+b/=R0PV0=-9>,;T7[S!NVouHe(6;f\mTtPSU915.!Zj"8RF@qRZu6-M!'DOcZe.*SG5[RoFN)$!83LZ.&(peqq`O1k
%4NLE(fB6;kirRmI2,<_\FY<@A:ih#;;-^3EI;nKob%B8CB`VGYH9THDo^3'pqR5js(u,iOA,cUc"afEiP?*#2c_=b(!e;EC/mRM0
%_hBW@lN1;De7k31:&%,f3*>OR>WlCSq;tlc[`Qb>:MM#oGGE/Pro1?riXVa48;`\9,4RJ4EFEti<!sr=o@`&$W"ppMB^_Zp*Vt+:
%]WM`AXJ>s5U5S;QVk$RQ%[-"$YRLutk:hFKk*r,N"MXj4nbD@op$i3L]Ci"3#P]Y$"(i"+%^?0!Bt.CFHLYQsjS*kppKut-gj$Ld
%4H"`6F4j@3D*cCi+FiFR0P$2kg+-1YWD%LuU/3e>l<J81:cU)A`78;9=5I9$]9Vqtq8)jT@mQ9Yk[*9%itqJcj0WcJRCcurO5k;L
%d,h#eIs'V\6S?%Bir5F4KjhPgn\\r8P%r5#U[%cO-e`)(ps!brN`ct88kp)8DE[u0k3W'a,<2?V%mH*(=JYfXiX#Y_@TKEBP03nq
%7rRQS>ou2DjjOJ-R/5ehq%Fk2iGCTD'6d2eQ#J.?o_:^Xh1OGrm7q&4\uo#h6bY5'<]50SI[fEdY9Nk3Y=N^7dpMqjb;l8e=5kF3
%=QrcnIi.68)Z)e*YFLkmWoI.cXS1XcoJ0[#?_.:@UDIP'ea^gtYtT$4RZ1X*&2\^L_jpFYKDC$Jojc<UFHq?5(`jP8FV-_Y^g?hE
%k#Or)937&E&[%:j"lFSOoQ[pff,s7[U6CZ'kM9$[S;o)Y(Yf&cs-P8NCV(3D@oH_m0#\X&.I-m\Q0E_`pLHJ</e`q9r0dhoc&$%U
%ABo+IfCJg.ru"<t5(0u6_HTj-Z+a2J"0Kc6q104D'/\m"QJ77oJ_l-t)Z(D-"Q]BinHf8>2J[%`\&Y]&j:BpaYP`RkIL"Wg!%FFe
%W8*5+0DT-4I0BuI?BAt()*PU$4$:750:e%,c\9m)6Tfi5^AQ2^haAqoJ+]'[%-apN%2B_FP,TX"-qB-Ba`A\cN/_UX$+0;4du8P1
%Aq.!eH/IG-/G4R$KorSU/Y*)56-Zp%m>+R<&B;n$T&)KkmkqjNqaa2FKLtf^?B0]L4up<M^7)_OhK!geMhR&!!F>WfitdWsFWkl@
%O(g7dmg"6ia`I,O#,0>G3:M:gh="t\JZCR\l([uGl*2!^CRVD4.WY#>I=BSDa>:-)dTr5)mi5RLi#MCG6:2`abFF&'%*Hu^'+LBb
%7H^/>b%l.4#R=2>Db7k1AI)KV]5s?4cFtRij-Y1l(=.n_a/WDm99HS0,5RnID#Uu":<reLetFW,<#jP;5JsNOH4*dAK/eh93l`7@
%IVOY7;'VnT_/_KKmJ9HRk/Xhgf\&oK?mdVuPO-E@UcT6QaB_J$Zh.BbJb!2%1?EiMTJ.TBDjdoK?quZWQUiLeo)*:t][T`,,g&or
%`P-nql#/:q"7uNH@t+8s&N5FPbkk"[(Dj_t_uilW-\MJ2O#Y]a5gmPtq'OFcYHcdU?KtnBl]S!(Bs"(3XI+M9X;#`Jf<r::qBV\.
%%.f3GEg;%I4*Pmid]+:Q('HLfM0F/aRJYiR:7-n,7(AH!;J&7(gfkmiQX>KU>..Bco/&cFPf)eMC`LRfeQVD(l/5G+-DZj;j740Y
%s0"[K^@u\mrL5)643O0I9C_=c/=/Bs*YQIQr41d0.[-U>U8&4MT01RNN+)-!=%30m@$LHO]mV<1Q;)Oj*OUf:WV/6BQ_Nk>q(T2=
%^BIbfr$dRXZDgiL\_;T@D"psH*md4"E_/J4C,ZGU^YFY'lr!^90`k/5Y9-bo`E1BB]5NU*Ik&H4"?$^qk%=rO)*LrVrF:"npq6/G
%\pFcdOGQujHh\XY9PX?&Wb22m0JV"G'\_s04j@!2#F44=pDu>]01\SqP^8+'aAl>3N&m+2#=CgM4LbWcW;;Ln$XI/Vbs!32%^WKI
%E\&\P&H(f?#S>KJqSZr`PN@0A<kgtYJi7)S<A9hZ($5^2b\U&.WAGs`:20itA+>WeZN>EdGufJ[GeD6roDKDPO0AWAlN.7j]tXmu
%#hB[^R5p20chX'"I@mR&C+&]r^J=:KQp.p.6$tK1;p97C$A@\s.X)rQ<%1n<r@!r+;e4<rOsj<PF!J==M62]WdHQkWZTY&uX%)3Y
%0]I/#fThQM7ldqg_2"@J?X.5QrBjG!.2d^sX+dLhBJfT?3q2u;)m*2%#OQQ$3Xh*nZj`(\?K=VY*a7p_7;G.frd*:#PbJsY?,]\[
%/lfKjq#t9]06_TL=-0]La<t$2_KF*WU$t:SlNVNs&,P>bI;muV3P@"TYQ2s6A!c4fnfml_W_IJP?]J@o,/D"'R+]-GeB=H"0Wa^D
%k"=DEo6p%G<!cu)<c)e#Ybo[TK-C.k4>3TsU^8>/InFMA&NAo%GSPNmrlM^kT,?p,%V:i)WDn-b,rj86gaL3-I$X@jFhU*klENtN
%1j2rrDo_I%?=nZqD8$LBR'T"efnqo[oShLER2=S`:L[5;$MWeb<<HHD8fdPj4jg3SVr:O*pd0tS@%lP.k]@K>m:N2Xqok$rmk8Uj
%cLT.e[hj)eq#P+N5kb]>,DTq-Ai'bknen#97'kZOm_%_:=F:?!)%8jW+C6`B9mVNSYhS:-DI;i8rjZ&\IQ_n!OH6f541o%[9(i&>
%Nk,F3r9U*)g+VV!?>m[DjKBa]mk`@`%VY[9+j@Lq=oN`3]%8CiejF<rHIs[s:YF?IF13jPcRSJc;4I[2X9r!*>kTOm>3Zf+@)8/G
%K1'?@B;t/gePrQ3HI;+7\:!:S5'BBUEeSQ>Dq#$d6d5kTmp',EU_:)sE^+T/06_u82u3@!BC^0Nh6b685tS&u7GtQnj7iYR[IB1j
%"&[QJ3RdA=DDLBnm:GD>FnpabGm'5KH3"-6E>QUj8qHI%;lBS)!c\S6YJi!eCS*"nc-V#1]);h4B(]-,,NZBWlj&o%TIhnmg(1m_
%_Y88_<kWb`[o[R60pa!)XcHTf3c(8DDr2a5-(p*_F\`fC1&@dD,i%0!"o!T+Q,*t?s&9IY*Ru(;ik3u*F1IE7_$(I+6gjZRRt*5?
%)qFiR0F,NG]:=+G4%:j_4phLDJ^)BG4FWCbX0^7?GJ%=^/mMAjoC>0+T:SXi+o>d[S#_#RY4?pE+ZZ064F]0QRRXEe;=n&W(D]X`
%[j?D$l=IF;X;?Qf76Q$Zp?;uNJ-$)\5&Di_q?8UH:"@D/3s"NH?ETOH:Q-$EG4)#P!S.o!I41Z_qNNU[IKbJK=X=(.Y>uAj:<G$@
%HD>U[c4&R(TD=u)4A7_%0T1pQpDVUmL='(1=ija-!iW'aX^;Q;EXfU\9j3^@>X"*!9C5@@`Y[_)#<.]g0YeY?HR-^cnVd&@G99&H
%o;pT0g-RNbgp6R_qm%T#Wg2F:TfY?X!gi5kED'1.3GpA)j7r0!hH64ClM&7!kT[bi>WhgK<<#+)Q8j6e8KfC-R[bb'?qe:hUHm((
%$l],M"C_=hpurLi%"H^oOn)X#%<csS)b/q*#noVgmXMP-p-/Fm\e<l$N;!b(LKB]iZ+I"1fkU9@hp_9uW^gkM?3+Js_7mMX0t<Yr
%:[UeBJ-#PZZkKo.STG)BfL`P2=Ub-/AWu+W:f'J:51Q\u)"f^Pc#ujbPA"k-0uf)HXTHquc:[lkE]P+\r]#C>6*-!jSJ17q4k0=(
%?1"OjpO_.m[Fl?km'/GmGI?>^Nb:,>n-Ni!?8INDh)+u6.^o>@VLMC;ZpfAj>/!/uMko%sgU$-TgA)AZj.6Ik89H]L"Ml"g7>ia;
%f*;t7a*#h\QUR!LYr>/]dlt0,WbgM:GJn4-[?(kZ,=K`G6Tc'aR:P2DL6%=!ig`2<]:$[BY*LYVJ%C%qp#>%1K[h`XE,t(C8,D_L
%hk0WY($O#W\G1D#%^38k]Ce?U3CU5[Fa:!D)-H]6'6l1$C8,Fror'=t4K%(aGr)!OMhZf?RUe*$VpE`[Lt^-qHV'A3!+FIUn!2$S
%ia@/b&r1PkWn4p[QSl$!(L!PkWp$NN[)q2o9sfbl-R'1@e3kQ3N^g9r2_!"`-aGuhAd%@N_Pl)PC,5$YpNdjqWfT2A,pgsA[j?V2
%9!/>74*`ZLD'ZO<al45`GL"Rclj;kSOb_j(Od3;>]`d=P!5mcVUQL4F/#PD\d`"a$d$i4*p(csn`e($QDsj16@.e[J.,RK\h&B&'
%F;U#,@?TJjD_OXN.h4UI4`TJ8QN6=ShEm]8@$egId-V:TXjJ+m\>AF$Vk1iSfku<";\Hc<!"K:s4`?_k*VI9rorV;I1S=X7s,G<J
%*)&mKhJ$%@6g2QsQn+jf1NE7?[`2hGhsg;'j5*,XHSR&Ck(?GtF\;k[U#k/$s8JY9(]&\kTRT5WkPtNGUW)/tVbd[&c2[T`Y;=*3
%,Z9qlG&Q$%i$>m&gg+OpqMmP&BsX$s+bB(tK*f!:1cbB&=mmn%\+:YA3hUf,N'Nm/"E?%&B9T=Lm<jHWlT,]2cBck^fFDPuMsl"0
%FLJ9/AtY7g_Jo+S*4I;t_+</TXMZju]HYhoK$WM.+ckNel!BUcf'DNG_Mp]MTL/I)!4UUL8QgUsSouLbHm4sm72:k6?djr:d*a-U
%,4IfDm\!S%WZCHO/Z`)I<e_C7Ll=ABfVnXuQqh?oX,$TS1t>he&ks`/Z?fmEr@G@u+DElBP970Y)8.r7Uos-!d2@eJ];?)#Sai?2
%>*,/[C9t2[K4F[PYeU$*[<eme;*/<[;+X+$ntB>59A8KBP1@sZI/W0&@m)TSg8oY+AChDd2Qk/hR@C.UW>Ar'cJ(..eOu\OeHUSK
%W(kEnPH;+Vau[.hXKsF_m\[ESq.94Cjg)=oZo:'RJ%*@G3XRuB#eY67F[S4R?A+Mg&[iM",U($:JHK1P]a-^A6.-k\Nj*Y]IFpnn
%93Wd''(!POEd0R,U)2`I/%GJlSI?n=;@+#)1Xeph?TI)r8Lfp>89!!"_2Qj=XIX[6)dW#'&<=-Fm\^`P^c-JF>u!SjU"q>p]BaH_
%/WE<'[*tlW.&12)eoe*5-up)F&5Por'B5P"kb@\Oh2,ZpJo]9IPYj*DA2[pE`99f,7gZ$u$$N&'rZu^Q#u8o[&$KDJ;#:".^,!B.
%AO7f9H+hN$9#oaGO#A]08`XS`jR#qm^#J1mGmDBD?H5a8FUGor]'i=Z$Cd<e926g$008`p34=Jec`Wj5[=b,LW!4jD:$2W?n.e;)
%r.SPs,n@(^!6q.g*TatT=A0=/-5P^n`+sBNOZ[Ie=-Zh)&pMcE>(KpRe")7>eZOe3mJrfO!m\BiTP%AWd%,5'IFLL_[_+#:KTG1K
%IcQLudRcGOq&i\GB#JFidh?mqIS&'p1JFg_0#sckS6>QDJ4+mmLj)ALC"Hr^UH8!XHZ%m-c0"Onmk<eh*&BuZUQ*UBZ,QlG-G@aV
%@do]n0i/2+hu]N6D,Y(8GAqY<Kq3sEo</q.&E:cTdon.X4G!=Od/RXYJ'?o`F_<KO5TR5/DbW2jR*I`N9-Lg^gns>G6?d-)KNtXW
%!<A\T\:R$5MSKdGY&FZ[inCNVA841@iEFY9`R`i1N8p@s#)gs]!p$q5;8(72]_<^sd_,(t%%$$b9ST7>j@dQ;C,gqs'!L1scSnZ*
%/NMKfGI*^9,Mf@p\(>OM7l$`:g2nf4on]A+Kd:/.M`fKGQquEp'n,#u%s/5YXXeha(Xc?0L+;/Gl!+N#3X3f7i5"t/3^*b.*QspA
%KK<R$4r$<B8e\!NjD6<g-Zdc!g&]`mG?Uc5!mn4/?T*nZQ"D7&^KRYdREY'.$[!6'C4rRnI?'*Q3P*e[ThZQ/*'2U6LrtUOr]6Q,
%j7-aNkDPHX.V@,WY)MT@Uj,c.k50eV@-TneoG/;o7G6]hY[eji\'%,5RopQLenAO)E^3M`lad9QW<Mr&g2]"\d,kt.6'XlOVj\!i
%:K#o7_WE^ED6OAKq';oiD%d<&2G.G92a04$#t$T!oDcCH%C0Q[(l+.m6s\Q5O*GfK88*/#HEDI>YSaic-=ip!A?QBO8.N]eB]A<.
%TVc[.+/"Uro9:UGhJ1D57:\,6YR4CsK8&hQ71iWPcNVk9%L3<`6;%B>UXgu64"Cm8Cc!9c-G9^HMr*7qP11!`6<\lMq$+E>0j&+_
%'CuYW\1.o%ADc]#5',0"ad3+aI4Daq-uEF4kU<EIBN;K8DN_8t''j6K:P=IA;0cT^eO3bGFP+L*YMFBU,DE1nCW5F^Wa/S1&A+m2
%lA?'UcLeLRlHR0\RYh"-`,;5X#=RC`AQo];TAFWChq/5^[qJ_Zk55+Mk,00kJfG4kCFrSI75_7rD:j!8qK8Rbe5qg'"5+Wcg[%t\
%f!i!pY?R3uX#OC4R3**3=/tQsMUd)rG6ds_rFP@#55j;R#c)QT)tLk2G94E3J1NE<'fM4LIINBZ]68cu7*`Z3j0&WEIPJs^Wsl&C
%\5Ih8(C0<sc(\&"VlR_hme'EbAW^TT[nPlHReuZ0f\2H@Q3^`Br4Y^FGj#O+5G`eUY5u<4kf8+6AZ"^MSir<c1$X^k&kA!KN'?>R
%L9?\\Apss&Q%mE@MiTDn&6OL1il4dh#R,T,WV2XX^%[C*^F3]TgA0t!r%qJNca,t*n310H4sf[?il`!8HE'*a<0$N>*BK_R-ScH\
%mj_4oKs(MaK<o<qe=\eU8FHT"<[ouhU3JB,!@6&+.ZnO>c-Rl.$^J[Oo/7WW;r)j?A%p=*MQbP-&7>mh8@Ig<`sp)f;B!OgF.o$:
%ILa*NYr[K?+%ppU0B2<NbEY*9.fYgWS@lg8OhU4R2`uNk=q)o>W)rr[8.U,7EDHC"F/5/p96,g0KJfPH^P6nQLn;R:OJ]aDXh\H"
%*,5!6JZ;Q*1K1)2PqM7in+##'F0i;QQ(.Z6"]B6iJ(`'/XcS!.e_R--%4OJ0=[cPSjT6gspk(#J?bTa7N:\k:0X-m,=H'g..EGu1
%XRFV.OQ9L*oGjP6XnHN-3I,^IMu_;eF@DGN%P*i9;ko8AKn`QjA-m*GI,"DQ=Wjhg\4M3\9p*`mYH/Je)K9Nhr&?QPletTX*oQc]
%1Sj%$KD((Pa3Ur$8?#4mSCN]&(4ECS2=JHcF/6pu=/tgp]/FNj:1\n4+"$EEAk5(6WZ#07>I9[M%J2i*(D\Uq-,fWGEXs<&YH[c$
%&jGH!^,&$scTHYd>8qtK;+CC!$Q>+Ic,T6J6<\gU<cfpAb#+/]Elnfia$8I\rQP)rmM1N))NgVF`IT>`h!i"E[m9d0U7.M,*$[m-
%AmfR@p/:AQU'jnqc1g6#9;L`([F9^F;Pa,PcUI+On0")RGc.gYCjrh)Jgo-[#!K@^H<X*C7i85GDpm2tFZ3fO(.aKRGAm3tGuLO5
%a6g)K;UEMkmJD6ZEGr\OQR)6ME>()tH@GD[rD5N`Rj*8d`31jm1r$-#FaP([J$;7CU#)u%%aC,Bj?hjIIU4iR7An'H[,p`nB>IuL
%k.<jU)A:KLcD%<\1rnVHr],gs7TK`<`U6%UD)m'#;;'bi&rgc,#[d&B8;HH6@A__UcH]?*.20c,CO2drEW16pMibq8Ujtm7&<43g
%AXBFtdbK4='u!Aj'%5fJ3GMs*0426q84[)(R8Y,Q6ar21g<h?W!OR\`<Hq0Wpr<:l+K[2S8B&Db84K&YMX+JM].NgP%l$uUppSSc
%8.cW:Xh2pN<;ZJ(+f/3VI%K3PH!"=B!)dDt4,`q.j>Q"1&'`uI"OP8O[uH_Qe+_%OmuTSUM(C47#-r>dI^s7f(4)Vdp%\uB-1ob^
%_pmBRNj%fskl$Ckm*ra]b#E!HFs?JnYI0VRXkNZ[`Bp6(:V?MT-i:X5`I7R)ipG`uIWE"]2h,&0?9S9W,a)>7]]\.tF4k-?ibcAY
%RGmUDVJh1[-X)p0RA^G4)UtA4Qa,)Mh#;0V\X^'PHPjCG*o?&gDcMfT$K:kFEDWn7\e]]IE]5Z6DpS!>n"UF514OY"%5[SLr4O)T
%GlR7rB'0K?ipHMR)B8AQo='daQeZ^6-@K[HZ.JKO.c%.4^]3(<qU";?l[_(MM=MB3NqFI=.uTsVT)$udlLc[sIBmAZepi2"]aO\^
%O3QO=imIXga3WnNJjK#m^A=EMS6T;6`oufI&eag)j14V9:bmI2r5]#Yr^5QJI_3HOG^gD7kO-5>mHa*iF?!2^^)9sLflV*")f%+,
%p2O57>r1?]2'Y6l?atPMqkBqQHXHF5%K+BCmYrmp**T(DQcT1XqI9,AY_=-Q]_#A#BK?92RQ6=&_ji\"-38'U+-tR4_-U%>:dr!c
%(`]qN@,^L;_;.]Hoqo7:"HG*EZEpkr-)]\f/rS6Zku_tLg3_F=Eo&1k-:9H;89ZP%0h\<AV8-A=+Q[d_9:E'imi#@Md`49cUfCdE
%)JQT/5,q0$8ZF%>Tsjj9/RK3feWHH>Y9_P,F,sl#<UQ;@g>1ZDeW9iuK@0(sL=X.J,],>YUrgYICSX%W:J*Pqok:W!@"B$)8ambS
%<_-G\8<Gc9V)"?R`>4:V;IkjD>-U#d+dK,:I9TM@%D>A(_:HEcnLqEtcBhg<oe(E7L9YYoF6DQ(kG"QXHlr1kD1UEBC<M[eA&HZI
%YG8p)@6-W>U`Y%#Oo9KU)5D.O*V%[<CZ+_c<;pr4&`FZK+$tEf13uZTVosKbO+HJg9R#g6!/+s]fibP+@uM<,qEj2B=7W+N]./E:
%+j;6&H[q^N&fiTP=&:2D!hlU,Cpr[Xrd\V1ltnbE79%"Vs&#f;buJ6i5VdJNo)%r!,Rc_(6`03:D*]V6D6l*OJHXl2\!QToO(PP+
%(urNo`L<a9JLCUlkhN'arZgr3MUu5aR]&J_nAW9?`mU:>ps1h^PFJrJR'&Blg?8!i/]<-B%jeP'eG>4h^:QCHlG)PN/2,'d68H"'
%6D4#pCsO[,rE!i2TIjq6b6HUi[BP#U0#V%*(=`rn4LgY-9s.HUOchSu>C1qT>+E(]HU<qWNB,mfg[j62a"2l.H&PLWWi,bmS<4*,
%f'?=sa7%Y"De6NX3j5P+=E=[IlhdtbAi_Eb0,G"#HE_:JU-Ht7cuk%dA`Q//c.'2pW!lfeNSQ[p2qD`4IMS,LrNbb5l@!@T=V4!n
%>48q(X%4,W[48PE>@js,+/:Xj1uZe($Op$`.E-EJ7NI4E3N%1inU8*Q:3KREqXT9lU;iCHa-_<&pgc6T?`?@*,pYK["0<>hFoff,
%'T>(Y$oZjPVT*W-g1gJp(jG\K%SLiCU/nS`b@imcrK6u7SsYF)S)#gb:1Pg<3u%XU[3,rgS&e'7kDZj6NPsF*Eb(gN96018JhlJD
%.6OG&bo7NP"APsOA!cE1P-RG`B'9m&qGsuR[;Ju?("m)`JVqFbjCC(3A?f@hCK4hIo(^i'hk@8Zhg.%"q`oP`B?r-Y^4[_&koH8(
%;PV9d8I,%)G-+<Xa^a4F%pGEDZBBWC#&J.*>n8uaFRK$%<2V3HOlT5eFT\bO4^B,D>@:3TLE0[32/s&K9'4`DUh8.oJRa"#]-55e
%)Js>OacS/Xd$V\f@nc@$f$I5BYAYFs[,O&0U1]U2cl@^)CTb]ACR4+ja1l(kS(e9-UF3dlW;N_OYKK7\%7aQ)c!B_Y`N`e1NU2M*
%cQ2at+7Mb./Q]G\]c=Wn,?V<!44f^KeTc)]9m/.\JIoq$1*sn2$b.@uBNtIn-VhQc+[kj__3,.n:/Q_#pZ-Wa\[803L:DAQ83SeR
%Oo1XVD$N^loak4.2,9q^hWc$E_d\.H)n'6JP/k<Q;86'1Wf.NWme^Nf$38eh^TP=iftQLjeX8SD4YE./>%k?rX*BBEOsaafbj51b
%hMtFKJ:&WZ%FY/`+7$<)ahLWM5/$RO69[QX4]kmt*TEB&O6e/9Au.Cner3QG+%H^V!(V?o5$bbh\t,ThVoAaT'd9i?-%MQ!B2=M`
%rOrmf@J;N*:uLCK]*QNMCA,7`am4^R!(>1NGQVZ/o1A.fAQo(%G[l+np#a/=O5D-.iO2%M9,B<DO$f.lh+Rbnh(m!5/Ju[C\5!IN
%.UE54Z&7/s-(3,L\k%J1PX\l@.D7092k&0@k'R"YN+og510;*&jIKb@8b?,g8NBqj3o8-HqIu&AqdO>8KUJkmN0h+q%fD$NB<HXW
%XgDF1gLrEjI-YEN1rs/[l#jn>pF?D$Wrj-TI.o_BfEVdIX&GRC/W7-VY;Zuk[]F##l)2*h0V[I>!NgZ]g5e>m;5]ak:r40T:S?Wm
%bg>L;<Dg6q.Kh<]B"UYiAfkq[^o0tMEY7WBgi>bb`P#k>jUl9Uc>`E9j;QN]CZ62V`Zl$^Gqm>*$(\^=S2KIm_V[9QVI(KOCD,1"
%&)nJ;3AJ+0W,,Zg%!WfG0]Dpjn:G>]>4f(+j0LKb*c>5gOt]*`IP_"/eS&A)NHVqJ7^Iu6^t@:k7[jpJX4?ViGS=K9Ma#9gl#Hq6
%!Fn$sP`"BC1j:huqmU/Um2':4G(#?^(;%A$2V2WOgKAmBE8E15c>lm&ELXc'j0=PZ?0F?9J?ng?F\@MP2Mu6Rb+o0U!R?E/S%@Bm
%HuQ@RlJ^%:O`nJb&)CrsACUt`H>44GXeTFsfXFhdO0eM'58XWH5Oam/pbt*-d$B<?3t:3Ua(WPr71HUmJ[=k^#Rn]%&mS^fGD'Hh
%E\'q*e("R0CsAoNh-:e^@i,!pn9u&J?72O%5Bng9bi;&3QGWj&l7qJT&:h<2+"cYBSS%u=2NG<^Tndr@S'PR<l\Di@B<h>.m!B`e
%GqRlc(:uN3n'.MMr/P`$c%bq5TqYt!4(lbaZ_:e[6sIO'g0?%9=kW]CX6iHVoabYUTf,u8S#<W1(m_T1d.M#8Np9`'8#:XP!]^Vu
%(8VC3=4,+ibgh5c@HdilPZ(Pt<nHUs2Y"EH8P*,iH:/8ra1:$k.1?@o+.Ef0/[W1^Fugj>k(?WrA/E/,0JUO@VPQf+Bur-%CcO5X
%k;H)(`Qg>VJ,dp+QemUb/d<,:ie</]]l2tTb?GQDr>;FJU0lJT]g9FLY(bMj@rC;J<\":KSj\aCgO<oGbeh:H`Y18"Da>So%TQXY
%&h]!G$Ob\t/p0XL@mHL!+DhHE_+1*A'"m)]IF57e-H_9_pgQSVh(43(j53TASUC^u9#f42F6MsHkToV>o,Kgg$p)":_0'e^lndkt
%fn-ubTsN(<oD#eY6YE#WB?1kdFUjsj#+`fLSK']f$p)&5@gb;=p@WCudhZuflndkH.,6.0FS6SoZ9@??6`8h'Cn4um1UFN,pV:!G
%!p+m^,0;=_HatdjD;7<i#@6C`&Q[eD4)6MD*Hm+IO7WLG0%\cLDS=&6)6ht3[MGK9ZYWZdRY>#oK10#J;=nXO2Sc%+[gu]IcC&bA
%gD>&P0<U^\=Nkb3aZB%@+UhsMdV?oEMN4j-2!7Wc4@Y09XkVU:?38Xq>=#'iDm^JDXh:443GIr\Ben(^9sZ_5eQk+oa_psGOR!&S
%Q2,"?Lp<-0B"i(koTC2Xh0uaH7'A1n0fJ@/Uhf8ZL*0<-2M3jTY6dn;"Uf_/C.,gG;_e(.-CKoIF]N;@_1%:EiUhG<B,IdnBZ2aK
%FKH6U3KML'$DXqG?SPd.-L<Hskfc&+(g.<3FK9![7))s2)@G&PrFT2?Gcu^1*n^)$hOI[qO3dgh!n[>9\lHoo`oN^A/SJ^dR[.5!
%T3@=e@nN4Zi.3<B4n*4<\a$s%T$nbU2=gMhp1Fj$Y*$cfQkNs]%([Eb)-Csc*Qc`15--P=ecDY?<ArpjMhBWe(<<MC6Ip%MXO2L?
%0n%uH(KWLU/[BGM4n_MRij7d7^aK_9bIFBC^78&)=96b_Nb.A5%5%Nu(u:,14VpkPa,RF7'&'a5p+4LF?j_rVqjW+$Biq6=$gG?>
%4`/"K10*b/4g_dU@dWbhVmnaJI:m_*0/4B`hNAbp\I)*uYd7SLp.(^QVk(?(,FR//40H%;:Rn_"V2QSP>TY9@B<k:b@`;>F/1'$R
%3>8N)SIoGa"2D.^J0_naY_?hQ=n68=F?<ape*I,W#GU#Eagd5'(BGi"cBSYpA]@l9AB781l"k-(A8FeGf:0bG1@3dbA=Rh@]1@gc
%+j"tPa"`!'2ah3/^%BObVfNN63Mu+(S*s6:FV0a5fD$?@L@OLT&K1OQ"*?]1H.,G21>;.+pM"=,7q><!"k,]Nh&oDbeOi<rn+-)$
%M9&f;q%7,,G1sQ%c2ld@XsD]V/rAA(-.+hrj`B9;m`&A#e[L[)G^N0=mhg$(BLl"1qK@HO\7oP:BD"'dRl%LId/'6m%.hZDmV;'>
%A,;R$l[i-FTMo1QH@$N(GGs*KmanekX4-2jgIu&=%3ddBcMEVP;NfjQeH=%-!Q2?g-k"btaH@l2O5p&-gW5/6p;8kC`Ac(tqp"qH
%lfZ0Rmt0D>528Uh<*e\)3UBSu;Ec)OaW$:+VgLJQ'1"5E#Q?V'cF=fc=oR/n5+Ka*UBoM<oANrE'!R(;320d$/U^jKLGSJ>/=(ET
%,iuKCFG>1JMS0##h@jT_@bBDCFL*?8AXC@(`r>Afl1IRR\_IMU#fggqYj3$1"NTF_Y=":aO't#;k1E='<rHY%4n-`8mFF0<B&)i+
%O+#bkBX3kX;V:=LEHHh0^&>u6dq^HO;&9Vdjp&L#m*9q<=QhK_@9@u(r'`ZG_&<Q-DdaJHcF.a30SX'r%,H34(sW?'OG![fE5T#"
%,WOB@l/nmX=`1Q8_":.@31YdnJm(1:&[a<%Lgcu47oS-eTdDNmn$eFAqXUu3N)Tec]o:I-T.OTLdQ=FFA>HYWcD(#/gh!8_S;m.f
%OY>k^<"VW89\lUh1K*$N"&6AFk55#E!3nO@Fkob]kX:t80Y0"J1I6eVE#7,h;rK;#fN(r0O?Ma9UIX4_?_kPAouhMWiAQQt\k[r`
%c`d7`.\,H+U3H-7OpYh?<S2UIS5js\V1/^@V]/WD3'Z(CnO^J]@_EH6NV;#bedbYH$"lm*f`(5'(BJ%L9RdWL"u]/%Y!6HA]u:/'
%2L7*LE4(@/ZZQ:[q5qU!81ZBVRggXRPR&HoC,.rn&YLZ=ei6TJ<_P`*5pkK=mdm9Qb$?fi=;2Zbna5Q=kb^244oSn6EI)!Gm@?..
%a-#N/dI\[#_6<,Me-m$A%kj2#'?KU+,b#@#H\m"<SOp-Aq(\:qKbARu8tqL8[X7an8VXEj.:Ch&nbLQ^g$QU2lO;Un8)%S,iG5hQ
%OE.ts;XIPdA2f8P],>CD'O@bVM%j6qrFqOT("-aI)3Wf.;[e4VT)sbNRT>OhPMORhR3Sa@]4Au0_euC#MH_:$.eU\P$`)uM5(E.9
%oO4$Op265`[`;MqX^:BYBh2=nj7?Udc<=7>YAMp=?GEg7$@8dY^9-UGF\b'&5ku_`B"&0j-!\u1Mj0p,1gZ+uWK2!FmfHrD1L66Q
%W>""`Qo#_UR[4^BR8AfbHgVo`g_qbH?u%6f?R%&2f\kgC[HGVMWl?BPIb>eh^9ZqER])suIT$&k*ietG[@?7$mZB:g;e;_njOT:,
%XW2Z\lYOYAa%n^c,HfqUB7#K*_nNi:>p<q75)XdF>jg-b,g#SZ!S:"hZ'A42QJ1frO)mNlVG?=9Rr*@lG6+75Uj)cR]&1M9f#spH
%o)l?JgpXNQb];slc\L1!S'EQ3BJNmPbbd2>V;!-aEK+OGbFS@AcDED%`L'lCV//1K:lZoVXIW'uk1%#4Ok7^P1L$b#k/o8ee!]=G
%)-058OA0@'B@3=Z[uG2bZWOj%]l#?icK:Xt/S<J"jjNDfNc$)2c>:qK]t`*63\uqX-Q?uq9kW%,*rfF+WJbRRZi2c:%CK%kh'shn
%4,&0H9kS<IDDRc"/WTcjRr/rT3_O>EflY!jfQu4mAfd7Nle-Al!,uiK<jV&7!-krD9kUn<ZEa^aj(pc_>WSYS\p63)=o+M7ARlb5
%FCr(*`qa3;CcX@ak\eSt8iE5u9WfsXe!]=Gg"aWW\H@'r/;`![1u'bXl!Ru19G$e5phk+2LV(JPf@iQs0"-18SJb#-f#=i\X0]2d
%h!rMVAm:gfWa%=AM4_:3/DQ(IBqZh$=Cs^c'=CGq.okNmG.G$Aac%KZGK5PuI!W8L1>>?.VdXE:e8m]tFdZK\O2tl!H$lWa&ko`:
%gI11[=j6`:]/=W[bceS+T6',>,[^S?4)5:Hl=,1om59)GR9].ml!0bcDSJD=^?BIP#+[AtA"+gS\@C\H9gnMnrTen`,DnAqh7:X-
%.b\0LVrYRoZOb\D.`<Cc7X!&1][f)EZhi8D/<2MfY**._[jXPk1;SrkH"M2#HSIcLe\.a?M0'6Z'faBL?/EoBKg[uB]tYUi)2?_3
%38A,B+i\J*fgJlM%/h%ig!'t1=@]OV'4$VM-T^k*Trcgl:qBj.(DeP<G=+6s[i;?Xc.u2jQb/q22E"p&h$uW(bfA)M9-G.0j`03"
%s*AX52s';:,Re>7&W!+tFLP8IYk--m%*U`:f&d0[@q)Qd6npE:]),"kZaBU.!>2Qq@P%u6g?(o@(frf:M7LfmQ/B9ZJX%kUHaPRP
%OL5iZm\#:ij!@D0T"*l'lJ&^?GFP)m[W[9HRObk5Z$A:99Oq7<m*CHi/fJcUHoq[QC/,IE:FZ:nC,LaP?9Y:+4]X(''`YUA`d8?M
%]SOT^5jT.%em.0&[T@]"OWj5SR$lrS(iFH5SX*VsI`L9JL>g8aGJCo%HCZ#CCohW(a5&X/+%q_Jh3@(VHsGQn\!=TOX#ob#DO'J6
%hCEkCDD%A_qh@1fqd-%u0eDK,mbFCKN]*kQ-*^,"Y$p_2\kfDEmCYOA_Ksubf!]bUVBH$X:8ff:E=7W200a(%mH^?b-,E_CRUpY3
%"Mi\W@P*2+CiluW`LPmhT*n/,XWbuCZqOu@?RrnIA44c9X.g]0R)q%0fJp$&h"t]3Y`-j9E08*2/fK*hr@I)u`jCm@k0@fkqSgm&
%J(T!%(,79\>_T05,Vcuj#2fCRIO.VYFIU4EhC6+;\:C>uer"`)_beKHNOqnpEb-('j"Z0pLp.TR%WdJ"_sl(%0Z<i@f$/1d4FC;'
%e6mT7]lZTQAO`&>>NBtH7cKg*NlGE1O:`nii8efmR$IUhNf+:RG7/;;h.(elV`\$`cd!HrdIr5B6e8SLNiP'aWC5i2Aqj)Q1[>cE
%nX0#C.=*qnr1h;>HE'*aPb-$,/mmXV:5agNVcYJql=_,LF/DVnrfNd73P&b2L[B7CH8`s%oCu1'g9]$mG?:2*;Nu;!E05duKiJal
%l7;3coM%oJXA@KScMa7$<4WB/Uf?HQE+OdRj-T1B,I>=I83cID\Vm9jV"uVsELr$2M:dOPU:]L(=6%(?pMVEmR@5HT5A8Lk4Q%&g
%nDV3N\9#rWL1e#%:Z'T5]?J#EUPlr,F8r*r2jR#/)niGX("/Zk;WZaoiV_uWP/1,nr4-Qn<2f%60/Old_FTM$Go$ucR/m.X:;Y5V
%oY,Ua"3Z#]?>B`=9>_L_AEZpk-Vop8cG\pG#&\!4>.OOP2GTbuS*fRN9h(r-jUAVcm8)R++1%H+T1f$'"i`ua`&]4/a"9k\#)!F_
%CMed18o-h?CeJ!5SkG@gX7S,K(QkN:J8kscMlnkJRH:udhUX0G">JlXPJ>F9F5!<:mt5a/:K)mbrcW3UBq6iF:*f'mdq$,$B"IkF
%=u`*iQO7CH-XLl,f^.)08bB+PNRb)1piL*;qCtUtQYE&5j\B*pQ/+'"g;ICh\T(h626MmaInSHcDriRPnj(Z12NNp4Q+(^M,P8P"
%P4b:,>5p@`Ctq*UhSp_G-jS+9^6k\IJq."mdW-!C1MdtD1K.f7ChoqWhe'>9VTg[$jWhAC#J1BK="O*i8ZN/8Y-6;/lcf40/$k<X
%k*Xu41AGAch$/J2o;N*eHc4>GmoF9Pa7U(eKSB#g.BX?+hMgV;BYD$$Ng5guVMiGD,d$4D"HIeok8_"9`^u=op*jj?$E2SNVQ$)?
%F0;TC!B9:.?(OLCkUs;$@CV47k5C9i-!\fnc`XYVk'6^j3ZN4RhoC-iR;Hu'h'U1*QG?PLKibBDD7ocn$d``#TQ*Kr0+u3.\=UjB
%)HIt#duI_q!2A?MI28K\s/^5@M&iV2a9&`piE05!qdgP95u]Bubgh-G<^!h3NHu5XI[^M>lOo[,^m,li96P,lUE8A=ruqitRO!<_
%`3<PsdBh7NKCuVFV0m(7aS+pmq=M.-rMqR41Q*`!s&)&D)qhZ>.A,ZG#I_Mtb=h[#9&b.Ui;MY55-lZmp+PO6]cVN8Qh%]#^N+s"
%q/fI;6rYE,@R8M_XfKrZMd-.gEAeNBf5E1->['9/C9r9coM%+g2Z7*oXm*NJp/)us*33H&lXu;O_l\C&4WDOgYFg5BaO1`/o3OY>
%*g1I7ZT9%?h0]**8b0mqqUt<G+X0u,h<X5JPA:R#qFR)[<oI;+IbF3s5Pq=[hI$)jHi<;Lp&!8K+=?jZff.!"L[+a1qO)MjrMeqo
%\C]&Ua-jnLd!G,i9g>pW4sI)BNUHJGTBPbocPGsAZbP%/bnI$,n+F#2FY.c&YC3UHfrcdk<kjX_j4coG]DHsRm%N@ohnm'Up'W@g
%Np_npos7Ga29ADfe\-Fo$S'<$IYQSpIXSEWl8CWm<^1/fd]_+ujEpjlQ'oZHGQ%5A5LX`neV'$sUs8B$Zeo`(cUe$5]mdQjXd*,h
%<mJ8Pjh6-:$rh+Tg[nf:gTbp[,^C@'qUr%^YAkZA#,c_0n)N.bn%np&^\+onbjY52?Qur8D7eZ<IeK)?Pk2Wb]mf[aqJ@T1c"VZ^
%a1n0lrTr.*NOoIFH`s(?XaV5Ea1'&8%D2N42Ejf)^"%$Op[L9?dOn:5=M<=)SZDMo)J6=&rDo(5FLV+G)+,A"l_fW,l)fELa\#dp
%bd!D;2=L4E1NQlO^u+%l]me_WHZd'ScX#DnVYBqd:gDk:rk!OUf%Y7WEj+BhPMt%rrH.cYPH.;kk<.GRl=Y1\fin.H=m.Tn$s8q:
%IX/,hrC3]MR*mYVos78O90.(:IEkb<k\a@;I';FRIcYM:p!Y@mQ!=2Fff_m_lXqj_*g]0!VgJC/%7>7aEPm/%lk<j9)0rQ8rTnIq
%1U4uLFg%F.&L?$`gUPk]XUVVi]mfgL1u@M1RpEYG]mf[=K0pEPl[/Ts-O8=&6;*U6Q0G!)ZlrS@(KPa-(s\CUpX6s42")*O?+c&/
%3LoIqhWrW+%=0QC^"0CDm-BCSE(l#!Y[UWd"MndR8d^eJ#.ojVLepR.0DHMjqI5;s=e'?)pQS:0\L96)]J'13?6s([bW^B'QHH,8
%aSb?L0jV3h[@WHi+$]3WmJ'El+^_s(S_/48j"bu+qq[Eb3,(8P]rtS_j6)kjT6Gb:D1(K#+6R#(?8J-9J#WD%2<e8Whu(&(N,G\Q
%ZfU"i2&(Ff01J:cO/_T+nR^dS5DqYc(8AP]%#?+>kM)EuV?oJppN7$nC38kfl,[!]qm/5!TX!sXPXP%$F6O(I<mQ.eiF3K]kTk4K
%Kf[LWQ(.XX<Sa4;;q6ft02W]/a2I(@2D>Y0ceGDW4uq(IqbrLp$0TX597/_dN@NiUn)F9:F;KqZMk6n7P5>FGQY,E=dShILW#Xo[
%3nb=1dQN25_U#VMZUT&Bq/s:SG-[L)E9Ft4o6S?VX\qfY+7[&6^Am/4:H01+r0P[nC#Gb3Eg08dT5bH#3>B'hV&\M7qqiM3Oii'L
%EY@u#K3+.FPe_PR;p0ln+&>=GpjDj,]%AJf-ffMf6#2oIqiH1bjoZY9S10XQh\Ub0Ef!5pPco(tMb#mO?%HAEEismb'l_lD^2rtp
%;!Jc6\>;mX0iF<l2-s;)<pt\)="mO0qNmITmGrpQ^L[m<ro0T9TMalGb+7KeRS#[NA'B;%)l41LT,=$WpX"qV)#>-tbbOEa4hfa/
%A$Ci.h[Nt+Le=J++oDTcb>$qM'>]b)e>DOR.*,gV!J&g\ia;'/iSd;g4nN!WqJWpjgd/h*!o8!^cmUdI:g\mt(I`gXI=ZPO'<c<<
%Y50VC^A'hUX"Pm\7;VGR96kLu_C_UbNLcA=(;Z8!I]7Yd/`'?3`<\HR=b]7S$$f-6SPpqFBh[-g"qn+\7Y9HFo;f+!,#X^"N(0^e
%>fDNpAIjG?M!g&/MG'3q>`h=5'L"FHmaNlYUC=U&oLraRKh=I.,)NYgOG1/&;>c^dE>b#n2fT!/("s<LB%6I>UZp-0mXVn',=PL%
%a-8\[KD0-M3WX'6!7\=qYS7,(:@-7:,I[n%Qb?+bkP<_I;"DR49^&J?P9p%pRE:MfNHr6eJ,c2K)A?:tLC+^_UKZ8(V:lNe$1B0#
%B1brIZnqbTSVn3]"d3+/h(j$8o(`_*H_qct]s#Y2BP&KpArgPQ634%FdnBe8S9Id1jpE7,'$Jf][0@]=2<O)]*`Qb?TsWQ[Q7M4U
%k"fMFq*'<8VSdZ[YHio4SA`q=<:X$sfLM`<'cu5o<+<?N:CMD!pL0@/0.8:eT?Bo&`</ru0npngGf8XS2RO,m6[Q*=\JC0hmiH3b
%5@XX#Huk't71J^)bb5IbE?(*,!so.5C'fgfA.9X#>Z@JWqoT;n&_TVH#HJ)jT26)D*.VpoaWtM?=P![e-'YOM<O$d;RkBJMdE\OS
%7qY8jFF#pCTZRG?<dBlq?]r0"-)sIDV1kQSO@YN=W+3lSH^Q,'+XsLG$+.<).)Tbhf](O6^SRSjY8>9u\C.3s94g[&b(QTjH+tTR
%M(&^sq%ge,#(U6CR:!+I8;=28A1^$3Xb*<^R'`ISluX).@_)9&B-s!pA@:)1BAi[bKtS*'J?U#9p/aKn&d/KOnkc/?(.#ju@s!>S
%oPa#2Or._Jb?.XUK4lTiV->C\qnZj2@uk).E&!2_iuG0#o=AfZ+LWR`08.`):+oH1'n"VSH<7Oe7^qRAoI]7=9D1`5e]`^9ZcKS[
%KchD$J-]GopD@^>Hm>b8H9m+o0L#^aEYahuam(2"kK8VeT9RW[V.XOqhT,mUT=UdFL;M/nC6)^`qZ;t:a0Z8L1iKD7!Z8)7NiB^H
%&'t#IcA4GhE*qQ?_=laY$Wop@.eLI6pk[YEdDDDkN)]5$8*c08.s596&3a+3I7M@KZUu>q1sqMtqf#1/&<@\/O:`-$=NTG.K,bJ1
%V#gG3QAUr@hR^tYH[PT"UeR:tRn8tK!#fGpa672_@EpU@(a?@.Z%P[!];9#CL62sUd;E""*]%_F9i1.V&6j#V/f9>M4SIr"eQP7+
%L%t:-e>sF76?9c^2m(WZh*m>LYk?;(O5E+Wk_UCD>^jj:P77kHn`1oP&]i!^jFDW*j,_:%c_ISE?bjNQPE32h%/KZ6-\58^PDA5Z
%/47:WmH(Xb41K(2$;!2/^H(lTpc;25JiQL;df,2eKRdK)'%5In%nVf/S_+NG$CJn;3=q:HK4&NC-b),-<`+s=%!cqebN#($4e,6r
%H2enS0A(G9=>!+rkD@@4.SMe,Q+[GIfm-rGFqiS!atGf3kA\e14S"L,YiHb2G"t;HViE#-#Sca6#`ls7ZMp"X<>(QPF!aGt&)k)&
%^>;jG-Ub[>02u#I*[+lI,-$i)O6QQY&<*4W.RAM>.r&r=9fb1d+1.g)SFjT^?;qI%S1pe5pH_n\=5uE'B2BitP[oZ'CnS%X:?+0K
%,Rio,MM)E_J2hljPoZ>W4sNj<d5/F9L2s>gj3^-(9$"`onHi[Z'eOoVFc4)1ds;LJ&\fRSX<t\ml%WY=U`OF[mu7Vok7/&h"*>!n
%F^Z!a%"e_1g$(Ffob1\2>6\)GQnR`!<jUn,n4IG\6N^Em:dpQ!"+/QX;Sa,HMp&e?p%:oObVtl8KCVt8&t.N61b$PjlgcVT48k4Y
%X<M=:8^\,1k#J[sO3,\o<=p\5qh-^)mK%M.22$G+MQ;)bK6L8LQ?sDI<hjac`>kHndl+HaKd5XhcR,sa?hD35k6-g6@<oY>jPURP
%iXI2h+R[E)OCT=i!,[VSU_^lmJ>RO4i+u-Y"7Yib9I]ZT_*^s<="u6pGhf!XL^1Ije[fd*!";33hB$eQ=mCZ,Z0Eib79Nbo#.G`n
%7!;P"l3;kYRE*thDFT^?^NH/'_.ZffU]Doi.PMJArrj7`hpmT+_gE7(:.LIg@Ydc-IRaDfn@78fC+b)PgmR/[bl9'V&ZCrP'c<O'
%Vs,Jo9jB>A4n1iYHk%L[W9:s[aIgiOmA)hGLqVY>miRJ9['LbH-4=b3S&dOH-RV6\eE]f?4YKRT:4;W30c65R<Xt%n<q0'Z3_TEn
%F]dD35&-AZe74fsf7P*-&6h4_Z.*QMhZmcZTeCNePkIP\#4UoQ+883iRAMW`p/(>!W&$n`&$2L^CdDG4mYMlI*QC8m;uWAb\gB%Q
%p8FOCcH]4,p%1?se.1s-Q0D6<Xt7:L;>=fd*/;DsHSo]t86^h(V$;W\/"g^P"lBj)khTG\&RY.KK]p$$I$<`@;5R7`774VK0DaP-
%'D5g[[Y>2u57t]N)h**kS:ILlbr=1Po[_mo7>c$eNZM,V2uep$R@#aG?fpQL%8PFTlE;<OBk[Etp#?8f-f"U/TGW__NkFpk6Id_B
%i,d-MMW?.;R\+F6'&!^5L/_L?!"7bT#EBa+jd"\:f5t-'6"quCo[OA17>=@W0LB_i.4F^UiiZ<k)I%cD[kK74)[TY!<A,brI3MQK
%,Z26d&8W3:X[QCtE*8-m.T(K&^H@@PgGRB)Pr)Gm)f]*h&3PIbIX+Y]!!Ea\]'/ZM!Xn#l>UaBIg5C`NE8Coh8\e6"%hoJ%&XTb1
%R6ToKL&/bAY&[AV$+g6^P.5:)FBS`X>bor:;]`+UB(.q^ha>&QLf&GEPUYa5pCBHF?[R9f^WB:>nRuA=cf$fcV)+gj_a"Z0ZJ+q>
%p2@PT<BI9.`sg\RP*(LEcj<:Y>!$pfjrDo`'UT"2:M^IDC*#[*%Sr$V9_r=/p]gRq)>4pa_]B>#2"pU[4tsU:_QR&^%Ip#C1.jHd
%`k+V7Y2Kcgm#!2"a0.?rim>9c9Y'[UM#q%E1ZcXJ,bAbAB$-+r8K>Z)b`pBn0*S%N2T'6eMRk*(Ug[)E/Or:j;U^LX)RiYhn#53X
%4-OViL]e80PRRW>f$h=mEl9:CQ`BH>A<3dWiB2'Z.t.p-e_<YA$iiEhLPO'c$=XPlemS$d,Y9ELU%6AmN86^CVIA8FU<%hK<hOFM
%M?1boZIen6M^K`<d,#Qeh2L:iDEnSCWR7YG1b\91-bH*mYbOUFLbMgOU4oRc/40nGj]IR#MH!+G'aLa>_c1kt!f*`rT<p9e<N.'H
%P2WghkX9FcaV]]ODi@#iG,c/;n63b^mL63B%\G*mKlCn(J'taA^BtQ]Wg/;8<P%)/NYpTD>BN?NZ6Ke6J<.f-lNfM/_JRBA"9?8;
%O5HN9.hL+9BJ9g@L=V9QRK/-_==G=q]1t.1Mr$F&FS2BZ*&@k02!P^J9"]FG><=;^8m=Z)e]9/6Tp"JA5!-;]1gGiu#STU#fRli7
%fu&%X#H$G7>adsqq3O4;Sc8X8p&BgoFk#7IKhL]g_-j_FD7c6siLt5,Y9>qXUhe0;*rium+^J;A7n`,Z$gC?;2`ea;kmO)t'LOFd
%jREKa.q6nra]2`9.3[DU&;Orh]`5]BmFhPH4%>ofV!Mh>aX6E\IdeT[H(7J/OpU2sYOZ?V@Vb*]MOfL?i*d4aU2km"-6dB\A+pJU
%Ve1:+nS4jF7Htuei`;YsZ[@RJMBs?"HPB<_Y00[=(kbdkN$C$M/6t1_.b1[DRm_0TYR3QIU_']W^6#/AZq/@3J$PXJn;g@YqRo#U
%Os)!0h[_$XhI8K4'iOLShWJ:pB`71P*ni.C8&9]=0;%sdN8S8F.<nCWdRMt)/@TtiSsKq4)\\;44cpNsV*S`KQqgiE+)_>u4e+BI
%:J0K&=/u--FUu,NTS@cJg@-SFi_])/iOam9k2G48hsfgG6cnPI*_Ia]?N#G1;u#kl7=TZJhD=Wl/*6."[1Ck1R\Je`P(M!s2U67j
%c9(aH//Mrt'N$c?1*Oq!8PUdgYMqZ?VkA^'1CVM>-+"6HdK8G\HIO^$M0!K25bQUN5RlYa.VrFI;k/sAWWX^R7?('=B]MbVEK3e0
%?_p]k'G'P2^oG^9k+Y?p;<]$677nd=W*28a3)oNLJ9b+a'dsVL`+5g.:8a;kpCnY2-oRo$VLb9>5iao,"H^J*!`)cf1NA.\P;3je
%Y8(G;GtbkUUbPb!;&V!<<>Zo)esNBIVsuI/N`-"]EAbkY.@-`/OQs0p6`!2ICnqdpe14AGp8r9;Z&h<C(W3L\L1T?G`?F1R==0k-
%2a"qJO>j7?UQa%b!j>X'Ss=%`%nj`h&EU_NrAX?k_LrW?:IB?T%"j3Q^.kIR7OoG:1*3\/KHN^WSjHe]p_9nbdDI^mlf1m/(Xf6<
%H(%LO8CJRJ;(3Dt77&IV0Ym7Ap7Y%in_n4[hfJ*TH\3L1_`b55km9"+K#/&r?Q>jDfE!!>#f&@JLGVN]0s?j^EL,aN^f*9_`KMjc
%2D7](rtr\$i`i`E-D"h5*%p9EWDqTG9SfSMk[Y!T^f.UO)5arQdLO3In1AB6SP#SQbA"JZN@F't3fWDPnVG/'R5dj9$t[eV6;l1X
%M=@FRPeN*9KC7alFL(BfB.2g"0G!C%]g<eV)/fgK8?k`3Qq.t^4JnX*VsoL/d_\VYLXm_:<U%\cheF.)&8[Ai[5c8C(p,LeEUT`<
%M-rN=k)o(!""_\8b(rO&aA;A@M_]kblF1A:J2YMYi<&S5`d/WQ*U0C!gN8rq;HPP3O92t]!%cN[ZI2oC4ueW-M/Yb2"p,l+i*DKl
%b%M9pSef]I/-&!MU/h=Xk5f&46^/0N""]1">*PlC'[>,'Z6[Y=BkS.+75;:mJ<LVY.\Y98_?W+K`UZD+%[8o;,(Z[=1+Mpa>"4SV
%K25%E(1hM"7qA%1#_9pl(m8$JL3<i'$ZS)Ll@ht`,;?%U/46`ZAUlcei%cA94c\\Vb)#IEi[)1.:P-*tVM_)L[5&0qccXKg/^mZ2
%_GB.D`4ScX&'of]9[T/;lF07Z#hi^-#+L=snInXL.6=G,@ltjr=e7L:JZ@'-'>VpL!j+*h!!f@h$Qf.r(A'pF_#,TPQ1jSPI9<lX
%k#<6:<chL`Zt#hhJPTB^io!\;;&3`c[ga!qWWIn.TW&*c!_!;'c1!c*$1/<Mq&mh=h]f"$F[GJ+$MP0!^J[PJ$EXQ(@o5_DDhLXS
%0IQsZ:$\TR.jI$u`[RKh/BTe`JmMp8$ti_?p1>f"@DgTh9`<O5T1o,62DcJd*_s+0nB>r^AUmV(YuHn6)'BV%#A)&C9F[0u+Grmu
%3[;GI$o(+I[Aop/>*_W6ZsqraL5'E19Q.hE%A`Lpr'@YC6A<q$1kYDa<*Cfi<^mE&23`X1^lp'P*.[lNC0N25a8oDU^flu=\#D3f
%02';N=TeV1+##fT#m_m_99>#=3gb3oRm^GV'T@DriG*nm&fFuq6^/0nJL?dP^7f8/grp@5VD9A2B*=eQ).qeVRUU4T).#W:L,uC)
%)OJiNSDtoX5aE"A-O>nkjkGLr4KMQ`F\68UMF9'@i;j%*o-+g"!>]C6d.4\EA5k>1^f_Euq3KN%$C#T]`L@ZXdL?s-]M2Up&cIiP
%KD2Ar!^`QIkVd6aV(l=Bg]d=B.tK^7PALu@%*`M-8:_D>91b\F:8/V`6epWHlM4C7.GI[`_!+Er@>8A;"2QOb=!&=_ZluH7!B$+W
%.ufh.e]NE:<)O:71/sG!dS_[P8ONk<%=sO0=-cV([:Df`'s"]b$l1jNb,1u.,p7DL/=B^e&lQk_Z]#[lSHPPl-qI_odt,D1_Z8/u
%:9LrZXN\)UZ$nP\,J(l#O0l"(.AF$^cuAM/s7'b.,Nc6[$s+r(i.?ZF'KD"+Xd/B-SPJLY$I?kL1VkoM9NNm<@VL`U%IZnNa>SXh
%`%jCL;i?mN$7lKL)%$-@D4XWi1+=Cq!O%qaZ5.">/!,2!VC]ls@:>t'1d$:#'I0=2GU[5*AP%H=3f6M&.80_W"0`H=)+sPD\q:G#
%*&AdRJQAIT;3E)R/eBF;_q2`E&gcJX2Ml6rg+/FrV1f=8+[q]ICCOmUnej(>aj2X`?MdDc#F^3TH'q?o.'RtpaB[=&#<q]LbdHTT
%-0RFU$#2&W;(<iVSHM,Qs,pPaW<,Rri)l._[7"f%>*RN#P6%Y11A5$Ed?sEX7KH;D<5;uVd4]2E+jSH!e;7F.O@l_ed@)X%8DF9A
%;'>.S"!B$>'b#smnL?$Q,KV3b,1(*<M^]PL=*`Jscq:YlX$n_:"U%^*"Dps*,Vn9Y,Pg@<7DKE"=(t&Q"q<#bMV4a^T;X'B8;3l1
%Oh_4XSkbJ+JQ\*JFEFQ0>3"*VPlh@5Pt?^*1X$g?)Wc9..tC@:ib;@L$j7&.JJ67c1joF+5+bN<(MVSk!-=befZ$/\,>a%?U=1ga
%BRqC%"g(0K'soa8;ufIpLb#>(i8`:<TJI>@4,,L%Dr?:`.)>RVMC,4\1"gkI,ALeY;4r?</*"-]RP5EU23k$A_GJTO1dcgFP7.U(
%P%#i@ct_e41pDMl=C$DlANXp^_:)(=.=:Y/I5$N:8L4iB!!aIb1'XP42ghZlC!9<#TO#tpM_\!:Zu:dV(cOc:M>IhIPjk\0'D6nU
%>fs^8^hVq\2K=:E`W_gZN<W>di[;.&8V;O9(kN`Me<d">jQ^aTnJ#W?:=<kGMtE;@6\3(?iXBCW,.6^FX7RhrMBFTP;OXG,Nl&L6
%@)>c!?lR'p&Oc\5Q59+(`_Z9T?3[DbN'L)9A$V%9%Rc&G"H,$XR%T1RaBp_V,8brI<JIq1,JH%`7s6;ae0d;A2h;?;'q5sib)#a.
%i=WS5AH(hp@tmHgCM@Je`aMdG6.<.%8KoaUe.l\R_"j2eTimdQV#%&^&`=@$Bj;q(Gfa->5"Q^9(mqVUgnUek<0i[LnK]94QED==
%iK>bT"auf9UqiF&"='G!,9nm;(i];pMNX.01l)Z:MO8XOU!n%87S!S-ZQ^*W9/1I7"pP?C=sT<c=J_StfYC0VCP^#A$1LlT,6M26
%OX^Z.d@mB]ZqLT+@"Y7pr$KZbBsg25h]u.K!ifE/>*'r$:tW$?LhKic"ta%u(f?_kAgA(09[\jdJJ:a@V^Oim5J\X;H(bPK:rp45
%2Bn4<:`p5>LK`&e>"DL^[A]cL'%g/e<s5'cT`?QO"/8!p:GHR?$^AH,cVg8&gnn'P-LbDd6U?l(!S8$S5E],^B\DZ@NTMYuQX_IU
%)%KC,!a9>094*7DJ@h'.0Gm8_V,dpanrhf.>K=/4b-B^J(#1rsio(8;Iq]h]A^it#a9IUK`Cg2\!o$8S+!-Rhfi=<jX`O.[7?J9U
%FW[:dRD+u4I=j?@"qZcp2XMcO$e\)o4S7PO3Y5I+8Kk"d+^$ff\;fFY+?r!I=g%T&2"VNcD+KNd0M!:Un6]"(R&@$m^L[XC-?hGV
%BIjohJoO7.X'f`,[["5uXMd[3`8rgji-N8%"G!R!o)0A^:DlS(meSY3^qXp6X/<:Vb`d^BgB0]-V?W+o*ob`g7/PkEkk?L6PC'12
%gSF3J6h!"pbMYPaRGl4.!Hf^>7D6hYL,uRI!9%_6N^sXnqmgXq"E<E-+rk47QNTA$aS&u(XLqYUb=!cc!O?]2\hS/6Tj,3'Ro2=h
%?uW)>!/r3C,,qP13lrd]TB\QQD(+DmdRdJ,@`5_]>ATGcW=^B4_@RmA>6m1[/31b.U^Wi5c<!P,i=Z=S4\9'R_F3&tPCo(#`#R`e
%8ralKE.GqX9*9;?k6Fp2G[26!oGN`-/h[QVM';U?j8nDeIJAgthr>8?9E@p%]rEG38K0['`./29)ur/MdRbRE72-;)XHBXO*J?+j
%cR1+K$2%ERG6=^`V6F;Ifq`0g^o'O67p`_'"b>ct/cti@&=@>-*caDghNo(\0!Ye'b>>Vl`f)&@Q+5'dIj&')!,7s,G3i9Q2r6B5
%Y2p]SE_1Y4a:1R9]%DQofI?:!pT/,FP<5ml1kQhM$=ocBMe"cpiNp7[h;kXtfs%*C\^U1H=uo(>q.9mQkUGIe6Kj/)DBVni9ap[^
%G=C`b%Ip/h*rtd"%LW.qg%3U0Ts04+nHK=>iD<:rD?Pnd?B]:q@ga%G@8@[4@7+HF:<\aq0KG_U@,3*MP*uG)N$([NE!0,mX\+C1
%o=)e"lI;7RA!/p.$-6PtaLCo[;;+TJ)>lC?2hVo)nDoCMSl-iScm(ei#?_<U-agW3XN)%6^cH9&6lJ,r?67/!-6.o<l1-V/#A(=>
%YXH9O3OUb`b3K3Tk)cu_97\64Na>T.&R'/[I[5&q^suB&"FNNUAJEih_*hL*@EE*e5gJB)Mm=?lP#jpm&"M2_R_U@d,7HmK-3EX_
%U8LsgLrN(-^8:9$-Xl"^_cJV/X_31:ca,nKML]uXH()7tdRVjiRgFRX06[4/7Z[Eh7^KMU>d6RQkJBW_0rFdUZButq=^S957aZsL
%l91$pjg7Mns2?2ZjJ/9D`.&$[$:Bh3#=jmZ.I,Rk9%E)Bl6=r3a[tqSSWipJ4Fo2MUNcn^>ce/0=)csi#1?]V#eMDpfrcKf,_N&(
%nVN.u'!a>s9L0doG"pPf(=HkN'5FoB(7Q1"`+E,="pLc2VfaFgMRRE(q`Bo"OHR6]0rCIajqRJ-#gP#'^g@3)C(_C)*2Yg=2)g@"
%V^:aR[fY.N(4p`F&R%iFQ'?e")[qYLF\&m^MHn((T"OPQWZdFZm".2rp!e@U192[SSGl9lU":*2m_!nH%2fa=f+eVY3-"i'k_b#_
%_<`-%?4'@-9AU-=HZL7o[IT*,.o*DoQ(^]u88+)ha1WSL+GUV*BrTXC/mnA<51jgH;"K:Q($`m@*FEklrHOGPA5)D'2]eJ%lfAmK
%1-sJt,\W$oJ3N*h88mH"LGTd=Guq;X8gqg9csgeU*ZT^iluLFE=jp,l_#rL&?9:\1'!'sCO99S4Rk8D'JHDOC4c.oNUr4o+:P6La
%SXeM]&%V0a6R2_RJQuljj"7(Idu\u?-a$p_Fo-DY\0l<sp@4Zo:"0g%B7T\qABE,0W"_al"8dTQ?m!_q)&[e,)^qrO`::&La@_\l
%71WtWiIc#+k@4787beM:RR#R^GUSb.O[fab$rU>1[T#_aFGFBYmOehZ3ZMD[[WlOf_5t$FDB8j)<o6C"IY#c)^4WP"q\Q]tI5m04
%5<q\^BHs&#UDW`QVM-^)ou59:Vj2,0!SAY8[)q0WCqcE`aa=dRZ'Q/Q'S9L((JWZn!_Q&=$Sa]OU0A7;;FS(9,`0PcSI$EYCsb`r
%W2OJYjqn(>Ss[>(JF2'FeF)'6gG,phgj--CC^7l/WZHuD@Qo[sl7IZ,HO+,K:UBO_+a%-![[FP1Y1:8(N]A@1gE;t7kFFVG-EBO0
%e/EaHKM1R-`p`uXjSK.&<Jp1u.Vp*sT1.c^Ln5blBE5/167mr%5$d6n[rDqh2-L8n]uE/C_Ne,9aU-[fhSo4[UbPa7jG0X*Ahb>\
%@R<_]8^jUlnjc4T/her8JO2fNV[MNop'\:G,6^$A+`d`*P5^UTm)J-57a8G:@QH=sci6.+)X[eH:us^"oFNE)PqJkLc!/9f'8+e!
%=es*E*DCoT2>h2Thd!^es6\s^ke]79reWpL("fU8%u&j-ncJ"b1(Rq>gj+Pqnq)F^+V_V/j/t&e5U)W8e_<b-`g[B2%>Hdde0oO]
%9[X%ITaMUo29O8io,!YbPIFe]JjKG_fqOK<J:2ao&`VU9;"hd=!g)S;jp3tTNfZWJd#1jmJY`I/!q[nF%VZ7Z;!KK4nggK>#3"TZ
%C&sFUBYbZ5_p%RG]T$NrC_6H<#bVc75e4=6.5V$]PBWH_Mh!/%*7?AVJ2W-0c"(t=dqV[PP1(,27>m7>d2^Rc)KTAFU$!C5L))"O
%Gr.d^O]lF^jVc@hUN*-H/3.5ZQu_"dc(d#.2".Cf;Y44`&/An!"cZ7r?R`&ck)aol-dj!=7%-J/Akms:FUubDc(nbcI/1*:)RJ?]
%\j<!#%ZLuA'+b2hUd^(qBh[u[YR$tb4AV/+UL_f'bUOJ[Bi-a;Wjsqd)1hdX9B5l)5-sA!S/r,'6pPg-(Ri\C)Ph"B4WP&1a"(B/
%HN5JbNR4tZ>%lS#F."hN;mgtnHu81n74aIh\Q#N`+e]_.WiKZ<02Pc$p:DLa<XoC*Q1;Q^J4%<V6m#Q6fr)-[Z9po+:Q1<kN:\s-
%f3+FSSHqL4T$g%Sah'V[^4(X?gZ(C+-=EdJqQddR14+\ZWlFfe:nZ`'<ifoTIld'?d5/(5=994R.Q$*-NRT_f([?PHKaqfdejnCC
%_.I_qO\cNeb=`er*NCh_#ti=>THkc*eLPTq4<k5)<3KnE!UsS_FqT17E?VPC0!E_'-;2-p7M^M":0gYI(eu,d7MYupj),af#T-2m
%U`!;W75M55P@\9Q24B[#`JS0o`,+&_M=hWY;hU['FcKTof(j%u=m*J1A:8Yq%Sj>#$t;W+XED44&PA*OGTT1Nrt#Jn/h^+$c"?^l
%I4G/%?Kp/I9_/&k7,?ki_7&RD`ZmX=>60[Mnfn`rD:58T&1e]E]`?du"GeE.OL+#bq+Ur<R^h&Q5eu^-FA$IC'dG.8QMVXfGSCI7
%T>r'*29QC.H2X\D(W&*f=qtWYc4SaWf\-.@I.1#r(hPmL5,?!QW*Q?,-n858<OsmUiQI3)%.<EZ1o\+/r3BNZE/bAA*'jngj'/Ij
%X)o'`l))Kb3i>q%E-1VG%'!2YNVjZaoVoccMFF2@2k<<&%S2\;I0Y1!>-TF#M=(FieN*FSF81L3<_:pT?FRa&!XI6T;mAHAmdpHX
%\bWET^`tl<Ad!RRU(\bS;TTLuF\??IkuQ;aDWKa^%RC9uXd:5=0&o'-6)2W0pYG,8,:'G%Aj>.6aO&Y#1Xb>aquaWI*k)D1L&>?-
%H<h-4+jVLKAG.N_Wue&h&oL0?`+V<_"^2MY'E:]sh11K;LaC*PXpC7O([s]pTZ0;;Ed"ukmY]Z`#Xkp6I76\g#$Y1t:7LH9V;ejk
%&:n!u^.t+NTM>W(-(DRWP]6,o(LKle:&P#kCH3B.IFuqlmXq.,.$;DP(cN\ir2d4p%_!YHFU.F&YVUuYiTc,#S5ph"r;-ku#F`sA
%54n)\?Wsh.k4X[oBWV%5?9OmNHUNE?kIeM3#j.91QXk^^Q3l["\=DP]2ZNIRC:-.fR87`?U0BUf[.'2\<_5m@?4MG<H4JH$^&[X<
%ptb:Jc+J\]k!L3)PEt5"S4%]BoIpOcka>f&msZ5OEZL!la7WPa)FsUV.Y+7SXE>Bj<I"T7#TXZVEZL'<"s0k@HuO.b%T8IoQ#RKB
%Ep,#Vk.(T*0;!1`Nfm_9U[ikdJ>[cp!RUXFe=fl+AD.XGiI+kh_d4DQ>_9,m//V>Kr[^:(p%u4JnBY_Fp=n?BO+7')a8=bDI/_`a
%pE+='r;?JbpCEn2IJa$0o<7n<dsjRZn`0T2YO=^45Q(HBp\t;g0"^r"O2(_f05pjm9%guo~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial Black -33 -128 a
SDict begin [/Count -0/Dest (chapter*.4) cvn/Title (Kurzfassung) /OUT
pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -0/Dest (chapter*.5) cvn/Title (Abstract) /OUT
pdfmark end
 -33
-128 a -33 -128 a
SDict begin [/Count -0/Dest (section*.6) cvn/Title (Contents) /OUT
pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -0/Dest (section*.7) cvn/Title (List of Figures)
/OUT pdfmark end
 -33 -128 a -33
-128 a
SDict begin [/Count -0/Dest (section*.8) cvn/Title (List of Tables)
/OUT pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -0/Dest (chapter*.9) cvn/Title (List of Algorithms)
/OUT pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -5/Dest (chapter.1) cvn/Title (Introduction) /OUT
pdfmark end
 -33
-128 a -33 -128 a
SDict begin [/Count -0/Dest (section.1.1) cvn/Title (Motivation) /OUT
pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -0/Dest (section.1.2) cvn/Title (problem statement \(which problem should be solved?\))
/OUT pdfmark end
 -33 -128 a -33
-128 a
SDict begin [/Count -0/Dest (section.1.3) cvn/Title (aim of the work)
/OUT pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -0/Dest (section.1.4) cvn/Title (methodological approach)
/OUT pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -0/Dest (section.1.5) cvn/Title (structure of the work)
/OUT pdfmark end
 -33
-128 a -33 -128 a
SDict begin [/Count -4/Dest (chapter.2) cvn/Title (State of the art / analysis of existing approaches)
/OUT pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -0/Dest (section.2.1) cvn/Title (literature studies)
/OUT pdfmark end
 -33 -128 a -33
-128 a
SDict begin [/Count -0/Dest (section.2.2) cvn/Title (analysis) /OUT
pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -0/Dest (section.2.3) cvn/Title (visualization to support program understanding maybe some examples\(and tools\))
/OUT pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -0/Dest (section.2.4) cvn/Title (comparison and summary of existing approaches)
/OUT pdfmark end
 -33
-128 a -33 -128 a
SDict begin [/Count -7/Dest (chapter.3) cvn/Title (Methodology) /OUT
pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -0/Dest (section.3.1) cvn/Title (used concepts)
/OUT pdfmark end
 -33 -128 a -33
-128 a
SDict begin [/Count -0/Dest (section.3.2) cvn/Title (methods and/or models)
/OUT pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -0/Dest (section.3.3) cvn/Title (languages) /OUT
pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -0/Dest (section.3.4) cvn/Title (design methods)
/OUT pdfmark end
 -33
-128 a -33 -128 a
SDict begin [/Count -0/Dest (section.3.5) cvn/Title (data models) /OUT
pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -0/Dest (section.3.6) cvn/Title (analysis methods)
/OUT pdfmark end
 -33 -128 a -33
-128 a
SDict begin [/Count -0/Dest (section.3.7) cvn/Title (formalisms) /OUT
pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -2/Dest (chapter.4) cvn/Title (Suggested solution/implementation)
/OUT pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -0/Dest (section.4.1) cvn/Title (suggested solution)
/OUT pdfmark end
 -33
-128 a -33 -128 a
SDict begin [/Count -0/Dest (section.4.2) cvn/Title (implementation)
/OUT pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -2/Dest (chapter.5) cvn/Title (Critical reflection)
/OUT pdfmark end
 -33 -128 a -33
-128 a
SDict begin [/Count -0/Dest (section.5.1) cvn/Title (comparison with related work)
/OUT pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -0/Dest (section.5.2) cvn/Title (discussion of open issues)
/OUT pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/Count -0/Dest (chapter.6) cvn/Title (Summary and future work)
/OUT pdfmark end
 -33
-128 a -33 -128 a
SDict begin [/Count -0/Dest (section*.13) cvn/Title (Bibliography)
/OUT pdfmark end
 -33 -128 a -33 -128 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -33 -128 a -33
-128 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -33 -128 a -33 -128 a
SDict begin H.S end
 -33 -128 a -33 -128 a
SDict begin 13.6 H.A end
 -33
-128 a -33 -128 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -33 -128 a 1042 1251 a Fw(Titel)64
b(der)h(Arbeit)722 1541 y Fv(Optionaler)44 b(Unter)s(titel)e(der)i
(Arbeit)1273 1964 y Fu(BA)l(CHELORARBEIT)1009 2219 y
Ft(zur)26 b(Er)q(langung)e(des)i(akademischen)f(Gr)o(ades)1240
2488 y Fs(Bac)o(helor)36 b(of)h(Science)1339 2742 y Ft(im)26
b(Rahmen)f(des)h(Studiums)823 2997 y Fr(Medieninf)n(ormatik)33
b(und)f(Visual)f(Computing)1561 3252 y Ft(eingereicht)24
b(v)n(on)931 3506 y Fr(Pretitle)30 b(Forename)k(Surname)e(P)l(osttitle)
1345 3644 y Ft(Matr)q(ik)n(eln)o(ummer)24 b(0123456)-33
4101 y Fq(an)h(der)f(F)l(akult\344t)h(f\374r)g(Inf)m(or)r(matik)-33
4214 y(der)f(T)-10 b(echnischen)27 b(Univ)n(ersit\344t)f(Wien)-33
4403 y(Betreuung:)41 b(Pretitle)25 b(F)m(orename)h(Sur)r(name)f(P)l
(osttitle)-33 4516 y(Mitwir)q(kung:)h(Pretitle)f(F)m(orename)h(Sur)r
(name)f(P)l(osttitle)431 4629 y(Pretitle)g(F)m(orename)h(Sur)r(name)f
(P)l(osttitle)431 4742 y(Pretitle)g(F)m(orename)h(Sur)r(name)f(P)l
(osttitle)-37 5461 y(Wien,)g(1.)f(J\344nner)i(2001)p
1266 5474 1205 5 v 1483 5587 a(F)m(orename)g(Sur)r(name)p
2589 5474 V 553 w(F)m(orename)g(Sur)r(name)p Black -33
5900 3827 5 v 1350 5997 a Fp(T)-7 b(echnische)28 b(Universit\344t)j
(Wien)578 6110 y(A-1040)e(Wien)p 1096 6091 17 17 v 75
w(Ka)n(rlsplatz)g(13)p 1660 6091 V 76 w(T)-7 b(el.)39
b(+43-1-58801-0)p 2476 6091 V 72 w(www.tu)n(wien.ac.at)p
Black eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -41 -890 a
SDict begin H.S end
 -41 -890
a -41 -890 a
SDict begin H.R end
 -41 -890 a -41 -890 a
SDict begin [/View [/XYZ H.V]/Dest (page.ii) cvn /DEST pdfmark end
 -41 -890 a Black Black
Black Black eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -41 -890 a
SDict begin H.S end
 -41 -890
a -41 -890 a
SDict begin H.R end
 -41 -890 a -41 -890 a
SDict begin [/View [/XYZ H.V]/Dest (page.iii) cvn /DEST pdfmark end
 -41 -890 a Black -249
25 a @beginspecial 0 @llx 0 @lly 511 @urx 47 @ury 5110
@rwi @setspecial
%%BeginDocument: graphics/TU_INF_header.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: dokumentenkopf__klein.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: gilani
%%CreationDate: 2/1/10
%%BoundingBox: 0 0 511 47
%%HiResBoundingBox: 0 0 510.2359 46.3003
%%CropBox: 0 0 510.2359 46.3003
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 128 12 8
%%BeginData: 3916 Hex Bytes

%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFCABB8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB093CAFFA7B08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C
%8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8C
%B08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C
%8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8C
%B08C8C8CB08C8C8CB08C8C8CB08C8C8CB08CCABB8CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB5A0CAC9C9C3CAC9C9C3CAC9C9C3CAC9C9C3CAC9C9
%C3CAC9C9C3CAC9C9C3CAC9C9C3CAC9C9C3CAC9C9C3CAC9CAA0B0938C8C8C
%8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C
%8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C
%8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8CB5CAFD2DFFA8B5B08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB0CAFD2FFFC38C8C8CB08C8C8CB08C8C8CB08C
%8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8C
%B08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C
%8C8CB08C8C92FD31FFB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CBBFD31
%FF8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C
%8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C
%8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D8C8C8C8D93FD31FFB58CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0
%8CB08CB08CB08CB08CB08CBCFD31FF99B08C8C8CB08C8C8CB08C8C8CB08C
%8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8C
%B08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C8C8CB08C
%8C8CB0C3FD32FF93B08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08C
%B08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08C
%B08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB09AFD34FFA0BC99
%BB99BC99BB99BC99BB99BC99BB99BC99BB99BC99BB99BC99BB99BC99BB99
%BC99BB99BC99BB99BC99BB99BC99BB99BC99BB99BC99BB99BC99BB99BC99
%BB99BC99BB99BC99BB99BCA1FD32FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Magenta Yellow
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-02-01T15:17:02+01:00</xap:CreateDate>
         <xap:ModifyDate>2010-02-01T15:17:02+01:00</xap:ModifyDate>
         <xap:MetadataDate>2010-02-01T15:17:02+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>24</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAGAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AIPzF/MrXfN2s3Mkl1JHp&#xA;Cuy2NgjFYliBIVmUU5Ow3JP6s0mTIZmy+xdkdj4tJjAAHifxS63+phuQdy7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FVSCCa4njggjaWeZhHFEgLMzsaKqgbkk9MWMpCIJJoB63o3/ONHnK&#xA;8s1n1C8tdNlcVFsxaWRf9coOAPyY5kjSZCOjyWo9sdNCVQjKY7+Q+3dH/wDQrmvf9Xy1/wCRUmH8&#xA;nPy/HwaP9GuL/U5fMO/6Fc17/q+Wv/IqTH8nPy/HwX/Rri/1OXzDv+hXNe/6vlr/AMipMfyc/L8f&#xA;Bf8ARri/1OXzDv8AoVzXv+r5a/8AIqTH8nPy/HwX/Rri/wBTl8w7/oVzXv8Aq+Wv/IqTH8nPy/Hw&#xA;X/Rri/1OXzDv+hXNe/6vlr/yKkx/Jz8vx8F/0a4v9Tl8w7/oVzXv+r5a/wDIqTH8nPy/HwX/AEa4&#xA;v9Tl8w7/AKFc17/q+Wv/ACKkx/Jz8vx8F/0a4v8AU5fMO/6Fc17/AKvlr/yKkx/Jz8vx8F/0a4v9&#xA;Tl8w7/oVzXv+r5a/8ipMfyc/L8fBf9GuL/U5fMIjTvKn5i/lLewauLtdT8qiRU1aCB34pE7BWkaF&#xA;wOJXlUMtffbBwTwni6eX4+TXm12j7VicfDwZ69JNbnuv9B+DwnMZ7p2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV6P/zj9ZW91+Zli0yh/q0M88QO4DiMqD9HKo98u04vIPx0ec9qshjo&#xA;pV1IH2vrPNw+TuxV2KuxV2KuxV2KuxV2KuxV2KqN5aW95aT2dygkt7iNopoz0ZHBVh9IORlESFHq&#xA;zx5DCQlHmDb5W/Mr8m/M+ha7czaVp8+oaJcSNLay2sbStErGvpSIgLKVrQGlD+A1OXBKB8n1Psf2&#xA;hwZ8QGSQhkAo2avzFsM/wd5u/wCrHqH/AEizf805VRdz/KGn/wBUh/ph+t3+DvN3/Vj1D/pFm/5p&#xA;xor/AChp/wDVIf6Yfrd/g7zd/wBWPUP+kWb/AJpxor/KGn/1SH+mH63f4O83f9WPUP8ApFm/5pxo&#xA;r/KGn/1SH+mH63f4O83f9WPUP+kWb/mnGiv8oaf/AFSH+mH63f4O83f9WPUP+kWb/mnGiv8AKGn/&#xA;ANUh/ph+t3+DvN3/AFY9Q/6RZv8AmnGiv8oaf/VIf6Yfrd/g7zd/1Y9Q/wCkWb/mnGiv8oaf/VIf&#xA;6Yfrd/g7zd/1Y9Q/6RZv+acaK/yhp/8AVIf6Yfrd/g7zd/1Y9Q/6RZv+acaK/wAoaf8A1SH+mH63&#xA;f4O83f8AVj1D/pFm/wCacaK/yhp/9Uh/ph+t3+DvN3/Vj1D/AKRZv+acaK/yhp/9Uh/ph+t3+DvN&#xA;3/Vj1D/pFm/5pxor/KGn/wBUh/ph+t3+DvN3/Vj1D/pFm/5pxor/AChp/wDVIf6Yfrd/g7zd/wBW&#xA;PUP+kWb/AJpxor/KGn/1SH+mH63f4O83f9WPUP8ApFm/5pxor/KGn/1SH+mH63f4O83f9WPUP+kW&#xA;b/mnGiv8oaf/AFSH+mH62x5M84MQq6FqBJ2AFrPUn/gMeEqe0NP/AKpD/TD9b3n8gvyt1fy/Lc+Y&#xA;tdgNreXEX1eys3/vEjZgzvIP2S3EADr1rmdpMJB4i8H7U9t49QBhxHiiDZPS+gD2jM94x2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2Kv//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:BA943AD6D010DF1193A8FC7EE701FED7</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:BB943AD6D010DF1193A8FC7EE701FED7</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:B9943AD6D010DF1193A8FC7EE701FED7</stRef:instanceID>
            <stRef:documentID>uuid:B8943AD6D010DF1193A8FC7EE701FED7</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>210.000145</stDim:w>
            <stDim:h>297.000089</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Standard-Farbfeldgruppe</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -46.3003 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 46.3003 li
510.236 46.3003 li
510.236 0 li
cp
clp
[1 0 0 1 0 0 ]ct
510.236 20.9063 mo
510.236 17.0083 li
510.236 17.0083 510.236 0 493.228 0 cv
17.0083 0 li
17.0083 0 0 0 0 17.0083 cv
0 29.292 li
0 29.292 0 46.3003 17.0083 46.3003 cv
296.693 46.3003 li
296.882 46.3003 li
313.353 46.3003 313.695 30.3359 313.702 29.3281 cv
313.702 29.292 li
313.702 29.2891 313.702 29.2783 313.702 29.2783 cv
313.702 25.312 li
313.711 8.31836 330.708 8.56396 330.708 8.56396 cv
493.937 8.56396 li
505.096 8.56396 508.917 15.8701 510.236 20.9063 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 13.0
%%AI8_CreatorVersion: 13.0.2
%%For: (gilani) ()
%%Title: (dokumentenkopf__klein.eps)
%%CreationDate: 2/1/10 3:17 PM
%AI9_DataStream
%Gb"07f6TKgp*_mR^cR'`9SP$;1+!dhJADGKEPdA1A"p#sHhY66:NN,d>g;+)`C?OVPmD`JpO)SuY;)8@>11jAdZWtjr-GgjcW8Nm
%qHlg0,\i<-A)L/,)CNE<]=ftHU00o"Il%a2^j>uf3!:a%rJ=o%^(Kp+_P%*WXgfG>QLnqHAC_uoAIIhCRUME2qHsXO%]hg>Yuq$?
%Z01O!I;63`WAV"%Con".!M>LjIXX4[N$!5d+jD:7iD:@T%eW[T*>UJp[%d$an_IrefT#.X@PFOsG=tcV_Lbl3I;dNf/a,9H:4eK@
%lFj4);rB,!TC]0F?s+CiKUL;i%i9,q9eSG`_3RPX%jp<8Lc$.tr1S?ZWqa]d#GXS-agdrO`Il_qiD5-E+_r>=K+@sJJg'n7NpDUZ
%UApV.ImOj/Auk<frPkULc:/XF3G.$7r>Q/-P)/mcZ)BN$-N3H;/puA)BVr,)D=K#qG7"1jI6FGDT\i'Le7&D46(n6KnInu;&""fZ
%"V\UVm'a7n.VXkU>S3?]g>FWQ&HO^HoW#TR7\07,U2arm')'?h?2ulNTnnsZ@L6f]TE%:ZF;<cMOU*4hgP)cF2Yb:%@#g[`ef)bK
%3a3o@Y/U6KAi:E;1)@7:nH\?m5;)ar_>fS.#tDS`dOVKTJ@#Z+YoSGcf39(Wq\rAdC+obR,(lOocoC5]Sd)kV%^q"c23]5YedD@/
%C]:Lh,VT;t$\dMO1^ZG\$2@XOn4uCppbrn=V4eGO%>AaM7DZJ'>L=k#'og(;d3u(2NP\lH-q3ZC-5*OX+p%!T^d%U;+ouI*'!N/L
%#!ZOu635Xe']>I7!\>c7?lb,VV%aZ(_RCs$Q;\KH#PT)0(\\/%`22rt^-!+8f\n3Z"iga1@4aGcI\aI^NX1*N3cILV'98R&"F_/I
%$%B`uE('1/[Y41(>D=AST5`TT074,I"CYbU@ed/C*#JO+FXRS\j6$[@*9.lG&Ru,ri]$DKEURo)ESiHlfQ2M%p_roLX9HWL5@I30
%#4\X3)4iSX(Y42uj(B3="htGc#=%0#3''2%n.YO95(T?1(*"Fo`3Y9!"QL67LCe_LJ3E)[LS$BX5E'_e$fd5e$Q_=r4mY2s(P[iP
%k3!-(i;^VSE-+3R_U63/nYgFV*$>*3[4m$HnR7sGGMspN"%R"/o9@Mk%`TKCJ>o$9@@gMEC4e[iP_*V#k6l`61#?p=0\.s`N&TC1
%IRa+;iP*354ET@>INOp:J%4[/1GLcI3QJYG/PtXQVI,J?nN.LJc`JC(nTY[\+&b*opEKRP[m_4p3F/.d*m<P*^`N$5KPue$i;:[k
%Q\ULR`G^nbJc<L#==TKh^L.V>Lk"s0E#ATjs5JMDHR+38Lk"s0=:G3Fs5JOu3;sqZo<@91^K_88Lk"s0Hli;'s5JMDHa/C!Lk"s0
%;@3@=s5JN]n.3]`3-Xj*cR]">s2'9%pk%Hk3!-;gq@PCAM*q9OfFNDjTDNdU<6.p9/d?gAs7H<-\+OP#rO(:=IImIjfNPZOc^HTX
%Ij@MuEeOYk0;SUa83__FMSF[5+\hH.M\komA,bI*415<&f_GfGgg[JnW&L</r53.UrK$d_-$AFDcXVeS<=G!(p%Mt@i;Yq+-e+F]
%8Qn1\SL6`D7O.p5XQdK*^cbC;bYlXA7B$HH;nu:fcljXSY`Jb_d'j[=lU,)'V2.8)SFUrU=7GUE^YnK(hpd:L,;Bt-?">Uj`mDoK
%h[8Zq%#M4$s4q5:MtIdN$/\SdnDnd4*(W?0q[[I=Ha\Oo^#]9[`;@fu%MY1rokni[R]J*dgituXXj+]UgR;KrX"iqGEmJd,l%5Ld
%^3?V,^%/l)fYR:=bOp+h!&\Mt5A6[jJq#K/\9)/d)&UVd=rY@$HF/B6L7?#>V,rh`^=I21V2a5ENF3l]Z0%Gpqe^2Rf*e;,XUY6t
%fjM(QX]TnCkdJ.*9/H0he%=j/%NMkn0ORXP+_V)Y"Fnhsd&Y9?*mIF;W%_=)AlE<Gq4<SqH<q?0C";YC'dc8Xq&qR,_H)X2VQ>40
%oc4DiW5IGnf^4.h`#Q,6L6eG``rDm>>(8,Zlc"fgMF9(BK"pX"+7/0$#&':,,(:<]J\?]qCeD&+p>9(>l"^L3.DB1j!#4Z(GZEf:
%r3Z#9%)j!?4`Mc1\*d:,lSH<Z"/!B3QlrKL?o;>nkW'/Fg:m5t"mB\Thp25*/dDb0c_,Xg'FBGrd!hc$,dpZ!qgA7W3e9q3XF'ir
%Jn?Tcl>$:\$N71U617ii!%RIl=OL6R-.&)42[c'--*.O`+5!/hq!^1MIJF9K\-HAi^nX,r@;F]qp-Dg$i9ADuWqS9W"AmFH.>p%`
%n-o;r5dlg^"5l/GI<OOeXmKLR*\cUb'8+?pT*/+m:%sClkREst0U(M'(sZt3&-\.iW"[FL7;IkdG)<WnXh6J\Q=aG'_RFXnjj[o/
%<ee)s6(f.:cmVKD+tOF91]J9c(c8%5W6mTV=ao`C><_ucru4WZr&#G024+F9(]*NHX3\6/"V%hLDDt_rci7F)%0GdfZ^Qm)@mC;.
%Zo";G-_saU#oQ97D@H`iVBuDaO;63*$P:]LQr)9NGbPENX)g'6O)Z2W)TW$6CNV67ll856q+'d`]i@05!3(es71&H5&/A4nOO\gX
%/AaOfXVVCpP(K5/KA*K1:BRQ!B)e_CJ-!foS&#:;J=S99?o0Yf#<8Z\3ETe,Ckld[gXZsAqr5Wi;Qi4`oVga`5lTAUYl_m.J08G^
%ghgc.l[^%n$ui?KF;&;#?W(\3%5]:sF6EpNki#1na7c\GLL96;MXCEu@+Z0d,G'F]<W<meG'mTjSCORI''P2<#qPoG?]#jHnnAbn
%=fd0k3];U.^?1gho@S$lB4s/p1bgmR*'f0bEFCsnC$d]Ns,!*cFYR<>r3O4Y6(9$F_ccr-)1;XXJbARu`TmIt;CqX!l+t39k"5A5
%7u'[o70%B>RL4Sab`_"9S1d-7r]sicrrSOmP<])`gA#Su"*QC<rO9sZIfCC#Ant/GWQG+NAZr<EcsS\[R2O7VJ+mV#,iK8g,&sC*
%r&G^7^Wh^nX8)FL.NJ-!m9<&4qPIoSD_ogHW;6/t9COmJ"uKS'J\>!W-X46Od*0l1ht[L*IjF\jlQ%dUd8&K3?2F^EolkUg8T+iD
%?jrU[O2QnR\/]R`(,OGdWJkd=KL]GFa>sp-1^j_Dq#6pVgGNI]%Mj]IBKmadHY'nF/nQWf\u#G72-6!t1@$qr`hZ)cd:0PhNn2SL
%r0N\BVgu;ehUoUL'CuHG?2m2H)]89Xp\R<]Gt_=Qll,;q[LV7g%mV5gHA(5<'o_M/C%ba:%\`*I<SXFPg\cF&Hu:WKlP.CF@FYo4
%CV6q,DEnC(k+e&0.&%SpZBCm\4A>r)e[E\0`GPm1gdZdE0$M=9<etW22E>>^g+7K'O"3VMiF#p&Al-oQ_lAk0(tKE_5ftFJacf(2
%&>lilSo"_Mfj_Dg9:.T.!VW7R[D?Uh)bas]F1pP1/d3V?Zt@>M(lMb#`j#^helu:^S1%"S(7]2/rG@*]88/l:'a<Pg#8FQ-mY!K%
%;@XnXC5J%24,Z-4&9U\)B0Gkh$ptM%8gIuU%6tZ$[OEdMQEhDjT5B<JTZg]Q5T(JJJYcfDUg[F`UMtA6IQ`>l7TMLE4Zq`oCSNUm
%?*-Qk@%FE]Lfq&?I[#^tpNnS.jMTf:3&^o6'AMB5\,qn,"\tLL8YoQ@U?Fb+#(^D<K(DkP/<`f<G*s5,B97-=X"c!''_9/sLbJkp
%$qVeW0^K]'Z5eL*,;)p3-MP#8)\Msi<N08]03laY_JjX-N6-j4h_H7R!KX4d%l7g"57W`g1XBb!?NPr,9kRlD=E85S)Wdl%0P5`W
%hR+8&1)LJ@I)0?T+N!TMrO!M3EuS^SR4T+V6W"*X#<h)V#5LTY?K4:]cj1.;DV,',DAW:,4W3T%>JuC]Y<2EHLTb^j7Jk*K4.@rm
%iF6B0;k(&V`prs5DifPe-`so30`Ds6$M,p$NGku^G0MJ.81^WFP7dbf3'li]`L_f,K_MO-@,4'!P6jm#NN.CWWi:mJ1!S"@X+AK*
%;QYbPG0"qIL(u!kXBTVY%VOPX@&%'Df4"B4]7&gD0L.LuJ/6hT77`uP_O?(b!P33FU\dO)fY;$kA26CaX>g5ioR"j\Rj/H'>"Gni
%gJXG-#SluN1"c99:"K2/]5O2'Epa18#I(2PnIKpH1QXScB&3Pe[[h8hq=b+=W`0M0!g\Re6kU-[loHt7B#(u3W!<24i5HO,'HS4#
%;MP@/eNkgf#Z+!O!B3U2K8Ia&LbM\-+s]k3QAUNtAp(V)JsH)a6tN(D-L+3LD5+I*\F%P_A@;)k(E6tl?Kj34#&%QjdXa5_or"2M
%"6g&=ckWK/0d$+(rbLP,PemTl-YbN:B#G7Za%;ulSkGb`%m/Y%/L"su`kACP"BFL\DO/h-N%>G)KoMCJl,c,oid1LHgB+A\#<KoH
%?@m;Z29s=aKXu,QC/,HMnSh=*Q8J$n/FJnQ\$aK-ZQV#e!MJ+\#*<UCZTp%8nY)_$AO9!^l-_=^hFArpKE;.Nj=/T-ZG*='1!p-S
%<Y3L)=G_PhIn6;1lF#9l?pXC$):m868@[)[1&=Ou9MqA.MUb'CW3`$HKJ8Oc]P$1=07u;V`Z"(NL6n$;?,g>I2C5AGf\MW2<CgDC
%/V(IHd,?8d(e2lMd?T85H4"cQ+*ut%!Yq)=/,_L:&rPKGhduJ;LI1`^0ErRMX!=H!=@S,[.]-f)!T>GbEbYnW?uP:%iq6oZ@l0hc
%XNo0iL%.pgA(TLTVeA>fKsB"]X[]0U!ieCcXnXJkndnKTY:'^o(q@>sTGmN4S'<.2O,PKis'4Nr#3b]<gi1LO<7L-^JuG`NZdi0u
%>2Wb'+Ld&6ek=rNs1)b(:SLB[=3DM1<=*r<md&nN+9j)%lY^$<kCdtCf%6tqkSq0)X5Z[&_or@`&*e7@:SaD>s$npCCa*&d2a;]2
%3!Y-*E3R;/K:&?h1,J\uRj@W??iI3ko_#d'hpeAI^%Xp`&E,*0ih1L\isk>6$FXpCG_:gD&4M1[I(U!^(L`E)\R*L)okko'j=M+t
%X"j1+n&D$>fjr)ASpHscGSo/`&F!*NHEV>e70a$bI*Zcrlkhn%cN4pI"m%_l.n8i(eYN"P_S[Wc:%0&3R^kR"i":"=!9f,sq3piE
%&@'`[h_m8petK^t])sjX[Bb=2XQ(1W<F_]o%%*58kRC5;ZOZ6Q&gjg,7_lQ;=[=2rU9q,C_3UZq#7K)i5kp6&3EhI6_sEdU;')16
%"W@UG=P?rA2XRo(EhV!?gL3&@o=n]<h/"A@@U5&b1C/GD"k!iVeV74&RDEoXr=cjBDne0u\)+6E-sd.)4^^P$!NN9Fs7nmSDtjLD
%!WND<Rf:Y5^"CW-1uCsQ+njfCd\Ah&J@i*k%I#l,,iE_/eo,Gd!Vd6_gR+2XH"]k&ApULM$CYm+<^q5%'c@".F`<k,dHt3Ne(%j4
%0c;j4?tqd@JQ;Yf]?1Ln,o9A)``"%^]:$WQ9cE7O.fs;Z%!5H/=sSWWg(lSHke7&hd%*#aB@(k=QI-%&.cj*#ijA"jM--P9)#[m;
%am$#d)JNF8R]8Aod`0,i.i,u2L71&WWUZ7Gkc$s("s\k74$9gO-1"5X13M**'gk>O019,<?+Zs;*+be2J;a7,\\ggr+Ai1P-_0&5
%$Mr)M_'TZ0,eH;"Yk)3GYNmDN_D@6_Kk"U&aV:r^](?OTUhAPuQ7+&h0*@0B0\G=>))L-Z!?NV5"WJfm5t,kYic7J=WdJ,/e%q-#
%b5lCS0j*O0rV_%UD;ZUPp/uja];iDBiU/<>.FJe+YV:IZ\:4%F]/Pc"i5L$b\o.<6=f/k0:/4m!HckJn3XW3ET=p,*.])??1>=6j
%lJ^K.mG1Xc1:pDB.L#-X3uJN8&d2G:.8IRp<AsO7GA#C]%@^q0_19Lr:"=%g?g3$/T2m"KflWU!'kTCm;:4iV9_Ug&`]X;T<i#*(
%fP>b:r;"Eh?[^edEa<0rGHL8A-PO2K;8r$)2ug4'F=m4GKX`,(2Kfg.9Oc>/Dst5[_>gSG<*CsNO\O0$O)1!P00Mb-I7H<@j,(a8
%O@=QuV,s17FCY,8G4C`cjM/0Xn(9->6c[f$ECAB,Zft[a(UjLXbSEC?T53r`qR:].^9cpLnXljebBLM6I<ZWgG8>Pba6=J,7Zg2R
%iB,gjV/u@W[3u"4rUOJ,NXf'^GOE]HrT/6<1`FTs\!a-NWI89t,S:m3R+^"kEqXcCc7eOn%Nj_VhrSUTlX/:o=#P4$%8XW04b%!`
%X-$oV\Z)J.Z/tl-//AVtP>I8Wh3":SOq_(>(%9ggJ@:htNcd_-3&rJl#%2o%qMiteV=TUIF,<E6X4ah5]C][Dj@r$E0J@WgdE>4b
%Yl=9jT>tlli:-:>24Ib%_14:<pEc>m[qI_s\:StJjQE\EO!Dp4EK))*0'gKl+FQu;4Kf0H&qpL]W"i:N@OHmHG@C."PG-F[[rf)Y
%`RP@QdMHdPfF-O:dX<9$R7t^A/Da-?\9>GBl.#Lki=jJ3csb:-,9Pm;J4fWaT`ZBG#>"%&'<FTWdBeW\?gK":"#K!r*.<hGN,n=F
%O/FrD<.@PnJ`A4%*HiJ;:&@R2f-o^L`CXk=S,N:V:+c0e\C^.YAA1ORYGFGIH-V1PEXf&De*Rr`5LD`2ZF!E,_Sf.M"D5AWZ)@+q
%KGSS*/uuNPc!@0'Y&P3:L.=(tI5(QQNW7CIq`OYm"3O$lK5@R$]u[VM\%DU4.539g"$[ANN/_bU"ZWDWfNRX<f<K`Br(>i^$0jYm
%66qZl8lJ/D*H&&.^J9/+k=Ub;l,<-+JLTdUS)#5=J[%c9FC-Q]qY)80R'^LiqP'LDW]s"LgTNopeRoeE7#m;kmO:G#cKgIjn/ZqG
%QTR,i,uQ4#JDM2:Qr[o0.5VF"C3^8CG3LJM^IrAo2<m<c@^!VNEXnP'`NuZ5MfQr&*@B:5,Vc3t"cGOqY)b_2_IO:uI'#>/lRf+c
%WE8N,-@ff&5pBD@fCp_,gSA*!7>`Qa?A"hCq9*EUMrOl6)GR/.0bVZ"I>qkbE;X8.fo(@r"(*!krb"<!jqk)]Fft]AEWqo1H@uJ\
%-1C[R86u+%Dn2df[fa;:ELi/:C>W,s\r%.k,mnt1rl.j?o__VG75t9DrFgtbm.BED$M^ga0`9bOFmL>R?LKrLe:(W?IhoaTP%^R6
%!)UW)of\G_c^gOCPqJ7qM/7ZiEY"s*!P1ZCX@Zm2.lhNs]:u0"PQFI#DIZVl4hA%&*rkf,maqi-fV?V\T%kpSEilPB!`ti3I:^lm
%JfdtfH3R9?G+C!fGPtc^f+*_8W%sHEi5%1lN0;e;[\WicD5;(hKiK[)*F'6Oo?JpbF`&Vs1!UG4Eh"BBHT)9/%2ZNlT>7o:?N@jW
%!WWD;K:^q<?U-^6'K"cra[k:)5KQ3Wrs>BTbp"S22-Ad/1q=.fVgtci-pL/7*5'2^ipBdt=SbnGOgg:VeG0Ee02)3c@;dDcNUmF5
%3**a+DK.imme'9?2]`kU,lHoL\%$WhYNe5r\PaJY#S[L_+U^0NA,^r38E1NTkAN@p4/d!t[)$5WN*/OV!e:78GQ:RMFp<6VJB:MW
%>$[X-!>?;o!\qco>='GP`]3=tA.P-U^$0pPeTd7@pCPZbfq*2sOlC]ugUM<T2JR/oVH=#IM_NuH=AG<5e.hc$,?bV8OtA@#"I`Zl
%*]PQ6>FC7u3eI4t`cDtF&GS]\)57e<0b2BI<!F!F6p(=6)`P'p#R.H9(qn^,"9F)3WNrDBqf6kF&;]folsXbTZp](+:t05Pd4.M`
%g+roOK>,q#iYOhM;j$eX\hqYq$CXF$JZ+f47UlH]b>Y]M+-!4"KHae98HD]:ncD(0K!<I_.@A;&\OGc.[@aKM.dNb^^k%jUV0XPP
%>6,I$X\iHu?BVV)rSI`@9ZD>k_KTRr",!O3cZUs'e&(IXT.Q&b^XlRT9!"8u[]/X?8Z`k+=5-Ag(T0IK/[d'sGHQ-eFip46i\LDt
%E$bqL];O7i[JHAZ%Og54F&/iG,MW'*L;;DEP"I,DjH:c1LdaPqqkDYN3A(bG\DDaSqn+A;]^7sJl4*S8mO4JF:5cKk<0<PamJC0U
%7#T%0)0bQ>L1IA`gB;c6ct,s'W:`Q\$.-I\(qf!8#O5+R3S5u,Duh/dU;m@Pre#Wj_`]&S.37^F*:31qgCau+Hf?fIqK"8M54O?!
%WGlq*Z-PG:lfC<kXCF8^\>J?T$F9NRn$"4q'hDj7!J^i(kId!ZGmBp02'6r@!3Tc01&L+Y5MA?1aN>jtb@F9M:Jqu6OaSQ[ob[(G
%@KQef3997''gTmeMcr3okYqSn"7B-37E\cKprl.$DLhi2q*fE%VJn!f$Wb\Q\kt$)m5/4Sa#&a?N5.C@[_0-f-5)nLpd*bQ9uH]s
%3tTbDCQ\:?GGi1k4#qVuD$70c>CppHgMRoPCE>Bi,m7T<Q\FmP>7u%ghreYP_[hLfYNG"j&+FJ*P;"p2Ls..:2a6j)i/LG^'$-V7
%NgC+T:=Ho#ooA16FQqU7YZZq]r,?"@V:FuaBMU2>R'+)'JN&KM*ZNYto8h.41[+*U+1R@!HM6.S6gGW$n9dOr-c?V7qO35bGJbb)
%g\;Rr[Qu_GO=bW5fV_+!$'NFdb]h*:%k$]!>6H';gnqfYdo[_>M8GgZmD^J[abP(cK(O4gRqrSk5')Q[eL)'<_nZ1R%[<9l=m"_X
%6FgCYYf.*j<>W/>hXLqdV^IAe]56ADXJ'HVppnOj+$J5tDbk-Qe6h2?dCDY+n&7^F^>_<9r_h)Nk'bTf>:G2?$N)DiXR^7`H\9`$
%25^Idg^>t056$AU=Jj0SC>:?(#io=M@BLu3)*<`l-b_NIFHq:_W'+j:e3rdkdd3_<BPsDg6Y*`(?(`Z=12_H3>eT8X=7),[?7+Q/
%+3):i1?%?:cZoQHs')4"W*EeZqUW*6+3,2%MX'%dP4[?`c/GYM%-/6(-PA8j>)?i]nt?`s..oglD^[q-[:OjZT2%[^I1(-%Ui,hI
%%PX$TK0!XK)?sM\EZ53Slo,Uki:M//$4*ZGBo/;5@M`h"d\.:ZqJ6T;^c"bMJMV;27NUPP(Nq,HJH5&VYq<bB%p`er\"2jEh/`4T
%O$(2PF-#bO2##Mn:h>"L,F4sc@g3f#J1In(JecF&TQp33F$jHt#uq&T3SdU!I(XlUeY;o,f=g/Hi%)Qu?[7S(:7"m9DE'^eC7bTW
%RB_U,eE!Y&/[^X!TOFK]T@f=I*M#aO)k<s'5Q@."^=mH.a>GZj;d4?JURq%=[biGJT\4PALqC-:RVP7:Y:/mEs-ZQD1WNuGQuq1)
%<U<`@C."38Mg/,AlaM)C$E'"tQ(Hg:LJb(FBI?5u]&kD'Q[G0tAgQpBPm!7)6KVG`lD)#I\fJ$3&!eni)FE#o,n"fdr>Sr_\'^O_
%iM#ag/(eta(#_Rn`qBV\k2.O?ak:$XFi[D_i<ST6DU>D@gk+YM^^p4H)NETM^Qin\;2^6"0K4u`QaYnLosHEr0!6CKYeuIU.W`("
%REbdZ\]/s&8^o*gGU695=fQ(4q2Nnpk'E>:Af4rb#A%p6(],%6'ISa@5j=Qj?7YN5pgG.ZT_CZt\b10aXWS@Op\FS:HLNP1*d$]@
%:-q46RqP?P5SEZnWL\qnSrhXX02<SA.M`_'?Rns2'lkBpWfWc8<N^5\]3HO6cRC>`<H@N"luW&A5c'BC8T0,)^:_N6]C[p!h_9IM
%\5Na2'Qgn5C]Q##IOiF<3Ds\UM&h/LUs"\mdZ]NQ/(rh3<)8l..$M]p&dtK7O+99?Y-ZH<p.j%Z-@3EWqObdAD"?Ot/htYf7lu#_
%XU<j@Nkhg4\R7#("M.C?1'2td(4gE#o8?*rB<lUBW&/\:asY@J]gJfaG$Wc_J/3LHq.1cafr(1W$_Y;tYPEI$F93m-[KAn!*J"!_
%blDC;Qn0O'GfP8\Q0jg<RUn*9\&HIXnZ*4;!bfiX$SE=1:kd#.BV0]:@PGB?&"l0$Mn461R1[9Vr4?(VfP+`&,bd9*4*l?eKk=8J
%o5<?;cK.-P&MHR6r<Zb`SOY+R6Z/eP*aqrP?k\fT+MX$6&9+sokLjrhF"-3>h@'JC`W8XE"RCJqAiemK0&ioq6:!meTqEm6S"EZa
%%;8F0-XBQV<G<.M!Q[I>9*JIY>c^r'^`<!8\TMeq-gr2mJG3du2#q6<^Bl9lSqq*dmKpSgg?i[F.8JD<H])0!pd.ZHfE*C;YB!&#
%Q?i[%ogP*74XO(N<]7^?Aa^P+FAY_(j^*+]eg$<"iOQLK'n*ML\7/I554XV6p'S>Ch"k[uY$&]u4")bRP.jMV&On5Z6.@D;,/75r
%^6B,?>\V+Kb2mGA)A6b>e;iZpN8fHE@R.iMN_?kd7-'rj[;F=Gp`8sldX3G7>LY;3b&qE?&cD\delp]CWYBr_-ko;?\+3KcNcJm?
%]Y4T1qbL1/$RmWW3fqu?^Dadns$a.@;VdM6iU?gMIeqRd#%'#^#AdMU!g"kG0'$n.]qAVdOp)e0fiUn&mf3aq(*6))0<@u*lt\p%
%O(^d;c::qHqBldhHXM#b9QMO4?]"&$!`:'bUPisTAQm6qbNp"IW;A"+^$iKsG*Zs%:0oTiR%IV]aI1p3B1:[;BVi)kjl42&<2((g
%^jUVN<.M*[-;p$JbpZ$Lg0G+Xh@QD7LhNNtA>07/m1r-%VqD6DrEXbd9YXHcp**0q5G/JlW#Gm58@kC.H*^mbVXB_$1eXV"76_U_
%q(D^o"+r;-+>9CJ<cgMf+-32CSWDrYm']_>I(tXoTT=5X9g=@rMq)S=6<Jk@^6YJtf;3<KUB?J#fV8]8rLin/"Jkt]*9c2"-MOm'
%FCdd`n<.?g0,MUmIHVp-]$,*R>(pGthAJT"U6(1gAq&S1`DL%D/D-\D()ZG\/4!MIP"H9`n$5(\c.?(pl]QfOQTL]5,eg"f"?S.3
%AGpM1.cFKuf:JI:Bag*Vc?5&onAcMBdl&]_9&_<0a%+5fNQluUF'miB#VW>QamjW*:-O%8GLY6bmMkTcE'T9Q%LfGq-&hL3*C$CP
%dI:/4`AKo1`CK$]C^dd16e3fQm;3t$bP-#pacup::EeKoBo0&QI%d2'5<kQ.\_RL.0CL;6/AIDR?Q0NCY]V_Pq=M&hJ0mT`Qcq+1
%A@qaXDg.k)qh"4#J04(UV:*jaYf=()02)l!%J%oWKuB(5G+.Fki7X,lm^iQAi1hp"b[]`M\r>5p)#OhZhWVaa#IOJ407Nioo8;i'
%7enFP0iIB2[7J7mYNfspX5E`ngf60QAlmA^XM#LP7]f*3qC#,0gDu1+8n\1orK;2%oC6(\lL)N;3\s#dNi`ASaG\/3SoKRdRU:?,
%[.@EP;8qL0:ofF]2H=Sol\Y,F'^olP65Db7"GTO>EWH*>PiIb8;?VtcBjHsdZVU$Hf.O@HM),:AfFiM6DE27CIJH\Fq^ORU$D2`A
%8e*=T,KHP,_EMuhmG/M4Pd>4J`k&L"%l"15&\ajDH[pU.4G\1Z[q%,0N:C#+i$c2f:+tM.E)W$2ruOks.%H?17t*9mGaLQ2CQ+:n
%QCh5OXAGqQ66=2l3tlPFg0DRln#H]Yn%TG_K^ZfpGR]VR&%<AIk0XD<rj;jH55!RM8E^M1,l4*1h3.h^GQ%hdj^n`3Ja<,]AV:1?
%q/3bf3X#uS%)g&2'%1)<EV!UR5:oPkia7-[4kqcJO/dtJXmfm;[$+>_7!8O$-PQ<5H#B70!@$I$]03X\gCX8u%&Y22+edgkpkB,R
%U"f9!&'Te!]Q3gi1P#1J7OSFllm_dJF+l)&2IF8iA?jlOR<dNKH?`0:]\bMAoJQ0n4M,.Ik,lB4D*F[8,Q]nf-NYBp'jQf.2TPr:
%'e.GG[uIRb-m&u=JaL's7DUU`JP7U@.Xem9Yqo)9Asi1-*q$Ab"Ik6LdTo)FILSN.R.j[Vpe(55e4o@C6is](`Baf94aIH!pCi'Y
%MeW\;&',im-*@6fp+"TpL.SXe!5s4S"Mu`Q%'aG]SD$.35M,LB@XLloa:5CWk(@'jT^DO"P:>7hdD4/B'^,Gq)_[!,^Sr=EZb-9V
%pPO!an'"<#rD=SK3VF=^hL56#JUUog!*_km<Wj>3<QfQ.TP9mZ@7`PU%^\gALG+6N[g:Jm(W!BeDr%;l2"L#R3-llnT]+`85nWOr
%.aSQ<%.qUU0[Llj`_'(pDG^LLo[;T4j`4Ni^PMIBCI\Mbp:CZ>bJ((<DWlRI7I^3#+Na_%3ZJM!L/QdF(]afI3%W27Zj/#T,C'4g
%_7K>Qec-E!W>@YsBR%3\8tTfi'51q(\Cc[(77tR-#L)A=rE04N22\OVd?#hS2YRg3!a5UA>JKj^l=3Oq3*Ac<RSa10m(Q$&bBa!Y
%Ta$aS&uCNm'L7f,l;d/<8Z;e$pHAlJU[k3AdL1q,g#mqLQ5WS-h3G[c#E>uX0-0[AgX$e:/\nT[jqS$ahF$`Vjh?^cD05h8[^"JM
%A$*`@4Uu/Ok>VG@[VGDH%(,XjVdq$#bn@Fn;FCtm`QhdhIbEBOnhH$;.Y61,bY/[`G2=n51k<<NLfT[N&Pu#.$3XFYn's/[h5UNn
%ol!ct5Tei5pN\Wh;"BD!$H0:2-*E-`Mq[9q2'%_;W^*1ljB<41V]7*<&5\9jAZSnkGn\>8!!W)3BD3pS$FG.AFK5EG1)Y]2pN,)l
%#(kaM`(-Ti;@!'FR/X`4dr&0Y+'\ai!XeVDr`GL]ch323:l=I$rhe4s2R4st/]SV@5[cbsJh?rrU)F;t=)?[tU5"4/0",=Oe(c^j
%mTUM0p$=D-j"f`mgb&DR/'$7#N,l",m\_QFkWIg)BUW_2rX_@\K8tns+p[CGf]i>\"R6YO![sRhW;1<!QVe(ic*D\jn9pkC5]<2>
%Y6)DG*7]"9THDqL]aVTWN[Ii;\Hbq2fYG3Lm#\q`mJ7%fV05J(bj<p"!DPcSjWgmLo(MB+!ZJZ;e7o7;KS%6jq8PmYDbUM%fL,-q
%iqhYGqfi?r#5=oLP8gYc*d]<;?CHoWRG@,XhX=IfG6;'<\9msd2+el,EkjRdeOmXd:gTVSIoV/uC(dC!"R[.M7DeUYZFQo]Dg59Z
%<k;aLNK6\";(Be=A\3qcRFdi&gNV8XCnk3\e0s.MWd"3(XEnTGporCd*`$=E;',*hA2?<&7VR"n9ZEZPWho6@=-D126*CX8C;cAk
%QbNFHk]LP-<m#*?VOc%eF>p6K'ei\3]=V.g/?eSe`S3%6g[FF(oc3XGisN?H9-9aU7fHin-'(OkbKhr^#(dbibMT^G:<1mXHQUMr
%e%gar<Pd=Cqb<aOrO;[=cb)A>.36&(D_A[W8df/$b6,/cB[H$_:Pb'Ma3WRqC8noD3.?&)*cBM#)<RgrBX*>uO%q&Rp[=FRo6627
%r">=`#pCYI?a@*N7o?[9pQ]j3m:k;k.c%uZ.)0c4ZX*;jHonZSV)O"H[m<>1PGhab+R)<o^7#5A22eHEAl?slk,tRPS%&1B[<\B/
%JR@(P[r'DLf+*7F6N=B"o2Y\'(4)Chn8"G]oc3V$Pst11aFSYbjT+`4b76Noa@htt"gF>Eg!.kI/A-lRE-DA(\]J(Z*B-\7kNlHU
%V(+HG)1plJIYjVdiRQC^WqW>t_le3#TGQ+U:D5-BjeE7oT[?Ej-*9M5^'IaD[.gO%ZttY6""fk-ScBJmH'<i>="\ut]6><0Gp,]I
%LD4F3FX9KFA+iIqFF8Lb.09ZL;N&hQ#ZcLa88T;gT]'3Q)s@G_-"L70#E*s7%A:M+"MVcM$g9hh.(%";6rJ*-a<K"7$LNt9(4*Y<
%:i'FYa*Ms3QrVQBC^gLgIH)[6@5g)EYAm,aG[I6.7H;C"U)pZ,cg;?Z!QQ`^bHLeI"m^cL]hV@Pbs#P##N#m8rjtORi@uj%I(AbM
%E*W-X+1HnKI"UEGd'!k)T;;D7]E[BCnQ+TE4a>,%N[EAGNH<lU7Z@ECI,LJHg>U)K!5P]BF)fSKd%@ckl-B<*YYk`c+c<s,VIZ$@
%!6HYCgKYjo;Rq)Ob?*YW/&X&*Q\kTqh2XZA0ut=DY%J2P"@Z*u(og+<.)C8@df_n=U#t(>&Nmubg7;[fSPjP9Y0_IA#KA-Of:Z/4
%;?<&60BUR1G/d'C+&>e,>\/;lA@89m5)W]-6M*!W.B:Xc3.IXVkB>Zprk*B6?D'LcBl&9PTXQAZ5-iDY?b*QG@lXft3fQ:<'>)5$
%K%re*&JN4RMcn18kt8aYPd8m$i6"nW#kM5E%u?Ht1?O@n52Il;aARhcSp."F4f.ni7LDBt]j123m"Vk:=X$K\CftEqUlN62opR\Z
%<4T=,hUq,e#K_-Br-4D0?2&;>Jf]#69l+TdV+YlCTrV/#G0nUs=q%2&rR)P5f9h?#3^V2GIRbBCPf@7/Ea>G;WJf/qG9^0&"p<;8
%0W"N<?RB1a2O)TL5r\boEa)g19ptSL01(R.:Hf7CPGIeM91qJV7,sP/Z:CgtK)a(`A*QbhY*6h41W/-Sa`iAqg91gse)rb[aTG/6
%UbS4mOr&UeF%*7]a^Q*u:n(3n.ENqOIW/0r"gM'@@rP9m2/+<)^%U50qLp=Xq5_oLi,:=LR^cE@Uc7aAZ,2`(,$R^_bi9Y]P^p5)
%N396>.sf@b*c!eb%E2jg1WjBN>aA#_M-@4;&"MO&I!<*nUsAk1o0]!2ZJbKZL0[DVkibXD5:0&b!:Te_X%QTUpW_!VVFef7g&B9j
%C\,_]d)`"=5C\WbW^8foT@2BE0du;\b@3EbR$$:"f.YgG3,2-FjprQ0B[rXS@rb.f,0&[Vm9klmOY)U?K)(b):[Y_n+KL_:[uSGA
%U,YC(cSf8U3@"g2\f@2?1sKfoIF#]0[hUAb:](?uS5t4`]6s8O7iAMmma'tfeh5s:o>D0[Nd8)Ei.eQipTRS60$T+_1rb\e7A6Bn
%0.*Pfcc&h)"C"Ku>qqKDAicZn/W[c*&_lmtiI,6E8\%f#<;r^950PCp9:A2'>IK=J.u>%`T;8/tB5r88!0*Yk*F@\V+!<a((^.?W
%(ReX8fFR8sOTIe@0aZ&%gmq":JFQnelL/MKml'uDf13Bj,gqTTd8hq9c]D<#dTBlGKDd.C6WARZH]i=Meh?m):+`+9kDkpk(HiH(
%Bec3qimoZ=CUu[!QNWEc3<<8%WQ=kGfd[gYat`I9B>WsmN\9-<)-e[YU)-H&G4LoID`$kU]a.3n.L?1\7S^4FOR0Yo^[m\;GaJUj
%iA;M1J<F8F$/P'LjWhV]bBnhQk?X!O,:6iB5kd>R0fk4YPV.'Cp^N]]N$_^>PWj.Z$q)UP"0eO8YE;bh6uL-k%<>AcDG;J=VK>gP
%9$<?8Z(!GE\N*2E?64qbhB'T5d9`"lZ@lf!gJm9L0I6D3%T7u%a#!3X<N-(]T_%6>%@,rGb%%3oU"bSjA7@e>I7g[mPho7=?rI5*
%'`.5W`97F6/c2PC_j6#/M&iIK"BuYr@rbT4EdHgD2o)@u>5EWEcZO8##"&+Goa)I_pF4+p[jl,N?3M8UR,JiTA,>^rfGJV.9J.GJ
%QJJ*&X(^(+<1[W[caY"+,C)Om`&2PacH.&^>'X2hlm4F_OEM,`HP1g8V(qcQiB^(8[Q]L(EbhLn.H.USXY?DjA;.l\3q*4JWjV&c
%]uHs]7(fm$U/GHL>3p#'\KK;T.MAk)\4"f'O9",sK1'54b117u(;*7Lg5A/-Xu*\@"<.`?DCH<NMpT$pQ1m@T'(#t]mi3t-e7'5m
%S^Slgk<*O`W1CZbdTMm/\"*LC+,a`AX!*t:'VXbWbE`XgD%sgpjLX=N%WKFif[OJUj+E1O="hmgNjSU.Gqbe(6<8oX+!tSc@tt=m
%`;?!4[^S8EpOeWs-][)g`I>+D!k0.obXiYhG*Ia:6+m;/iS-A<$Nt35eIpYEGrKP0Rr^D\En/\CeC]=L5<W<9j^K$HD:h"j^6]Gr
%q_-BOVg3[:__P%rJfHStL7g7Wm\?X3P^+%;Z'/ZM"Y`=9e`g8=H[&(S<JtuqZ0u8+E4YNa/_3q.n'tUHfF?RiV%**?+YR7.(\Q]8
%g/+INiKeGdW!bU6H[B+[g5Z;+s.Z@u79q@u4=+m_d'NsA^HOO2;&Lhq=6`:,TX/$6;4=_2H'o'Z1W>G&/7$V%`$hXY.r45`>M79H
%,aOab*mom;51a"%"fq^aA*gk/+m"]mdj_o)cD6hj9sBsN1&4i!;GU4CBuZ>o("88pERH[eY%de14lp!r/QA0H0&VTL?fq4!OkD=)
%"jkc&;RK'Xje1-Cf\"b3&K>3'9KZHnAO&GCOHO20Dfm#J0JNq6JBm:]5S7sj.Rt-Q':mPZ$gTL5TTQc%OD$?+:#RSkUh@"nT<;W]
%n+TTcB#`A;^::AMQ9f/gT-oCh5D*i,A*CuR3rKIJm(K!^6`6PBVjAu[8.M2>#+[k\nG!tar<t`FrB*)^qAFC4Cr)lfkk$[p/GA\r
%d-52iU"p`%aJ%(dLU*PtO@,q<5pqZ/SWZ@<T0^NNA&^NNndW^p).jgFCKkun]QPVup@k44Bgm?;f8S+sm@0fu7)"o(l8ruuD=cIh
%8#Z5S0>LNXOM0`/COAj3p.hrHn?eg!ZbOu5D)*!Q@j6^Q?fTULb^8pUO9KEi3G3egINs:rNHE-KNcCDm1ER(C?ohTI:RQj_d0#Tp
%bfQ<F=2NOo]fh,s:`ZbT"S9@YArt?eH.M-IhGMg6U;M__CUsncD@D`bj?"Lq$OlV&jj])@TBrGhCnpWc%$TM-g'T$jQ2iX#lag!G
%eBeYU9aTJ]=RR?aR!]8Wn6*pUq2,WXnB"Zc+&0nZ_8V?3('f]FCQY/r\2U+GAs2CE.Ag>kT@joJA)EkU>K`>bA'3/dET#3M+!qkl
%eIm[u>HsX;[1iGfZG=gn"jK06\#mA)EC_.Crm:nHpXtPLRQHJ)H`k;[Q$-nGAp\m.d3Tf3=tKdd3i0Lp?C3cPo9ZsBg&lgi*oBTi
%XF\Oso(WW7@^LtXQG^m'elnW"ZG`"=mECe^)O"s%'/B2ui3aPX1$tg!K*TLiZstg;&,aG7]o>eA%'-VQNcZD@'uL/DNn$#IQ9+h^
%8nk!LJ1,@n1EY?sr\39umHp/F-cTW8g"Qo%l8X,/B1)mo]o22TRXf*SWa:V5HPL0s""2Mr\Kba#Iq;%&kL!%E1Zj*qFD*<^.`bp0
%)3T%UN6n82\Q&3^4:t=M0kWu\5M2Z:DF`P$A]<Yf+l-BF51=.e8D%Ct<T5SVh#o_QWM?!rV)AEGfjg[JG-bTb_&h(De(/6!?1l\5
%*#=0%RDkA1'h;"#I"n1@&hqIee*N5A*uUr^*>FX`ku-_!/Z+kCB.bB<Zod)3;OgLKP\53qP4u%%+qqO[C^b\P1D-$ZZ?gNe0"$$>
%&K,#:cbOC"hObFCOl&#]<ZS(K9dLu.md;d$L3@f07O;7mnU'U,@Hh%aAY^B6T6Ego7O-1h&S&2shILX:^eN;m-(EX8OkoCNRO91o
%`r!d#(sAE63H>aN4/Dk9!Af`?Nl"fB'@]<8;qj;_f>qRPcu**DDj"&_QVH#[ecit`0u_]IX_^:u]Xl#S190b=Xd\(LVk7$<l8[Tn
%@H.e@.(N+MO=D\*S(jqJ+C@/DgXa1sVuD]-XQV3ikBidF*tIap0aN]0S.Bhfq.#3C_l<*V5'K3G8NTmGkJJ2(:d%`@*0SDkF.cAo
%SEbs(Rem2Jc%f6cL>nR"cC5?BEpb>lm*,9E-;Fk,6U%#N?DLg%cC>ECieqM%lbH'6YmYZ2Hne6cJ5#Eg<#dWoD-NI^'=kSFi],f`
%S=X$tKojEIOG</dm0knd_@,*q37!BP7^0p04/_5nj&YmPB(\=V`Y,DK)\>s9GNO-WQOQr\nmDfoINjf2$&.,`e2+e`OqH6s>#%$?
%q8T#63CcGsBsM13]luk*WPTPYpc\d!p,6PD%2cLJa+i`h=4GM%Caa-(0]@k$h;EI`f@/8Ge'd#`%3(KQ0k5;DR^B'-di.0N4c1'l
%HtI%alT*IXN7@8U1/d"Zc^9h%)EV:qlML#f1/c5Pa>l"R#8_NdIOjP9;F*Ala\>@@R&O"Q%""c74rp)SCAo&`WCs>,Y7E@DcCq4m
%DDHekl6MqW4Z5tp%48qs>`27/e!+?T9ne5nR,O&Hq&k_hL!uKWo;9Bq'Xooi$?qkEH#+t#iXDPFo,gPX;iN8s4V^^B5%`5-"8^K*
%-r?G+XHWE)h]QpkM==,aXEV)TeR663+$S7?HdG.\))`g+M#7ApB#r+*)*VkV6(X'Bn-;W=iTP)`J6@>J0fg`t'?SLV/t&L@8T[p#
%4`D"+7so*B.QR*t+1`RN2L1e1MQbNN.i[.'CF/-7VLR&Ic:Nr-O:U,jMjO'aX*ErE[;XW'SgaA7DM"=;!ql+ZNJ!8871n:-.,6>0
%-U4XW]04qAF0T,i%U)HbPMIj`HVJ5L8sTOE8J^0/>01Y8RTX:mAj0*?_[]tQXT:8)#qsj.cq8I;aKXEP["6)0[5ENP9=:[$\QCJ0
%L7KOAXVhF;JBCg+crJNr:h?pO]HD9hQ!kJPl"&FP:]nHZ:kG^ERi4QNI=1bX6h*f"fr_HEluj,o#$QJgHkh5#h8a/Hbj#9^TMIW4
%IAf>F!X3VG<9d<N=hVZW(@^4kg['+ORt.JaT`UpdL\XAAPPB/GF!b)_,hLe6W&hb^HXW`o.XFYr'noi<gN.;Cj]6*3!jkF%nhm/9
%M%*5B;L<9qVeV`Bl'MBHid6$TZo_8AfMAN^cU72.cZYMBg-'JVB<%JDPMC^d\@k8UNm<Aa>O7$Z3TBUXICbcd)=6ZNdj9%'j3tO4
%c/`2:__)h`2..?e-FQgpc;Hb'r]'NIZ8O`s?Z!EU\I7V[,/&bEdiBB_3@pXpbmtA\E9GB@;p2"959K$PCc\tkTF/H(QqaKE96W_b
%irR?URQKntcDFO57@@A.VJJ<$V@66+3B3L'c)EY"OUoR2;d6/^kfP\me#DHW.98p`OA2VgB9AeoGE-K#[91')]q-aD:?S.J1M5+8
%jjM9FNh.Jb:/,Gtffs71SQ_AE-QA\L9rBn!(AgD[WJPFP[J<bW%<YQ,h0r:WG7#FS9rDi4Shll(+H.>39t0!o4A5(sflY8Dm'(:e
%2%RlNp1udt##K41=gRAB)R,_pRndh.A8`"Vak:cN\TCI4p%3&][Ic3Lb/cTKl-sb<PksM6CcXFaaDT0^9/`>t9Wg0^e#DHWl.j='
%\c[3C/2G9I<89,b2)$aY-A^=hGZVGF_d)2bBk`.#Mf[cWVq*/"lf+l?l?'-9F*KIQfiCS<!g]'ricc^X$ZdRigklCFRT[u%S_EOq
%.8aL<G.E7h8ZbX1GK682I!W,D;VOa9-Xh,d7%<:E=XKKj,>qZk?J`k*K$#ueS]I<hMeQO?G<jHBqDEKfF0<`TjG.)`V_)?F9rnkp
%^#i';PKR2TSZ+E]p%KhT(YtWAT_fbFfVutE-Eam8'2cD,r43upLn`0`G@kl\$@:=Zn[WRnliYgt$AE@ZSkHIG+*>fYVL#[5Mqd<f
%WT7.@/P9Da8a"4+4I`@M]bl8`KtX8HM0&sR'c>D4Q.sW7L.")?]tY=])2?k736Z!26,Z1;ZAGZ_)>[90ZC)Z?OGqu@-Yb7k'qP3S
%:g30J0O;qQ`.\Q@h,(6Fm=oAHF#R(AjDHAuNQo_E=lqN]Hutpl'S9N94:^.U5HLF9<1_<,6LC;cJZ'<;m+0;n2W!,@)Db-ie[^6:
%R91sZ;(U[rnb%mUQ8X4B+De-`4ikLh[eX?A5uTk_-+Z__Ps;W[JP$UM^$6FHcrtK>G>Np)b"J034E8V/e=D4cGFb5oc?=g`e<O[i
%fR."@-8HRXqs<+f775(_O"'h&k!WYXPiAH=X&1s6j`>1lA$pMKnZeiehNN3B76Cn]d8+:4E.o+^?LGKp#03oUAr9/<4R%S^0u$Wb
%Nk;(=E:8Onj6s*6jG#`:CE2/MGE0nfU?>3/jVb:`l'q7hP*_tea5+S,;E``\0/(Gk7?[u6E+a.IX*6d_AUMCdfi-/S-C(n_G&c7o
%[(TQ4M7%to^-OBQ`I).^i*rW'1,.[?atb'bOBDDZX-VRjkW)_SSO9/TC1fqbG0Z1O$X;RK3pHNN`pIH3$Rab6,<6E81QAA\:k$"`
%7rRIhU0fOF$6-^L*7pA/qkeeGN6D\aOi5a^'Y]l<M]&BHm:Cs=F5&#4U?T2&S@f_4_NcdO_UN1\R/2cYG<arfKSc:4PF."bL%b`e
%_!&,5?p;Xc`#5P'ZY<+1%)[\SV_AN&P_.dXQ^BT<H^][4g37OMNbeXU>P"WpeMHO]$140!@0UV3fbGHb1$'F87g>&`;l[[U@r.OG
%r>UKL$bCNiSpoMUO@:YF<7\C\7-j*/0Vuj:f#r%J\X*RuI@hE?50]$=0[)+_a!l?%gK;d20>:>tG4DuYA94#LqnA0dNs^SgTF//J
%[PkeXYqP1oj.]2(He:BK`LC$pSAbu%e)#1!\pI+/V5,B[L\%<2%BUngaLBoq[]QA]=e;joSbpH6:ud'Q:kEHF+4YmFm._V[BpP,!
%ka1-`GJ8_5W'!_3@?Va5'"^tHF;KE%Y,*sqs"9h1WG0TEMc<Ef!uOB2:8aD@46I;lG`(8Kj<K*%bPYQKAMI:umbbV3ec^;)UVFiQ
%5\W*Kr4R%=LW:3*";@Ve\$?4bGXZe$Tb?Q6!\2U=Q\[N0%\R`F&nZ0&p=8K*2!]..Xa/Rf2,c)]>tnRb;j4VfMUBO%0""pMh>O,g
%-dJ`+42#Kp*dkPhiYJld[FtLgHFipS-sp$]RY[&=V^250m1R]pd-9%G>@FlOS"L`_e(1P.U?9HFGmr7l,cU$)DF$'5F_WkA]G1t3
%>,@D_VEB.ppoH<I*LbbI=B"k!<Y4H!H[CX*CtUZ1P+4@/pr,)<c0s(InRT=45j^Q$Jc)7K:FhA#ZbJG"0!>-<]uB</=)qZFH7"t=
%EV3Hi]6pRkK14tCS`SA2&tJnVAKuVhcEPFnLA$(BI-e1]L3"<MS?"5E+*as]Oca5:hU0b3%\\S:J7eDl%)!G/R.`-a1\!3=VNG;+
%Xj!4S>h&DdCf\C]K=c4#a<nd?-A0.!k+4TGRUG:S3Z56gg4rt5L$TAjoWFHF-UYs5&<r/M>u96"R\';aXJ6aG9-fF6NUKOqSOiIR
%4Qeu"h1KdMN/T\u1m[UYIf>8cL=SKM^k=QtmF'iTV%Z`-jml_8PuD\JQ$+Y88b4=QZZ+\^qp%Y>c[LT)5H1o<M13RQCNUOO]_qL8
%N#CL@@t'NUF(-\B:5jla)r""%hR<t`IQ8__ctj2bE_#j9$">5d:]=<&XX4J*N_SU8_V%.;$W&j5=uh+r*NDV?!UAiem&c0dR0BN3
%'ho3[IikcC%%VF6*lcj;=b*e,dE)FEbH]J`a!it48UTSDZ2h;E,`e3=egk`ip-tm_SdrK!n":WQNkU`RITtBQl;BgRW5A?`jYOW5
%m2VJ`@3=0B*^".Cb(j"1&%_l2LeIQnU2];1PY_%&jKi.7BD2>I'/&C17294.C>jAr:,P)0;M-iEofL4I;".f+ZXe*Im;/`Mme)bS
%9psXU`,8f0Hi<T367Our8)<L/TM!2*I`J#hV7bDU5:WJnM'$uGT>h:Z\,'g0%<^mJI\nOhjEpjtGD8X4=!uhiB-NQ*%/9VW9J3Gd
%Y+T,s][or/B`%O**d=f[riLW>h#O0iYFkfEe9@i4I]oC/2!LWII`/pKqE)tZc@V?la)(U7B(D)&l9"6:5CGtU<dDu0YFkfrIKuH0
%V0T8:^8n<>$i8e.rR?!bM7<>PHlq5`Eo,'ul_iVIRf,%tl_hLj,2(@ld_1,+M6eZLWCPe1VnSh@hs.,LS`/dZrV!_:8T4:^pF.,R
%T#0=LV_?7F$Jfjk]md!I1kH$b]qj-Gp!_f;/^HsNra%flrmor.IXC6_*I4i\4p(O!fhT64:RBZoOHRq0YFkgZn,`:RST'IAr'%jD
%o,cD"ofG:*6iC=Ur?Yq?h6r*pl_e[Cj.,kmn+G/EeaGV'Bh%tU/GA\jl_hMSXP?6`m(IlE\,)Y7+5[*g2"^4r48CQNiE!_"grF'k
%9:IoS@K0ZK6a#EI8=7lop"N-JOPT1LA.5#RYFe'dWjhgFPEg=$RA3>`#N"dEBBHl,!e:5$p\LF*n(%2>5BD+RVr$_eZsrTDo],B4
%4)E6.b.W8E-c6>$qT8.qQED\XSF`P#X.RZdB*[8YV]j)?1LO":*I4i\r^Ng!R*q,kqIueHKoIcu53FBZ1rkk/hs5KR?[;"OIPSaI
%GH9UM]*G2,qWUq3`FP(^k[$K%_baH,4Rl`BrIe9M,G0._TDksA.e_Llp\O+l6.goPa1Zq6D4&f?oom^tnlA!2m+MR0p!ZtP#$IIn
%n+G.2%\0?uQR_r\lCf!Ekq^ftq`?tUk=UH2'(Z+Sqi];Y>/f!%BDmhao!Ci>*".+cjJt5k1:DBZV'.K;R"Yo6:mqBV!Yq%+]9PI6
%?q-O.q<$DaHiZan+0$Wipe!E0@=i=@k+4>h!M;N#*U;3#\Ob5fIbt=[]7H_D`tRmq\#\*ggYLFlb>D&dMr&)'H.D1d(@C]nX6-(i
%2a3-_g8b,FA+O\WR[npkHroQ5,4Y//q0d.CS*HgBrA\#'b(9EW\R0M?qu),ep!\is1mUj3C9mBBB"*`4j`E1MkfS(RVUki1EV5lC
%^",[!SqO$0bktd!CQS;XX!5I:-CZpf8%ELFjr4\(C)"r+'QKTcW-4LOb*VE!U>1"gAsh8RO4eqo*3@'T0SBP;ELE,\hid.LrpU,i
%`.l^sLsg@Gc`kmq9?<A->#c\bo7HO+1[MRF9''g;:$uU=?3,oO&Tm)`T@B"2+N(>Mc5!RIRHuF"@-^!U4_eKG,MdeDYM@b'Qf_:1
%[E.*lXn'0cX*&V":0cDG*[*NX9[e@1(TUjA!4))jlihOpZSAcs5fk^2o*M@]"s`</Js:\tljHs4'q,e@]JV>P:"2@)4P[pr(-jkF
%@(=_2s#t&t>B_f'M2iLG7-'1+hb'a3UdO3?g21a"pf6A?j_JP*_0jR-_JG34<AN[='7P"KMI-1?E`VVraO4]VD6XmhK)c3*B2okp
%IhP6.AaTs".q:4E)#X6'Nk^0-,(/lsTJ1<8o?_@;_N1/IAc&;+3C?1W&pBt@!+X\>pmLcITBOe%VdJp9MqW0$(25Gu(:m,9^Snm4
%X\)8NZdW`jAn+*@X4!#SM:Iqhi0G,mlpIHHmMqN,Fi^gajHgWUD^IdO+Xundh0nku%k]\:Z<Y!Y#gYW3ZGhj)QTtEnTu\TqVn>S6
%n6(9?$'>Go-7gaj9!efElQM)=*e)gs[N@ZBb&B_b;`YtJ')chSLrB\hLO&OP8u$&C#_*KNfQ_F9BqV)'Z_Q,2'"KGZTLX8/p!u5.
%9&!ZO)K\E3!a=<,*X^l;MA*fpb?j`d>bB[`nU)W/8Nn..H^G0/<T/(PAcmo[/a$i6O>KT70%mV0P@C8S:A>tKq\VE"0:!-[?<]=J
%P'_,`gi?\1F4G1&9-gm;CH%jV8EbB=W='Il2p`o<@QG#8?ggP0!6%e[K"_7X/hT1Nmcj0,'<utij;R[bF<K(LP-!?+NEm_."TD@6
%!&3RVL]DPu&:X@bX3!sC0mb5AgZS^$8\Yrma1DtL\8;+ip64qcW5GDm(ItO-/g2SsdTg9h"gGZFO"12#aV'1#Kg.9'BO1cm^"a6R
%e'E&*NVFNe9$`8:(5V"u?(3%YP@-KjcuR+k.6YFF/9ZjKGOWm6A;^fKiL#<<2Z+sI!uVCLXXX@2n72\C``s(LN7WFXO:dmtjqijZ
%Md7ML&0Co*Yi30`aWamJjFg?andB!u!B4<0o8AMA7=$lrU3N;:';.sM'WQQ?cklEMM*UmVc&WE,"A"\R"4V;L6W_AKd36X#KaG]0
%3=*T<SB0^".Xae%KKa7HM=DuemD`an%m5d=E96C_]IHcEka?;RA5NGj`e&#JYDKKqljm0<9?o#s=hCN]'@KWi+-,HWCS$1(6n]g#
%F-M5oZfeNLVu[1cAot`<6p;`-Jtu_qUkg3KE;pR-+:I<j;I9T>R8+&cC1-0uAe9+Vc^oX61PE"S'::XX*g+d"p&@jRnGu$^f_$jO
%>2\WK]Y/pbH;7^cf$'l[+B@<(c9&HVZ6@UhE5+-$+gM[K;$jJ%qtD-6gCi=5Mbc"I7iU`k+F*0(/tOV!')fV<LbL,cAh:J)#4s>b
%:iImGH=@rQW:ekR(XKf\h*X<L2,Rmg_Qa)uX/LH`XJ*Nf^A'K.DLuQ):k<\4p%/`qUMq*p^>epDb1Fm=^#')D2\A4?M#^TA<\Y_=
%WeU>+i/VEg9dE<P9P1p)!T/FbVeA=6+lSHH4J!D"M"lE@^qAn)@P=0okV2'=+$'PhP[SZs!S%B>+#[#UOl"#W*Fj+FKOW]2fqPi[
%L\,R!"s:i/hQ6^`%":fa!jSoYikPu_!lL,\Gb;Yt=7RO`Lo4TOc#Wg8`RU`48?j4[(HHM0,GYu$J+=)7b-a(1@7\^,#1!bCIId69
%^(N8"+":0"blCCUJS]9YB0?:ca'!gp-QGd/bNX/BYPE+4'Bp3Qg.;]VlS1?,ed!"85ak)YYXo<m_&EK*(B")g<.HG%lZ'"b-)S'0
%].^*gQa@m?*Cr#m7p8m`#\J-XC,UE'A$f&DO;;X>U0BlT%IO'Hg<gpdOST+AN`5ER*k]pQBim';+8e[("%Ae-Y\@),;33[W8<d.K
%<c4PfcUYIgjr[>]&@[^,cIBRc,rm^GXeXF94?;ug^kmOLE45W1*CSX,ah@5s6-[9qA($\TgE(T_OI`j4?+r"'fX:o;6.]s3"ehaM
%`=u,DKn&C52+Nj6Z$L%uM9BqVm^[qlH7Ub..o[Fp!r%_Hd`u@i7d*Q1Z>EpqjcA$g1tUGebt>2"-8b;IJ6t]J%=[Y-Z^dN<q[E"j
%e.,,'n(X3p(0r"pIQnSj>B^03M0D8?_[dR]7Z%st(BocKn660Jj5WH<h>gbI@k)GW*FR/CX04MJDU<9;pc<:rDN:OnD'5_m.W#5R
%6#LVM1r,\44m56oW&W0M6\PT&33?T3'-0U^/Ge3cLnt7"nKBAJHj+$;0ANMK<I@!D"Z)VDQJ9J$!McENg_qNSO9l?GYS1bh5;@=B
%P8oT=8Mgi'E:CndW5F__I#-akYpd.7'76kr^?2s\%+Qr63NV_*GtU(,SROfB^2hd,79H+iIbFadZ,GXYO>S(*8UijoLfsmV]*6G9
%R+ZSiZ?e)O9-AFKP+C-J9eeK\VZ4%UY"-)M^"QYRej-B<\@[YhMY(RFVQD6a3:[dtbRZWk[p1%.U_TT@e6/:eb4Ed;e'4OF+aP$J
%:(h(E]0_c%(qk:%fPSE#9&!S]Y6g]mHNoAA-@VFsQYb?fop;Dt8(<1D+Ou?VL%=b14Sft%^8?<ce2l.i&RuQR/orhmGrH9.fkQ,`
%`%1)TT3B!aT1dE*.tJ1/6\-m9T(aJ;[=i-W&eE(^5ljgd7e$"Yo0.Yi@-9$u?ejDF\_FZnbo<Gc2QnW8[!DQ/Whc4>(TK`ab:X*h
%U+I_a2B,/D9([jK!c`1eI)eFYj/*XOrPq+M,<h]9hc]_Q#_uA!_D`k%1rqn!3WC4FnoDYUbnNBc*VgKRJol8C<rOGl;h!@JH?KX]
%&.;=mM_E-Q-k^IFEEgWU7<1=aP[Tsu+VmVbQ]iiojcVq7*.fYM2u$;Y]1i#gZiUARJC6%$!h<@B2[Cg[4P0ZFPWM1`2W3r<2Sh8t
%/9kP;0;m*bG<TGf+C$)+XO=3G;'c5#"aGL@-N^ll,kr4oT.d]W^b<KJ8+YoTo"4YsdN+cJ!2VrXGR<6rF&3FmVs$q.V!oD$)Yli"
%1+j_A1po"YMAoJHMi%Q5hGZ\A4cB:6(-@2&.m#]36EYC#qC6m5Wgd6T\*>/T$Kg7$T7E)E9PF&R'*;Ye;0barG?FGD'/nd]eDV'!
%_r.LG0)TR*nVj34?;[HteXh7"<FBL5#=p:lVd.`501:D9^teKsT/=CXLm]FTbLtaWBs5?3?PTk+D=]<q2(8!dTtIGZgqT0a%/e$R
%dZZ)HX0*ntW$d]g<7d@Ie<=QMQ+EhTURjk^,DE!OSp27KgtR9(/n<!=\Y+V,!M-;KrY&F5b4s:O+a5(4OIfGR81nTYhH<Ft!8Qpc
%F^*:Ps$S=Q(Ra$`AcN,s8!I:qJ=nP>!C[)+qo_Vg-T!Q!8lknP@_rfdB;kHonqF5FD^=8QU)-94nX:hO#,@3-r9T('LQF:N$*Csr
%#u2,W"1)&7Ta:1L&#^9t`3ViT+'e:i$;"XD+UO)Mn!OQBA4%-E(`It.jTc-Plj$!V1`QZgHEUdcKV5@0VDOspo<*<S;sO$Zlq5$:
%E)H<G#BW'HrD&N]cCkn&E6qE?hLmPf4Xqk2HHe)Xn+Z]X3Y@:qK@WEn1abUE%Hq1H[>Ei8m@+Q*WAG_`Wl;-u$`tbg-O8@1LW/OX
%)Xo7RaW6Rka=mmZfsh@2l?TclVBA:1f49e+kLIJKio)Fp;S,@rKCf@::mfP=dsA%u`=`"K\"ls':o^KSm1q8o!#;#8Ym,42hK'=o
%o`$T(rZ`1uiH5)90&lF+KA((@meSMM%u0\9DUDkV<a</Bf`-"c\)P7V>f9WH\dd5"8d?3&^;0?\;8Ub.%WS/2-]?Q1Wrgq4&&O'l
%-jYb'IX`m#[19QI$*TeM_QMn82Y"`UMgg8=hAS1\d#k_aE84DXekFPNS;+iGAa@B6\X>D@iO4PrY#;*C[9]\Dr<lPdn,WnXS3G9;
%>S<qOqiI3b&)Z=q(ZbcnLrZ7N^];,O=sJjEY^3>_T8`oQ@+rC>>(1iO/Cqa1b5-U!/1KL!hiVHaZl2S)65I0R4DE3th$-o9o^h]s
%[]0f9U)=>Q`W$P.5PQ*h=NOt+)N7)"NsL,:)d8c.+haVPUruqG=mZ)PNnG1\U[;m2)DHYDPOQsm^"0_E>*Dul[h%c$XA7+]U(;!k
%+r?2*og',c(;cLBs1eJGfmu?s$c-snDBZNMJAT(:O*gBX#<_k3)Re5!D]aXT%,ZE;7&!P.+rHAlh?Nr+:b63a8tSQNO\d<<?&6hd
%AB5i!LD&0/3!#T^$1Z-D,o6'l#VmelJhQtqM4gX[s$18q=f<!lL],%[;"@X<)Y43O+j^t,A`:J3,np[]6h*]@Hr`V\,-cs"hSKn_
%&UkoDOYd97K]6C@Z$=>3,i\Sb+rnE^+<tlA_'4A`HDPj#:+0G-K$j4d[Gq0nLeMc+L5Blj)CHa.?kCfinA,bn%%`.NM)]`5&g@2#
%?m<EOJQO&nZ$:l]T1#CcJ!;4q!-^/I1_t[=Pg`^<:mR+f@<K/_03q4&O3&(I/L"(7ciNk&?qRnr_/'..G01<oTWNjsC:tX(km]&G
%:)TMVXr5s9I]rd):V\K.F[5p8b4>Q42hBLB~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 2469 191 a @beginspecial 0 @llx 0 @lly 171
@urx 46 @ury 1710 @rwi @setspecial
%%BeginDocument: graphics/TU_INF_Logo_gray.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: tu_ffi_typo_grau.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: gilani
%%CreationDate: 12/22/09
%%BoundingBox: 0 0 171 46
%%HiResBoundingBox: 0 0 170.0635 45.1973
%%CropBox: 0 0 170.0635 45.1973
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039
%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">tu_ffi_typo_grau</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-12-22T17:02:33+01:00</xap:CreateDate>
         <xap:ModifyDate>2009-12-22T17:02:33+01:00</xap:ModifyDate>
         <xap:MetadataDate>2009-12-22T17:02:33+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>68</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgARAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8Aj+uax5z/ADI8zTvDHPfy&#xA;kvLa6dFUpBApoAiVoKAip6k9c67Hjx6eHd5vJZMmTUT7/LuWf8qn/Mj/AKl68/4D+3H87h/nBH5H&#xA;N/NLv+VT/mR/1L15/wAB/bj+dw/zgv5HN/NKhfflr58sLOa9vNDuoLW3QyTzOlFVF3JO+Sjq8UjQ&#xA;kLYy0mWIsxNKWkeQPOes2KX+l6RcXdnIWVJ4lqpKmjCvscM9TjgalIAox6XJMXGJISrVdJ1LSL+X&#xA;T9St3tL2Dj6tvIKMvNQ61HurA5bCYkLBsNU4GBqQou0rSdS1e/i0/Tbd7u9n5elbxirNwUu1B7Kp&#xA;OM5iIsmgsIGZqIsprq3kLzpotk2oanpFzZ2kRUNcSLxVWY0XevjlUNTjmajIEtuTS5IC5RID3j/n&#xA;HXzvq2uaTqGkapO1zLpRia1uJCWkaKXkCjMevAptXfenbNJ2rp4wkJR24nd9laiU4mMt+F5R+dHn&#xA;nWtd846npsk7ppWmXElpb2SsRHWByjSMo2ZmZSanoNs5HPMymb6PuHs72biwaaEwPXOIkT133p55&#xA;lL0LsVdirsVdirsVdir3v/nG7zzrFzqN15Xv53ubRLc3Ni0jFmiMbKrRqTvxYPWnanvmZo8hB4ej&#xA;wXtf2ZjjAZ4DhlxVLzvr79numq6rp+k6fNqOozC3srcBppmBIUEhRsoJ6nNk8ClumeePK2px3Ull&#xA;fCSOyiM907RyxhI1qSxMirsKYqjB5i0U6fZaiLpTZai8MVlMAxEj3BCxKNqjkTTf6cVULnzh5atp&#xA;7uCa+RZLF4Y7sAOwje4bjEjFQRyYnpiqpqXmjQdMnuIL67WCW1thfXClXPG3LmMSfCDtzFPHFVmu&#xA;ebPL2hW8Fxqt2LaG4BMLlJHBCgE/YVqbMOuKpdcfmBop0tdWsJornTjK1s9xK724FwUDQxgPGSfU&#xA;ZlBalFBr2xVdffmJ5W0u4FjrF4tlqaqn1i0CTShHeMScFkSPi9A3UYqyK3uIbm3iuIW5wzIskbUI&#xA;qrCoNDQ9DiqpirsVdirsVdir5G/JLzRoXlrzm2o63c/VLI2ksQl4SSfGzIQOMSu37J7Z1XaGGWTH&#xA;URZt5Xs7NHHkuRoU98X89fyrZgq62WY9ALS8J/5M5o/5Nz/zftH63efylg/nfYf1L3/PD8sEXk+s&#xA;Mq+Js70D/kzj/J2f+b9o/Wv8pYP532H9THfPn5yflvqvkzWdOsNX9a9u7SWK3i+rXS8nZaAcniVR&#xA;9Jy/TaDNHJEmOwPeP1tGp1+GWOQEtyO4/qTX/nH3/wAlhYf8Zrn/AJPNlXan98fg29mf3I+P3vDP&#xA;z3/8mtrn/Rr/ANQcObrs3+4j8fvLpe0v7+Xw+4O/Ij/ya2h/9HX/AFBzY9pf3Evh94Xs3+/j8fuL&#xA;3P8A5yC/8lhf/wDGa2/5PLml7L/vh8Xddp/3J+H3sB/5xa/46XmD/jDb/wDE5Mzu2fpj8XB7G5y+&#xA;Dyr8wf8AlPfMv/bVvf8AqIfOHy/WfeX6J7K/xTF/wuH+5DH8rdg7FWW/lj5MtfOHmlNFubl7WJ4Z&#xA;JfVjAZqxgECjbZPHDikI97qe2u0ZaPAcsRxGwPm9g/6Fc0D/AKvd3/yLjzL/ACJ/nfZ+15D/AEa5&#xA;f9Tj8y8A1zT007WtQ09HMiWdzNbq7bFhFIUBNPGmYL32mynJijM/xRB+YQOLe7FXq/8AzjX/AOTD&#xA;l/7Z8/8AycjzI0v1h5X2w/xMf1x9xe5fm+jv+W+toilmMUdFUVJ/fJ2GbZ8uSjzvbeaYdAXy/NqD&#xA;65feYbmO1iSKGK0ZLZAZbr4lPH4o141bxwqxyWPW4fL83laG3bS9Q07zBYy6QknGZIILyf1YPiTm&#xA;rrFIWr12xVVubC/03yrrflSS3kutT0q/g1U3MaFpb+0e6SVrjvzkQAq4r2GKu84X0XmKXzTrWkpL&#xA;PpkPl6Ow+stFJGGuDdNMUQOqluKN8VBtirJNf82aBrn5f65ZaXcm5uodLkaSIRSqQAnH9tVB3PbF&#xA;Un84WWoeZG0Ty3bafJf2tlpn1y/jV0iAmngNvbHlIVHKIlnp8sVTCx1W91ez8h3F5G66hb6jJbai&#xA;rA8lnt7SeKQt/rFeX04q9KwK7FXYq7FXYq7FXwPncPDs1/Jj/wAmfoP/ABmf/ky+Yev/ALmTmdn/&#xA;AN9H8dHvn/OQX/ksL/8A4zW3/J5c0fZf98Pi7ztP+5Pw+98nZ1Dy76x/5x9/8lhYf8Zrn/k82cv2&#xA;p/fH4PUdmf3I+P3vDPz3/wDJra5/0a/9QcObrs3+4j8fvLpe0v7+Xw+4O/Ij/wAmtof/AEdf9Qc2&#xA;PaX9xL4feF7N/v4/H7i9z/5yC/8AJYX/APxmtv8Ak8uaXsv++Hxd12n/AHJ+H3sB/wCcWv8AjpeY&#xA;P+MNv/xOTM7tn6Y/Fwexucvg8q/MH/lPfMv/AG1b3/qIfOHy/WfeX6J7K/xTF/wuH+5DH8rdg7FX&#xA;p/8Azjp/5MqH/mEuP+IjLtN/eD8dC8x7W/4kf60X1Xm4fK3wz5pl9bzNq8xFPUvbh6eHKVjmhu33&#xA;HRRrBAd0I/cleLlOxV6v/wA41/8Akw5f+2fP/wAnI8yNL9YeV9sP8TH9cfcX0l5i16x0DRrrV74O&#xA;bS0UNKIgGejMFFASvdvHNs+XJHdefK6bcyLpuoaZPWOC0mv7XhH9YuXEMNQHqyrI4LAHpiq2788R&#xA;aFNrEWuyes2m28F6fqsVKQTEQ0+J/ib1gx7fDTFUboHnjS9Z1a40hba8sNTt4RcNa30BhdoSQvNd&#xA;2BAZgMVR2p+YtP03VdL0y4EhudXeSO0KKCoaFObczUU2xVKbD8yvLN/oFtrlq8r2lxdx2Hp8B6qT&#xA;yuEVZF5bdQevQ4q3bfmFY3epXFjaaVqdyLW8ewnu4rYNbrLE/B6yB/sqd606Yq61/Mny5c6jFaot&#xA;0tvczmztNTe3kWzmuQxX0o5iN25KR0oexxVQj/NHQTfRW0tpfwQTXjadFqElvS1a4VzHw9UM3V1I&#xA;6YqmFp568vXNrrlyszRx+XppoNSEgAZWgrVlFTVW4nj44qp6h+YPl3T/ACzYeY7t5ItO1EwrbVUe&#xA;pWcclqteyglt+gxVS1z8wbHR9Vj0yfS9SnmnYJay29uJIp29MSERNzHLivXbscVXy/mFokM1xDNF&#xA;cxzWs9jazxtGAyy6igeEEcv2Q3x+B8cVTHSvMmn6rqGoWdiJJV01xDc3fECAzUq0SPX4mT9qg2xV&#xA;8OZ3Dw7NfyY/8mfoP/GZ/wDky+Yev/uZOZ2f/fR/HR75/wA5Bf8AksL/AP4zW3/J5c0fZf8AfD4u&#xA;87T/ALk/D73ydnUPLvqn/nHO9juPy4jhUjlaXc8TgdQWIlFfokzme1Y1mvvAem7KleGu4l5J/wA5&#xA;DaHqFl+Yd1qc0Z+p6rHDJazU+EmGFIXSv8wMdaeBGbXsvIDhAHOLqu1MZGYk8pNf849aJqF7+Ytp&#xA;qMERNnpcc0l3NQ8V9WF4UWvTkzSVA8AfDHtTIBhIPOS9l4ycwI5R/seu/wDORV5DB+W00Tmj3V1b&#xA;xRDxYMZT/wALGc1XZUbze4F2vasgMPvIYR/zi1/x0vMH/GG3/wCJyZmds/TH4uH2Nzl8HlX5g/8A&#xA;Ke+Zf+2re/8AUQ+cPl+s+8v0T2V/imL/AIXD/chj+Vuwdir0n/nHt2X8z7AA0DwXIYeI9Fj+sZdp&#xA;/wC8j+Oheb9qx/gMvfH731jm4fKHwr5h/wCO/qf/ADFz/wDJxs0EeT7npP7qH9Ufcl+FyHYq9X/5&#xA;xr/8mHL/ANs+f/k5HmRpfrDyvth/iY/rj7i96/NDTL/U/Ier2GnwNcXk8aCGFPtMRKjGn0DNs+XI&#xA;DzH5P1O38s3EWmXV7rV4l1Z3kdvf3AdmFrOsrJGzBQpZQeuKsb806N5l8x23mrVINGurMXmn2lhY&#xA;2dz6YuJXiuPVkYJG7gKAe53wqyDyp5UvNE8/avPdC51KK8tIfqGt3UhlkRFakto7bDdwHWi9PfAq&#xA;d+YdHF75j8tXZjlb6hcXEnqRqpROVuy/vWJBVWNAKA1P34q8ssfy28z2GheWbmxtZI5Jrm2/xHpp&#xA;pUG2ujJFc0r1VPhb2pt1woZv5K8nX9vqms6leXWoWZfWr64gsVm42s0LyVSRoqHkHB8cCUpsND81&#xA;/o/QfK8ujPGNG1aK/uNVZ4Tatbw3LzAxUYyc3DU48ajvhVBx+RNYhuNL1W4hvL23g126nu9FeQ+k&#xA;kUlxIYbuKNSN02cjflXFVkH5Vatf6lrN5NI9nZ3+q3ranYtX/TLRJxcWhSm271BJ/ZOKr28n+cdW&#xA;0/y7pAsoILTSdHMdz+kOYja5u4jbuqiOpLxR1IPYnFU40/TPNE8XkX9I2cgu9GubiHUZOo4RQPDH&#xA;NyO5EgCmvicVS7zd5R8wajqfmcW1vPHHqGp6NJbXUVAwjghVJpUNf91HFWT+RNG1Hy1dah5aMLvo&#xA;cLfW9GvjuPTmaslvIf5433HiDgV8cZ3Dw7NfyY/8mfoP/GZ/+TL5h6/+5k5nZ/8AfR/HR75/zkF/&#xA;5LC//wCM1t/yeXNH2X/fD4u87T/uT8PvfJ2dQ8u9A/J78zD5K1qRbwPJod/xW9jQcmjda8JkHfjW&#xA;jDuPcDMHX6Txo7fUOTnaDV+DLf6S9+8/ap5f8w/lbrl7YT2+pWgspJYpE4yBHCVU0O6OvvQjNHpo&#xA;Tx54g2DbvdTOGTBIiiKb8ganoHl/8rtCvb+e3020NnHJLK5WMPIyVY9ubt7VJwaqE8meQFk2umnD&#xA;HgiTQFPAfzh/M3/GusxJZBo9E0/ktmrijSO1OcrjtWgCjsPmc3ug0fgx3+ouj1+s8aW30hmX/OLX&#xA;/HS8wf8AGG3/AOJyZh9s/TH4uX2Nzl8HlX5g/wDKe+Zf+2re/wDUQ+cPl+s+8v0T2V/imL/hcP8A&#xA;chj+VuwdirPvyN1LTtN/Maxu9RuobK1SK4D3FxIsUYLQsAC7kLuctwGskSfxsXQe0uGeTRyjAGUr&#xA;jsBZ5vp3/lYPkL/qZdK/6Tbf/mvNr4sO8fN8y/krV/6lk/0kv1PjDV51uNWvbhacZp5ZFoaijOTs&#xA;e+aSPJ9mwR4ccR3AIPC3OxV6v/zjX/5MOX/tnz/8nI8yNL9YeV9sP8TH9cfcX1Hm2fLnYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq+B87h4dtWZWDKSrDoRscVXvPO68XkZl8CSRjSqeKuxVcksicuDle&#xA;QKtxJFQeoNO2NK28ssnH1HZ+ACpyJNFHQCvbGltZir3P/nFr/jpeYP8AjDb/APE5M0vbP0x+Luux&#xA;ucvg8q/MH/lPfMv/AG1b3/qIfOHy/WfeX6J7K/xTF/wuH+5DH8rdg7FUw0HQtS17V7bSdNjEt9dE&#xA;rDGzBASqlj8TUA2U4QCdg4+q1MMGM5J7RjzZv/0L7+aH/Vvh/wCkmH/mrLfy+T+b9363Sf6K9D/O&#xA;P+lLzjKXo3Yq7FXq/wDzjX/5MOX/ALZ8/wDycjzI0v1h5X2w/wATH9cfcX1Hm2fLnYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq+LvyzstBv8AzxpWn69bi6029lNvJEXkj+OVSsRDRsjf3hXvnX6uUo4i&#xA;YmiHkNJGMsoEvpLPR+TNvF+X3me9kgaTXbC9uRpcnJxytLGURykRg8W5Uf8AZ60zC/Pk5YD+EgX7&#xA;y5v5ADDM16gTXuH4LE/za8vaD5b1yw0PTIBHc2lhb/peXnI/qXjrydqOzBarxai0G/TMrRZZZImU&#xA;uRJr3OLrcUcchGPMAX71GTy/pA/KGLzALf8A3LtrpsWueb/7z/VWk4cOXD7YrXjX3w+LL8xwfw8F&#xA;/G0eFHwOP+Ljr4Ur/k15b0XzH54g0zWbf61YvBM7Q85I6si1U8o2Rtvng1+WWPEZRNFloMMcmXhk&#xA;LCJ/Maw0fT9MtoovItx5XvJ5eUV5PeT3AkSNfjjCSfD1dTXI6WUpE/vBMe4BOrjGIA8PgPvJX/kl&#xA;5Q8ueaNe1Oy16L1LWHT5J45BI8XpOJEX1Kqyj4VY/aqPEYO0M88cAY8+JPZ+CGSZEuXD+pGaz+WV&#xA;t5e8i+Z5dUteeuaVqUFvZ3waRVa2l9Mq6oG9Mh1buCR06jIY9WcmWHCfTKPLzbMmjGPFPiHqjLn5&#xA;Mi/5xa/46XmD/jDb/wDE5Mx+2fpj8W/sbnL4PKvzB/5T3zL/ANtW9/6iHzh8v1n3l+ieyv8AFMX/&#xA;AAuH+5DH8rdg7FWb/kp/5NHQf+Msv/JiTLcP1j3uk9o/8Rye4f7oPsPNy+PvgXNC+9uxV2KvV/8A&#xA;nGv/AMmHL/2z5/8Ak5HmRpfrDyvth/iY/rj7i+lNe1uy0PSpdTveZtoWjVhEpdy0sixIFUdas4zb&#xA;Ply3Stbh1CGSU21zZLGwWl7C1uWJ6cQ/XFUeZIw3EsA1OXEkV4jv8sVQmo6xYWEcMk7/AAzzQW6B&#xA;PiPO6kEUWw7FmG+KqlpqVjdmQW8yyGKWS3kG4IliNHXelePtiquJYygcOCh6NUU606/PFUBFr1hL&#xA;r0+iReo97bQJc3BCN6SLI3FFaT7PJqEhfAHFV2ja7p2r6fBf2cn7i45ekH+Fzxcxn4T/AJSnFVtn&#xA;r1hd6hqFlD6nPTGVLuZkZYQ7oJOCyH4WZVYFqdKjFUeZYw4QuA56KSK7+30Yq0s8LDksistQKggi&#xA;p6Yq55ok5c3AKqXYV34jqadaYqgrPXbC9lgW29SSG5tEvoLrgwhaGQjj8ZAHIg14nemKo71Y6Iea&#xA;0k+waj4tq7eO2KvhC0ubiyvYbqElLi2kWWM91eNgw+4jO3kARReIjIg2Oj23Ufz40if8xNF1WBZ0&#xA;8vW1nNb38JQeoXuvik+GtGAeOI+9Dmmh2bIYZRP1k7fD8F3M+0onNGQ+gDf4/gPJvO/mD/EPm3Vd&#xA;ZBYx3lw7wchRhCp4wgjxEaqM2mnxeHjEe4Or1GXxMhl3lMpPM2mN+VUflkF/0mmtfpAjj+79D6sY&#xA;vtV+1yPTK/BPj8fThr7WfijwODrx39it+UnmvSfK3nODV9VMgs0hmjYxLzarrQbVGDXYZZMZjHmy&#xA;0OeOLJxS5L/O935MutNhbSde1nVr+OUARanQxpEynmympIaoXHTxyA+qMYjyTqZYyBwylI+al+XP&#xA;mnStA/xF+kDIP0no9zYWvpry/fTcePLcUG3XDqsMp8NdJAsNNmEOK+sCGRar+bVvrf5SN5Z1Qyvr&#xA;8MkMcVxx5JLBC6srO9a8woIPjSvfMeGhMM/HH6XJnrhPT8EvqZH/AM4sxSG98xSgfu1jtULf5TNK&#xA;QP8AhTmP2ydo/Fyexucvh+l5R+YaMvn7zIGBU/pS8NCKbG4cg/SDnDZfrPvL9Edkm9Ji/wCFw/3I&#xA;Y9kHYOxVUgnnt5VmgkaKVPsyISrDtsRvixlESFEWEZ/iHX/+rnd/8j5P+asHCGn8pi/mR+QS/C5D&#xA;sVdir1n/AJxpjdvzBndVJVNPmLnsKyRAZk6T63lPbEgaQf1x9xfQPnzQ7zXPK9zpln/fzS2rA8zH&#xA;RYrqKVyHG4PBDT3zavl7FPzD/L7WtS0yz0zRwb60H1lrh7+f6xcpJJGqxNHNdidlQFfiCUbwOFVa&#xA;z8katHrt5PeabbXjXlvGlvrUk/72042QtmhWPgxb46tsQDWp3xVLrPyf55KG5urC1S6s49GitoEu&#xA;arMNKuTK5L8fg5r064qp+YvLWoaPpd5cWFnBY65Lrgm0G4twGab65yjMUnpqCojikk6mm2Kp95o8&#xA;i3D6JoWm6baQ6jZaQjwyafcv6SScrdoY5iSr/FG7c/vpvTFUX5M8nXej63eahfLFNPLp2m2a3wAM&#xA;ryW0TJcEmgajFY+vXiPDArEpfyn1a60tIru2hku7XSJ7ewf1SPTvmvHnidSKUojD4vowqm975AvT&#xA;DqFwum2l1Pc6zFqM9oxSMXlslqiNFK/Ej/egvJxbau/fFVTyz+XMtvrOm3uuW1vd/o7SoLa2Zm9X&#xA;0bmO6lmogYf7rR0VXp2xVj1p+S0iaTHDJYw/WxolzC7CVqHVjIGtpetPhUsOXbpiqYXP5f8Ami98&#xA;9Lqt5BatY8pElmX0h6lvNZmApMvp+rI3L7XJ+NOi9cVUT+XHmRtGgtorO2tXg0eCwnto5QsdzLBe&#xA;JNKGZFBAuY0JZqdW374qq+ZvIWt39tpM+k6FZafdWgkSOxM8E9pD6swcmSGS2KnYVrEwYdBUb4q8&#xA;Y/Ob/Bn+M7z/AA36nP1H/SX2fq31ivx+hT4qcq8u1em2dVoPE8Mcfw7683lNf4fiHg+PdfkwPM1w&#xA;nYq7FXYq7FXYq2tKjlXjXenWmKvrX8jv8F/4MX/DHqf3n+5P6zT6x9Z4ivPj8PHjThx2p78s5btH&#xA;xPE9fw7qep7O8Pw/R8b528p/5yK/wR/iQ/UPV/xNxT9Jelx+r04jj6ld/V4U+ztSld85rVcPHt8f&#xA;x+Pm+teyX5rwfXXg/wAN/V8PK+947mO9g7FXYq7FXYq7FXYq+nP+cdf8EfoO7/Qvrfpv4P0t9a4+&#xA;pTf0/T4/D6Va+9ftdsz9Fw0f5345fj9D5l7W/mvFj4teH/DXLzvz/A6vXsz3kXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:25971E0EAEF0DE11B753946C71D6A8A7</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:26971E0EAEF0DE11B753946C71D6A8A7</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:0B1984F4ADF0DE11B753946C71D6A8A7</stRef:instanceID>
            <stRef:documentID>uuid:0A1984F4ADF0DE11B753946C71D6A8A7</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfxid="http://www.npes.org/pdfx/ns/id/">
         <pdfxid:GTS_PDFXVersion>PDF/X-4</pdfxid:GTS_PDFXVersion>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>297.000002</stDim:w>
            <stDim:h>209.999994</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Standard-Farbfeldgruppe</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>100c 38m 0y 15k</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>38.000500</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>14.999401</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=75</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>75.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=100 Y=100 K=0 1</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0 1</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -45.1973 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 45.1973 li
170.063 45.1973 li
170.063 0 li
cp
clp
[1 0 0 1 0 0 ]ct
53.104 0 mo
89.1689 0 li
91.6885 0 93.7354 2.04443 93.7354 4.56738 cv
93.7354 40.6309 li
93.7354 43.1533 91.6885 45.1973 89.1689 45.1973 cv
53.104 45.1973 li
50.5835 45.1973 48.5366 43.1533 48.5366 40.6309 cv
48.5366 4.56738 li
48.5366 2.04443 50.5835 0 53.104 0 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
ef
4.56738 0.000488281 mo
40.6299 0.000488281 li
43.1514 0.000488281 45.1973 2.04492 45.1973 4.56787 cv
45.1973 40.6309 li
45.1973 43.1533 43.1514 45.1973 40.6299 45.1973 cv
4.56738 45.1973 li
2.04492 45.1973 0 43.1533 0 40.6309 cv
0 4.56787 li
0 2.04492 2.04492 0.000488281 4.56738 0.000488281 cv
1 0.380005 0 0.149994 cmyk
ef
74.8174 7.75342 mo
67.4541 7.75342 li
67.7305 25.7646 li
74.5396 25.7646 li
74.8174 7.75342 li
74.8174 7.75342 li
cp
0 0 0 0 cmyk
f
74.3428 30.5537 mo
67.9287 30.5537 li
67.9287 37.4434 li
74.3428 37.4434 li
74.3428 30.5537 li
74.3428 30.5537 li
cp
f
100.853 5.104 mo
100.853 6.94824 li
103.396 6.94824 li
103.396 7.77295 li
100.853 7.77295 li
100.853 10.3311 li
99.9248 10.3311 li
99.9248 4.27979 li
103.834 4.27979 li
103.834 5.104 li
100.853 5.104 li
cp
0 0 0 0.75 cmyk
f
106.498 5.64795 mo
105.545 8.33398 li
107.426 8.33398 li
106.498 5.64795 li
cp
108.104 10.3311 mo
107.684 9.11572 li
105.27 9.11572 li
104.849 10.3311 li
103.86 10.3311 li
106.103 4.27979 li
106.851 4.27979 li
109.093 10.3311 li
108.104 10.3311 li
cp
f
113.688 10.3311 mo
111.971 7.34766 li
110.939 8.57178 li
110.939 10.3311 li
110.012 10.3311 li
110.012 4.27979 li
110.939 4.27979 li
110.939 7.32227 li
113.439 4.27979 li
114.573 4.27979 li
112.589 6.65088 li
114.779 10.3311 li
113.688 10.3311 li
cp
f
117.754 10.3818 mo
116.508 10.3818 115.563 9.54053 115.563 8.29102 cv
115.563 4.27979 li
116.49 4.27979 li
116.49 8.24854 li
116.49 9.05615 116.989 9.55762 117.754 9.55762 cv
118.518 9.55762 119.024 9.05615 119.024 8.24854 cv
119.024 4.27979 li
119.953 4.27979 li
119.953 8.29102 li
119.953 9.54053 118.999 10.3818 117.754 10.3818 cv
cp
f
121.357 10.3311 mo
121.357 4.27979 li
122.285 4.27979 li
122.285 9.50684 li
125.231 9.50684 li
125.231 10.3311 li
121.357 10.3311 li
cp
f
127.775 5.104 mo
127.775 10.3311 li
126.848 10.3311 li
126.848 5.104 li
125.164 5.104 li
125.164 4.27979 li
129.459 4.27979 li
129.459 5.104 li
127.775 5.104 li
cp
f
132.419 3.65088 mo
132.419 2.73291 li
133.21 2.73291 li
133.21 3.65088 li
132.419 3.65088 li
cp
131.93 5.64795 mo
130.977 8.33398 li
132.857 8.33398 li
131.93 5.64795 li
cp
130.563 3.65088 mo
130.563 2.73291 li
131.354 2.73291 li
131.354 3.65088 li
130.563 3.65088 li
cp
133.536 10.3311 mo
133.115 9.11572 li
130.701 9.11572 li
130.28 10.3311 li
129.292 10.3311 li
131.534 4.27979 li
132.282 4.27979 li
134.524 10.3311 li
133.536 10.3311 li
cp
f
136.968 5.104 mo
136.968 10.3311 li
136.04 10.3311 li
136.04 5.104 li
134.356 5.104 li
134.356 4.27979 li
138.651 4.27979 li
138.651 5.104 li
136.968 5.104 li
cp
f
100.853 14.9614 mo
100.853 16.8057 li
103.396 16.8057 li
103.396 17.6304 li
100.853 17.6304 li
100.853 20.1885 li
99.9248 20.1885 li
99.9248 14.1372 li
103.834 14.1372 li
103.834 14.9614 li
100.853 14.9614 li
cp
f
107.547 13.5083 mo
107.547 12.5903 li
108.337 12.5903 li
108.337 13.5083 li
107.547 13.5083 li
cp
105.691 13.5083 mo
105.691 12.5903 li
106.481 12.5903 li
106.481 13.5083 li
105.691 13.5083 li
cp
107.006 20.2393 mo
105.76 20.2393 104.814 19.3979 104.814 18.1484 cv
104.814 14.1372 li
105.742 14.1372 li
105.742 18.106 li
105.742 18.9136 106.241 19.415 107.006 19.415 cv
107.77 19.415 108.276 18.9136 108.276 18.106 cv
108.276 14.1372 li
109.205 14.1372 li
109.205 18.1484 li
109.205 19.3979 108.251 20.2393 107.006 20.2393 cv
cp
f
112.895 14.9614 mo
111.52 14.9614 li
111.52 16.8569 li
112.895 16.8569 li
113.513 16.8569 113.934 16.5083 113.934 15.9136 cv
113.934 15.3184 113.513 14.9614 112.895 14.9614 cv
cp
113.968 20.1885 mo
112.68 17.6387 li
111.52 17.6387 li
111.52 20.1885 li
110.592 20.1885 li
110.592 14.1372 li
112.963 14.1372 li
114.123 14.1372 114.861 14.8765 114.861 15.9048 cv
114.861 16.772 114.329 17.3242 113.642 17.5112 cv
115.051 20.1885 li
113.968 20.1885 li
cp
f
119.934 20.1885 mo
119.934 19.2622 li
120.896 19.2622 li
120.896 20.1885 li
119.934 20.1885 li
cp
120.899 18.3867 mo
119.93 18.3867 li
119.882 14.1372 li
120.947 14.1372 li
120.899 18.3867 li
cp
f
126.066 20.1885 mo
123.24 15.9302 li
123.24 20.1885 li
122.313 20.1885 li
122.313 14.1372 li
123.163 14.1372 li
125.989 18.3867 li
125.989 14.1372 li
126.917 14.1372 li
126.917 20.1885 li
126.066 20.1885 li
cp
f
129.296 14.9614 mo
129.296 16.8057 li
131.839 16.8057 li
131.839 17.6304 li
129.296 17.6304 li
129.296 20.1885 li
128.368 20.1885 li
128.368 14.1372 li
132.277 14.1372 li
132.277 14.9614 li
129.296 14.9614 li
cp
f
136.162 15.2847 mo
135.947 15.0552 135.612 14.9106 135.251 14.9106 cv
134.891 14.9106 134.556 15.0552 134.341 15.2847 cv
134.04 15.6074 133.979 15.9473 133.979 17.1626 cv
133.979 18.3779 134.04 18.7183 134.341 19.041 cv
134.556 19.2705 134.891 19.415 135.251 19.415 cv
135.612 19.415 135.947 19.2705 136.162 19.041 cv
136.463 18.7183 136.522 18.3779 136.522 17.1626 cv
136.522 15.9473 136.463 15.6074 136.162 15.2847 cv
cp
136.866 19.5938 mo
136.445 20.0098 135.904 20.2393 135.251 20.2393 cv
134.599 20.2393 134.065 20.0098 133.645 19.5938 cv
133.044 18.9985 133.052 18.3271 133.052 17.1626 cv
133.052 15.9985 133.044 15.3271 133.645 14.7319 cv
134.065 14.3154 134.599 14.0859 135.251 14.0859 cv
135.904 14.0859 136.445 14.3154 136.866 14.7319 cv
137.468 15.3271 137.45 15.9985 137.45 17.1626 cv
137.45 18.3271 137.468 18.9985 136.866 19.5938 cv
cp
f
141.016 14.9614 mo
139.641 14.9614 li
139.641 16.8569 li
141.016 16.8569 li
141.634 16.8569 142.055 16.5083 142.055 15.9136 cv
142.055 15.3184 141.634 14.9614 141.016 14.9614 cv
cp
142.089 20.1885 mo
140.801 17.6387 li
139.641 17.6387 li
139.641 20.1885 li
138.713 20.1885 li
138.713 14.1372 li
141.084 14.1372 li
142.244 14.1372 142.982 14.8765 142.982 15.9048 cv
142.982 16.772 142.45 17.3242 141.763 17.5112 cv
143.172 20.1885 li
142.089 20.1885 li
cp
f
148.7 20.1885 mo
148.7 16.1431 li
147.292 19.0923 li
146.604 19.0923 li
145.161 16.1431 li
145.161 20.1885 li
144.233 20.1885 li
144.233 14.1372 li
145.161 14.1372 li
146.948 17.9023 li
148.7 14.1372 li
149.629 14.1372 li
149.629 20.1885 li
148.7 20.1885 li
cp
f
153.168 15.5054 mo
152.215 18.1914 li
154.096 18.1914 li
153.168 15.5054 li
cp
154.774 20.1885 mo
154.354 18.9731 li
151.939 18.9731 li
151.519 20.1885 li
150.53 20.1885 li
152.772 14.1372 li
153.521 14.1372 li
155.763 20.1885 li
154.774 20.1885 li
cp
f
158.192 14.9614 mo
158.192 20.1885 li
157.265 20.1885 li
157.265 14.9614 li
155.581 14.9614 li
155.581 14.1372 li
159.876 14.1372 li
159.876 14.9614 li
158.192 14.9614 li
cp
f
160.876 20.1885 mo
160.876 14.1372 li
161.804 14.1372 li
161.804 20.1885 li
160.876 20.1885 li
cp
f
166.921 20.1885 mo
165.203 17.2051 li
164.172 18.4292 li
164.172 20.1885 li
163.244 20.1885 li
163.244 14.1372 li
164.172 14.1372 li
164.172 17.1797 li
166.672 14.1372 li
167.806 14.1372 li
165.821 16.5083 li
168.012 20.1885 li
166.921 20.1885 li
cp
f
100.607 36.3579 mo
100.607 37.9414 li
102.789 37.9414 li
102.789 38.6484 li
100.607 38.6484 li
100.607 40.8438 li
99.8115 40.8438 li
99.8115 35.6504 li
103.165 35.6504 li
103.165 36.3579 li
100.607 36.3579 li
cp
f
105.864 39.21 mo
104.987 39.21 li
104.546 39.21 104.317 39.4063 104.317 39.7422 cv
104.317 40.0781 104.531 40.2676 105.003 40.2676 cv
105.29 40.2676 105.504 40.2461 105.702 40.0557 cv
105.813 39.9473 105.864 39.7715 105.864 39.5088 cv
105.864 39.21 li
cp
105.88 40.8438 mo
105.88 40.5078 li
105.606 40.7783 105.349 40.8877 104.885 40.8877 cv
104.42 40.8877 104.11 40.7783 103.882 40.5518 cv
103.69 40.3555 103.588 40.0703 103.588 39.7568 cv
103.588 39.1367 104.022 38.6914 104.877 38.6914 cv
105.864 38.6914 li
105.864 38.4297 li
105.864 37.9629 105.629 37.7363 105.047 37.7363 cv
104.634 37.7363 104.435 37.832 104.229 38.0938 cv
103.734 37.6348 li
104.089 37.2261 104.457 37.1021 105.076 37.1021 cv
106.101 37.1021 106.616 37.5322 106.616 38.3711 cv
106.616 40.8438 li
105.88 40.8438 li
cp
f
109.225 40.8877 mo
108.384 40.8877 107.559 40.377 107.559 38.9912 cv
107.559 37.6055 108.384 37.1021 109.225 37.1021 cv
109.74 37.1021 110.102 37.248 110.455 37.6201 cv
109.939 38.1152 li
109.703 37.8613 109.52 37.7656 109.225 37.7656 cv
108.937 37.7656 108.693 37.8828 108.531 38.0938 cv
108.369 38.2988 108.311 38.5605 108.311 38.9912 cv
108.311 39.4219 108.369 39.6914 108.531 39.8955 cv
108.693 40.1074 108.937 40.2236 109.225 40.2236 cv
109.52 40.2236 109.703 40.1289 109.939 39.873 cv
110.455 40.3623 li
110.102 40.7344 109.74 40.8877 109.225 40.8877 cv
cp
f
113.582 40.8438 mo
113.582 40.4717 li
113.323 40.749 112.963 40.8877 112.587 40.8877 cv
112.203 40.8877 111.887 40.7637 111.665 40.5518 cv
111.378 40.2744 111.29 39.9248 111.29 39.5088 cv
111.29 37.146 li
112.041 37.146 li
112.041 39.3994 li
112.041 39.9756 112.373 40.2236 112.793 40.2236 cv
113.213 40.2236 113.567 39.9688 113.567 39.3994 cv
113.567 37.146 li
114.318 37.146 li
114.318 40.8438 li
113.582 40.8438 li
cp
f
116.48 40.8438 mo
115.766 40.8438 115.456 40.3701 115.456 39.8223 cv
115.456 35.6504 li
116.207 35.6504 li
116.207 39.7793 li
116.207 40.0635 116.311 40.209 116.613 40.209 cv
116.944 40.209 li
116.944 40.8438 li
116.48 40.8438 li
cp
f
118.822 40.8438 mo
118.122 40.8438 117.798 40.3477 117.798 39.8154 cv
117.798 37.7803 li
117.37 37.7803 li
117.37 37.2114 li
117.798 37.2114 li
117.798 36.0884 li
118.55 36.0884 li
118.55 37.2114 li
119.271 37.2114 li
119.271 37.7803 li
118.55 37.7803 li
118.55 39.7793 li
118.55 40.0488 118.682 40.209 118.962 40.209 cv
119.271 40.209 li
119.271 40.8438 li
118.822 40.8438 li
cp
f
121.591 41.5801 mo
121.518 41.7842 121.429 41.9307 121.318 42.04 cv
121.112 42.2441 120.839 42.3096 120.552 42.3096 cv
120.25 42.3096 li
120.25 41.6387 li
120.441 41.6387 li
120.758 41.6387 120.869 41.5439 120.979 41.2451 cv
121.186 40.6689 li
119.881 37.146 li
120.677 37.146 li
121.569 39.75 li
122.438 37.146 li
123.242 37.146 li
121.591 41.5801 li
cp
f
127.232 37.9775 mo
127.092 37.8389 126.9 37.7656 126.68 37.7656 cv
126.458 37.7656 126.273 37.8389 126.134 37.9775 cv
125.905 38.2031 125.876 38.5898 125.876 38.9912 cv
125.876 39.3926 125.905 39.7793 126.134 40.0049 cv
126.273 40.1436 126.458 40.2236 126.68 40.2236 cv
126.9 40.2236 127.092 40.1436 127.232 40.0049 cv
127.461 39.7793 127.49 39.3926 127.49 38.9912 cv
127.49 38.5898 127.461 38.2031 127.232 37.9775 cv
cp
127.8 40.4502 mo
127.557 40.6982 127.188 40.8877 126.68 40.8877 cv
126.171 40.8877 125.81 40.6982 125.566 40.4502 cv
125.213 40.085 125.124 39.6182 125.124 38.9912 cv
125.124 38.3711 125.213 37.9043 125.566 37.5391 cv
125.81 37.2915 126.171 37.1021 126.68 37.1021 cv
127.188 37.1021 127.557 37.2915 127.8 37.5391 cv
128.153 37.9043 128.241 38.3711 128.241 38.9912 cv
128.241 39.6182 128.153 40.085 127.8 40.4502 cv
cp
f
130.094 37.7803 mo
130.094 40.8438 li
129.342 40.8438 li
129.342 37.7803 li
128.914 37.7803 li
128.914 37.2114 li
129.342 37.2114 li
129.342 36.6426 li
129.342 36.1104 129.666 35.6143 130.366 35.6143 cv
130.838 35.6143 li
130.838 36.2485 li
130.506 36.2485 li
130.227 36.2485 130.094 36.4092 130.094 36.6792 cv
130.094 37.2114 li
130.838 37.2114 li
130.838 37.7803 li
130.094 37.7803 li
cp
f
133.162 40.8438 mo
133.162 35.6504 li
133.958 35.6504 li
133.958 40.8438 li
133.162 40.8438 li
cp
f
137.45 40.8438 mo
137.45 38.5898 li
137.45 38.0137 137.119 37.7656 136.698 37.7656 cv
136.278 37.7656 135.925 38.0215 135.925 38.5898 cv
135.925 40.8438 li
135.173 40.8438 li
135.173 37.146 li
135.91 37.146 li
135.91 37.5176 li
136.168 37.2407 136.529 37.1021 136.905 37.1021 cv
137.288 37.1021 137.605 37.2261 137.826 37.4375 cv
138.114 37.7148 138.202 38.0645 138.202 38.4805 cv
138.202 40.8438 li
137.45 40.8438 li
cp
f
140.164 37.7803 mo
140.164 40.8438 li
139.412 40.8438 li
139.412 37.7803 li
138.984 37.7803 li
138.984 37.2114 li
139.412 37.2114 li
139.412 36.6426 li
139.412 36.1104 139.736 35.6143 140.437 35.6143 cv
140.908 35.6143 li
140.908 36.2485 li
140.576 36.2485 li
140.297 36.2485 140.164 36.4092 140.164 36.6792 cv
140.164 37.2114 li
140.908 37.2114 li
140.908 37.7803 li
140.164 37.7803 li
cp
f
143.627 37.9775 mo
143.486 37.8389 143.295 37.7656 143.074 37.7656 cv
142.853 37.7656 142.668 37.8389 142.528 37.9775 cv
142.3 38.2031 142.271 38.5898 142.271 38.9912 cv
142.271 39.3926 142.3 39.7793 142.528 40.0049 cv
142.668 40.1436 142.853 40.2236 143.074 40.2236 cv
143.295 40.2236 143.486 40.1436 143.627 40.0049 cv
143.855 39.7793 143.885 39.3926 143.885 38.9912 cv
143.885 38.5898 143.855 38.2031 143.627 37.9775 cv
cp
144.194 40.4502 mo
143.951 40.6982 143.582 40.8877 143.074 40.8877 cv
142.565 40.8877 142.204 40.6982 141.961 40.4502 cv
141.607 40.085 141.519 39.6182 141.519 38.9912 cv
141.519 38.3711 141.607 37.9043 141.961 37.5391 cv
142.204 37.2915 142.565 37.1021 143.074 37.1021 cv
143.582 37.1021 143.951 37.2915 144.194 37.5391 cv
144.548 37.9043 144.636 38.3711 144.636 38.9912 cv
144.636 39.6182 144.548 40.085 144.194 40.4502 cv
cp
f
147.678 38.0137 mo
147.508 37.8457 147.375 37.7656 147.117 37.7656 cv
146.712 37.7656 146.373 38.0869 146.373 38.5977 cv
146.373 40.8438 li
145.621 40.8438 li
145.621 37.146 li
146.358 37.146 li
146.358 37.5469 li
146.55 37.2842 146.934 37.1021 147.354 37.1021 cv
147.715 37.1021 147.987 37.1968 148.245 37.4521 cv
147.678 38.0137 li
cp
f
153.501 40.8438 mo
153.501 38.5898 li
153.501 38.0137 153.17 37.7656 152.749 37.7656 cv
152.344 37.7656 151.976 38.0215 151.976 38.5537 cv
151.976 40.8438 li
151.224 40.8438 li
151.224 38.5898 li
151.224 38.0137 150.893 37.7656 150.472 37.7656 cv
150.052 37.7656 149.698 38.0215 149.698 38.5898 cv
149.698 40.8438 li
148.946 40.8438 li
148.946 37.146 li
149.684 37.146 li
149.684 37.5176 li
149.935 37.248 150.303 37.1021 150.679 37.1021 cv
151.143 37.1021 151.504 37.2842 151.74 37.6416 cv
152.042 37.2773 152.418 37.1021 152.912 37.1021 cv
153.295 37.1021 153.634 37.2261 153.855 37.4375 cv
154.143 37.7148 154.253 38.0645 154.253 38.4805 cv
154.253 40.8438 li
153.501 40.8438 li
cp
f
157.384 39.21 mo
156.506 39.21 li
156.064 39.21 155.836 39.4063 155.836 39.7422 cv
155.836 40.0781 156.05 40.2676 156.521 40.2676 cv
156.809 40.2676 157.022 40.2461 157.221 40.0557 cv
157.332 39.9473 157.384 39.7715 157.384 39.5088 cv
157.384 39.21 li
cp
157.398 40.8438 mo
157.398 40.5078 li
157.125 40.7783 156.867 40.8877 156.403 40.8877 cv
155.938 40.8877 155.629 40.7783 155.4 40.5518 cv
155.209 40.3555 155.106 40.0703 155.106 39.7568 cv
155.106 39.1367 155.541 38.6914 156.396 38.6914 cv
157.384 38.6914 li
157.384 38.4297 li
157.384 37.9629 157.147 37.7363 156.565 37.7363 cv
156.152 37.7363 155.953 37.832 155.747 38.0938 cv
155.253 37.6348 li
155.607 37.2261 155.976 37.1021 156.595 37.1021 cv
157.619 37.1021 158.135 37.5322 158.135 38.3711 cv
158.135 40.8438 li
157.398 40.8438 li
cp
f
160.361 40.8438 mo
159.661 40.8438 159.337 40.3477 159.337 39.8154 cv
159.337 37.7803 li
158.909 37.7803 li
158.909 37.2114 li
159.337 37.2114 li
159.337 36.0884 li
160.089 36.0884 li
160.089 37.2114 li
160.811 37.2114 li
160.811 37.7803 li
160.089 37.7803 li
160.089 39.7793 li
160.089 40.0488 160.221 40.209 160.501 40.209 cv
160.811 40.209 li
160.811 40.8438 li
160.361 40.8438 li
cp
f
161.695 40.8438 mo
161.695 37.146 li
162.447 37.146 li
162.447 40.8438 li
161.695 40.8438 li
cp
161.674 36.4165 mo
161.674 35.6289 li
162.47 35.6289 li
162.47 36.4165 li
161.674 36.4165 li
cp
f
165.063 40.8877 mo
164.222 40.8877 163.396 40.377 163.396 38.9912 cv
163.396 37.6055 164.222 37.1021 165.063 37.1021 cv
165.578 37.1021 165.939 37.248 166.293 37.6201 cv
165.777 38.1152 li
165.541 37.8613 165.357 37.7656 165.063 37.7656 cv
164.774 37.7656 164.531 37.8828 164.369 38.0938 cv
164.207 38.2988 164.148 38.5605 164.148 38.9912 cv
164.148 39.4219 164.207 39.6914 164.369 39.8955 cv
164.531 40.1074 164.774 40.2236 165.063 40.2236 cv
165.357 40.2236 165.541 40.1289 165.777 39.873 cv
166.293 40.3623 li
165.939 40.7344 165.578 40.8877 165.063 40.8877 cv
cp
f
168.509 40.8877 mo
167.897 40.8877 167.381 40.7852 166.938 40.3555 cv
167.433 39.8662 li
167.735 40.1729 168.141 40.2529 168.509 40.2529 cv
168.966 40.2529 169.327 40.0928 169.327 39.7422 cv
169.327 39.4941 169.187 39.334 168.825 39.3047 cv
168.229 39.2539 li
167.528 39.1953 167.123 38.8818 167.123 38.2324 cv
167.123 37.5107 167.75 37.1021 168.531 37.1021 cv
169.091 37.1021 169.57 37.2188 169.916 37.5176 cv
169.444 37.9922 li
169.209 37.7949 168.877 37.7227 168.523 37.7227 cv
168.074 37.7227 167.846 37.9189 167.846 38.1963 cv
167.846 38.415 167.964 38.582 168.361 38.6191 cv
168.951 38.6699 li
169.651 38.7285 170.063 39.0566 170.063 39.7129 cv
170.063 40.4863 169.4 40.8877 168.509 40.8877 cv
cp
f
19.2354 33.2925 mo
17.7725 33.2925 li
17.7725 40.7813 li
19.2354 40.7813 li
19.2354 33.2925 li
cp
0 0 0 0 cmyk
ef
29.9072 40.7813 mo
29.9072 39.4775 li
26.4365 39.4775 li
26.4365 37.6563 li
29.3916 37.6563 li
29.3916 36.354 li
26.4365 36.354 li
26.4365 34.5972 li
29.9072 34.5972 li
29.9072 33.2925 li
24.9746 33.2925 li
24.9746 40.7813 li
29.9072 40.7813 li
cp
ef
40.9229 40.7813 mo
40.9229 33.2925 li
39.4609 33.2925 li
39.4609 37.8779 li
36.4951 33.2925 li
35.1904 33.2925 li
35.1904 40.7813 li
36.6523 40.7813 li
36.6523 36.186 li
39.6182 40.7813 li
40.9229 40.7813 li
cp
ef
12.9463 33.2925 mo
11.4219 33.2925 li
10.2539 38.0156 li
8.88672 33.2925 li
7.79297 33.2925 li
6.4248 38.0156 li
5.26758 33.2925 li
3.74219 33.2925 li
5.74023 40.7813 li
6.96191 40.7813 li
8.33984 36.2358 li
9.71777 40.7813 li
10.9375 40.7813 li
12.9463 33.2925 li
cp
ef
22.9111 4.4165 mo
27.8076 4.4165 li
27.7998 17.7393 li
27.7998 19.6875 29.1533 21.4375 30.9707 21.8989 cv
30.9707 26.8149 li
26.4414 26.3428 22.9111 22.5127 22.9111 17.8584 cv
22.9111 4.4165 li
cp
ef
9.61426 10.5825 mo
14.4443 10.5825 li
14.4443 26.6357 li
9.61426 26.6357 li
9.61426 10.5825 li
cp
ef
3.5 4.4165 mo
20.3965 4.4165 li
20.3965 9.24707 li
3.5 9.24707 li
3.5 4.4165 li
cp
ef
32.8633 21.8989 mo
34.6826 21.4375 36.0381 19.6875 36.0381 17.7393 cv
35.9951 4.4165 li
40.9229 4.4165 li
40.9229 17.8086 li
40.9287 22.4639 37.3926 26.3359 32.8633 26.814 cv
32.8633 21.8989 li
cp
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 13.0
%%AI8_CreatorVersion: 13.0.2
%%For: (gilani) ()
%%Title: (tu_ffi_typo_grau.eps)
%%CreationDate: 12/22/09 5:02 PM
%AI9_DataStream
%Gb"-6l#uVYdP,ubJ9uelKGcn&D+I!\+b>S_Sf&3Y(^#-Zdm)]i3S3d!3re%U4!f08N@+e@])/S8p3O$L/6A*/V,C;b-2ILnl#P2m
%9Kij5Iq62`hTH:5L).EYPP"YK[D@!(DQ"/F=H8,NEJbEm:_sJeBb!=7is_:6i2b;5ZQ/]dMbA'Dl-8D1l"DQl1Z%,`f#2pdqLgdZ
%mpg8mRf;\+N*;dGa.GRf]iPE5?=bUH>75@1:8'G3GqU]RU[Iquh!U#LRn]Vdp)QN5SHC9jMLJ4;-^2hhg$N&Hb[1$S%'SjX"ojU4
%2g^GdZiUN,J]?^&A"BD+9'-))c^1d0]Ea+G_qsH3,f.4ZNG#$;U5,.%ZYVbc'tALO:=Atd\Mgeuf8MFH(T1.[`Z(]%6C_IdcC7GS
%nT6P*H<Hhro/nBZ9&j+DY<hXG%'Z`fQn5-+0<)XOK9!mK]XVVbrWu:8!0A>!"`Gl]MDIBS4aMUk*;.8)a^?8L21LdT!1Zcq]huem
%W)+t=(1IN&s.d!:;MCU+pt8k:s%c/.`F(_-I$FO93i(1"dh=SA(UMuZApT6sN[7Uq01Rhg2!0gbVUMW5VYIM7aV>rV]R3>jLAshQ
%&J,(3J^$PH>sckCLkF$i,SNhIPMR.GNjB_C8f_+N#@4H=H,_@*IrI4'!q@qGr0->uVCr^uM+g,>>4G:=6W*B[-K$LP]#EnNoa/^%
%^X*',5\*@5:[+GH)o$sMQSYT]q"al9$FQQ0!N,$"^Cf<U7n\),'rT7.aeV/o"S:G`]B?kD/\YU@oHrC>a=EV=-_I0jT_#R]^jq8)
%/a'7T5KD7@EWe6<K>2^e?%mN=0FQRn\.Oi_I<mR#hn@;:TkVhVbB\"mr/<M"K14*(<jRFg-[H0[ErP16R8-7%g!*[gT7b^.2OM^8
%,6QWqGP=7?ps7gfo03^*aG'tKJmSQrr!<>CrR78.8%m3p"cnPCd:i"u[Urm!NZ$r$m=!<FI&0/:IIFlVQ^D3FMhr]^X4YaaF/WK,
%G<)'ErX1E3!jfmIJ8+&Y'NanP\31iAk$q-,M%]'^Xo'>'qZDp[d>Q&O$3sF`e/?Jg]u<2P+R(T9_HZC0[gJeXlbfXS(m.F+0+?$b
%7P!ar/bai?iOo=gLo:H=i^0k=X[u1Xic529$/^(b!P)qS(PBK8j44M%1Sc*Y,!l%)n5JeKYt:K+MqKWH[6I2TDp[j`pbN!#,>k(,
%s.8-RD[)XdR0%5^o@CG7NHu5^!>lM6jXoT-n4<.)'o0nNkYW[;b5:Z5*_t\72\c5X9mY-uc``SB$`+Bc\DBU)PJF<n*dG=(kSs<3
%!VpeXd@,/]@e\C^#oN]M7kkG;Y,S*HW57g$IVR)HjR=Jf-)_MO`+@\5AXt!-k+3<WmBQh$:iR7E((/e7EB9L_KDdLr"DNbYGZeJA
%V>b`(e.>^4nNL&;U:b..mh,QLO8+rEKuR@ohZFjsJc=6ZR3pmo!`:FP(=]33/R1fG)M@iPf:+:l`AN)h^GI7MOu*RKo7+m$!6@uM
%!F-sPZ"-M07Ea_@:FOO3AE[aS60;]Nr.CVocY%mL!\@C!ZHN72J,dh7$lUCf@)7$%@Vm_cA@;Vl'&'BQ_Ub#S[c0R"J^Flec&3i/
%"JWSe#41crFg![n#%t&U=/nW5'*V4nhVbn$+%eu/;Db"?(P\Y"W*lT\K0E(]hXLe9n].K3P[)Y)N^Tl-!"f[">"lW]/N!9Sd;D2X
%/G%.j1MFRO0O@(]#"V8*=>;d7UEqPH;s8(:#FY)dW_a4Oq^NhfbJe-Kl$;G"EB<I2m43BMK,FYX>2UK/&\;j@EVO!tpah#?Sc/eV
%3U6OQ3PQ5Q;/AfgJIg#^W7G-;mkpu5ed1rs*5@iT26VoQqalXG8\VoQ[7<B5<<i#5ei3n[0blJ=mN:K:"CB-A-/tT2>U[6.OT2@I
%C]Q^sX7HL<LY.gPKotIcH&MYQrleo($gpgQmsha`q#LmTAOMY\s([OZ8mPC[\#;5_#FJ3,>kdktarQk;HS--kRY'YYFi,)nk*?/A
%\*[o@E8ZIod5DOGd&E3-FD`1'HV<20+X^r-::P'=!%AU@K(%?ms%NSYo9\d:NiN)J,oSYE".nRqr9r0Hs#N0aJ<'p+0s[?XLq+8@
%J,-SS>5j.Fq>\;[SbN0`&"\d\c,3pQ)Kbu5FYTFZ`d(Tm(!"4lX^AcXkEh[cV:PS=.UecedAXebh8P_M2TZ^6]hMC*ZQ'nVa%_3c
%r4<m]'<%/Re<GHm;CVY6VPnC2<AW@X"kWm9?@O+M'"M`,l8S_Do0-3"c08-mo^I1m^O>*sl07)"_RR'gFhnRAP`GBjFR424Y`g$j
%+t@*IP#;BB\j2./,=8ZMHC`#SoX7u!etfVj*AS)k/:.=uXOa2\$=`I35"/,phDSQB!c""bLf0H=$7_V>k$Mk.$4!08g01[3pu)@g
%>9Lr_.E1@F<L2&6^K<+#:r+286\Mrb@V[`k[@k](IfSo0l^b*(1+ni$;jQAr0+I;R\ukfXp(XKFX=GbAI#:KNJoseB+Mb636%EHN
%PlP">&XQ)umKNg1>ODt:XnH-Z=Su$C9bFn#J8(c9q-:?lHeus19^0+je8_%Yf^3f-D+?(#DrQ/Ud(S!<7JX6G3ZH9(N@L8O8HQ&(
%L_c-_@_DLM'h4Aq><5]7Yp;/SSbSebj1mi(rl3?&X>U/EJCK#@oJ@Mfc%gpS)b0!EA;aFR5niEE6ld0E`SH7!6;FFq[&W6<!g]&c
%%nudIeQ?CX.QrNXT!]oYO^d)kP9_7n`Hs=,N1G<bl6o:>"q%-sc/Qj%O=Kp"r#NIE*ae7u7h5!K!XGi_kUF,n&M)q\lM)n$3UrY@
%I*l>p3,$:oHe`J?bjB"_\(0hJni5*C$(U+qAV[IRR5;ZT-^2.V2(sBE5,6V6mbfZ<c5fAeoA%"(,Wu(]6,P'"Pti-Lce;ADGF7_S
%Mh@d@V\G0s5$(Q<\rVB&03.ofri*IWID6P\:U+S^4Di=6-dBV3,g5R-/#D=`IGoMe\G,bkIHn1V$>bc!p\DG%kEl*@0n*bpPcU3s
%boI9EYIVk>5)tl%radBXmIi\lbcJt-qo,kjJ%b"QUYP&Vdk?)#MI68pX^fDlI]5[nIWC4aJU7\5O?>21ID/G7fD\S1UjM)O`.[Tm
%Ho&2mO_AuQFdF/!qE#PYPWPkF@.>cCIW1\KZhom%H1W>E.gBlA`SNA?]fY'K3p:Zh6hG.*.JFcg&n[S)[!6SppQ6?+STYAcs)B/.
%7UDDV7W\S7d3$LOS:7^a5Bh)@R`eJfJT9c7lla-*?]G=QT:#B+]\#6<,Jsql6L9q3kBF^"51&?Y=fRr/'GE(^?i'+;(lS(p,Q;^7
%[G\=KcP94cGON`&FD;<aEq7HAB)1HY/TQ*fIEjP6h,b"C47P[jZ<VVjFicF`cWs6VT<a/ZLl9BLH.Qn0o]tpJ.FC33YP9;;,/V3j
%(N1,tY2\tMm@BFdrZ0*]%cq&QpZ8tc]bi>N8ALT_joe*HJVn!EjX=%gr]HA&g`IOXFMH/ZE)3J:"2'OY9#^pt$E#?SY8RF`nE:cj
%l6UFQb#^")@oeqBoA_+j`-lk#2l5t6WLp-hPZt9*?@cnL?DT=R&%D@m@c=WBD[q5:5HgJNO2$d(]Qoj2q8@EJb3sH5Y)n%P?W9YT
%p[?);2jZMfO8Y]9@R!Ng"1'(3J)-Z1pk7eU\=UHKK^4n$W*>U5UG,l7IH^XK/:J<o^2*[<%E`]X.sGs=fZE$@/s`P41N8Z<K@1>B
%U/(g?KTU=Q>^62.Vlp&`q)CJh;3dIfMacRnj02D_km0d(Kk^D.fN3CEOr^TFKHrRu?h5T+'"!ARdqPSGIm9d7`#M6Y#9T4=^E1^"
%LGr"&B^b=b,"0`eDL%f@<J(+S;"9IU*gS%1GX[fq(]]UqUg]_R/s=R$%'&h]1i50Nr;8%jq1Hu[Fe4(lmYuX6=W?2]@..(<Z"Q49
%eg9QhY?pkro/C=<#\]TA\l<?*%aCrk22QY08%oLdVT_k120lV[3K)'Qk]1cA.A`W'8@J@,oD#_:6*!'F9"C2G$XE&X%P+&/?+Z#(
%Unu#M/6qsVFN9*_jDLF$q0LZq&G:hd?ri:_c^Dq)N.9,[pV-e!g$=*<M_r-nD&Fhr"#UReSUO.6Y^H1A;cG_!W5%2nQ/(QM"&eV1
%V0;Fq5(Dnebk:Z&o@GqI,N3t`42`%3Rg9"Pp3q<[*>XCGfq<@fV1XG=J%?-!8=mV%67?W<C+mcHURumMVD5^e8IdBJ:EZjm>^7uM
%6k2uSIF-W;h,Jr3Nh5jeO40j$2P'lh*S-*fW:Fp5>+i--TV%P=q<%5pWP-996'"=J3%&l)qbh?pj"l"$G^NAYn9hpW9:ZQ2O/[GE
%<e3Kk!`c/1H0Y%l-nYC\?A+?BiE&ZtJUX:/J-CFT92??7!/LOV&Aa,QnW!03[rTV9_P2V#=JX9iMbs7Jr^2/OE>=Go];3)pDe(>h
%O*/5JYB5F[B?@X!2hZWb<Z6gn+[C/X(lQsGV31t$fIa4%VU6tQ%6"n_L'gZNgS__@Kt[%]KjtsbN#OP\K2jm\]!s_a5!0iLk=IWM
%G)3b,\-$U!fRhMC4pB44M[ZL`+<+##b%,Xs2cNOC]MjMMhq`s9a;gDSo8m1W6W^kjak'?W:/@S5qedjHW?M)N_JP,hOH%8$s&,nL
%qF0dhXXtLb4pH]_'h6qd0b+SJ$*$[[@coK^``H0E?pZOVccQNG([?7m.)U)"!gC0rB-ibU^p9`Bq;Os>Lfo7AQ.RUr79'm9TBX_P
%`kHo3&d"eVL+$k[`MPOu0c%*a,[5Cb2(LIR4ODgGPs1H#r7&a#.[R;nO$TWt7h@2-b.'#WAedlqUX;YJ2(U3nYnk\CXeGeP/==V<
%QpP/okUjqrroU@IWT4,o)fQqr$onipo+RLC59#lKZc>bY(QNuB]llkA9Sh>m`t&AOBpcNi^&9JlhVN>8cL>IRRNVtf-+17ip6%s^
%-?=%l-&#!aZ-]ad;-oiI?F6\1kJU60\[t*\?2Rl45F(O,T*!]=_L!qc4Xj[tRVuXSI'#,?`"Km=8`lN]]cY6X.T>`JoJWrfH3W:#
%DH?0nD\<4+b/=R0PV0=-9>,;T7[S!NVouHe(6;f\mTtPSU915.!Zj"8RF@qRZu6-M!'DOcZe.*SG5[RoFN)$!83LZ.&(peqq`O1k
%4NLE(fB6;kirRmI2,<_\FY<@A:ih#;;-^3EI;nKob%B8CB`VGYH9THDo^3'pqR5js(u,iOA,cUc"afEiP?*#2c_=b(!e;EC/mRM0
%_hBW@lN1;De7k31:&%,f3*>OR>WlCSq;tlc[`Qb>:MM#oGGE/Pro1?riXVa48;`\9,4RJ4EFEti<!sr=o@`&$W"ppMB^_Zp*Vt+:
%]WM`AXJ>s5U5S;QVk$RQ%[-"$YRLutk:hFKk*r,N"MXj4nbD@op$i3L]Ci"3#P]Y$"(i"+%^?0!Bt.CFHLYQsjS*kppKut-gj$Ld
%4H"`6F4j@3D*cCi+FiFR0P$2kg+-1YWD%LuU/3e>l<J81:cU)A`78;9=5I9$]9Vqtq8)jT@mQ9Yk[*9%itqJcj0WcJRCcurO5k;L
%d,h#eIs'V\6S?%Bir5F4KjhPgn\\r8P%r5#U[%cO-e`)(ps!brN`ct88kp)8DE[u0k3W'a,<2?V%mH*(=JYfXiX#Y_@TKEBP03nq
%7rRQS>ou2DjjOJ-R/5ehq%Fk2iGCTD'6d2eQ#J.?o_:^Xh1OGrm7q&4\uo#h6bY5'<]50SI[fEdY9Nk3Y=N^7dpMqjb;l8e=5kF3
%=QrcnIi.68)Z)e*YFLkmWoI.cXS1XcoJ0[#?_.:@UDIP'ea^gtYtT$4RZ1X*&2\^L_jpFYKDC$Jojc<UFHq?5(`jP8FV-_Y^g?hE
%k#Or)937&E&[%:j"lFSOoQ[pff,s7[U6CZ'kM9$[S;o)Y(Yf&cs-P8NCV(3D@oH_m0#\X&.I-m\Q0E_`pLHJ</e`q9r0dhoc&$%U
%ABo+IfCJg.ru"<t5(0u6_HTj-Z+a2J"0Kc6q104D'/\m"QJ77oJ_l-t)Z(D-"Q]BinHf8>2J[%`\&Y]&j:BpaYP`RkIL"Wg!%FFe
%W8*5+0DT-4I0BuI?BAt()*PU$4$:750:e%,c\9m)6Tfi5^AQ2^haAqoJ+]'[%-apN%2B_FP,TX"-qB-Ba`A\cN/_UX$+0;4du8P1
%Aq.!eH/IG-/G4R$KorSU/Y*)56-Zp%m>+R<&B;n$T&)KkmkqjNqaa2FKLtf^?B0]L4up<M^7)_OhK!geMhR&!!F>WfitdWsFWkl@
%O(g7dmg"6ia`I,O#,0>G3:M:gh="t\JZCR\l([uGl*2!^CRVD4.WY#>I=BSDa>:-)dTr5)mi5RLi#MCG6:2`abFF&'%*Hu^'+LBb
%7H^/>b%l.4#R=2>Db7k1AI)KV]5s?4cFtRij-Y1l(=.n_a/WDm99HS0,5RnID#Uu":<reLetFW,<#jP;5JsNOH4*dAK/eh93l`7@
%IVOY7;'VnT_/_KKmJ9HRk/Xhgf\&oK?mdVuPO-E@UcT6QaB_J$Zh.BbJb!2%1?EiMTJ.TBDjdoK?quZWQUiLeo)*:t][T`,,g&or
%`P-nql#/:q"7uNH@t+8s&N5FPbkk"[(Dj_t_uilW-\MJ2O#Y]a5gmPtq'OFcYHcdU?KtnBl]S!(Bs"(3XI+M9X;#`Jf<r::qBV\.
%%.f3GEg;%I4*Pmid]+:Q('HLfM0F/aRJYiR:7-n,7(AH!;J&7(gfkmiQX>KU>..Bco/&cFPf)eMC`LRfeQVD(l/5G+-DZj;j740Y
%s0"[K^@u\mrL5)643O0I9C_=c/=/Bs*YQIQr41d0.[-U>U8&4MT01RNN+)-!=%30m@$LHO]mV<1Q;)Oj*OUf:WV/6BQ_Nk>q(T2=
%^BIbfr$dRXZDgiL\_;T@D"psH*md4"E_/J4C,ZGU^YFY'lr!^90`k/5Y9-bo`E1BB]5NU*Ik&H4"?$^qk%=rO)*LrVrF:"npq6/G
%\pFcdOGQujHh\XY9PX?&Wb22m0JV"G'\_s04j@!2#F44=pDu>]01\SqP^8+'aAl>3N&m+2#=CgM4LbWcW;;Ln$XI/Vbs!32%^WKI
%E\&\P&H(f?#S>KJqSZr`PN@0A<kgtYJi7)S<A9hZ($5^2b\U&.WAGs`:20itA+>WeZN>EdGufJ[GeD6roDKDPO0AWAlN.7j]tXmu
%#hB[^R5p20chX'"I@mR&C+&]r^J=:KQp.p.6$tK1;p97C$A@\s.X)rQ<%1n<r@!r+;e4<rOsj<PF!J==M62]WdHQkWZTY&uX%)3Y
%0]I/#fThQM7ldqg_2"@J?X.5QrBjG!.2d^sX+dLhBJfT?3q2u;)m*2%#OQQ$3Xh*nZj`(\?K=VY*a7p_7;G.frd*:#PbJsY?,]\[
%/lfKjq#t9]06_TL=-0]La<t$2_KF*WU$t:SlNVNs&,P>bI;muV3P@"TYQ2s6A!c4fnfml_W_IJP?]J@o,/D"'R+]-GeB=H"0Wa^D
%k"=DEo6p%G<!cu)<c)e#Ybo[TK-C.k4>3TsU^8>/InFMA&NAo%GSPNmrlM^kT,?p,%V:i)WDn-b,rj86gaL3-I$X@jFhU*klENtN
%1j2rrDo_I%?=nZqD8$LBR'T"efnqo[oShLER2=S`:L[5;$MWeb<<HHD8fdPj4jg3SVr:O*pd0tS@%lP.k]@K>m:N2Xqok$rmk8Uj
%cLT.e[hj)eq#P+N5kb]>,DTq-Ai'bknen#97'kZOm_%_:=F:?!)%8jW+C6`B9mVNSYhS:-DI;i8rjZ&\IQ_n!OH6f541o%[9(i&>
%Nk,F3r9U*)g+VV!?>m[DjKBa]mk`@`%VY[9+j@Lq=oN`3]%8CiejF<rHIs[s:YF?IF13jPcRSJc;4I[2X9r!*>kTOm>3Zf+@)8/G
%K1'?@B;t/gePrQ3HI;+7\:!:S5'BBUEeSQ>Dq#$d6d5kTmp',EU_:)sE^+T/06_u82u3@!BC^0Nh6b685tS&u7GtQnj7iYR[IB1j
%"&[QJ3RdA=DDLBnm:GD>FnpabGm'5KH3"-6E>QUj8qHI%;lBS)!c\S6YJi!eCS*"nc-V#1]);h4B(]-,,NZBWlj&o%TIhnmg(1m_
%_Y88_<kWb`[o[R60pa!)XcHTf3c(8DDr2a5-(p*_F\`fC1&@dD,i%0!"o!T+Q,*t?s&9IY*Ru(;ik3u*F1IE7_$(I+6gjZRRt*5?
%)qFiR0F,NG]:=+G4%:j_4phLDJ^)BG4FWCbX0^7?GJ%=^/mMAjoC>0+T:SXi+o>d[S#_#RY4?pE+ZZ064F]0QRRXEe;=n&W(D]X`
%[j?D$l=IF;X;?Qf76Q$Zp?;uNJ-$)\5&Di_q?8UH:"@D/3s"NH?ETOH:Q-$EG4)#P!S.o!I41Z_qNNU[IKbJK=X=(.Y>uAj:<G$@
%HD>U[c4&R(TD=u)4A7_%0T1pQpDVUmL='(1=ija-!iW'aX^;Q;EXfU\9j3^@>X"*!9C5@@`Y[_)#<.]g0YeY?HR-^cnVd&@G99&H
%o;pT0g-RNbgp6R_qm%T#Wg2F:TfY?X!gi5kED'1.3GpA)j7r0!hH64ClM&7!kT[bi>WhgK<<#+)Q8j6e8KfC-R[bb'?qe:hUHm((
%$l],M"C_=hpurLi%"H^oOn)X#%<csS)b/q*#noVgmXMP-p-/Fm\e<l$N;!b(LKB]iZ+I"1fkU9@hp_9uW^gkM?3+Js_7mMX0t<Yr
%:[UeBJ-#PZZkKo.STG)BfL`P2=Ub-/AWu+W:f'J:51Q\u)"f^Pc#ujbPA"k-0uf)HXTHquc:[lkE]P+\r]#C>6*-!jSJ17q4k0=(
%?1"OjpO_.m[Fl?km'/GmGI?>^Nb:,>n-Ni!?8INDh)+u6.^o>@VLMC;ZpfAj>/!/uMko%sgU$-TgA)AZj.6Ik89H]L"Ml"g7>ia;
%f*;t7a*#h\QUR!LYr>/]dlt0,WbgM:GJn4-[?(kZ,=K`G6Tc'aR:P2DL6%=!ig`2<]:$[BY*LYVJ%C%qp#>%1K[h`XE,t(C8,D_L
%hk0WY($O#W\G1D#%^38k]Ce?U3CU5[Fa:!D)-H]6'6l1$C8,Fror'=t4K%(aGr)!OMhZf?RUe*$VpE`[Lt^-qHV'A3!+FIUn!2$S
%ia@/b&r1PkWn4p[QSl$!(L!PkWp$NN[)q2o9sfbl-R'1@e3kQ3N^g9r2_!"`-aGuhAd%@N_Pl)PC,5$YpNdjqWfT2A,pgsA[j?V2
%9!/>74*`ZLD'ZO<al45`GL"Rclj;kSOb_j(Od3;>]`d=P!5mcVUQL4F/#PD\d`"a$d$i4*p(csn`e($QDsj16@.e[J.,RK\h&B&'
%F;U#,@?TJjD_OXN.h4UI4`TJ8QN6=ShEm]8@$egId-V:TXjJ+m\>AF$Vk1iSfku<";\Hc<!"K:s4`?_k*VI9rorV;I1S=X7s,G<J
%*)&mKhJ$%@6g2QsQn+jf1NE7?[`2hGhsg;'j5*,XHSR&Ck(?GtF\;k[U#k/$s8JY9(]&\kTRT5WkPtNGUW)/tVbd[&c2[T`Y;=*3
%,Z9qlG&Q$%i$>m&gg+OpqMmP&BsX$s+bB(tK*f!:1cbB&=mmn%\+:YA3hUf,N'Nm/"E?%&B9T=Lm<jHWlT,]2cBck^fFDPuMsl"0
%FLJ9/AtY7g_Jo+S*4I;t_+</TXMZju]HYhoK$WM.+ckNel!BUcf'DNG_Mp]MTL/I)!4UUL8QgUsSouLbHm4sm72:k6?djr:d*a-U
%,4IfDm\!S%WZCHO/Z`)I<e_C7Ll=ABfVnXuQqh?oX,$TS1t>he&ks`/Z?fmEr@G@u+DElBP970Y)8.r7Uos-!d2@eJ];?)#Sai?2
%>*,/[C9t2[K4F[PYeU$*[<eme;*/<[;+X+$ntB>59A8KBP1@sZI/W0&@m)TSg8oY+AChDd2Qk/hR@C.UW>Ar'cJ(..eOu\OeHUSK
%W(kEnPH;+Vau[.hXKsF_m\[ESq.94Cjg)=oZo:'RJ%*@G3XRuB#eY67F[S4R?A+Mg&[iM",U($:JHK1P]a-^A6.-k\Nj*Y]IFpnn
%93Wd''(!POEd0R,U)2`I/%GJlSI?n=;@+#)1Xeph?TI)r8Lfp>89!!"_2Qj=XIX[6)dW#'&<=-Fm\^`P^c-JF>u!SjU"q>p]BaH_
%/WE<'[*tlW.&12)eoe*5-up)F&5Por'B5P"kb@\Oh2,ZpJo]9IPYj*DA2[pE`99f,7gZ$u$$N&'rZu^Q#u8o[&$KDJ;#:".^,!B.
%AO7f9H+hN$9#oaGO#A]08`XS`jR#qm^#J1mGmDBD?H5a8FUGor]'i=Z$Cd<e926g$008`p34=Jec`Wj5[=b,LW!4jD:$2W?n.e;)
%r.SPs,n@(^!6q.g*TatT=A0=/-5P^n`+sBNOZ[Ie=-Zh)&pMcE>(KpRe")7>eZOe3mJrfO!m\BiTP%AWd%,5'IFLL_[_+#:KTG1K
%IcQLudRcGOq&i\GB#JFidh?mqIS&'p1JFg_0#sckS6>QDJ4+mmLj)ALC"Hr^UH8!XHZ%m-c0"Onmk<eh*&BuZUQ*UBZ,QlG-G@aV
%@do]n0i/2+hu]N6D,Y(8GAqY<Kq3sEo</q.&E:cTdon.X4G!=Od/RXYJ'?o`F_<KO5TR5/DbW2jR*I`N9-Lg^gns>G6?d-)KNtXW
%!<A\T\:R$5MSKdGY&FZ[inCNVA841@iEFY9`R`i1N8p@s#)gs]!p$q5;8(72]_<^sd_,(t%%$$b9ST7>j@dQ;C,gqs'!L1scSnZ*
%/NMKfGI*^9,Mf@p\(>OM7l$`:g2nf4on]A+Kd:/.M`fKGQquEp'n,#u%s/5YXXeha(Xc?0L+;/Gl!+N#3X3f7i5"t/3^*b.*QspA
%KK<R$4r$<B8e\!NjD6<g-Zdc!g&]`mG?Uc5!mn4/?T*nZQ"D7&^KRYdREY'.$[!6'C4rRnI?'*Q3P*e[ThZQ/*'2U6LrtUOr]6Q,
%j7-aNkDPHX.V@,WY)MT@Uj,c.k50eV@-TneoG/;o7G6]hY[eji\'%,5RopQLenAO)E^3M`lad9QW<Mr&g2]"\d,kt.6'XlOVj\!i
%:K#o7_WE^ED6OAKq';oiD%d<&2G.G92a04$#t$T!oDcCH%C0Q[(l+.m6s\Q5O*GfK88*/#HEDI>YSaic-=ip!A?QBO8.N]eB]A<.
%TVc[.+/"Uro9:UGhJ1D57:\,6YR4CsK8&hQ71iWPcNVk9%L3<`6;%B>UXgu64"Cm8Cc!9c-G9^HMr*7qP11!`6<\lMq$+E>0j&+_
%'CuYW\1.o%ADc]#5',0"ad3+aI4Daq-uEF4kU<EIBN;K8DN_8t''j6K:P=IA;0cT^eO3bGFP+L*YMFBU,DE1nCW5F^Wa/S1&A+m2
%lA?'UcLeLRlHR0\RYh"-`,;5X#=RC`AQo];TAFWChq/5^[qJ_Zk55+Mk,00kJfG4kCFrSI75_7rD:j!8qK8Rbe5qg'"5+Wcg[%t\
%f!i!pY?R3uX#OC4R3**3=/tQsMUd)rG6ds_rFP@#55j;R#c)QT)tLk2G94E3J1NE<'fM4LIINBZ]68cu7*`Z3j0&WEIPJs^Wsl&C
%\5Ih8(C0<sc(\&"VlR_hme'EbAW^TT[nPlHReuZ0f\2H@Q3^`Br4Y^FGj#O+5G`eUY5u<4kf8+6AZ"^MSir<c1$X^k&kA!KN'?>R
%L9?\\Apss&Q%mE@MiTDn&6OL1il4dh#R,T,WV2XX^%[C*^F3]TgA0t!r%qJNca,t*n310H4sf[?il`!8HE'*a<0$N>*BK_R-ScH\
%mj_4oKs(MaK<o<qe=\eU8FHT"<[ouhU3JB,!@6&+.ZnO>c-Rl.$^J[Oo/7WW;r)j?A%p=*MQbP-&7>mh8@Ig<`sp)f;B!OgF.o$:
%ILa*NYr[K?+%ppU0B2<NbEY*9.fYgWS@lg8OhU4R2`uNk=q)o>W)rr[8.U,7EDHC"F/5/p96,g0KJfPH^P6nQLn;R:OJ]aDXh\H"
%*,5!6JZ;Q*1K1)2PqM7in+##'F0i;QQ(.Z6"]B6iJ(`'/XcS!.e_R--%4OJ0=[cPSjT6gspk(#J?bTa7N:\k:0X-m,=H'g..EGu1
%XRFV.OQ9L*oGjP6XnHN-3I,^IMu_;eF@DGN%P*i9;ko8AKn`QjA-m*GI,"DQ=Wjhg\4M3\9p*`mYH/Je)K9Nhr&?QPletTX*oQc]
%1Sj%$KD((Pa3Ur$8?#4mSCN]&(4ECS2=JHcF/6pu=/tgp]/FNj:1\n4+"$EEAk5(6WZ#07>I9[M%J2i*(D\Uq-,fWGEXs<&YH[c$
%&jGH!^,&$scTHYd>8qtK;+CC!$Q>+Ic,T6J6<\gU<cfpAb#+/]Elnfia$8I\rQP)rmM1N))NgVF`IT>`h!i"E[m9d0U7.M,*$[m-
%AmfR@p/:AQU'jnqc1g6#9;L`([F9^F;Pa,PcUI+On0")RGc.gYCjrh)Jgo-[#!K@^H<X*C7i85GDpm2tFZ3fO(.aKRGAm3tGuLO5
%a6g)K;UEMkmJD6ZEGr\OQR)6ME>()tH@GD[rD5N`Rj*8d`31jm1r$-#FaP([J$;7CU#)u%%aC,Bj?hjIIU4iR7An'H[,p`nB>IuL
%k.<jU)A:KLcD%<\1rnVHr],gs7TK`<`U6%UD)m'#;;'bi&rgc,#[d&B8;HH6@A__UcH]?*.20c,CO2drEW16pMibq8Ujtm7&<43g
%AXBFtdbK4='u!Aj'%5fJ3GMs*0426q84[)(R8Y,Q6ar21g<h?W!OR\`<Hq0Wpr<:l+K[2S8B&Db84K&YMX+JM].NgP%l$uUppSSc
%8.cW:Xh2pN<;ZJ(+f/3VI%K3PH!"=B!)dDt4,`q.j>Q"1&'`uI"OP8O[uH_Qe+_%OmuTSUM(C47#-r>dI^s7f(4)Vdp%\uB-1ob^
%_pmBRNj%fskl$Ckm*ra]b#E!HFs?JnYI0VRXkNZ[`Bp6(:V?MT-i:X5`I7R)ipG`uIWE"]2h,&0?9S9W,a)>7]]\.tF4k-?ibcAY
%RGmUDVJh1[-X)p0RA^G4)UtA4Qa,)Mh#;0V\X^'PHPjCG*o?&gDcMfT$K:kFEDWn7\e]]IE]5Z6DpS!>n"UF514OY"%5[SLr4O)T
%GlR7rB'0K?ipHMR)B8AQo='daQeZ^6-@K[HZ.JKO.c%.4^]3(<qU";?l[_(MM=MB3NqFI=.uTsVT)$udlLc[sIBmAZepi2"]aO\^
%O3QO=imIXga3WnNJjK#m^A=EMS6T;6`oufI&eag)j14V9:bmI2r5]#Yr^5QJI_3HOG^gD7kO-5>mHa*iF?!2^^)9sLflV*")f%+,
%p2O57>r1?]2'Y6l?atPMqkBqQHXHF5%K+BCmYrmp**T(DQcT1XqI9,AY_=-Q]_#A#BK?92RQ6=&_ji\"-38'U+-tR4_-U%>:dr!c
%(`]qN@,^L;_;.]Hoqo7:"HG*EZEpkr-)]\f/rS6Zku_tLg3_F=Eo&1k-:9H;89ZP%0h\<AV8-A=+Q[d_9:E'imi#@Md`49cUfCdE
%)JQT/5,q0$8ZF%>Tsjj9/RK3feWHH>Y9_P,F,sl#<UQ;@g>1ZDeW9iuK@0(sL=X.J,],>YUrgYICSX%W:J*Pqok:W!@"B$)8ambS
%<_-G\8<Gc9V)"?R`>4:V;IkjD>-U#d+dK,:I9TM@%D>A(_:HEcnLqEtcBhg<oe(E7L9YYoF6DQ(kG"QXHlr1kD1UEBC<M[eA&HZI
%YG8p)@6-W>U`Y%#Oo9KU)5D.O*V%[<CZ+_c<;pr4&`FZK+$tEf13uZTVosKbO+HJg9R#g6!/+s]fibP+@uM<,qEj2B=7W+N]./E:
%+j;6&H[q^N&fiTP=&:2D!hlU,Cpr[Xrd\V1ltnbE79%"Vs&#f;buJ6i5VdJNo)%r!,Rc_(6`03:D*]V6D6l*OJHXl2\!QToO(PP+
%(urNo`L<a9JLCUlkhN'arZgr3MUu5aR]&J_nAW9?`mU:>ps1h^PFJrJR'&Blg?8!i/]<-B%jeP'eG>4h^:QCHlG)PN/2,'d68H"'
%6D4#pCsO[,rE!i2TIjq6b6HUi[BP#U0#V%*(=`rn4LgY-9s.HUOchSu>C1qT>+E(]HU<qWNB,mfg[j62a"2l.H&PLWWi,bmS<4*,
%f'?=sa7%Y"De6NX3j5P+=E=[IlhdtbAi_Eb0,G"#HE_:JU-Ht7cuk%dA`Q//c.'2pW!lfeNSQ[p2qD`4IMS,LrNbb5l@!@T=V4!n
%>48q(X%4,W[48PE>@js,+/:Xj1uZe($Op$`.E-EJ7NI4E3N%1inU8*Q:3KREqXT9lU;iCHa-_<&pgc6T?`?@*,pYK["0<>hFoff,
%'T>(Y$oZjPVT*W-g1gJp(jG\K%SLiCU/nS`b@imcrK6u7SsYF)S)#gb:1Pg<3u%XU[3,rgS&e'7kDZj6NPsF*Eb(gN96018JhlJD
%.6OG&bo7NP"APsOA!cE1P-RG`B'9m&qGsuR[;Ju?("m)`JVqFbjCC(3A?f@hCK4hIo(^i'hk@8Zhg.%"q`oP`B?r-Y^4[_&koH8(
%;PV9d8I,%)G-+<Xa^a4F%pGEDZBBWC#&J.*>n8uaFRK$%<2V3HOlT5eFT\bO4^B,D>@:3TLE0[32/s&K9'4`DUh8.oJRa"#]-55e
%)Js>OacS/Xd$V\f@nc@$f$I5BYAYFs[,O&0U1]U2cl@^)CTb]ACR4+ja1l(kS(e9-UF3dlW;N_OYKK7\%7aQ)c!B_Y`N`e1NU2M*
%cQ2at+7Mb./Q]G\]c=Wn,?V<!44f^KeTc)]9m/.\JIoq$1*sn2$b.@uBNtIn-VhQc+[kj__3,.n:/Q_#pZ-Wa\[803L:DAQ83SeR
%Oo1XVD$N^loak4.2,9q^hWc$E_d\.H)n'6JP/k<Q;86'1Wf.NWme^Nf$38eh^TP=iftQLjeX8SD4YE./>%k?rX*BBEOsaafbj51b
%hMtFKJ:&WZ%FY/`+7$<)ahLWM5/$RO69[QX4]kmt*TEB&O6e/9Au.Cner3QG+%H^V!(V?o5$bbh\t,ThVoAaT'd9i?-%MQ!B2=M`
%rOrmf@J;N*:uLCK]*QNMCA,7`am4^R!(>1NGQVZ/o1A.fAQo(%G[l+np#a/=O5D-.iO2%M9,B<DO$f.lh+Rbnh(m!5/Ju[C\5!IN
%.UE54Z&7/s-(3,L\k%J1PX\l@.D7092k&0@k'R"YN+og510;*&jIKb@8b?,g8NBqj3o8-HqIu&AqdO>8KUJkmN0h+q%fD$NB<HXW
%XgDF1gLrEjI-YEN1rs/[l#jn>pF?D$Wrj-TI.o_BfEVdIX&GRC/W7-VY;Zuk[]F##l)2*h0V[I>!NgZ]g5e>m;5]ak:r40T:S?Wm
%bg>L;<Dg6q.Kh<]B"UYiAfkq[^o0tMEY7WBgi>bb`P#k>jUl9Uc>`E9j;QN]CZ62V`Zl$^Gqm>*$(\^=S2KIm_V[9QVI(KOCD,1"
%&)nJ;3AJ+0W,,Zg%!WfG0]Dpjn:G>]>4f(+j0LKb*c>5gOt]*`IP_"/eS&A)NHVqJ7^Iu6^t@:k7[jpJX4?ViGS=K9Ma#9gl#Hq6
%!Fn$sP`"BC1j:huqmU/Um2':4G(#?^(;%A$2V2WOgKAmBE8E15c>lm&ELXc'j0=PZ?0F?9J?ng?F\@MP2Mu6Rb+o0U!R?E/S%@Bm
%HuQ@RlJ^%:O`nJb&)CrsACUt`H>44GXeTFsfXFhdO0eM'58XWH5Oam/pbt*-d$B<?3t:3Ua(WPr71HUmJ[=k^#Rn]%&mS^fGD'Hh
%E\'q*e("R0CsAoNh-:e^@i,!pn9u&J?72O%5Bng9bi;&3QGWj&l7qJT&:h<2+"cYBSS%u=2NG<^Tndr@S'PR<l\Di@B<h>.m!B`e
%GqRlc(:uN3n'.MMr/P`$c%bq5TqYt!4(lbaZ_:e[6sIO'g0?%9=kW]CX6iHVoabYUTf,u8S#<W1(m_T1d.M#8Np9`'8#:XP!]^Vu
%(8VC3=4,+ibgh5c@HdilPZ(Pt<nHUs2Y"EH8P*,iH:/8ra1:$k.1?@o+.Ef0/[W1^Fugj>k(?WrA/E/,0JUO@VPQf+Bur-%CcO5X
%k;H)(`Qg>VJ,dp+QemUb/d<,:ie</]]l2tTb?GQDr>;FJU0lJT]g9FLY(bMj@rC;J<\":KSj\aCgO<oGbeh:H`Y18"Da>So%TQXY
%&h]!G$Ob\t/p0XL@mHL!+DhHE_+1*A'"m)]IF57e-H_9_pgQSVh(43(j53TASUC^u9#f42F6MsHkToV>o,Kgg$p)":_0'e^lndkt
%fn-ubTsN(<oD#eY6YE#WB?1kdFUjsj#+`fLSK']f$p)&5@gb;=p@WCudhZuflndkH.,6.0FS6SoZ9@??6`8h'Cn4um1UFN,pV:!G
%!p+m^,0;=_HatdjD;7<i#@6C`&Q[eD4)6MD*Hm+IO7WLG0%\cLDS=&6)6ht3[MGK9ZYWZdRY>#oK10#J;=nXO2Sc%+[gu]IcC&bA
%gD>&P0<U^\=Nkb3aZB%@+UhsMdV?oEMN4j-2!7Wc4@Y09XkVU:?38Xq>=#'iDm^JDXh:443GIr\Ben(^9sZ_5eQk+oa_psGOR!&S
%Q2,"?Lp<-0B"i(koTC2Xh0uaH7'A1n0fJ@/Uhf8ZL*0<-2M3jTY6dn;"Uf_/C.,gG;_e(.-CKoIF]N;@_1%:EiUhG<B,IdnBZ2aK
%FKH6U3KML'$DXqG?SPd.-L<Hskfc&+(g.<3FK9![7))s2)@G&PrFT2?Gcu^1*n^)$hOI[qO3dgh!n[>9\lHoo`oN^A/SJ^dR[.5!
%T3@=e@nN4Zi.3<B4n*4<\a$s%T$nbU2=gMhp1Fj$Y*$cfQkNs]%([Eb)-Csc*Qc`15--P=ecDY?<ArpjMhBWe(<<MC6Ip%MXO2L?
%0n%uH(KWLU/[BGM4n_MRij7d7^aK_9bIFBC^78&)=96b_Nb.A5%5%Nu(u:,14VpkPa,RF7'&'a5p+4LF?j_rVqjW+$Biq6=$gG?>
%4`/"K10*b/4g_dU@dWbhVmnaJI:m_*0/4B`hNAbp\I)*uYd7SLp.(^QVk(?(,FR//40H%;:Rn_"V2QSP>TY9@B<k:b@`;>F/1'$R
%3>8N)SIoGa"2D.^J0_naY_?hQ=n68=F?<ape*I,W#GU#Eagd5'(BGi"cBSYpA]@l9AB781l"k-(A8FeGf:0bG1@3dbA=Rh@]1@gc
%+j"tPa"`!'2ah3/^%BObVfNN63Mu+(S*s6:FV0a5fD$?@L@OLT&K1OQ"*?]1H.,G21>;.+pM"=,7q><!"k,]Nh&oDbeOi<rn+-)$
%M9&f;q%7,,G1sQ%c2ld@XsD]V/rAA(-.+hrj`B9;m`&A#e[L[)G^N0=mhg$(BLl"1qK@HO\7oP:BD"'dRl%LId/'6m%.hZDmV;'>
%A,;R$l[i-FTMo1QH@$N(GGs*KmanekX4-2jgIu&=%3ddBcMEVP;NfjQeH=%-!Q2?g-k"btaH@l2O5p&-gW5/6p;8kC`Ac(tqp"qH
%lfZ0Rmt0D>528Uh<*e\)3UBSu;Ec)OaW$:+VgLJQ'1"5E#Q?V'cF=fc=oR/n5+Ka*UBoM<oANrE'!R(;320d$/U^jKLGSJ>/=(ET
%,iuKCFG>1JMS0##h@jT_@bBDCFL*?8AXC@(`r>Afl1IRR\_IMU#fggqYj3$1"NTF_Y=":aO't#;k1E='<rHY%4n-`8mFF0<B&)i+
%O+#bkBX3kX;V:=LEHHh0^&>u6dq^HO;&9Vdjp&L#m*9q<=QhK_@9@u(r'`ZG_&<Q-DdaJHcF.a30SX'r%,H34(sW?'OG![fE5T#"
%,WOB@l/nmX=`1Q8_":.@31YdnJm(1:&[a<%Lgcu47oS-eTdDNmn$eFAqXUu3N)Tec]o:I-T.OTLdQ=FFA>HYWcD(#/gh!8_S;m.f
%OY>k^<"VW89\lUh1K*$N"&6AFk55#E!3nO@Fkob]kX:t80Y0"J1I6eVE#7,h;rK;#fN(r0O?Ma9UIX4_?_kPAouhMWiAQQt\k[r`
%c`d7`.\,H+U3H-7OpYh?<S2UIS5js\V1/^@V]/WD3'Z(CnO^J]@_EH6NV;#bedbYH$"lm*f`(5'(BJ%L9RdWL"u]/%Y!6HA]u:/'
%2L7*LE4(@/ZZQ:[q5qU!81ZBVRggXRPR&HoC,.rn&YLZ=ei6TJ<_P`*5pkK=mdm9Qb$?fi=;2Zbna5Q=kb^244oSn6EI)!Gm@?..
%a-#N/dI\[#_6<,Me-m$A%kj2#'?KU+,b#@#H\m"<SOp-Aq(\:qKbARu8tqL8[X7an8VXEj.:Ch&nbLQ^g$QU2lO;Un8)%S,iG5hQ
%OE.ts;XIPdA2f8P],>CD'O@bVM%j6qrFqOT("-aI)3Wf.;[e4VT)sbNRT>OhPMORhR3Sa@]4Au0_euC#MH_:$.eU\P$`)uM5(E.9
%oO4$Op265`[`;MqX^:BYBh2=nj7?Udc<=7>YAMp=?GEg7$@8dY^9-UGF\b'&5ku_`B"&0j-!\u1Mj0p,1gZ+uWK2!FmfHrD1L66Q
%W>""`Qo#_UR[4^BR8AfbHgVo`g_qbH?u%6f?R%&2f\kgC[HGVMWl?BPIb>eh^9ZqER])suIT$&k*ietG[@?7$mZB:g;e;_njOT:,
%XW2Z\lYOYAa%n^c,HfqUB7#K*_nNi:>p<q75)XdF>jg-b,g#SZ!S:"hZ'A42QJ1frO)mNlVG?=9Rr*@lG6+75Uj)cR]&1M9f#spH
%o)l?JgpXNQb];slc\L1!S'EQ3BJNmPbbd2>V;!-aEK+OGbFS@AcDED%`L'lCV//1K:lZoVXIW'uk1%#4Ok7^P1L$b#k/o8ee!]=G
%)-058OA0@'B@3=Z[uG2bZWOj%]l#?icK:Xt/S<J"jjNDfNc$)2c>:qK]t`*63\uqX-Q?uq9kW%,*rfF+WJbRRZi2c:%CK%kh'shn
%4,&0H9kS<IDDRc"/WTcjRr/rT3_O>EflY!jfQu4mAfd7Nle-Al!,uiK<jV&7!-krD9kUn<ZEa^aj(pc_>WSYS\p63)=o+M7ARlb5
%FCr(*`qa3;CcX@ak\eSt8iE5u9WfsXe!]=Gg"aWW\H@'r/;`![1u'bXl!Ru19G$e5phk+2LV(JPf@iQs0"-18SJb#-f#=i\X0]2d
%h!rMVAm:gfWa%=AM4_:3/DQ(IBqZh$=Cs^c'=CGq.okNmG.G$Aac%KZGK5PuI!W8L1>>?.VdXE:e8m]tFdZK\O2tl!H$lWa&ko`:
%gI11[=j6`:]/=W[bceS+T6',>,[^S?4)5:Hl=,1om59)GR9].ml!0bcDSJD=^?BIP#+[AtA"+gS\@C\H9gnMnrTen`,DnAqh7:X-
%.b\0LVrYRoZOb\D.`<Cc7X!&1][f)EZhi8D/<2MfY**._[jXPk1;SrkH"M2#HSIcLe\.a?M0'6Z'faBL?/EoBKg[uB]tYUi)2?_3
%38A,B+i\J*fgJlM%/h%ig!'t1=@]OV'4$VM-T^k*Trcgl:qBj.(DeP<G=+6s[i;?Xc.u2jQb/q22E"p&h$uW(bfA)M9-G.0j`03"
%s*AX52s';:,Re>7&W!+tFLP8IYk--m%*U`:f&d0[@q)Qd6npE:]),"kZaBU.!>2Qq@P%u6g?(o@(frf:M7LfmQ/B9ZJX%kUHaPRP
%OL5iZm\#:ij!@D0T"*l'lJ&^?GFP)m[W[9HRObk5Z$A:99Oq7<m*CHi/fJcUHoq[QC/,IE:FZ:nC,LaP?9Y:+4]X(''`YUA`d8?M
%]SOT^5jT.%em.0&[T@]"OWj5SR$lrS(iFH5SX*VsI`L9JL>g8aGJCo%HCZ#CCohW(a5&X/+%q_Jh3@(VHsGQn\!=TOX#ob#DO'J6
%hCEkCDD%A_qh@1fqd-%u0eDK,mbFCKN]*kQ-*^,"Y$p_2\kfDEmCYOA_Ksubf!]bUVBH$X:8ff:E=7W200a(%mH^?b-,E_CRUpY3
%"Mi\W@P*2+CiluW`LPmhT*n/,XWbuCZqOu@?RrnIA44c9X.g]0R)q%0fJp$&h"t]3Y`-j9E08*2/fK*hr@I)u`jCm@k0@fkqSgm&
%J(T!%(,79\>_T05,Vcuj#2fCRIO.VYFIU4EhC6+;\:C>uer"`)_beKHNOqnpEb-('j"Z0pLp.TR%WdJ"_sl(%0Z<i@f$/1d4FC;'
%e6mT7]lZTQAO`&>>NBtH7cKg*NlGE1O:`nii8efmR$IUhNf+:RG7/;;h.(elV`\$`cd!HrdIr5B6e8SLNiP'aWC5i2Aqj)Q1[>cE
%nX0#C.=*qnr1h;>HE'*aPb-$,/mmXV:5agNVcYJql=_,LF/DVnrfNd73P&b2L[B7CH8`s%oCu1'g9]$mG?:2*;Nu;!E05duKiJal
%l7;3coM%oJXA@KScMa7$<4WB/Uf?HQE+OdRj-T1B,I>=I83cID\Vm9jV"uVsELr$2M:dOPU:]L(=6%(?pMVEmR@5HT5A8Lk4Q%&g
%nDV3N\9#rWL1e#%:Z'T5]?J#EUPlr,F8r*r2jR#/)niGX("/Zk;WZaoiV_uWP/1,nr4-Qn<2f%60/Old_FTM$Go$ucR/m.X:;Y5V
%oY,Ua"3Z#]?>B`=9>_L_AEZpk-Vop8cG\pG#&\!4>.OOP2GTbuS*fRN9h(r-jUAVcm8)R++1%H+T1f$'"i`ua`&]4/a"9k\#)!F_
%CMed18o-h?CeJ!5SkG@gX7S,K(QkN:J8kscMlnkJRH:udhUX0G">JlXPJ>F9F5!<:mt5a/:K)mbrcW3UBq6iF:*f'mdq$,$B"IkF
%=u`*iQO7CH-XLl,f^.)08bB+PNRb)1piL*;qCtUtQYE&5j\B*pQ/+'"g;ICh\T(h626MmaInSHcDriRPnj(Z12NNp4Q+(^M,P8P"
%P4b:,>5p@`Ctq*UhSp_G-jS+9^6k\IJq."mdW-!C1MdtD1K.f7ChoqWhe'>9VTg[$jWhAC#J1BK="O*i8ZN/8Y-6;/lcf40/$k<X
%k*Xu41AGAch$/J2o;N*eHc4>GmoF9Pa7U(eKSB#g.BX?+hMgV;BYD$$Ng5guVMiGD,d$4D"HIeok8_"9`^u=op*jj?$E2SNVQ$)?
%F0;TC!B9:.?(OLCkUs;$@CV47k5C9i-!\fnc`XYVk'6^j3ZN4RhoC-iR;Hu'h'U1*QG?PLKibBDD7ocn$d``#TQ*Kr0+u3.\=UjB
%)HIt#duI_q!2A?MI28K\s/^5@M&iV2a9&`piE05!qdgP95u]Bubgh-G<^!h3NHu5XI[^M>lOo[,^m,li96P,lUE8A=ruqitRO!<_
%`3<PsdBh7NKCuVFV0m(7aS+pmq=M.-rMqR41Q*`!s&)&D)qhZ>.A,ZG#I_Mtb=h[#9&b.Ui;MY55-lZmp+PO6]cVN8Qh%]#^N+s"
%q/fI;6rYE,@R8M_XfKrZMd-.gEAeNBf5E1->['9/C9r9coM%+g2Z7*oXm*NJp/)us*33H&lXu;O_l\C&4WDOgYFg5BaO1`/o3OY>
%*g1I7ZT9%?h0]**8b0mqqUt<G+X0u,h<X5JPA:R#qFR)[<oI;+IbF3s5Pq=[hI$)jHi<;Lp&!8K+=?jZff.!"L[+a1qO)MjrMeqo
%\C]&Ua-jnLd!G,i9g>pW4sI)BNUHJGTBPbocPGsAZbP%/bnI$,n+F#2FY.c&YC3UHfrcdk<kjX_j4coG]DHsRm%N@ohnm'Up'W@g
%Np_npos7Ga29ADfe\-Fo$S'<$IYQSpIXSEWl8CWm<^1/fd]_+ujEpjlQ'oZHGQ%5A5LX`neV'$sUs8B$Zeo`(cUe$5]mdQjXd*,h
%<mJ8Pjh6-:$rh+Tg[nf:gTbp[,^C@'qUr%^YAkZA#,c_0n)N.bn%np&^\+onbjY52?Qur8D7eZ<IeK)?Pk2Wb]mf[aqJ@T1c"VZ^
%a1n0lrTr.*NOoIFH`s(?XaV5Ea1'&8%D2N42Ejf)^"%$Op[L9?dOn:5=M<=)SZDMo)J6=&rDo(5FLV+G)+,A"l_fW,l)fELa\#dp
%bd!D;2=L4E1NQlO^u+%l]me_WHZd'ScX#DnVYBqd:gDk:rk!OUf%Y7WEj+BhPMt%rrH.cYPH.;kk<.GRl=Y1\fin.H=m.Tn$s8q:
%IX/,hrC3]MR*mYVos78O90.(:IEkb<k\a@;I';FRIcYM:p!Y@mQ!=2Fff_m_lXqj_*g]0!VgJC/%7>7aEPm/%lk<j9)0rQ8rTnIq
%1U4uLFg%F.&L?$`gUPk]XUVVi]mfgL1u@M1RpEYG]mf[=K0pEPl[/Ts-O8=&6;*U6Q0G!)ZlrS@(KPa-(s\CUpX6s42")*O?+c&/
%3LoIqhWrW+%=0QC^"0CDm-BCSE(l#!Y[UWd"MndR8d^eJ#.ojVLepR.0DHMjqI5;s=e'?)pQS:0\L96)]J'13?6s([bW^B'QHH,8
%aSb?L0jV3h[@WHi+$]3WmJ'El+^_s(S_/48j"bu+qq[Eb3,(8P]rtS_j6)kjT6Gb:D1(K#+6R#(?8J-9J#WD%2<e8Whu(&(N,G\Q
%ZfU"i2&(Ff01J:cO/_T+nR^dS5DqYc(8AP]%#?+>kM)EuV?oJppN7$nC38kfl,[!]qm/5!TX!sXPXP%$F6O(I<mQ.eiF3K]kTk4K
%Kf[LWQ(.XX<Sa4;;q6ft02W]/a2I(@2D>Y0ceGDW4uq(IqbrLp$0TX597/_dN@NiUn)F9:F;KqZMk6n7P5>FGQY,E=dShILW#Xo[
%3nb=1dQN25_U#VMZUT&Bq/s:SG-[L)E9Ft4o6S?VX\qfY+7[&6^Am/4:H01+r0P[nC#Gb3Eg08dT5bH#3>B'hV&\M7qqiM3Oii'L
%EY@u#K3+.FPe_PR;p0ln+&>=GpjDj,]%AJf-ffMf6#2oIqiH1bjoZY9S10XQh\Ub0Ef!5pPco(tMb#mO?%HAEEismb'l_lD^2rtp
%;!Jc6\>;mX0iF<l2-s;)<pt\)="mO0qNmITmGrpQ^L[m<ro0T9TMalGb+7KeRS#[NA'B;%)l41LT,=$WpX"qV)#>-tbbOEa4hfa/
%A$Ci.h[Nt+Le=J++oDTcb>$qM'>]b)e>DOR.*,gV!J&g\ia;'/iSd;g4nN!WqJWpjgd/h*!o8!^cmUdI:g\mt(I`gXI=ZPO'<c<<
%Y50VC^A'hUX"Pm\7;VGR96kLu_C_UbNLcA=(;Z8!I]7Yd/`'?3`<\HR=b]7S$$f-6SPpqFBh[-g"qn+\7Y9HFo;f+!,#X^"N(0^e
%>fDNpAIjG?M!g&/MG'3q>`h=5'L"FHmaNlYUC=U&oLraRKh=I.,)NYgOG1/&;>c^dE>b#n2fT!/("s<LB%6I>UZp-0mXVn',=PL%
%a-8\[KD0-M3WX'6!7\=qYS7,(:@-7:,I[n%Qb?+bkP<_I;"DR49^&J?P9p%pRE:MfNHr6eJ,c2K)A?:tLC+^_UKZ8(V:lNe$1B0#
%B1brIZnqbTSVn3]"d3+/h(j$8o(`_*H_qct]s#Y2BP&KpArgPQ634%FdnBe8S9Id1jpE7,'$Jf][0@]=2<O)]*`Qb?TsWQ[Q7M4U
%k"fMFq*'<8VSdZ[YHio4SA`q=<:X$sfLM`<'cu5o<+<?N:CMD!pL0@/0.8:eT?Bo&`</ru0npngGf8XS2RO,m6[Q*=\JC0hmiH3b
%5@XX#Huk't71J^)bb5IbE?(*,!so.5C'fgfA.9X#>Z@JWqoT;n&_TVH#HJ)jT26)D*.VpoaWtM?=P![e-'YOM<O$d;RkBJMdE\OS
%7qY8jFF#pCTZRG?<dBlq?]r0"-)sIDV1kQSO@YN=W+3lSH^Q,'+XsLG$+.<).)Tbhf](O6^SRSjY8>9u\C.3s94g[&b(QTjH+tTR
%M(&^sq%ge,#(U6CR:!+I8;=28A1^$3Xb*<^R'`ISluX).@_)9&B-s!pA@:)1BAi[bKtS*'J?U#9p/aKn&d/KOnkc/?(.#ju@s!>S
%oPa#2Or._Jb?.XUK4lTiV->C\qnZj2@uk).E&!2_iuG0#o=AfZ+LWR`08.`):+oH1'n"VSH<7Oe7^qRAoI]7=9D1`5e]`^9ZcKS[
%KchD$J-]GopD@^>Hm>b8H9m+o0L#^aEYahuam(2"kK8VeT9RW[V.XOqhT,mUT=UdFL;M/nC6)^`qZ;t:a0Z8L1iKD7!Z8)7NiB^H
%&'t#IcA4GhE*qQ?_=laY$Wop@.eLI6pk[YEdDDDkN)]5$8*c08.s596&3a+3I7M@KZUu>q1sqMtqf#1/&<@\/O:`-$=NTG.K,bJ1
%V#gG3QAUr@hR^tYH[PT"UeR:tRn8tK!#fGpa672_@EpU@(a?@.Z%P[!];9#CL62sUd;E""*]%_F9i1.V&6j#V/f9>M4SIr"eQP7+
%L%t:-e>sF76?9c^2m(WZh*m>LYk?;(O5E+Wk_UCD>^jj:P77kHn`1oP&]i!^jFDW*j,_:%c_ISE?bjNQPE32h%/KZ6-\58^PDA5Z
%/47:WmH(Xb41K(2$;!2/^H(lTpc;25JiQL;df,2eKRdK)'%5In%nVf/S_+NG$CJn;3=q:HK4&NC-b),-<`+s=%!cqebN#($4e,6r
%H2enS0A(G9=>!+rkD@@4.SMe,Q+[GIfm-rGFqiS!atGf3kA\e14S"L,YiHb2G"t;HViE#-#Sca6#`ls7ZMp"X<>(QPF!aGt&)k)&
%^>;jG-Ub[>02u#I*[+lI,-$i)O6QQY&<*4W.RAM>.r&r=9fb1d+1.g)SFjT^?;qI%S1pe5pH_n\=5uE'B2BitP[oZ'CnS%X:?+0K
%,Rio,MM)E_J2hljPoZ>W4sNj<d5/F9L2s>gj3^-(9$"`onHi[Z'eOoVFc4)1ds;LJ&\fRSX<t\ml%WY=U`OF[mu7Vok7/&h"*>!n
%F^Z!a%"e_1g$(Ffob1\2>6\)GQnR`!<jUn,n4IG\6N^Em:dpQ!"+/QX;Sa,HMp&e?p%:oObVtl8KCVt8&t.N61b$PjlgcVT48k4Y
%X<M=:8^\,1k#J[sO3,\o<=p\5qh-^)mK%M.22$G+MQ;)bK6L8LQ?sDI<hjac`>kHndl+HaKd5XhcR,sa?hD35k6-g6@<oY>jPURP
%iXI2h+R[E)OCT=i!,[VSU_^lmJ>RO4i+u-Y"7Yib9I]ZT_*^s<="u6pGhf!XL^1Ije[fd*!";33hB$eQ=mCZ,Z0Eib79Nbo#.G`n
%7!;P"l3;kYRE*thDFT^?^NH/'_.ZffU]Doi.PMJArrj7`hpmT+_gE7(:.LIg@Ydc-IRaDfn@78fC+b)PgmR/[bl9'V&ZCrP'c<O'
%Vs,Jo9jB>A4n1iYHk%L[W9:s[aIgiOmA)hGLqVY>miRJ9['LbH-4=b3S&dOH-RV6\eE]f?4YKRT:4;W30c65R<Xt%n<q0'Z3_TEn
%F]dD35&-AZe74fsf7P*-&6h4_Z.*QMhZmcZTeCNePkIP\#4UoQ+883iRAMW`p/(>!W&$n`&$2L^CdDG4mYMlI*QC8m;uWAb\gB%Q
%p8FOCcH]4,p%1?se.1s-Q0D6<Xt7:L;>=fd*/;DsHSo]t86^h(V$;W\/"g^P"lBj)khTG\&RY.KK]p$$I$<`@;5R7`774VK0DaP-
%'D5g[[Y>2u57t]N)h**kS:ILlbr=1Po[_mo7>c$eNZM,V2uep$R@#aG?fpQL%8PFTlE;<OBk[Etp#?8f-f"U/TGW__NkFpk6Id_B
%i,d-MMW?.;R\+F6'&!^5L/_L?!"7bT#EBa+jd"\:f5t-'6"quCo[OA17>=@W0LB_i.4F^UiiZ<k)I%cD[kK74)[TY!<A,brI3MQK
%,Z26d&8W3:X[QCtE*8-m.T(K&^H@@PgGRB)Pr)Gm)f]*h&3PIbIX+Y]!!Ea\]'/ZM!Xn#l>UaBIg5C`NE8Coh8\e6"%hoJ%&XTb1
%R6ToKL&/bAY&[AV$+g6^P.5:)FBS`X>bor:;]`+UB(.q^ha>&QLf&GEPUYa5pCBHF?[R9f^WB:>nRuA=cf$fcV)+gj_a"Z0ZJ+q>
%p2@PT<BI9.`sg\RP*(LEcj<:Y>!$pfjrDo`'UT"2:M^IDC*#[*%Sr$V9_r=/p]gRq)>4pa_]B>#2"pU[4tsU:_QR&^%Ip#C1.jHd
%`k+V7Y2Kcgm#!2"a0.?rim>9c9Y'[UM#q%E1ZcXJ,bAbAB$-+r8K>Z)b`pBn0*S%N2T'6eMRk*(Ug[)E/Or:j;U^LX)RiYhn#53X
%4-OViL]e80PRRW>f$h=mEl9:CQ`BH>A<3dWiB2'Z.t.p-e_<YA$iiEhLPO'c$=XPlemS$d,Y9ELU%6AmN86^CVIA8FU<%hK<hOFM
%M?1boZIen6M^K`<d,#Qeh2L:iDEnSCWR7YG1b\91-bH*mYbOUFLbMgOU4oRc/40nGj]IR#MH!+G'aLa>_c1kt!f*`rT<p9e<N.'H
%P2WghkX9FcaV]]ODi@#iG,c/;n63b^mL63B%\G*mKlCn(J'taA^BtQ]Wg/;8<P%)/NYpTD>BN?NZ6Ke6J<.f-lNfM/_JRBA"9?8;
%O5HN9.hL+9BJ9g@L=V9QRK/-_==G=q]1t.1Mr$F&FS2BZ*&@k02!P^J9"]FG><=;^8m=Z)e]9/6Tp"JA5!-;]1gGiu#STU#fRli7
%fu&%X#H$G7>adsqq3O4;Sc8X8p&BgoFk#7IKhL]g_-j_FD7c6siLt5,Y9>qXUhe0;*rium+^J;A7n`,Z$gC?;2`ea;kmO)t'LOFd
%jREKa.q6nra]2`9.3[DU&;Orh]`5]BmFhPH4%>ofV!Mh>aX6E\IdeT[H(7J/OpU2sYOZ?V@Vb*]MOfL?i*d4aU2km"-6dB\A+pJU
%Ve1:+nS4jF7Htuei`;YsZ[@RJMBs?"HPB<_Y00[=(kbdkN$C$M/6t1_.b1[DRm_0TYR3QIU_']W^6#/AZq/@3J$PXJn;g@YqRo#U
%Os)!0h[_$XhI8K4'iOLShWJ:pB`71P*ni.C8&9]=0;%sdN8S8F.<nCWdRMt)/@TtiSsKq4)\\;44cpNsV*S`KQqgiE+)_>u4e+BI
%:J0K&=/u--FUu,NTS@cJg@-SFi_])/iOam9k2G48hsfgG6cnPI*_Ia]?N#G1;u#kl7=TZJhD=Wl/*6."[1Ck1R\Je`P(M!s2U67j
%c9(aH//Mrt'N$c?1*Oq!8PUdgYMqZ?VkA^'1CVM>-+"6HdK8G\HIO^$M0!K25bQUN5RlYa.VrFI;k/sAWWX^R7?('=B]MbVEK3e0
%?_p]k'G'P2^oG^9k+Y?p;<]$677nd=W*28a3)oNLJ9b+a'dsVL`+5g.:8a;kpCnY2-oRo$VLb9>5iao,"H^J*!`)cf1NA.\P;3je
%Y8(G;GtbkUUbPb!;&V!<<>Zo)esNBIVsuI/N`-"]EAbkY.@-`/OQs0p6`!2ICnqdpe14AGp8r9;Z&h<C(W3L\L1T?G`?F1R==0k-
%2a"qJO>j7?UQa%b!j>X'Ss=%`%nj`h&EU_NrAX?k_LrW?:IB?T%"j3Q^.kIR7OoG:1*3\/KHN^WSjHe]p_9nbdDI^mlf1m/(Xf6<
%H(%LO8CJRJ;(3Dt77&IV0Ym7Ap7Y%in_n4[hfJ*TH\3L1_`b55km9"+K#/&r?Q>jDfE!!>#f&@JLGVN]0s?j^EL,aN^f*9_`KMjc
%2D7](rtr\$i`i`E-D"h5*%p9EWDqTG9SfSMk[Y!T^f.UO)5arQdLO3In1AB6SP#SQbA"JZN@F't3fWDPnVG/'R5dj9$t[eV6;l1X
%M=@FRPeN*9KC7alFL(BfB.2g"0G!C%]g<eV)/fgK8?k`3Qq.t^4JnX*VsoL/d_\VYLXm_:<U%\cheF.)&8[Ai[5c8C(p,LeEUT`<
%M-rN=k)o(!""_\8b(rO&aA;A@M_]kblF1A:J2YMYi<&S5`d/WQ*U0C!gN8rq;HPP3O92t]!%cN[ZI2oC4ueW-M/Yb2"p,l+i*DKl
%b%M9pSef]I/-&!MU/h=Xk5f&46^/0N""]1">*PlC'[>,'Z6[Y=BkS.+75;:mJ<LVY.\Y98_?W+K`UZD+%[8o;,(Z[=1+Mpa>"4SV
%K25%E(1hM"7qA%1#_9pl(m8$JL3<i'$ZS)Ll@ht`,;?%U/46`ZAUlcei%cA94c\\Vb)#IEi[)1.:P-*tVM_)L[5&0qccXKg/^mZ2
%_GB.D`4ScX&'of]9[T/;lF07Z#hi^-#+L=snInXL.6=G,@ltjr=e7L:JZ@'-'>VpL!j+*h!!f@h$Qf.r(A'pF_#,TPQ1jSPI9<lX
%k#<6:<chL`Zt#hhJPTB^io!\;;&3`c[ga!qWWIn.TW&*c!_!;'c1!c*$1/<Mq&mh=h]f"$F[GJ+$MP0!^J[PJ$EXQ(@o5_DDhLXS
%0IQsZ:$\TR.jI$u`[RKh/BTe`JmMp8$ti_?p1>f"@DgTh9`<O5T1o,62DcJd*_s+0nB>r^AUmV(YuHn6)'BV%#A)&C9F[0u+Grmu
%3[;GI$o(+I[Aop/>*_W6ZsqraL5'E19Q.hE%A`Lpr'@YC6A<q$1kYDa<*Cfi<^mE&23`X1^lp'P*.[lNC0N25a8oDU^flu=\#D3f
%02';N=TeV1+##fT#m_m_99>#=3gb3oRm^GV'T@DriG*nm&fFuq6^/0nJL?dP^7f8/grp@5VD9A2B*=eQ).qeVRUU4T).#W:L,uC)
%)OJiNSDtoX5aE"A-O>nkjkGLr4KMQ`F\68UMF9'@i;j%*o-+g"!>]C6d.4\EA5k>1^f_Euq3KN%$C#T]`L@ZXdL?s-]M2Up&cIiP
%KD2Ar!^`QIkVd6aV(l=Bg]d=B.tK^7PALu@%*`M-8:_D>91b\F:8/V`6epWHlM4C7.GI[`_!+Er@>8A;"2QOb=!&=_ZluH7!B$+W
%.ufh.e]NE:<)O:71/sG!dS_[P8ONk<%=sO0=-cV([:Df`'s"]b$l1jNb,1u.,p7DL/=B^e&lQk_Z]#[lSHPPl-qI_odt,D1_Z8/u
%:9LrZXN\)UZ$nP\,J(l#O0l"(.AF$^cuAM/s7'b.,Nc6[$s+r(i.?ZF'KD"+Xd/B-SPJLY$I?kL1VkoM9NNm<@VL`U%IZnNa>SXh
%`%jCL;i?mN$7lKL)%$-@D4XWi1+=Cq!O%qaZ5.">/!,2!VC]ls@:>t'1d$:#'I0=2GU[5*AP%H=3f6M&.80_W"0`H=)+sPD\q:G#
%*&AdRJQAIT;3E)R/eBF;_q2`E&gcJX2Ml6rg+/FrV1f=8+[q]ICCOmUnej(>aj2X`?MdDc#F^3TH'q?o.'RtpaB[=&#<q]LbdHTT
%-0RFU$#2&W;(<iVSHM,Qs,pPaW<,Rri)l._[7"f%>*RN#P6%Y11A5$Ed?sEX7KH;D<5;uVd4]2E+jSH!e;7F.O@l_ed@)X%8DF9A
%;'>.S"!B$>'b#smnL?$Q,KV3b,1(*<M^]PL=*`Jscq:YlX$n_:"U%^*"Dps*,Vn9Y,Pg@<7DKE"=(t&Q"q<#bMV4a^T;X'B8;3l1
%Oh_4XSkbJ+JQ\*JFEFQ0>3"*VPlh@5Pt?^*1X$g?)Wc9..tC@:ib;@L$j7&.JJ67c1joF+5+bN<(MVSk!-=befZ$/\,>a%?U=1ga
%BRqC%"g(0K'soa8;ufIpLb#>(i8`:<TJI>@4,,L%Dr?:`.)>RVMC,4\1"gkI,ALeY;4r?</*"-]RP5EU23k$A_GJTO1dcgFP7.U(
%P%#i@ct_e41pDMl=C$DlANXp^_:)(=.=:Y/I5$N:8L4iB!!aIb1'XP42ghZlC!9<#TO#tpM_\!:Zu:dV(cOc:M>IhIPjk\0'D6nU
%>fs^8^hVq\2K=:E`W_gZN<W>di[;.&8V;O9(kN`Me<d">jQ^aTnJ#W?:=<kGMtE;@6\3(?iXBCW,.6^FX7RhrMBFTP;OXG,Nl&L6
%@)>c!?lR'p&Oc\5Q59+(`_Z9T?3[DbN'L)9A$V%9%Rc&G"H,$XR%T1RaBp_V,8brI<JIq1,JH%`7s6;ae0d;A2h;?;'q5sib)#a.
%i=WS5AH(hp@tmHgCM@Je`aMdG6.<.%8KoaUe.l\R_"j2eTimdQV#%&^&`=@$Bj;q(Gfa->5"Q^9(mqVUgnUek<0i[LnK]94QED==
%iK>bT"auf9UqiF&"='G!,9nm;(i];pMNX.01l)Z:MO8XOU!n%87S!S-ZQ^*W9/1I7"pP?C=sT<c=J_StfYC0VCP^#A$1LlT,6M26
%OX^Z.d@mB]ZqLT+@"Y7pr$KZbBsg25h]u.K!ifE/>*'r$:tW$?LhKic"ta%u(f?_kAgA(09[\jdJJ:a@V^Oim5J\X;H(bPK:rp45
%2Bn4<:`p5>LK`&e>"DL^[A]cL'%g/e<s5'cT`?QO"/8!p:GHR?$^AH,cVg8&gnn'P-LbDd6U?l(!S8$S5E],^B\DZ@NTMYuQX_IU
%)%KC,!a9>094*7DJ@h'.0Gm8_V,dpanrhf.>K=/4b-B^J(#1rsio(8;Iq]h]A^it#a9IUK`Cg2\!o$8S+!-Rhfi=<jX`O.[7?J9U
%FW[:dRD+u4I=j?@"qZcp2XMcO$e\)o4S7PO3Y5I+8Kk"d+^$ff\;fFY+?r!I=g%T&2"VNcD+KNd0M!:Un6]"(R&@$m^L[XC-?hGV
%BIjohJoO7.X'f`,[["5uXMd[3`8rgji-N8%"G!R!o)0A^:DlS(meSY3^qXp6X/<:Vb`d^BgB0]-V?W+o*ob`g7/PkEkk?L6PC'12
%gSF3J6h!"pbMYPaRGl4.!Hf^>7D6hYL,uRI!9%_6N^sXnqmgXq"E<E-+rk47QNTA$aS&u(XLqYUb=!cc!O?]2\hS/6Tj,3'Ro2=h
%?uW)>!/r3C,,qP13lrd]TB\QQD(+DmdRdJ,@`5_]>ATGcW=^B4_@RmA>6m1[/31b.U^Wi5c<!P,i=Z=S4\9'R_F3&tPCo(#`#R`e
%8ralKE.GqX9*9;?k6Fp2G[26!oGN`-/h[QVM';U?j8nDeIJAgthr>8?9E@p%]rEG38K0['`./29)ur/MdRbRE72-;)XHBXO*J?+j
%cR1+K$2%ERG6=^`V6F;Ifq`0g^o'O67p`_'"b>ct/cti@&=@>-*caDghNo(\0!Ye'b>>Vl`f)&@Q+5'dIj&')!,7s,G3i9Q2r6B5
%Y2p]SE_1Y4a:1R9]%DQofI?:!pT/,FP<5ml1kQhM$=ocBMe"cpiNp7[h;kXtfs%*C\^U1H=uo(>q.9mQkUGIe6Kj/)DBVni9ap[^
%G=C`b%Ip/h*rtd"%LW.qg%3U0Ts04+nHK=>iD<:rD?Pnd?B]:q@ga%G@8@[4@7+HF:<\aq0KG_U@,3*MP*uG)N$([NE!0,mX\+C1
%o=)e"lI;7RA!/p.$-6PtaLCo[;;+TJ)>lC?2hVo)nDoCMSl-iScm(ei#?_<U-agW3XN)%6^cH9&6lJ,r?67/!-6.o<l1-V/#A(=>
%YXH9O3OUb`b3K3Tk)cu_97\64Na>T.&R'/[I[5&q^suB&"FNNUAJEih_*hL*@EE*e5gJB)Mm=?lP#jpm&"M2_R_U@d,7HmK-3EX_
%U8LsgLrN(-^8:9$-Xl"^_cJV/X_31:ca,nKML]uXH()7tdRVjiRgFRX06[4/7Z[Eh7^KMU>d6RQkJBW_0rFdUZButq=^S957aZsL
%l91$pjg7Mns2?2ZjJ/9D`.&$[$:Bh3#=jmZ.I,Rk9%E)Bl6=r3a[tqSSWipJ4Fo2MUNcn^>ce/0=)csi#1?]V#eMDpfrcKf,_N&(
%nVN.u'!a>s9L0doG"pPf(=HkN'5FoB(7Q1"`+E,="pLc2VfaFgMRRE(q`Bo"OHR6]0rCIajqRJ-#gP#'^g@3)C(_C)*2Yg=2)g@"
%V^:aR[fY.N(4p`F&R%iFQ'?e")[qYLF\&m^MHn((T"OPQWZdFZm".2rp!e@U192[SSGl9lU":*2m_!nH%2fa=f+eVY3-"i'k_b#_
%_<`-%?4'@-9AU-=HZL7o[IT*,.o*DoQ(^]u88+)ha1WSL+GUV*BrTXC/mnA<51jgH;"K:Q($`m@*FEklrHOGPA5)D'2]eJ%lfAmK
%1-sJt,\W$oJ3N*h88mH"LGTd=Guq;X8gqg9csgeU*ZT^iluLFE=jp,l_#rL&?9:\1'!'sCO99S4Rk8D'JHDOC4c.oNUr4o+:P6La
%SXeM]&%V0a6R2_RJQuljj"7(Idu\u?-a$p_Fo-DY\0l<sp@4Zo:"0g%B7T\qABE,0W"_al"8dTQ?m!_q)&[e,)^qrO`::&La@_\l
%71WtWiIc#+k@4787beM:RR#R^GUSb.O[fab$rU>1[T#_aFGFBYmOehZ3ZMD[[WlOf_5t$FDB8j)<o6C"IY#c)^4WP"q\Q]tI5m04
%5<q\^BHs&#UDW`QVM-^)ou59:Vj2,0!SAY8[)q0WCqcE`aa=dRZ'Q/Q'S9L((JWZn!_Q&=$Sa]OU0A7;;FS(9,`0PcSI$EYCsb`r
%W2OJYjqn(>Ss[>(JF2'FeF)'6gG,phgj--CC^7l/WZHuD@Qo[sl7IZ,HO+,K:UBO_+a%-![[FP1Y1:8(N]A@1gE;t7kFFVG-EBO0
%e/EaHKM1R-`p`uXjSK.&<Jp1u.Vp*sT1.c^Ln5blBE5/167mr%5$d6n[rDqh2-L8n]uE/C_Ne,9aU-[fhSo4[UbPa7jG0X*Ahb>\
%@R<_]8^jUlnjc4T/her8JO2fNV[MNop'\:G,6^$A+`d`*P5^UTm)J-57a8G:@QH=sci6.+)X[eH:us^"oFNE)PqJkLc!/9f'8+e!
%=es*E*DCoT2>h2Thd!^es6\s^ke]79reWpL("fU8%u&j-ncJ"b1(Rq>gj+Pqnq)F^+V_V/j/t&e5U)W8e_<b-`g[B2%>Hdde0oO]
%9[X%ITaMUo29O8io,!YbPIFe]JjKG_fqOK<J:2ao&`VU9;"hd=!g)S;jp3tTNfZWJd#1jmJY`I/!q[nF%VZ7Z;!KK4nggK>#3"TZ
%C&sFUBYbZ5_p%RG]T$NrC_6H<#bVc75e4=6.5V$]PBWH_Mh!/%*7?AVJ2W-0c"(t=dqV[PP1(,27>m7>d2^Rc)KTAFU$!C5L))"O
%Gr.d^O]lF^jVc@hUN*-H/3.5ZQu_"dc(d#.2".Cf;Y44`&/An!"cZ7r?R`&ck)aol-dj!=7%-J/Akms:FUubDc(nbcI/1*:)RJ?]
%\j<!#%ZLuA'+b2hUd^(qBh[u[YR$tb4AV/+UL_f'bUOJ[Bi-a;Wjsqd)1hdX9B5l)5-sA!S/r,'6pPg-(Ri\C)Ph"B4WP&1a"(B/
%HN5JbNR4tZ>%lS#F."hN;mgtnHu81n74aIh\Q#N`+e]_.WiKZ<02Pc$p:DLa<XoC*Q1;Q^J4%<V6m#Q6fr)-[Z9po+:Q1<kN:\s-
%f3+FSSHqL4T$g%Sah'V[^4(X?gZ(C+-=EdJqQddR14+\ZWlFfe:nZ`'<ifoTIld'?d5/(5=994R.Q$*-NRT_f([?PHKaqfdejnCC
%_.I_qO\cNeb=`er*NCh_#ti=>THkc*eLPTq4<k5)<3KnE!UsS_FqT17E?VPC0!E_'-;2-p7M^M":0gYI(eu,d7MYupj),af#T-2m
%U`!;W75M55P@\9Q24B[#`JS0o`,+&_M=hWY;hU['FcKTof(j%u=m*J1A:8Yq%Sj>#$t;W+XED44&PA*OGTT1Nrt#Jn/h^+$c"?^l
%I4G/%?Kp/I9_/&k7,?ki_7&RD`ZmX=>60[Mnfn`rD:58T&1e]E]`?du"GeE.OL+#bq+Ur<R^h&Q5eu^-FA$IC'dG.8QMVXfGSCI7
%T>r'*29QC.H2X\D(W&*f=qtWYc4SaWf\-.@I.1#r(hPmL5,?!QW*Q?,-n858<OsmUiQI3)%.<EZ1o\+/r3BNZE/bAA*'jngj'/Ij
%X)o'`l))Kb3i>q%E-1VG%'!2YNVjZaoVoccMFF2@2k<<&%S2\;I0Y1!>-TF#M=(FieN*FSF81L3<_:pT?FRa&!XI6T;mAHAmdpHX
%\bWET^`tl<Ad!RRU(\bS;TTLuF\??IkuQ;aDWKa^%RC9uXd:5=0&o'-6)2W0pYG,8,:'G%Aj>.6aO&Y#1Xb>aquaWI*k)D1L&>?-
%H<h-4+jVLKAG.N_Wue&h&oL0?`+V<_"^2MY'E:]sh11K;LaC*PXpC7O([s]pTZ0;;Ed"ukmY]Z`#Xkp6I76\g#$Y1t:7LH9V;ejk
%&:n!u^.t+NTM>W(-(DRWP]6,o(LKle:&P#kCH3B.IFuqlmXq.,.$;DP(cN\ir2d4p%_!YHFU.F&YVUuYiTc,#S5ph"r;-ku#F`sA
%54n)\?Wsh.k4X[oBWV%5?9OmNHUNE?kIeM3#j.91QXk^^Q3l["\=DP]2ZNIRC:-.fR87`?U0BUf[.'2\<_5m@?4MG<H4JH$^&[X<
%ptb:Jc+J\]k!L3)PEt5"S4%]BoIpOcka>f&msZ5OEZL!la7WPa)FsUV.Y+7SXE>Bj<I"T7#TXZVEZL'<"s0k@HuO.b%T8IoQ#RKB
%Ep,#Vk.(T*0;!1`Nfm_9U[ikdJ>[cp!RUXFe=fl+AD.XGiI+kh_d4DQ>_9,m//V>Kr[^:(p%u4JnBY_Fp=n?BO+7')a8=bDI/_`a
%pE+='r;?JbpCEn2IJa$0o<7n<dsjRZn`0T2YO=^45Q(HBp\t;g0"^r"O2(_f05pjm9%guo~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial Black 871 1251 a Fw(Title)64 b(of)h(the)g(Thesis)741
1541 y Fv(Optional)44 b(Subtitle)f(of)h(the)f(Thesis)1193
1964 y Fu(BA)l(CHELOR'S)38 b(THESIS)489 2219 y Ft(submitted)26
b(in)f(par)t(tial)g(ful\002llment)h(of)h(the)e(requirements)f(f)m(or)i
(the)g(deg)o(ree)e(of)1240 2488 y Fs(Bac)o(helor)36 b(of)h(Science)1843
2742 y Ft(in)814 2997 y Fr(Media)31 b(Inf)n(ormatics)h(and)g(Visual)f
(Computing)1832 3252 y Ft(b)n(y)931 3506 y Fr(Pretitle)f(Forename)k
(Surname)e(P)l(osttitle)1250 3644 y Ft(Registr)o(ation)25
b(Number)g(0123456)-33 4112 y Fq(to)f(the)h(F)l(aculty)h(of)e(Inf)m(or)
r(matics)-33 4225 y(at)g(the)h(Vienna)g(Univ)n(ersity)h(of)e(T)-10
b(echnology)-33 4422 y(Advisor:)161 b(Pretitle)25 b(F)m(orename)h(Sur)r
(name)g(P)l(osttitle)-33 4535 y(Assistance:)32 b(Pretitle)25
b(F)m(orename)h(Sur)r(name)g(P)l(osttitle)440 4648 y(Pretitle)f(F)m
(orename)h(Sur)r(name)g(P)l(osttitle)440 4761 y(Pretitle)f(F)m(orename)
h(Sur)r(name)g(P)l(osttitle)-36 5456 y(Vienna,)f(1)330
5423 y Fo(st)406 5456 y Fq(J)n(an)o(uar)s(y)-9 b(,)26
b(2001)p 1266 5474 1205 5 v 1483 5587 a(F)m(orename)g(Sur)r(name)p
2589 5474 V 553 w(F)m(orename)g(Sur)r(name)p Black -33
5900 3827 5 v 1350 5997 a Fp(T)-7 b(echnische)28 b(Universit\344t)j
(Wien)578 6110 y(A-1040)e(Wien)p 1096 6091 17 17 v 75
w(Ka)n(rlsplatz)g(13)p 1660 6091 V 76 w(T)-7 b(el.)39
b(+43-1-58801-0)p 2476 6091 V 72 w(www.tu)n(wien.ac.at)p
Black eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -41 -890 a
SDict begin H.S end
 -41 -890
a -41 -890 a
SDict begin H.R end
 -41 -890 a -41 -890 a
SDict begin [/View [/XYZ H.V]/Dest (page.iv) cvn /DEST pdfmark end
 -41 -890 a Black Black
Black Black eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44 a
-13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.v) cvn /DEST pdfmark end
 -13 -44 a Black Black -5
242 a
SDict begin H.S end
 -5 242 a -5 242 a
SDict begin 13.6 H.A end
 -5 242 a -5 242 a
SDict begin [/View [/XYZ H.V]/Dest (chapter*.1) cvn /DEST pdfmark end
 -5 242 a Black
Black 467 1012 a Fn(Erkl\344rung)76 b(zur)i(V)-19 b(erfassung)77
b(der)2807 1261 y(Arb)6 b(eit)-5 1706 y Fm(Pretitle)24
b(F)m(orename)g(Sur)r(name)g(P)l(osttitle)-8 1819 y(Address)-5
2216 y Fl(Hiermit)30 b(erkl\344re)g(ic)m(h,)h(dass)d(ic)m(h)i(diese)g
(Arb)s(eit)f(selbst\344ndig)h(v)m(erfasst)g(hab)s(e,)f(dass)g(ic)m(h)h
(die)f(v)m(erw)m(en-)-5 2328 y(deten)35 b(Quellen)f(und)e(Hilfsmittel)k
(v)m(ollst\344ndig)g(angegeb)s(en)f(hab)s(e)e(und)g(dass)g(ic)m(h)i
(die)f(Stellen)h(der)-8 2441 y(Arb)s(eit)g(\025)g(einsc)m(hlie\377lic)m
(h)j(T)-8 b(ab)s(ellen,)35 b(Karten)g(und)f(Abbildungen)g(\025,)h(die)g
(anderen)g(W)-8 b(erk)m(en)36 b(o)s(der)-5 2554 y(dem)h(In)m(ternet)h
(im)g(W)-8 b(ortlaut)39 b(o)s(der)e(dem)g(Sinn)f(nac)m(h)i(en)m
(tnommen)g(sind,)e(auf)h(jeden)h(F)-8 b(all)39 b(un)m(ter)-8
2667 y(Angab)s(e)30 b(der)g(Quelle)h(als)g(En)m(tlehn)m(ung)f(k)m(enn)m
(tlic)m(h)i(gemac)m(h)m(t)g(hab)s(e.)-9 3441 y Fq(Wien,)25
b(1.)g(J\344nner)g(2001)p 2263 3454 1205 5 v 2480 3567
a(F)m(orename)h(Sur)r(name)p Black 3420 5381 a Fl(v)p
Black eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44 a
285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.vi) cvn /DEST pdfmark end
 285 -44 a Black Black Black
Black eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44 a
-13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.vii) cvn /DEST pdfmark end
 -13 -44 a Black Black -5
242 a
SDict begin H.S end
 -5 242 a -5 242 a
SDict begin 13.6 H.A end
 -5 242 a -5 242 a
SDict begin [/View [/XYZ H.V]/Dest (chapter*.2) cvn /DEST pdfmark end
 -5 242 a Black
Black 2230 1012 a Fn(Danksagung)-5 1457 y Fl(Ihr)30 b(T)-8
b(ext)31 b(hier.)p Black 3369 5381 a(vii)p Black eop
end
%%Page: 8 8
TeXDict begin 8 7 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44 a
285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.viii) cvn /DEST pdfmark end
 285 -44 a Black Black Black
Black eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44 a
-13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.ix) cvn /DEST pdfmark end
 -13 -44 a Black Black -5
242 a
SDict begin H.S end
 -5 242 a -5 242 a
SDict begin 13.6 H.A end
 -5 242 a -5 242 a
SDict begin [/View [/XYZ H.V]/Dest (chapter*.3) cvn /DEST pdfmark end
 -5 242 a Black
Black 1546 1012 a Fn(A)-6 b(c)g(kno)g(wledgemen)g(ts)-5
1457 y Fl(En)m(ter)31 b(y)m(our)f(text)i(here.)p Black
3394 5381 a(ix)p Black eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44
a 285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.x) cvn /DEST pdfmark end
 285 -44 a Black Black
Black Black eop end
%%Page: 11 11
TeXDict begin 11 10 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44
a -13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.xi) cvn /DEST pdfmark end
 -13 -44 a Black Black
-5 242 a
SDict begin H.S end
 -5 242 a -5 242 a
SDict begin 13.6 H.A end
 -5 242 a -5 242 a
SDict begin [/View [/XYZ H.V]/Dest (chapter*.4) cvn /DEST pdfmark end
 -5 242 a
Black Black 2217 1012 a Fn(Kurzfassung)-5 1457 y Fl(Ihr)30
b(T)-8 b(ext)31 b(hier.)p Black 3394 5381 a(xi)p Black
eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44
a 285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.xii) cvn /DEST pdfmark end
 285 -44 a Black Black
Black Black eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44
a -13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.xiii) cvn /DEST pdfmark end
 -13 -44 a Black Black
-5 242 a
SDict begin H.S end
 -5 242 a -5 242 a
SDict begin 13.6 H.A end
 -5 242 a -5 242 a
SDict begin [/View [/XYZ H.V]/Dest (chapter*.5) cvn /DEST pdfmark end
 -5 242 a
Black Black 2586 1012 a Fn(Abstract)-7 1457 y Fl(200-250)33
b(w)m(ords)d(or)h(10-15)h(lines)f(En)m(ter)f(y)m(our)g(text)i(here.)p
Black 3344 5381 a(xiii)p Black eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44
a 285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.xiv) cvn /DEST pdfmark end
 285 -44 a Black Black
Black Black eop end
%%Page: 15 15
TeXDict begin 15 14 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44
a -13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.xv) cvn /DEST pdfmark end
 -13 -44 a Black Black
Black Black 2560 1067 a Fn(Con)-6 b(ten)g(ts)-5 1399
y
SDict begin H.S end
 -5 1399 a -5 1399 a
SDict begin 13.6 H.A end
 -5 1399 a -5 1399 a
SDict begin [/View [/XYZ H.V]/Dest (section*.6) cvn /DEST pdfmark end
 -5 1399 a -5
1612 a
SDict begin H.S end
 -5 1612 a Fk(Kurzfassung)557 1612 y
SDict begin 13.6 H.L end
 557 1612 a
557 1612 a
SDict begin [/Subtype /Link/Dest (chapter*.4) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 557 1612 a 2826 w Fk(xi)-5 1825 y
SDict begin H.S end
 -5 1825
a Fk(Abstract)395 1825 y
SDict begin 13.6 H.L end
 395 1825 a 395 1825 a
SDict begin [/Subtype /Link/Dest (chapter*.5) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 395 1825
a 2932 w Fk(xiii)-5 2038 y
SDict begin H.S end
 -5 2038 a Fk(Con)m(ten)m(ts)404
2038 y
SDict begin 13.6 H.L end
 404 2038 a 404 2038 a
SDict begin [/Subtype /Link/Dest (section*.6) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 404 2038 a 2956 w Fk(xv)-5
2251 y
SDict begin H.S end
 -5 2251 a Fk(List)35 b(of)g(Figures)660 2251 y
SDict begin 13.6 H.L end

660 2251 a 660 2251 a
SDict begin [/Subtype /Link/Dest (section*.7) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 660 2251 a 2668 w Fk(xvi)-5 2464
y
SDict begin H.S end
 -5 2464 a Fk(List)g(of)g(T)-9 b(ables)614 2464 y
SDict begin 13.6 H.L end
 614
2464 a 614 2464 a
SDict begin [/Subtype /Link/Dest (section*.8) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 614 2464 a 2714 w Fk(xvi)-5 2677 y
SDict begin H.S end

-5 2677 a Fk(List)35 b(of)g(Algorithms)834 2677 y
SDict begin 13.6 H.L end
 834
2677 a 834 2677 a
SDict begin [/Subtype /Link/Dest (chapter*.9) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 834 2677 a 2493 w Fk(xvii)-5 2891 y
SDict begin H.S end

-5 2891 a Fk(1)85 b(In)m(tro)s(duction)708 2891 y
SDict begin 13.6 H.L end
 708
2891 a 708 2891 a
SDict begin [/Subtype /Link/Dest (chapter.1) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 708 2891 a 2718 w Fk(1)132 3005 y
SDict begin H.S end
 132
3005 a Fl(1.1)94 b(Motiv)-5 b(ation)773 3005 y
SDict begin 13.6 H.L end
 773 3005
a 773 3005 a
SDict begin [/Subtype /Link/Dest (section.1.1) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 773 3005 a 93 w Fl(.)46 b(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g
(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)
g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)136 b(1)132 3120 y
SDict begin H.S end
 132
3120 a Fl(1.2)94 b(problem)30 b(statemen)m(t)i(\(whic)m(h)e(problem)g
(should)f(b)s(e)h(solv)m(ed?\))2498 3120 y
SDict begin 13.6 H.L end
 2498 3120
a 2498 3120 a
SDict begin [/Subtype /Link/Dest (section.1.2) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2498 3120 a 65 w Fl(.)46 b(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)
g(.)f(.)130 b(3)132 3235 y
SDict begin H.S end
 132 3235 a Fl(1.3)94 b(aim)31
b(of)f(the)h(w)m(ork)970 3235 y
SDict begin 13.6 H.L end
 970 3235 a 970 3235 a
SDict begin [/Subtype /Link/Dest (section.1.3) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end

970 3235 a 38 w Fl(.)46 b(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f
(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)
h(.)g(.)f(.)130 b(3)132 3350 y
SDict begin H.S end
 132 3350 a Fl(1.4)94 b(metho)s
(dological)33 b(approac)m(h)1331 3350 y
SDict begin 13.6 H.L end
 1331 3350 a 1331
3350 a
SDict begin [/Subtype /Link/Dest (section.1.4) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1331 3350 a 30 w Fl(.)46 b(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f
(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)
130 b(4)132 3464 y
SDict begin H.S end
 132 3464 a Fl(1.5)94 b(structure)30
b(of)g(the)h(w)m(ork)1183 3464 y
SDict begin 13.6 H.L end
 1183 3464 a 1183 3464
a
SDict begin [/Subtype /Link/Dest (section.1.5) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1183 3464 a 37 w Fl(.)46 b(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)
f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f
(.)130 b(4)-5 3677 y
SDict begin H.S end
 -5 3677 a Fk(2)85 b(State)34 b(of)h(the)f(art)h(/)
g(analysis)g(of)g(existing)g(approac)m(hes)2362 3677
y
SDict begin 13.6 H.L end
 2362 3677 a 2362 3677 a
SDict begin [/Subtype /Link/Dest (chapter.2) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 2362 3677 a 1056 w Fk(5)132
3792 y
SDict begin H.S end
 132 3792 a Fl(2.1)94 b(literature)31 b(studies)1014
3792 y
SDict begin 13.6 H.L end
 1014 3792 a 1014 3792 a
SDict begin [/Subtype /Link/Dest (section.2.1) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1014 3792 a 65 w Fl(.)45
b(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f
(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)130
b(5)132 3907 y
SDict begin H.S end
 132 3907 a Fl(2.2)94 b(analysis)652 3907
y
SDict begin 13.6 H.L end
 652 3907 a 652 3907 a
SDict begin [/Subtype /Link/Dest (section.2.2) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 652 3907 a 73 w Fl(.)46 b(.)f(.)h(.)g(.)g(.)f
(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)
h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)130
b(5)132 4022 y
SDict begin H.S end
 132 4022 a Fl(2.3)94 b(visualization)32
b(to)f(supp)s(ort)e(program)h(understanding)f(ma)m(yb)s(e)h(some)h
(examples\(and)g(to)s(ols\))3594 4022 y
SDict begin 13.6 H.L end
 3594 4022 a 3594
4022 a
SDict begin [/Subtype /Link/Dest (section.2.3) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3594 4022 a 96 w Fl(8)132 4136 y
SDict begin H.S end
 132 4136 a Fl(2.4)94
b(comparison)30 b(and)g(summary)f(of)i(existing)g(approac)m(hes)2272
4136 y
SDict begin 13.6 H.L end
 2272 4136 a 2272 4136 a
SDict begin [/Subtype /Link/Dest (section.2.4) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2272 4136 a 79 w Fl(.)46
b(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)130
b(8)-5 4350 y
SDict begin H.S end
 -5 4350 a Fk(3)85 b(Metho)s(dology)731
4350 y
SDict begin 13.6 H.L end
 731 4350 a 731 4350 a
SDict begin [/Subtype /Link/Dest (chapter.3) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 731 4350 a 2643 w Fk(11)132
4464 y
SDict begin H.S end
 132 4464 a Fl(3.1)94 b(used)29 b(concepts)886
4464 y
SDict begin 13.6 H.L end
 886 4464 a 886 4464 a
SDict begin [/Subtype /Link/Dest (section.3.1) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 886 4464 a 51 w Fl(.)46
b(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)h(.)g
(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)91
b(11)132 4579 y
SDict begin H.S end
 132 4579 a Fl(3.2)j(metho)s(ds)29 b(and/or)i(mo)s(dels)
1287 4579 y
SDict begin 13.6 H.L end
 1287 4579 a 1287 4579 a
SDict begin [/Subtype /Link/Dest (section.3.2) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1287 4579 a 74 w
Fl(.)46 b(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g
(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)91 b(11)132
4694 y
SDict begin H.S end
 132 4694 a Fl(3.3)j(languages)724 4694 y
SDict begin 13.6 H.L end
 724 4694
a 724 4694 a
SDict begin [/Subtype /Link/Dest (section.3.3) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 724 4694 a 72 w Fl(.)45 b(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h
(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)
g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)91 b(11)132 4809
y
SDict begin H.S end
 132 4809 a Fl(3.4)j(design)30 b(metho)s(ds)956 4809
y
SDict begin 13.6 H.L end
 956 4809 a 956 4809 a
SDict begin [/Subtype /Link/Dest (section.3.4) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 956 4809 a 52 w Fl(.)46 b(.)f(.)h(.)g(.)f(.)h
(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)
g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)84 b(12)132 4923
y
SDict begin H.S end
 132 4923 a Fl(3.5)94 b(data)31 b(mo)s(dels)824 4923
y
SDict begin 13.6 H.L end
 824 4923 a 824 4923 a
SDict begin [/Subtype /Link/Dest (section.3.5) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 824 4923 a 42 w Fl(.)46 b(.)g(.)g(.)f(.)h(.)g
(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)
f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)84 b(12)132
5038 y
SDict begin H.S end
 132 5038 a Fl(3.6)94 b(analysis)31 b(metho)s(ds)1020
5038 y
SDict begin 13.6 H.L end
 1020 5038 a 1020 5038 a
SDict begin [/Subtype /Link/Dest (section.3.6) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1020 5038 a 59 w Fl(.)45
b(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f
(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)84
b(12)132 5153 y
SDict begin H.S end
 132 5153 a Fl(3.7)94 b(formalisms)769
5153 y
SDict begin 13.6 H.L end
 769 5153 a 769 5153 a
SDict begin [/Subtype /Link/Dest (section.3.7) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 769 5153 a 27 w Fl(.)45
b(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f
(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)
84 b(12)p Black 3372 5381 a(xv)p Black eop end
%%Page: 16 16
TeXDict begin 16 15 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44
a 285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.xvi) cvn /DEST pdfmark end
 285 -44 a Black Black
293 333 a
SDict begin H.S end
 293 333 a Fk(4)84 b(Suggested)36 b(solution/implemen)m
(tation)2046 333 y
SDict begin 13.6 H.L end
 2046 333 a 2046 333 a
SDict begin [/Subtype /Link/Dest (chapter.4) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 2046 333 a 1617
w Fk(13)429 446 y
SDict begin H.S end
 429 446 a Fl(4.1)94 b(suggested)31
b(solution)1361 446 y
SDict begin 13.6 H.L end
 1361 446 a 1361 446 a
SDict begin [/Subtype /Link/Dest (section.4.1) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1361 446
a 86 w Fl(.)46 b(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)
g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)84
b(13)429 559 y
SDict begin H.S end
 429 559 a Fl(4.2)94 b(implemen)m(tation)1255
559 y
SDict begin 13.6 H.L end
 1255 559 a 1255 559 a
SDict begin [/Subtype /Link/Dest (section.4.2) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1255 559 a 51 w Fl(.)45 b(.)h(.)g(.)f(.)h
(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)
g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)85 b(14)293 763
y
SDict begin H.S end
 293 763 a Fk(5)f(Critical)35 b(re\035ection)1231 763
y
SDict begin 13.6 H.L end
 1231 763 a 1231 763 a
SDict begin [/Subtype /Link/Dest (chapter.5) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 1231 763 a 2432 w Fk(15)429 876
y
SDict begin H.S end
 429 876 a Fl(5.1)94 b(comparison)31 b(with)f(related)h(w)m(ork)1821
876 y
SDict begin 13.6 H.L end
 1821 876 a 1821 876 a
SDict begin [/Subtype /Link/Dest (section.5.1) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1821 876 a 50 w Fl(.)46 b(.)g(.)f(.)h(.)g
(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)
f(.)h(.)84 b(15)429 989 y
SDict begin H.S end
 429 989 a Fl(5.2)94 b(discussion)30
b(of)h(op)s(en)e(issues)1611 989 y
SDict begin 13.6 H.L end
 1611 989 a 1611 989
a
SDict begin [/Subtype /Link/Dest (section.5.2) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1611 989 a 48 w Fl(.)46 b(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g
(.)f(.)h(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)84
b(15)293 1193 y
SDict begin H.S end
 293 1193 a Fk(6)g(Summary)36 b(and)e(future)h(w)m(ork)
1643 1193 y
SDict begin 13.6 H.L end
 1643 1193 a 1643 1193 a
SDict begin [/Subtype /Link/Dest (chapter.6) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 1643 1193 a 2023
w Fk(17)293 1396 y
SDict begin H.S end
 293 1396 a Fk(Bibliograph)m(y)878
1396 y
SDict begin 13.6 H.L end
 878 1396 a 878 1396 a
SDict begin [/Subtype /Link/Dest (section*.13) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 878 1396 a 2785 w Fk(19)p
Black Black 2289 2075 a Fn(List)76 b(of)i(Figures)293
2448 y
SDict begin H.S end
 293 2448 a 293 2448 a
SDict begin 13.6 H.A end
 293 2448 a 293 2448 a
SDict begin [/View [/XYZ H.V]/Dest (section*.7) cvn /DEST pdfmark end
 293
2448 a Black Black 2390 3169 a Fn(List)f(of)h(T)-19 b(ables)293
3502 y
SDict begin H.S end
 293 3502 a 293 3502 a
SDict begin 13.6 H.A end
 293 3502 a 293 3502 a
SDict begin [/View [/XYZ H.V]/Dest (section*.8) cvn /DEST pdfmark end
 293
3502 a Black 1879 x Fl(xvi)p Black eop end
%%Page: 17 17
TeXDict begin 17 16 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44
a -13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.xvii) cvn /DEST pdfmark end
 -13 -44 a Black Black
-5 242 a
SDict begin H.S end
 -5 242 a -5 242 a
SDict begin 13.6 H.A end
 -5 242 a -5 242 a
SDict begin [/View [/XYZ H.V]/Dest (chapter*.9) cvn /DEST pdfmark end
 -5 242 a
Black Black 1603 1012 a Fn(List)76 b(of)i(Algorithms)p
Black 3321 5381 a Fl(xvii)p Black eop end
%%Page: 18 18
TeXDict begin 18 17 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44
a 285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.xviii) cvn /DEST pdfmark end
 285 -44 a Black Black
Black Black eop end
%%Page: 1 19
TeXDict begin 1 18 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44
a -13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -13 -44 a Black Black
-5 242 a
SDict begin H.S end
 -5 242 a -5 242 a
SDict begin 13.6 H.A end
 -5 242 a -5 242 a
SDict begin [/View [/XYZ H.V]/Dest (chapter.1) cvn /DEST pdfmark end
 -5 242 a
Black Black 2799 1213 a Fj(CHAPTER)3573 1213 y
 currentpoint currentpoint translate 3.26875 3.26875 scale neg exch
neg exch translate
 3573 1213
a Fi(1)3573 1213 y
 currentpoint currentpoint translate 1 3.26875 div 1 3.26875 div scale
neg exch neg exch translate
 3573 1213 a 3988 1213 1140 426 v Black
Black 2189 1669 a Fn(In)-6 b(tro)6 b(duction)-5 2001
y
SDict begin H.S end
 -5 2001 a -5 2001 a
SDict begin 13.6 H.A end
 -5 2001 a -5 2001 a
SDict begin [/View [/XYZ H.V]/Dest (section.1.1) cvn /DEST pdfmark
end
 -5 2001 a -12
2154 a Fh(1.1)136 b(Motiv)-7 b(ation)p Black 132 2359
a Fg(\017)p Black 46 w Fl(OK)29 b(soft)m(w)m(are,)j(due)e(to)h
(its\(steady)h(gro)m(wing\))f(complexit)m(y)h([)2340
2359 y
SDict begin H.S end
 2340 2359 a Black Fl(LB85)p Black 2553 2296 a
SDict begin H.R end

2553 2296 a 2553 2359 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Lehman:1985:PEP:7261) cvn H.B /ANN pdfmark end
 2553 2359 a Fl(]\(need)f(to)g(read\))223
2472 y(ma)m(yb)s(e)f(b)s(etter)g(than)h(the)f(lehman85)h(cus)f(a)m(v)-5
b(ailable)33 b([)2117 2472 y
SDict begin H.S end
 2117 2472 a Black Fl(LR03)p
Black 2332 2409 a
SDict begin H.R end
 2332 2409 a 2332 2472 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Lehman:2003:SEB:950401.950407) cvn H.B /ANN pdfmark
end
 2332 2472 a
Fl(])223 2585 y(structured)c(programming)h(h)m
(ttp://dl.acm.org/citation.cfm?id=1243)q(38)q(0)p Black
132 2785 a Fg(\017)p Black 46 w Fl(OK)f(soft)m(w)m(are)j(ev)m(olution)
223 2898 y(Ev)m(elyn)42 b(Barry)g(,)j(Sandra)c(Slaugh)m(ter)h(,)j
(Chris)c(F.)h(Kemerer,)j(An)c(empirical)i(analysis)f(of)223
3011 y(soft)m(w)m(are)g(ev)m(olution)h(pro\034les)d(and)h(outcomes,)k
(Pro)s(ceedings)c(of)h(the)f(20th)h(in)m(ternational)223
3124 y(conference)36 b(on)f(Information)g(Systems,)i(p.453-458,)i
(Decem)m(b)s(er)e(12-15,)h(1999,)h(Charlotte,)223 3237
y(North)30 b(Carolina,)h(USA)p Black 132 3437 a Fg(\017)p
Black 46 w Fl(OK)e(main)m(tenance)j([)947 3437 y
SDict begin H.S end
 947
3437 a Black Fl(LS80)p Black 1146 3375 a
SDict begin H.R end
 1146 3375 a
1146 3437 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Lientz:1980:SMM:601062) cvn H.B /ANN pdfmark end
 1146 3437 a Fl(])e([)1226 3437 y
SDict begin H.S end
 1226 3437
a Black Fl(ISO06)p Black 1471 3375 a
SDict begin H.R end
 1471 3375 a 1471
3437 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.ISOSWMaintainance) cvn H.B /ANN pdfmark end
 1471 3437 a Fl(])219 3550 y(T.)25 b(H.)g(Ng)g(,)h(S.)e(C.)h
(Cheung)e(,)j(W.)g(K.)e(Chan)g(,)i(Y.)f(T.)f(Y)-8 b(u,)27
b(Do)e(Main)m(tainers)h(Utilize)h(Deplo)m(y)m(ed)223
3663 y(Design)33 b(P)m(atterns)g(E\033ectiv)m(ely?,)i(Pro)s(ceedings)e
(of)f(the)h(29th)g(in)m(ternational)h(conference)f(on)223
3776 y(Soft)m(w)m(are)e(Engineering,)g(p.168-177,)i(Ma)m(y)f(20-26,)g
(2007)223 3889 y(co)s(de)46 b(has)h(to)g(b)s(e)f(understo)s(o)s(d)f([)
1411 3889 y
SDict begin H.S end
 1411 3889 a Black Fl(Bo)s(e76)p Black 1654
3826 a
SDict begin H.R end
 1654 3826 a 1654 3889 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Boehm:1976:SE:1311958.1312684) cvn H.B /ANN pdfmark
end
 1654 3889 a Fl(])i(in)f(order)g(to)i
(mak)m(e)f(c)m(hanges)h(or)e(add)g(features)223 4002
y([)248 4002 y
SDict begin H.S end
 248 4002 a Black Fl(SLea97)p Black 532
3939 a
SDict begin H.R end
 532 3939 a 532 4002 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Singer97anexamination) cvn H.B /ANN pdfmark end
 532 4002 a Fl(])223 4115
y(in)m(tegrate)39 b(somewhere)d(here:)54 b(soft)m(w)m(are)38
b(->)f(bug)f(->)h(understand\(up)d(to)k(60\045)f([)3109
4115 y
SDict begin H.S end
 3109 4115 a Black Fl(Bas97)p Black 3346 4052 a
SDict begin H.R end

3346 4052 a 3346 4115 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Basili:1997:EPR:257260.257262) cvn H.B /ANN pdfmark
end
 3346 4115 a Fl(]\(is)223 4228
y(this)30 b(really)h(related?)41 b(thorough)31 b(reading)f(ma)m(y)h(b)s
(e)f(b)s(etter\))h([)2371 4245 y
SDict begin H.S end
 2371 4245 a Black -17
x Fl(Pig96)p Black 2594 4165 a
SDict begin H.R end
 2594 4165 a 2594 4228
a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Pigoski:1996:PSM:524398) cvn H.B /ANN pdfmark end
 2594 4228 a Fl(])g(\))f(to)i(\034x)136 4457 y(Soft)m(w)m(are)37
b(under)e(lies)h(a)h(con)m(tin)m(uous)f(c)m(hanges,)j(throughout)c(its)
i(liv)m(e)g(cycle.)59 b(The)35 b(ev)m(olution)-5 4570
y(pro)s(cess)41 b(from)f(the)h(b)s(eginning)g(of)g(dev)m(elopmen)m(t)h
(un)m(til)f(its)h(release)g(and)e(main)m(tenance.)74
b(Large)-5 4683 y(soft)m(w)m(are)320 4683 y
SDict begin H.S end
 320 4683
a -33 x Ff(1)361 4683 y
SDict begin 13.6 H.L end
 361 4683 a 361 4683 a
SDict begin [/Subtype /Link/Dest (Hfootnote.1) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 361 4683
a 40 w Fl(and)38 b(most)i(of)g(all)g(soft)m(w)m(are)h(classi\034ed)f
(as)g(t)m(yp)s(e)f(E)g([)2281 4683 y
SDict begin H.S end
 2281 4683 a Black
Fl(CHL)-10 b(W06)p Black 2647 4620 a
SDict begin H.R end
 2647 4620 a 2647
4683 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Cook:2006:ESS:1115566.1115567) cvn H.B /ANN pdfmark
end
 2647 4683 a Fl(])39 b(gets)i(more)e(complex)-5
4796 y(o)m(v)m(er)c(time.)50 b(If)33 b(there)h(are)g(more)f(than)g(a)h
(few)f(dev)m(elop)s(ers/dev)m(elopmen)m(t)j(teams)e(are)f(in)m(v)m(olv)
m(ed)i(or)p Black Black -5 4884 1389 4 v 124 4939 a Fe(1)159
4970 y
SDict begin H.S end
 159 4970 a 159 4970 a
SDict begin H.R end
 159 4970 a 159 4970 a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.1) cvn /DEST pdfmark
end
 159
4970 a Fd("The)e(term)f(large)i(is,)i(generally)-6 b(,)35
b(used)d(to)h(describ)r(e)g(soft)n(w)n(are)i(whose)e(size)h(in)e(n)n
(um)n(b)r(er)g(of)h(lines)h(of)f(co)r(de)g(is)-5 5062
y(greater)20 b(than)e(some)i(arbitrary)f(v)l(alue.)32
b(F)-6 b(or)18 b(reasons)i(indicated)f(in)g([leh79],)j(it)d(is)g(more)g
(appropriate)g(to)g(de\034ne)f(a)h(large)-5 5153 y(program)27
b(as)f(one)g(dev)n(elop)r(ed)f(b)n(y)g(pro)r(cesses)i(in)n(v)n(olving)f
(groups)g(with)g(t)n(w)n(o)g(or)g(more)g(managemen)n(t)g(lev)n(els."[)
3216 5153 y
SDict begin H.S end
 3216 5153 a Black Fd(LR03)p Black 3399 5101
a
SDict begin H.R end
 3399 5101 a 3399 5153 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Lehman:2003:SEB:950401.950407) cvn H.B /ANN pdfmark
end
 3399 5153 a Fd(])p Black Black
Black 3422 5381 a Fl(1)p Black eop end
%%Page: 2 20
TeXDict begin 2 19 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44
a 285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 285 -44 a Black Black
293 333 a Fl(the)23 b(dev)m(elop)s(ers/dev)m(elopmen)m(t)j(teams)e(are)
f(spread)g(allo)m(v)m(er)i(the)f(w)m(orld,)g(there)g(exists)g(more)f
(foreign)293 446 y(co)s(de)31 b(than)f(self)g(written.)p
Black 429 661 a Fg(\017)p Black 46 w Fl(OK)g(program)g(comprehension)
434 877 y(Since)22 b(c)m(hanges,)k(enhancemen)m(ts)d(or)f(\034xes)g(of)
h(existing)g(co)s(de)g(demand)e(the)i(dev)m(elop)s(ers)g(in)m(v)m(olv)m
(ed)293 989 y(to)j(gain)g(a)g(high)f(lev)m(el)i(of)f(understanding)d
(for)i(the)h(soft)m(w)m(are)h(at)f(hand.)38 b(This)25
b(task)h(is)f(referred)g(to)h(b)m(y)293 1102 y(the)33
b(scien)m(ti\034c)i(comm)m(unit)m(y)f(as)f("program)g(understanding")e
(or)i("program)g(comprehension")g(and)293 1215 y(th)m(us)g(these)h(w)m
(ords)f(are)h(considered)f(synon)m(ym)g(in)g(this)h(thesis.)50
b(This)33 b(thesis)g(addresses)g(the)h(task)293 1328
y(of)c(impro)m(ving)f(program)h(comprehension)f(of)h(the)f
(concatenativ)m(e)k(programming)d(language)h(forth)293
1441 y(on)f(sev)m(eral)i(lev)m(el.)p Black 429 1656 a
Fg(\017)p Black 46 w Fl(OK)e(prop)s(er)f(reading)h(as)h(of)f([)1546
1656 y
SDict begin H.S end
 1546 1656 a Black Fl(Bas97)p Black 1783 1594 a
SDict begin H.R end

1783 1594 a 1783 1656 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Basili:1997:EPR:257260.257262) cvn H.B /ANN pdfmark
end
 1783 1656 a Fl(]\(?\))42 b([)1988
1656 y
SDict begin H.S end
 1988 1656 a Black Fl(R)m(CM04)p Black 2292 1594
a
SDict begin H.R end
 2292 1594 a 2292 1656 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Robillard:2004:EDI:1042203.1042417) cvn H.B /ANN pdfmark
end
 2292 1656 a Fl(])520 1769 y(systematic)32
b(approac)m(h,)f(strategy)h(ma)m(y)f(dep)s(end)d(on)j(v)-5
b(arious)30 b(attributes)p Black 429 1960 a Fg(\017)p
Black 46 w Fl(OK)g(men)m(tal)h(mo)s(del\(LaT)-8 b(oza)33
b(et)e(al.,)g(2006\))520 2073 y(read:)64 b(@inpro)s(ceedingsLieb)s
(erman:1995:BGC:223904.223969)q(,)51 b(author)41 b(=)h(Lieb)s(erman,)
520 2186 y(Henry)24 b(and)h(F)-8 b(ry)g(,)26 b(Christopher,)f(title)h
(=)e(Bridging)h(the)g(Gulf)g(Bet)m(w)m(een)h(Co)s(de)f(and)f(Beha)m
(vior)520 2299 y(in)35 b(Programming,)j(b)s(o)s(oktitle)e(=)g(Pro)s
(ceedings)f(of)h(the)g(SIGCHI)f(Conference)g(on)h(Human)520
2412 y(F)-8 b(actors)28 b(in)d(Computing)g(Systems,)h(series)g(=)f(CHI)
g('95,)j(y)m(ear)e(=)f(1995,)k(isbn)24 b(=)i(0-201-84705-)516
2525 y(1,)44 b(lo)s(cation)e(=)f(Den)m(v)m(er,)k(Colorado,)g(USA,)c
(pages)g(=)g(480\025486,)47 b(n)m(umpages)41 b(=)f(7,)k(url)d(=)520
2638 y(h)m(ttp://dx.doi.org/10.1145/2)q(23)q(904)q(.2)q(239)q(69)q(,)34
b(doi)28 b(=)f(10.1145/223904.)q(22)q(396)q(9,)35 b(acmid)28
b(=)518 2751 y(223969,)36 b(publisher)c(=)g(A)m(CM)h(Press/A)m
(ddison-W)-8 b(esley)35 b(Publishing)d(Co.,)i(address)e(=)g(New)517
2864 y(Y)-8 b(ork,)31 b(NY,)g(USA,)p Black 429 3055 a
Fg(\017)p Black 46 w Fl(OK)f(strategies)i(as)f(stated)g(b)m(y)f([)1633
3055 y
SDict begin H.S end
 1633 3055 a Black Fl(SFM99)p Black 1918 2992 a
SDict begin H.R end

1918 2992 a 1918 3055 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Storey:1999:CDE:308936.308940) cvn H.B /ANN pdfmark
end
 1918 3055 a Fl(])p Black 429
3246 a Fg(\017)p Black 46 w Fl(OK)g(dynamic)g(analysis)h(as)g
(de\034ned)e(b)m(y)h([)1976 3246 y
SDict begin H.S end
 1976 3246 a Black
Fl(Bal99)p Black 2202 3183 a
SDict begin H.R end
 2202 3183 a 2202 3246 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Ball:1999:CDA:318774.318944) cvn H.B /ANN pdfmark
end

2202 3246 a Fl(])h([)2283 3246 y
SDict begin H.S end
 2283 3246 a Black Fl(CZvD)2522
3213 y Fc(+)2581 3246 y Fl(09)p Black 2672 3172 a
SDict begin H.R end
 2672
3172 a 2672 3246 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Cornelissen:2009:SSP:1638616.1639301) cvn H.B /ANN
pdfmark end
 2672 3246 a Fl(])p Black 429 3437
a Fg(\017)p Black 46 w Fl(OK)f(static)i(analysis)f(as)f(de\034ned)g(b)m
(y)g([)1858 3437 y
SDict begin H.S end
 1858 3437 a Black Fl(Bal99)p Black
2084 3374 a
SDict begin H.R end
 2084 3374 a 2084 3437 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Ball:1999:CDA:318774.318944) cvn H.B /ANN pdfmark
end
 2084 3437 a Fl(])434
3652 y(Namely)41 b(the)f(the)g(reading)g(of)g(source)g(co)s(de,)i
(static)g(analysis,)h(dynamic)c(analysis)i(and)e(the)293
3765 y(assistance)32 b(of)e(writing)h(readable)f(and)g(easy)h(to)g
(understand)e(source)h(co)s(de.)p Black 429 3980 a Fg(\017)p
Black 46 w Fl(OK)h(concatenativ)m(e)k(languages)f(->)d(forth,)h(p)s
(ostscript,)g(factor)h(->)f(implications)h(from)e(the)520
4093 y(concatenativ)m(e)41 b(nature...)64 b(ie)39 b(p)s(oten)m(tial)g
(to)g(b)s(e)e(more)h(natural)g(to)h(read)f(cause)g(of)h(rev)m(erse)520
4206 y(p)s(olish)30 b(notation)520 4319 y(Da)m(vid)43
b(Shepherd)d(,)45 b(Lori)d(P)m(ollo)s(c)m(k)i(,)h(K.)d(Vija)m(y-Shank)m
(er,)j(Case)e(study:)63 b(supplemen)m(ting)520 4432 y(program)31
b(analysis)g(with)g(natural)g(language)i(analysis)e(to)h(impro)m(v)m(e)
g(a)f(rev)m(erse)h(engineering)520 4545 y(task,)46 b(Pro)s(ceedings)c
(of)g(the)g(7th)g(A)m(CM)g(SIGPLAN-SIGSOFT)f(w)m(orkshop)g(on)h
(Program)520 4658 y(analysis)33 b(for)f(soft)m(w)m(are)i(to)s(ols)f
(and)e(engineering,)j(p.49-54,)h(June)c(13-14,)k(2007,)g(San)d(Diego,)
520 4771 y(California,)f(USA)p Black 429 4962 a Fg(\017)p
Black 46 w Fl(OK)f(comparison)g(to)i(o)s(o)e(langs)p
Black 429 5153 a Fg(\017)p Black 46 w Fl(OK)g(higher)g(abstraction,)i
(hard)d(structure)h(b)s(oundaries)p Black 293 5381 a(2)p
Black eop end
%%Page: 3 21
TeXDict begin 3 20 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44
a -13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -13 -44 a Black Black
Black 132 333 a Fg(\017)p Black 46 w Fl(OK)23 b(paradigm)i(promotes)g
(a)g(single)g(shared)f(data)h(structure)f(of)h(high)f(imp)s(ortance)h
(and)f(th)m(us)223 446 y(ma)m(y)37 b(simplify)g(the)g(task)h(of)f
(putting)g(all)h(the)f(necessary)h(run-time)e(information)i(visually)
223 559 y(together\(cite)d(someone)d(who)g(sa)m(ys)g(that)h(its)f(imp)s
(ortan)m(t)g(to)h(ha)m(v)m(e)g(all)g(information)f(visible)223
672 y(at)h(ev)m(ery)g(p)s(oin)m(t)g(in)f(time\).)49 b(Although)33
b(there)g(are)g(sev)m(eral)h(stac)m(ks,)g(features)f(lik)m(e)h
(arbitrary)223 785 y(memory)c(allo)s(cation,)j(the)d(fo)s(cus)g(on)g
(stac)m(ks)i(is)e(clearly)i(stated.)136 1001 y(Due)23
b(to)f(the)h(nature)f(of)g(concatenativ)m(e)j(languages,)g(it)e(is)f(p)
s(ossible)f(to)i(write)f(source)h(co)s(de)f(whic)m(h)-5
1113 y(ready)33 b(v)m(ery)g(similar)g(to)h(natural)f(language.)49
b(There)33 b(are)g(no)f(hard)g(b)s(oundaries)g(to)h(the)g(structure)-5
1226 y(of)39 b(the)g(source)g(co)s(de\(custom)h(de\034ned)e(lo)s(ops)h
(and)f(con)m(trol)i(structures\))f(as)g(in)g(ob)s(ject)g(orien)m(ted)-5
1339 y(languages.)67 b(Since)38 b(forth)g(directly)i(op)s(erates)f
(only)f(on)h(stac)m(ks)h(and)d(memory)-8 b(,)42 b(the)c(information)-8
1452 y(whic)m(h)31 b(is)g(immediately)h(needed)f(to)g(follo)m(w)i
(program)d(execution)j(is)e(limited)g(to)h(those)g(structures.)-5
1565 y(In)f(con)m(trast,)j(in)d(ob)s(ject)h(orien)m(ted)g(languages)h
(there)f(is)f(also)i(ob)s(ject)f(state,)h(ob)s(ject)f(life)g(cycle)h
(and)-5 1678 y(concurrency)d(of)h(in)m(terest.)136 1792
y(Darren)37 b(C.)g(A)m(tkinson)h(,)h(William)g(G.)e(Grisw)m(old,)j(The)
c(design)h(of)h(whole-program)f(analysis)-5 1905 y(to)s(ols,)29
b(Pro)s(ceedings)f(of)f(the)h(18th)g(in)m(ternational)h(conference)g
(on)e(Soft)m(w)m(are)h(engineering,)h(p.16-27,)-5 2017
y(Marc)m(h)i(25-29,)i(1996,)f(Berlin,)f(German)m(y)-5
2176 y
SDict begin H.S end
 -5 2176 a -5 2176 a
SDict begin 13.6 H.A end
 -5 2176 a -5 2176 a
SDict begin [/View [/XYZ H.V]/Dest (section.1.2) cvn /DEST pdfmark
end
 -5 2176
a -12 2308 a Fh(1.2)136 b(problem)45 b(statemen)l(t)i(\(whic)l(h)e
(problem)h(should)e(b)t(e)302 2457 y(solv)l(ed?\))p Black
132 2661 a Fg(\017)p Black 46 w Fl(OK)29 b(m)m(uc)m(h)i(w)m(ork)f(and)g
(to)s(ols)h(on)f(o)s(o-)h(or)g(pro)s(cedural)e(languages)p
Black 132 2853 a Fg(\017)p Black 46 w Fl(OK)20 b(not)h(so)f(m)m(uc)m(h)
h(on)g(concatenativ)m(e)p 1547 2831 207 4 v 24 w(stac)m(k)p
1750 2831 25 4 v 1771 2831 325 4 v 22 w(orien)m(ted)g(languages...)40
b(nothing)20 b(in)h(fact\(except)223 2965 y(ma)m(yb)s(e)30
b(kgforth\),)h(although)g(ma)m(yb)s(e)f(similarities)i(to)f(pro)s
(cedural)p Black 132 3157 a Fg(\017)p Black 46 w Fl(OK)i(applicabilit)m
(y)j(of)e(o)s(o-)g(and)g(pro)s(cedural)f(metho)s(ds)g(for)h
(concatenativ)m(e)p 2908 3135 207 4 v 37 w(stac)m(k)p
3111 3135 38 4 v 3145 3135 325 4 v 36 w(orien)m(ted)223
3270 y(languages)d(at)g(the)g(example)g(of)f(forth)p
Black 132 3461 a Fg(\017)p Black 46 w Fl(OK)f(applicabilit)m(y)j(of)f
(o)s(o-visualization)i(metho)s(ds)p Black 132 3653 a
Fg(\017)p Black 46 w Fl(OK)c(suggestions)j(of)e(\(new\))h(metho)s
(ds\(lineout)f(st)m(yle)i(w)m(ordlists/w)m(ords\))136
3868 y(There)23 b(is)g(plen)m(t)m(y)h(of)f(w)m(ork)g(done)g(on)g(the)g
(task)g(of)g(program)g(comprehension)g(in)f(ob)s(ject)i(orien)m(ted)-5
3981 y(and)30 b(pro)s(cedural)g(languages[)1033 3981
y
SDict begin H.S end
 1033 3981 a Black Fl(CZvD)1272 3948 y Fc(+)1332 3981
y Fl(09)p Black 1423 3908 a
SDict begin H.R end
 1423 3908 a 1423 3981 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Cornelissen:2009:SSP:1638616.1639301) cvn H.B /ANN
pdfmark end
 1423
3981 a Fl(],)h(but)f(nearly)g(none)h(on)f(concatenativ)m(e)k
(languages.)42 b(The)-5 4094 y(qualitativ)m(e)g(exploratory)e(approac)m
(h)g(of)f(this)h(thesis)f(do)s(es)g(not)h(encourage)g(the)f(form)m
(ulation)h(of)-5 4207 y(sp)s(eci\034c)29 b(h)m(yp)s(othesis.)40
b(Therefore)29 b(the)g(\034rst)f(question,)i(is)e(the)i(applicabilit)m
(y)g(of)f(existing)h(metho)s(ds)-5 4320 y(and)k(their)g(visualization)j
(tec)m(hniques.)53 b(The)34 b(second)g(question)h(to)g(b)s(e)f(answ)m
(ered,)h(concerns)f(new)-5 4433 y(approac)m(hes,)d(whic)m(h)g(ma)m(y)g
(b)s(e)e(exclusiv)m(e)j(to)f(concatenativ)m(e)j(languages)e(or)e
(gforth/forth.)-5 4596 y
SDict begin H.S end
 -5 4596 a -5 4596 a
SDict begin 13.6 H.A end
 -5 4596
a -5 4596 a
SDict begin [/View [/XYZ H.V]/Dest (section.1.3) cvn /DEST pdfmark
end
 -5 4596 a -12 4723 a Fh(1.3)136 b(aim)46
b(of)f(the)g(w)l(ork)-8 4927 y Fl(This)31 b(w)m(ork)i(aims)f(to)h(b)s
(etter)f(understand)f(ho)m(w)h(program)g(comprehension)f(is)i(p)s
(erformed)d(in)i(con-)-5 5040 y(catenativ)m(e)j(languages)d(and)f(ho)m
(w)g(it)h(can)g(b)s(e)f(made)g(more)h(e\036cien)m(t.)45
b(The)31 b(secondary)g(goal)i(is)e(the)-5 5153 y(analysis)g(of)f(the)g
(applicabilit)m(y)i(of)e(existing)h(analysis-)g(and)f(visualization)i
(metho)s(ds)d(and)h(pro)m(vide)p Black 3422 5381 a(3)p
Black eop end
%%Page: 4 22
TeXDict begin 4 21 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44
a 285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 285 -44 a Black Black
293 333 a Fl(mo)s(di\034cations)29 b(to)h(existing)g(visualization)h
(metho)s(ds\(and)e(ma)m(yb)s(e)g(suggestion)h(of)f(new)g(metho)s(ds\).)
290 446 y(The)f(forth)h(programming)g(language)i(is)e(used)f(as)i(a)f
(represen)m(tativ)m(e)j(of)d(concatenativ)m(e)j(languages.)p
432 538 576 4 v 434 559 a(demonstration)p 1004 538 52
4 v 1052 538 100 4 v 48 w(b)m(y)p 1148 538 52 4 v 1196
538 403 4 v 47 w(enhancing)p 1595 538 52 4 v 1643 538
131 4 v 47 w(the)p 1770 538 52 4 v 1818 538 245 4 v 47
w(gforth)p 2059 538 52 4 v 2107 538 338 4 v 48 w(stepping)p
2441 538 52 4 v 2488 538 596 4 v 47 w(debugger\(trace)p
3079 538 52 4 v 3126 538 399 4 v 48 w(recording,)p 3521
538 56 4 v 3572 538 202 4 v 52 w(trace)p 291 650 528
4 v 293 672 a(visualization,)p 815 650 35 4 v 846 650
419 4 v 32 w(goal-based)p 1261 650 35 4 v 1292 650 366
4 v 32 w(approac)m(h)p 1654 650 35 4 v 1685 650 351 4
v 31 w(p)s(ossible\))293 832 y
SDict begin H.S end
 293 832 a 293 832 a
SDict begin 13.6 H.A end
 293
832 a 293 832 a
SDict begin [/View [/XYZ H.V]/Dest (section.1.4) cvn /DEST pdfmark
end
 293 832 a 286 958 a Fh(1.4)136 b(metho)t(dological)47
b(approac)l(h)p Black 429 1161 a Fg(\017)p Black 0 0 1 0
TeXcolorcmyk 518 1191 174 98 v Black 46 w Fl(qual)p 0 0 1 0
TeXcolorcmyk 687 1191 30 98 v Black(i)p 0 0 1 0 TeXcolorcmyk
713 1191 85 98 v Black(ta)p 0 0 1 0 TeXcolorcmyk 792
1191 151 98 v Black(tiv)m(e)p 0 0 1 0 TeXcolorcmyk 942
1191 31 98 v Black 0 0 1 0 TeXcolorcmyk 971 1191 101
98 v Black 34 w(ap)p 0 0 1 0 TeXcolorcmyk 1067 1191 270
98 v Black(proac)m(h)p 0 0 1 0 TeXcolorcmyk 1334 1191
31 98 v Black 0 0 1 0 TeXcolorcmyk 1362 1191 30 98 v
Black 31 w(,)p 0 0 1 0 TeXcolorcmyk 1389 1191 31 98 v
Black 0 0 1 0 TeXcolorcmyk 1417 1191 93 98 v Black 30
w(ex)p 0 0 1 0 TeXcolorcmyk 1506 1191 371 98 v Black(ploratory)p
0 0 1 0 TeXcolorcmyk 1874 1191 31 98 v Black 0 0 1 0
TeXcolorcmyk 1903 1191 101 98 v Black 31 w(ap)p 0 0 1 0
TeXcolorcmyk 1999 1191 384 98 v Black(proac)m(h\(?\))p
Black 429 1349 a Fg(\017)p Black 0 0 1 0 TeXcolorcmyk
518 1379 136 98 v Black 46 w Fl(pro)p 0 0 1 0 TeXcolorcmyk
650 1379 210 98 v Black(p)s(osal)p Black 429 1538 a Fg(\017)p
Black 0 0 1 0 TeXcolorcmyk 518 1567 143 98 v Black 46
w Fl(Pre)p 0 0 1 0 TeXcolorcmyk 656 1567 131 98 v Black(lim)p
0 0 1 0 TeXcolorcmyk 782 1567 30 98 v Black(i)p 0 0 1 0
TeXcolorcmyk 807 1567 184 98 v Black(nary)p 0 0 1 0 TeXcolorcmyk
989 1567 31 98 v Black 0 0 1 0 TeXcolorcmyk 1018 1567
159 98 v Black 31 w(ev)-5 b(al)p 0 0 1 0 TeXcolorcmyk
1171 1567 55 98 v Black(u)p 0 0 1 0 TeXcolorcmyk 1222
1567 50 98 v Black(a)p 0 0 1 0 TeXcolorcmyk 1267 1567
197 98 v Black(tions)p 0 0 1 0 TeXcolorcmyk 1462 1567
31 98 v Black 0 0 1 0 TeXcolorcmyk 1490 1567 86 98 v
Black 32 w(as)p 0 0 1 0 TeXcolorcmyk 1573 1567 31 98
v Black 0 0 1 0 TeXcolorcmyk 1602 1567 96 98 v Black
30 w(de)p 0 0 1 0 TeXcolorcmyk 1693 1567 197 98 v Black(\034ned)p
0 0 1 0 TeXcolorcmyk 1887 1567 31 98 v Black 0 0 1 0
TeXcolorcmyk 1916 1567 101 98 v Black 30 w(b)m(y)29 b([)2068
1538 y
SDict begin H.S end
 2068 1538 a Black Fl(CZvD)2307 1505 y Fc(+)2366
1538 y Fl(09)p Black 2457 1464 a
SDict begin H.R end
 2457 1464 a 2457 1538
a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Cornelissen:2009:SSP:1638616.1639301) cvn H.B /ANN
pdfmark end
 2457 1538 a Fl(])p Black 429 1726 a Fg(\017)p Black
0 0 1 0 TeXcolorcmyk 518 1755 136 98 v Black 46 w Fl(out)p
0 0 1 0 TeXcolorcmyk 649 1755 207 98 v Black(come)p 0 0 1 0
TeXcolorcmyk 854 1755 29 98 v Black 0 0 1 0 TeXcolorcmyk
879 1755 66 98 v Black 31 w(is)p 0 0 1 0 TeXcolorcmyk
943 1755 29 98 v Black 0 0 1 0 TeXcolorcmyk 969 1755
50 98 v Black 28 w(a)p 0 0 1 0 TeXcolorcmyk 1016 1755
29 98 v Black 0 0 1 0 TeXcolorcmyk 1043 1755 144 98 v
Black 28 w(sub)p 0 0 1 0 TeXcolorcmyk 1183 1755 113 98
v Black 3 w(jec)p 0 0 1 0 TeXcolorcmyk 1292 1755 V Black(tiv)p
0 0 1 0 TeXcolorcmyk 1401 1755 29 98 v Black 0 0 1 0
TeXcolorcmyk 1428 1755 184 98 v Black 28 w(view)p 0 0 1 0
TeXcolorcmyk 1608 1755 29 98 v Black 0 0 1 0 TeXcolorcmyk
1634 1755 78 98 v Black 28 w(of)p 0 0 1 0 TeXcolorcmyk
1709 1755 29 98 v Black 0 0 1 0 TeXcolorcmyk 1736 1755
131 98 v Black 28 w(the)p 0 0 1 0 TeXcolorcmyk 1863 1755
29 98 v Black 0 0 1 0 TeXcolorcmyk 1890 1755 186 98 v
Black 28 w(a)m(v)-5 b(ail)p 0 0 1 0 TeXcolorcmyk 2070
1755 166 98 v Black(able)p 0 0 1 0 TeXcolorcmyk 2235
1755 29 98 v Black 0 0 1 0 TeXcolorcmyk 2262 1755 207
98 v Black 31 w(meth)p 0 0 1 0 TeXcolorcmyk 2464 1755
164 98 v Black(o)s(ds,)p 0 0 1 0 TeXcolorcmyk 2625 1755
29 98 v Black 0 0 1 0 TeXcolorcmyk 2652 1755 151 98 v
Black 28 w(and)p 0 0 1 0 TeXcolorcmyk 2799 1755 29 98
v Black 0 0 1 0 TeXcolorcmyk 2826 1755 136 98 v Black
27 w(pro)p 0 0 1 0 TeXcolorcmyk 2958 1755 230 98 v Black(p)s(osed)p
0 0 1 0 TeXcolorcmyk 3184 1755 29 98 v Black 0 0 1 0
TeXcolorcmyk 3210 1755 96 98 v Black 27 w(en)p 0 0 1 0
TeXcolorcmyk 3302 1755 232 98 v Black(hance)p 0 0 1 0
TeXcolorcmyk 3529 1755 240 98 v Black(men)m(ts)p 0 0 1 0
TeXcolorcmyk Black 0 0 1 0 TeXcolorcmyk 518 1868 234
98 v Black 520 1839 a(whic)m(h)p 0 0 1 0 TeXcolorcmyk
750 1868 31 98 v Black 0 0 1 0 TeXcolorcmyk 779 1868
184 98 v Black 31 w(ha)m(v)m(e)p 0 0 1 0 TeXcolorcmyk
960 1868 31 98 v Black 0 0 1 0 TeXcolorcmyk 989 1868
189 98 v Black 32 w(b)s(een)p 0 0 1 0 TeXcolorcmyk 1174
1868 31 98 v Black 0 0 1 0 TeXcolorcmyk 1203 1868 106
98 v Black 29 w(im)p 0 0 1 0 TeXcolorcmyk 1304 1868 121
98 v Black(ple)p 0 0 1 0 TeXcolorcmyk 1420 1868 280 98
v Black(men)m(tet)p Black 429 2027 a Fg(\017)p Black
0 0 1 0 TeXcolorcmyk 518 2056 167 98 v Black 46 w Fl(case)p
0 0 1 0 TeXcolorcmyk 682 2056 31 98 v Black 0 0 1 0 TeXcolorcmyk
711 2056 225 98 v Black 32 w(study)p 0 0 1 0 TeXcolorcmyk
933 2056 31 98 v Black 0 0 1 0 TeXcolorcmyk 961 2056
78 98 v Black 30 w(of)p 0 0 1 0 TeXcolorcmyk 1036 2056
31 98 v Black 0 0 1 0 TeXcolorcmyk 1065 2056 131 98 v
Black 30 w(the)p 0 0 1 0 TeXcolorcmyk 1193 2056 31 98
v Black 0 0 1 0 TeXcolorcmyk 1222 2056 106 98 v Black
31 w(im)p 0 0 1 0 TeXcolorcmyk 1323 2056 121 98 v Black(ple)p
0 0 1 0 TeXcolorcmyk 1439 2056 295 98 v Black(men)m(ted)p
0 0 1 0 TeXcolorcmyk 1731 2056 31 98 v Black 0 0 1 0
TeXcolorcmyk 1759 2056 96 98 v Black 31 w(en)p 0 0 1 0
TeXcolorcmyk 1851 2056 232 98 v Black(hance)p 0 0 1 0
TeXcolorcmyk 2078 2056 204 98 v Black(men)m(t)p Black
429 2215 a Fg(\017)p Black 0 0 1 0 TeXcolorcmyk 518 2244
136 98 v Black 46 w Fl(sug)p 0 0 1 0 TeXcolorcmyk 650
2244 126 98 v Black(ges)p 0 0 1 0 TeXcolorcmyk 771 2244
197 98 v Black(tions)p 0 0 1 0 TeXcolorcmyk 966 2244
31 98 v Black 0 0 1 0 TeXcolorcmyk 994 2244 78 98 v Black
32 w(of)p 0 0 1 0 TeXcolorcmyk 1070 2244 31 98 v Black
0 0 1 0 TeXcolorcmyk 1099 2244 119 98 v Black 31 w(fur)p
0 0 1 0 TeXcolorcmyk 1214 2244 167 98 v Black(ther)p
0 0 1 0 TeXcolorcmyk 1376 2244 31 98 v Black 0 0 1 0
TeXcolorcmyk 1404 2244 96 98 v Black 29 w(en)p 0 0 1 0
TeXcolorcmyk 1496 2244 232 98 v Black(hance)p 0 0 1 0
TeXcolorcmyk 1723 2244 240 98 v Black(men)m(ts)293 2381
y
SDict begin H.S end
 293 2381 a 293 2381 a
SDict begin 13.6 H.A end
 293 2381 a 293 2381 a
SDict begin [/View [/XYZ H.V]/Dest (section.1.5) cvn /DEST pdfmark
end
 293 2381
a 286 2502 a Fh(1.5)136 b(structure)44 b(of)i(the)f(w)l(ork)290
2704 y Fl(A)m(t)34 b(\034rst,)h(the)f(a)m(v)-5 b(ailable)36
b(information)e(of)g(a)h(forth)e(program)h(is)g(iden)m(ti\034ed.)51
b(The)34 b(next)g(step)g(is)g(to)293 2817 y(c)m(haracterize)27
b(the)e(information)h(and)e(its)h(necessit)m(y)h(for)f(program)g
(comprehension)f(is)h(in)m(v)m(estigated.)290 2930 y(The)41
b(di\033erences)h(of)f(forth)h(and)f(ob)s(ject)g(orien)m(ted)i
(languages)g(are)f(summarized)f(and)g(then)g(the)293
3043 y(applicabilit)m(y)26 b(of)f(existing)h(analysis)f(and)f
(visualization)j(metho)s(ds)d(is)g(presen)m(ted.)39 b(The)24
b(last)i(part)e(of)293 3156 y(this)c(thesis)h(in)m(v)m(estigates)i
(probable)d(enhancemen)m(ts)h(and)e(mo)s(di\034cations)i(to)g(existing)
g(metho)s(ds)f(and)293 3269 y(prop)s(oses)32 b(new)h(approac)m(hes.)50
b(After)34 b(the)f(conclusion,)i(the)f(thesis)f(presen)m(ts)g(further)f
(suggestions)293 3382 y(to)f(supp)s(ort)e(program)h(comprehension)g
(and)f(further)h(topics)h(of)f(researc)m(h)h(in)f(this)h(direction.)p
Black 293 5381 a(4)p Black eop end
%%Page: 5 23
TeXDict begin 5 22 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44
a -13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -13 -44 a Black Black
-5 242 a
SDict begin H.S end
 -5 242 a -5 242 a
SDict begin 13.6 H.A end
 -5 242 a -5 242 a
SDict begin [/View [/XYZ H.V]/Dest (chapter.2) cvn /DEST pdfmark end
 -5 242 a
Black Black 2799 1182 a Fj(CHAPTER)3573 1182 y
 currentpoint currentpoint translate 3.26875 3.26875 scale neg exch
neg exch translate
 3573 1182
a Fi(2)3573 1182 y
 currentpoint currentpoint translate 1 3.26875 div 1 3.26875 div scale
neg exch neg exch translate
 3573 1182 a 3988 1182 1140 426 v Black
Black 570 1639 a Fn(State)78 b(of)g(the)g(art)f(/)h(analysis)e(of)1486
1888 y(existing)h(approac)-6 b(hes)-8 2333 y Fl(This)38
b(section)i(presen)m(ts)f(an)g(o)m(v)m(erview)h(of)f(the)h(w)m(ork)f
(relev)-5 b(an)m(t)40 b(to)f(program)g(comprehension)g(re-)-5
2446 y(garding)31 b(the)f(aim)h(of)g(the)f(w)m(ork.)-5
2597 y
SDict begin H.S end
 -5 2597 a -5 2597 a
SDict begin 13.6 H.A end
 -5 2597 a -5 2597 a
SDict begin [/View [/XYZ H.V]/Dest (section.2.1) cvn /DEST pdfmark
end
 -5 2597
a -8 2729 a Fh(2.1)135 b(literature)47 b(studies)-8 2932
y Fl(T)-8 b(o)34 b(prop)s(erly)f(approac)m(h)h(the)g(stated)h(problem,)
g(the)f(\034rst)f(thing)h(is)g(to)g(understand)e(if)i(and)g(when)-5
3045 y(program)21 b(understanding)e(is)i(required.)36
b(Although)21 b(in)m(tuitiv)m(ely)i(ob)m(vious,)g(this)e(section)g
(will)g(discuss)-5 3158 y(the)29 b(b)s(oth,)f(since)h(the)g(approac)m
(h)g(whic)m(h)f(dev)m(elop)s(ers)h(use)f(to)h(understand)e(programs,)i
(can)g(b)s(e)f(v)m(ery)-5 3271 y(di\033eren)m(t)36 b(during)f(the)g
(life)h(cycle)h(of)f(soft)m(w)m(are.)58 b(Next)36 b(the)g(means)f(of)h
(understanding)e(programs)-5 3383 y(itself)42 b(is)e(in)m(v)m
(estigated.)74 b(Third,)42 b(the)f(nature)f(of)h(concatenativ)m(e)j
(languages)e(and)e(in)g(particular)-5 3496 y(gforth/forth)31
b(will)g(b)s(e)e(in)m(v)m(estigated.)-5 3653 y
SDict begin H.S end
 -5 3653
a -5 3653 a
SDict begin 13.6 H.A end
 -5 3653 a -5 3653 a
SDict begin [/View [/XYZ H.V]/Dest (section.2.2) cvn /DEST pdfmark
end
 -5 3653 a -8 3779 a Fh(2.2)135
b(analysis)-5 3982 y Fl(selected)32 b(w)m(ork?)-5 4106
y
SDict begin H.S end
 -5 4106 a -5 4106 a
SDict begin 13.6 H.A end
 -5 4106 a -5 4106 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.2.1) cvn /DEST pdfmark
end
 -5 4106 a -8
4227 a Fb(2.2.1)113 b(soft)m(w)m(are)38 b(ev)m(olution)-5
4398 y Fl([)20 4398 y
SDict begin H.S end
 20 4398 a Black Fl(LB85)p Black
233 4336 a
SDict begin H.R end
 233 4336 a 233 4398 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Lehman:1985:PEP:7261) cvn H.B /ANN pdfmark end
 233 4398 a Fl(])d(and)f([)499
4398 y
SDict begin H.S end
 499 4398 a Black Fl(LR03)p Black 714 4336 a
SDict begin H.R end
 714
4336 a 714 4398 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Lehman:2003:SEB:950401.950407) cvn H.B /ANN pdfmark
end
 714 4398 a Fl(])h(\(b)s(eide)g(vllt)h(kritisc)m(h)f
(zu)g(b)s(etrac)m(h)m(ten)h(und)e(evt)h(out)h(of)f(scop)s(e;)i(w)m(enn)
e(dann)-5 4511 y(no)s(c)m(h)42 b(in)g(den)g(j\303\274ngeren)g(citedb)m
(ys)h(sc)m(hauen;)48 b(die)43 b(grund)e(aussage)i(hier)f(k\303)m
(\266nn)m(te)h(sein,)i(dass)-5 4624 y(E-T)m(yp)s(e)34
b(soft)m(w)m(are)h(immer)e(im)g(w)m(andel)h(b)s(e\034nden)e(wird)g(und)
g(immer)i(\303)m(\244nderungen)e(un)m(terliegen)-8 4737
y(wird\(\)aus)e(leh2003\)\))-5 4884 y
SDict begin H.S end
 -5 4884 a -5 4884
a
SDict begin 13.6 H.A end
 -5 4884 a -5 4884 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.2.2) cvn /DEST pdfmark
end
 -5 4884 a -8 4981 a Fb(2.2.2)113
b(soft)m(w)m(are)38 b(main)m(tenance)p Black 132 5153
a Fg(\017)p Black 46 w Fl(t)m(yp)s(es)30 b(of)g(main)m(tenance)p
Black 3422 5381 a(5)p Black eop end
%%Page: 6 24
TeXDict begin 6 23 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44
a 285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 285 -44 a Black Black
Black 429 333 a Fg(\017)p Black 46 w Fl(\034nd)29 b(bugs)h(and)f(\034x)
h(them)p Black 429 548 a Fg(\017)p Black 46 w Fl(\034nd)f(the)i(righ)m
(t)g(place)g(to)g(implemen)m(t)g(a)g(new)f(feature.)p
Black 429 763 a Fg(\017)p Black 46 w Fl(\034nd)f(the)i(righ)m(t)g
(place)g(to)g(mo)s(dify)f(a)g(feature.)293 936 y
SDict begin H.S end
 293
936 a 293 936 a
SDict begin 13.6 H.A end
 293 936 a 293 936 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.2.3) cvn /DEST pdfmark
end
 293 936 a 290 1044
a Fb(2.2.3)113 b(program)38 b(comprehension)p Black 429
1221 a Fg(\017)p Black 46 w Fl(structured)30 b(approac)m(h)p
Black 429 1436 a Fg(\017)p Black 46 w Fl(thorough)g(reading)h(is)f(the)
h(most)g(e\036cien)m(t[cite])p Black 429 1651 a Fg(\017)p
Black 46 w Fl(ab)s(out)f(the)h(men)m(tal)g(mo)s(del)g(building)p
Black 429 1866 a Fg(\017)p Black 46 w Fl(k)m(eeping)g(the)g(men)m(tal)h
(mo)s(del)e(up)f(to)i(date)p Black 429 2081 a Fg(\017)p
Black 46 w Fl(k)m(eeping)g(artifacts)h(up)e(to)h(date)293
2254 y
SDict begin H.S end
 293 2254 a 293 2254 a
SDict begin 13.6 H.A end
 293 2254 a 293 2254 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.2.4) cvn /DEST pdfmark
end
 293
2254 a 290 2362 a Fb(2.2.4)113 b(program)38 b(comprehension)h
(strategies)p Black 429 2540 a Fg(\017)p Black 46 w Fl(top)31
b(do)m(wn)p Black 429 2754 a Fg(\017)p Black 46 w Fl(b)s(ottom)g(up)p
Black 429 2969 a Fg(\017)p Black 46 w Fl(kno)m(wledgebased)p
Black 429 3184 a Fg(\017)p Black 46 w Fl(systematic)h(and)e(as-needed)p
Black 429 3399 a Fg(\017)p Black 46 w Fl(in)m(tegrated)i(approac)m(hes)
293 3572 y
SDict begin H.S end
 293 3572 a 293 3572 a
SDict begin 13.6 H.A end
 293 3572 a 293 3572
a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.2.5) cvn /DEST pdfmark
end
 293 3572 a 290 3680 a Fb(2.2.5)113 b(analysis)39 b(to)e(supp)s(ort)h
(program)g(understanding)293 3858 y Fl(Sev)m(eral)31
b(analysis)g(t)m(yp)s(es)p Black 429 4078 a Fg(\017)p
Black 46 w Fl(source)g(co)s(de)f(reading)p Black 429
4293 a Fg(\017)p Black 46 w Fl(do)s(cumen)m(tation)h(reading\(ev)m
(erything)h(except)g(source)e(co)s(de\))p Black 429 4508
a Fg(\017)p Black 46 w Fl(static)i(analysis)p Black 429
4723 a Fg(\017)p Black 46 w Fl(dynamic)e(analysis)p Black
429 4938 a Fg(\017)p Black 46 w Fl(p)s(ost)g(mortem)h(analysis)p
Black 429 5153 a Fg(\017)p Black 46 w Fl(realtime)h(analysis)p
Black 293 5381 a(6)p Black eop end
%%Page: 7 25
TeXDict begin 7 24 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44
a -13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.7) cvn /DEST pdfmark end
 -13 -44 a Black Black
-5 333 a
SDict begin H.S end
 -5 333 a -5 333 a
SDict begin 13.6 H.A end
 -5 333 a -5 333 a
SDict begin [/View [/XYZ H.V]/Dest (section*.10) cvn /DEST pdfmark
end
 -5 333 a
Fk(dynamic)36 b(analysis)p Black 132 505 a Fg(\017)p
Black 46 w Fl(ab)s(out)30 b(realtime/in)m(teractiv)m(e)35
b(vs)30 b(p)s(ost)g(mortem)p Black 132 683 a Fg(\017)p
Black 46 w Fl(actual)h(b)s(eha)m(vior)p Black 132 861
a Fg(\017)p Black 46 w Fl(incomplete)g(view)g([)917 861
y
SDict begin H.S end
 917 861 a Black Fl(Bal99)p Black 1143 799 a
SDict begin H.R end
 1143 799
a 1143 861 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Ball:1999:CDA:318774.318944) cvn H.B /ANN pdfmark
end
 1143 861 a Fl(])p Black 132 1039 a Fg(\017)p
Black 46 w Fl(observ)m(er)f(e\033ect)219 1152 y(Andrews,)g(J.)h
(\(1997\).)45 b(T)-8 b(esting)32 b(using)e(log)i(\034le)f(analysis:)42
b(to)s(ols,)32 b(metho)s(ds,)f(and)f(issues.)42 b(In)223
1265 y(Pro)s(c.)d(In)m(ternational)30 b(Conference)d(on)h(A)m(utomated)
i(Soft)m(w)m(are)f(Engineering)f(\(ASE\),)g(pages)218
1378 y(157\342\200\223)k(166.)42 b(IEEE)30 b(Computer)f(So)s(ciet)m(y)j
(Press)p Black 132 1556 a Fg(\017)p Black 46 w Fl(scalabilit)m(y)223
1669 y(Zaidman,)41 b(A.)e(\(2006\).)70 b(Scalabilit)m(y)41
b(Solutions)e(for)g(Program)g(Comprehension)f(through)223
1782 y(Dynamic)31 b(Analysis.)41 b(PhD)30 b(thesis,)h(Univ)m(ersit)m(y)
g(of)g(An)m(t)m(w)m(erp)p Black 132 1960 a Fg(\017)p
Black 46 w Fl(debugging)f(->)g(di\033eren)m(t)h(kind)f(of)g(paradigms)g
(and)g(languages)i(and)d(to)s(ols)223 2073 y(see)20 b
(@incollectionreiss1993trace,)28 b(title=T)-8 b(race-based)23
b(debugging,)f(author=Reiss,)h(Stev)m(en)223 2186 y(P,)i(b)s(o)s
(oktitle=A)m(utomated)j(and)d(Algorithmic)i(Debugging,)h
(pages=305\025314,)j(y)m(ear=1993,)223 2299 y(publisher=Springer)p
Black 132 2477 a Fg(\017)p Black 46 w Fl(ab)s(out)f(debugging)p
Black 132 2655 a Fg(\017)p Black 46 w Fl(data\035o)m(w)h(analysis\(Bac)
m(kw)m(ard)h(Analysis\)\(not)g(su\036cien)m(t)f(in)f(demo\))223
2768 y(Darren)20 b(C.)g(A)m(tkinson)h(,)i(William)f(G.)f(Grisw)m(old,)i
(Implemen)m(tation)f(T)-8 b(ec)m(hniques)21 b(for)f(E\036cien)m(t)223
2881 y(Data-Flo)m(w)45 b(Analysis)d(of)g(Large)h(Programs,)i(Pro)s
(ceedings)d(of)h(the)f(IEEE)f(In)m(ternational)223 2994
y(Conference)30 b(on)g(Soft)m(w)m(are)i(Main)m(tenance)g(\(ICSM'01\),)g
(p.52,)f(No)m(v)m(em)m(b)s(er)h(07-09,)g(2001)-5 3230
y
SDict begin H.S end
 -5 3230 a -5 3230 a
SDict begin 13.6 H.A end
 -5 3230 a -5 3230 a
SDict begin [/View [/XYZ H.V]/Dest (section*.11) cvn /DEST pdfmark
end
 -5 3230 a Fk(static)j
(analysis)p Black 132 3401 a Fg(\017)p Black 46 w Fl(OK)29
b(complete)j(view)p Black 132 3579 a Fg(\017)p Black
46 w Fl(OK)d(no)i(actual)g(data)g(presen)m(t)p Black
132 3758 a Fg(\017)p Black 46 w Fl(OK)e(arc)m(hitecture)j(and)e(design)
g(do)s(cumen)m(ts)136 3948 y(Static)j(analysis)f(is)f(...[cite]...)46
b(not)31 b(running)f(co)s(de.)43 b(Therefore)31 b(and)g(in)f(con)m
(trast)j(to)f(dynamic)-5 4061 y(analysis,)f(it)f(has)f(the)h(capabilit)
m(y)i(to)e(pro)m(vide)g(a)g(complete)h(view)f(of)g(the)f(soft)m(w)m
(are)j(at)e(hands.)39 b(The)-5 4174 y(dra)m(wbac)m(k)33
b(is)f(that)h(there)g(is)f(no)h(actual)g(data)g(presen)m(t)g(and)f(th)m
(us)g(there)g(is)h(no)f(mean)g(of)h(co)m(v)m(ering)-5
4287 y(the)e(actual)h(data)f(and)f(follo)m(w)h(its)g(manipulation.)41
b(...[cite])33 b(This)d(mak)m(es)h(it)g(a)g(most)g(v)-5
b(aluable)31 b(to)s(ol)-5 4400 y(for)f(arc)m(hitecture,)j(design,)d
(and)g(algorithm)h(analysis.)42 b(...[cite])-5 4545 y
SDict begin H.S end

-5 4545 a -5 4545 a
SDict begin 13.6 H.A end
 -5 4545 a -5 4545 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.2.6) cvn /DEST pdfmark
end
 -5 4545 a -8
4643 a Fb(2.2.6)113 b(applicabilit)m(y)39 b(to)e(concatenativ)m(e)h
(languages)-5 4814 y Fl(existing)k(metho)s(ds)d(abstract\(abstract)k
(lik)m(e)f(prin)m(t)e(debugging)g(and)g(stepping)g(and)f(so)i(on\))g
(fur-)-5 4927 y(thermore)32 b(the)g(abstraction)h(of)f(all)h(those)f
(metho)s(ds)f(men)m(tioned)h(ab)s(o)m(v)m(e)h(to)g(\034nd)d
(similarities)j(and)-5 5040 y(then)h(adapt)g(them)g(to)g(\034t)g(the)g
(c)m(haracteristics)i(of)e(concatenativ)m(e)k(languages.)52
b(applicabilit)m(y)36 b(for)-5 5153 y(concatenativ)m(e)e(languages)p
Black 3422 5381 a(7)p Black eop end
%%Page: 8 26
TeXDict begin 8 25 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44
a 285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.8) cvn /DEST pdfmark end
 285 -44 a Black Black
293 242 a
SDict begin H.S end
 293 242 a 293 242 a
SDict begin 13.6 H.A end
 293 242 a 293 242 a
SDict begin [/View [/XYZ H.V]/Dest (section.2.3) cvn /DEST pdfmark
end
 293
242 a 290 333 a Fh(2.3)135 b(visualization)47 b(to)e(supp)t(ort)f
(program)i(understanding)599 483 y(ma)l(yb)t(e)g(some)f(examples\(and)h
(to)t(ols\))p Black 429 686 a Fg(\017)p Black 46 w Fl(sequence)31
b(diagram)p Black 429 874 a Fg(\017)p Black 46 w Fl(circular)g(diagram)
g(and)f(in)m(teractiv)m(e)j(in)m(teraction)f(sequance)f(diagram)g([)
3045 874 y
SDict begin H.S end
 3045 874 a Black Fl(Cor09)p Black 3283 811
a
SDict begin H.R end
 3283 811 a 3283 874 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Cornelissen2009) cvn H.B /ANN pdfmark end
 3283 874 a Fl(])p Black 429 1062
a Fg(\017)p Black 46 w Fl(in)m(teraction)22 b(diagrams)f(\(Jacobson,)i
(1992\)/)g(scenario)e(diagrams)g(\(K)m(oskimies)g(and)f(M\303)m
(\266ssen-)520 1175 y(b\303)m(\266c)m(k)31 b(1996\))p
Black 429 1364 a Fg(\017)p Black 46 w Fl(information)g(m)m(urals)f
(\(Jerding)g(and)g(Stask)m(o,)i(1998\))p Black 429 1552
a Fg(\017)p Black 46 w Fl(p)s(olymetric)f(views)f(\(Ducasse)i(et)f
(al.,)h(2004\))p Black 429 1740 a Fg(\017)p Black 46
w Fl(\034shey)m(e)37 b(views)g(\(suggested)h(b)m(y)f(George)i(W.)e(F)-8
b(urnas,)39 b(1986,)h(and)d(form)m(ulated)g(b)m(y)g([)3515
1740 y
SDict begin H.S end
 3515 1740 a Black Fl(SM96)p Black 3740 1678 a
SDict begin H.R end

3740 1678 a 3740 1740 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Storey:1995:GLA:647547.728600) cvn H.B /ANN pdfmark
end
 3740 1740 a Fl(])520 1853 y(and)30
b([)722 1853 y
SDict begin H.S end
 722 1853 a Black Fl(SB94)p Black 928 1791
a
SDict begin H.R end
 928 1791 a 928 1853 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Sarkar:1994:GFV:198366.198384) cvn H.B /ANN pdfmark
end
 928 1853 a Fl(]\))p Black 429
2042 a Fg(\017)p Black 46 w Fl(hierarc)m(hical)i(edge)f(bundling)e
(\(Holten,)j(2006\))p Black 429 2230 a Fg(\017)p Black
46 w Fl(structural)j(and)e(b)s(eha)m(vioral)j(views)e(of)h(ob)s
(ject-orien)m(ted)h(program)e(\(Kleyn)h(and)f(Gingric)m(h,)516
2343 y(1988\))p Black 429 2531 a Fg(\017)p Black 46 w
Fl(matrix)28 b(visualization)i(and)d(\342\200\234execution)j
(pattern\342\200\235)f(notations)g([)2997 2531 y
SDict begin H.S end
 2997
2531 a Black Fl(PL)-10 b(VW98)p Black 3358 2469 a
SDict begin H.R end
 3358
2469 a 3358 2531 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Pauw98executionpatterns) cvn H.B /ANN pdfmark end
 3358 2531 a Fl(])28 b(to)h(visual-)520
2644 y(ize)j(traces)f(in)f(a)h(scalable)h(manner\(De)e(P)m(au)m(w)h(et)
g(al.)42 b(1993,)32 b(1994,)g(1998\))p Black 429 2833
a Fg(\017)p Black 46 w Fl(arc)m(hitecture)g(orien)m(ted)f
(visualization)i(\(Se\034ka)d(et)h(al.)42 b(1996\))p
Black 429 3021 a Fg(\017)p Black 46 w Fl(a)34 b(con)m(tin)m(uous)g
(sequence)g(diagram,)h(and)e(the)h(\342\200\234information)h(m)m
(ural\342\200\235)f(\(Jerding)f(and)520 3134 y(Stask)m(o,)f(1998\))p
Black 429 3322 a Fg(\017)p Black 46 w Fl(arc)m(hitecture)g(with)e
(dynamic)g(information)h(\(W)-8 b(alk)m(er)33 b(et)e(al.)41
b(1998\))p Black 429 3511 a Fg(\017)p Black 46 w Fl(frequency)30
b(sp)s(ectrum)f(analysis)i(\(Ball)h(1999\))293 3671 y
SDict begin H.S end

293 3671 a 293 3671 a
SDict begin 13.6 H.A end
 293 3671 a 293 3671 a
SDict begin [/View [/XYZ H.V]/Dest (section.2.4) cvn /DEST pdfmark
end
 293 3671
a 290 3797 a Fh(2.4)135 b(comparison)45 b(and)g(summary)g(of)g
(existing)h(approac)l(hes)293 4000 y Fl(existing)31 b(approac)m(hes)g
(for)f(gforth/forth)h(and)f(relation)h(to)g(ab)s(o)m(v)m(e)h(men)m
(tioned)f(stu\033)p Black 429 4211 a Fg(\017)p Black
46 w Fl(kgforth)g(h)m(ttp://sourceforge.net/pro)s(jects/kgforth/)p
Black 429 4400 a Fg(\017)p Black 46 w Fl(existing)h(metho)s(ds\(actual)
f(metho)s(ds\))p Black 622 4588 a Fk(\025)p Black 46
w Fl(factoring)22 b(\(h)m(ttp://en.wikip)s(edia.org/wiki/Mo)s
(dular_programming)h(h)m(ttps://www.complang.tu)m
(wien.ac.at/forth/gforth/Do)s(cs-)720 4701 y(h)m(tml/F)-8
b(actoring-T)g(utorial.h)m(tml)25 b(h)m(ttp://www.ultratec)m(hnology)-8
b(.com/F)g(orth-fac)q(tors.h)m(t)q(m\))p Black 622 4852
a Fk(\025)p Black 46 w Fl(aliasing)p Black 622 5002 a
Fk(\025)p Black 46 w Fl(organization)33 b(of)d(w)m(ord)g(lists)p
Black 622 5153 a Fk(\025)p Black 46 w Fl(source)h(co)s(de)f(do)s(cumen)
m(tation)p Black 293 5381 a(8)p Black eop end
%%Page: 9 27
TeXDict begin 9 26 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44
a -13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.9) cvn /DEST pdfmark end
 -13 -44 a Black Black
Black 325 333 a Fk(\025)p Black 46 w Fl(other)30 b(do)s(cumen)m(tation)
h(artifacts)p Black 325 484 a Fk(\025)p Black 46 w Fl(dump)p
Black 325 634 a Fk(\025)p Black 46 w Fl(.,)f(/)h(and)f(t)m(yp)s(e)p
Black 325 785 a Fk(\025)p Black 46 w Fl(dbg)p Black 325
935 a Fk(\025)p Black 46 w Fl(see)h(and)e(co)s(de-see)p
Black 325 1086 a Fk(\025)p Black 46 w Fl(~~)p Black 3422
5381 a(9)p Black eop end
%%Page: 10 28
TeXDict begin 10 27 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44
a 285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.10) cvn /DEST pdfmark end
 285 -44 a Black Black
Black Black eop end
%%Page: 11 29
TeXDict begin 11 28 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44
a -13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.11) cvn /DEST pdfmark end
 -13 -44 a Black Black
-5 242 a
SDict begin H.S end
 -5 242 a -5 242 a
SDict begin 13.6 H.A end
 -5 242 a -5 242 a
SDict begin [/View [/XYZ H.V]/Dest (chapter.3) cvn /DEST pdfmark end
 -5 242 a
Black Black 2799 1191 a Fj(CHAPTER)3573 1191 y
 currentpoint currentpoint translate 3.26875 3.26875 scale neg exch
neg exch translate
 3573 1191
a Fi(3)3573 1191 y
 currentpoint currentpoint translate 1 3.26875 div 1 3.26875 div scale
neg exch neg exch translate
 3573 1191 a 3988 1191 1140 426 v Black
Black 2143 1648 a Fn(Metho)6 b(dology)p Black 132 2093
a Fg(\017)p Black 46 w Fl(qualitativ)m(e)33 b(approac)m(h)p
Black 132 2278 a Fg(\017)p Black 46 w Fl(exploratory)e(case)g(study)p
Black 132 2463 a Fg(\017)p Black 46 w Fl(protot)m(yp)s(e)p
Black 132 2649 a Fg(\017)p Black 46 w Fl(sk)m(etc)m(hes)p
Black 132 2834 a Fg(\017)p Black 46 w Fl(trying)36 b(to)g(understand)e
(programs)i(dev)m(elop)s(ed)g(withing)g(stac)m(kbasierte)i
(programmierung)220 2947 y(vl?)-5 3083 y
SDict begin H.S end
 -5 3083 a -5
3083 a
SDict begin 13.6 H.A end
 -5 3083 a -5 3083 a
SDict begin [/View [/XYZ H.V]/Dest (section.3.1) cvn /DEST pdfmark
end
 -5 3083 a -8 3232 a Fh(3.1)135
b(used)45 b(concepts)p Black 132 3435 a Fg(\017)p Black
0 0 1 0 TeXcolorcmyk 220 3465 136 98 v Black 46 w Fl(pro)p
0 0 1 0 TeXcolorcmyk 352 3465 85 98 v Black(to)p 0 0 1 0
TeXcolorcmyk 433 3465 136 98 v Black(t)m(yp)p 0 0 1 0
TeXcolorcmyk 564 3465 126 98 v Black(ing)p Black 132
3621 a Fg(\017)p Black 0 0 1 0 TeXcolorcmyk 220 3650
177 98 v Black 46 w Fl(read)p 0 0 1 0 TeXcolorcmyk 393
3650 126 98 v Black(ing)p 0 0 1 0 TeXcolorcmyk 516 3650
31 98 v Black 0 0 1 0 TeXcolorcmyk 545 3650 220 98 v
Black 31 w(co)s(des)p Black 132 3806 a Fg(\017)p Black
0 0 1 0 TeXcolorcmyk 220 3835 199 98 v Black 46 w Fl(prin)m(t)p
0 0 1 0 TeXcolorcmyk 415 3835 35 98 v Black(-)p 0 0 1 0
TeXcolorcmyk 445 3835 96 98 v Black(de)p 0 0 1 0 TeXcolorcmyk
537 3835 151 98 v Black(bug)p 0 0 1 0 TeXcolorcmyk 684
3835 171 98 v Black(ging)p Black 132 3991 a Fg(\017)p
Black 0 0 1 0 TeXcolorcmyk 220 4021 167 98 v Black 46
w Fl(step)p 0 0 1 0 TeXcolorcmyk 383 4021 35 98 v Black(-)p
0 0 1 0 TeXcolorcmyk 413 4021 96 98 v Black(de)p 0 0 1 0
TeXcolorcmyk 504 4021 151 98 v Black(bug)p 0 0 1 0 TeXcolorcmyk
651 4021 171 98 v Black(ging)-5 4156 y
SDict begin H.S end
 -5 4156 a -5 4156
a
SDict begin 13.6 H.A end
 -5 4156 a -5 4156 a
SDict begin [/View [/XYZ H.V]/Dest (section.3.2) cvn /DEST pdfmark
end
 -5 4156 a -8 4277 a Fh(3.2)135
b(metho)t(ds)45 b(and/or)g(mo)t(dels)p Black 132 4479
a Fg(\017)p Black 0 0 1 0 TeXcolorcmyk 220 4509 136 98
v Black 46 w Fl(pro)p 0 0 1 0 TeXcolorcmyk 352 4509 85
98 v Black(to)p 0 0 1 0 TeXcolorcmyk 433 4509 136 98
v Black(t)m(yp)p 0 0 1 0 TeXcolorcmyk 564 4509 126 98
v Black(ing)-5 4644 y
SDict begin H.S end
 -5 4644 a -5 4644 a
SDict begin 13.6 H.A end
 -5 4644 a -5
4644 a
SDict begin [/View [/XYZ H.V]/Dest (section.3.3) cvn /DEST pdfmark
end
 -5 4644 a -8 4765 a Fh(3.3)135 b(languages)p Black
132 4968 a Fg(\017)p Black 0 0 1 0 TeXcolorcmyk 220 4997
397 98 v Black 46 w Fl(p)s(ostscript)p Black 132 5153
a Fg(\017)p Black 0 0 1 0 TeXcolorcmyk 220 5182 199 98
v Black 46 w Fl(forth)p Black 3377 5381 a(11)p Black
eop end
%%Page: 12 30
TeXDict begin 12 29 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44
a 285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.12) cvn /DEST pdfmark end
 285 -44 a Black Black
Black 429 333 a Fg(\017)p Black 0 0 1 0 TeXcolorcmyk
518 363 182 98 v Black 46 w Fl(shell)p 0 0 1 0 TeXcolorcmyk
697 363 31 98 v Black 0 0 1 0 TeXcolorcmyk 726 363 228
98 v Black 31 w(script)p Black 429 521 a Fg(\017)p Black
0 0 1 0 TeXcolorcmyk 518 551 45 98 v Black 46 w Fl(c)p
Black 429 710 a Fg(\017)p Black 0 0 1 0 TeXcolorcmyk
518 739 126 98 v Black 46 w Fl(m2)293 876 y
SDict begin H.S end
 293 876 a
293 876 a
SDict begin 13.6 H.A end
 293 876 a 293 876 a
SDict begin [/View [/XYZ H.V]/Dest (section.3.4) cvn /DEST pdfmark
end
 293 876 a 290 996 a Fh(3.4)135
b(design)45 b(metho)t(ds)p 0 0 1 0 TeXcolorcmyk 291 1228
48 98 v Black 293 1199 a Fl(?)293 1365 y
SDict begin H.S end
 293 1365 a 293
1365 a
SDict begin 13.6 H.A end
 293 1365 a 293 1365 a
SDict begin [/View [/XYZ H.V]/Dest (section.3.5) cvn /DEST pdfmark
end
 293 1365 a 290 1485 a Fh(3.5)135
b(data)46 b(mo)t(dels)p 0 0 1 0 TeXcolorcmyk 291 1718
48 98 v Black 293 1688 a Fl(?)293 1855 y
SDict begin H.S end
 293 1855 a 293
1855 a
SDict begin 13.6 H.A end
 293 1855 a 293 1855 a
SDict begin [/View [/XYZ H.V]/Dest (section.3.6) cvn /DEST pdfmark
end
 293 1855 a 290 1975 a Fh(3.6)135
b(analysis)46 b(metho)t(ds)p Black 429 2178 a Fg(\017)p
Black 0 0 1 0 TeXcolorcmyk 518 2207 177 98 v Black 46
w Fl(read)p 0 0 1 0 TeXcolorcmyk 690 2207 126 98 v Black(ing)p
0 0 1 0 TeXcolorcmyk 813 2207 31 98 v Black 0 0 1 0 TeXcolorcmyk
842 2207 184 98 v Black 31 w(co)s(de)p Black 429 2366
a Fg(\017)p Black 0 0 1 0 TeXcolorcmyk 518 2395 136 98
v Black 46 w Fl(tail)p 0 0 1 0 TeXcolorcmyk 652 2395
31 98 v Black 0 0 1 0 TeXcolorcmyk 681 2395 151 98 v
Black 33 w(and)p 0 0 1 0 TeXcolorcmyk 828 2395 31 98
v Black 0 0 1 0 TeXcolorcmyk 857 2395 81 98 v Black 29
w(er)p 0 0 1 0 TeXcolorcmyk 933 2395 121 98 v Black(ror)293
2532 y
SDict begin H.S end
 293 2532 a 293 2532 a
SDict begin 13.6 H.A end
 293 2532 a 293 2532 a
SDict begin [/View [/XYZ H.V]/Dest (section.3.7) cvn /DEST pdfmark
end
 293
2532 a 290 2652 a Fh(3.7)135 b(formalisms)p 0 0 1 0 TeXcolorcmyk
291 2885 48 98 v Black 293 2855 a Fl(?)p Black 293 5381
a(12)p Black eop end
%%Page: 13 31
TeXDict begin 13 30 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44
a -13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.13) cvn /DEST pdfmark end
 -13 -44 a Black Black
-5 242 a
SDict begin H.S end
 -5 242 a -5 242 a
SDict begin 13.6 H.A end
 -5 242 a -5 242 a
SDict begin [/View [/XYZ H.V]/Dest (chapter.4) cvn /DEST pdfmark end
 -5 242 a
Black Black 2799 1245 a Fj(CHAPTER)3573 1245 y
 currentpoint currentpoint translate 3.26875 3.26875 scale neg exch
neg exch translate
 3573 1245
a Fi(4)3573 1245 y
 currentpoint currentpoint translate 1 3.26875 div 1 3.26875 div scale
neg exch neg exch translate
 3573 1245 a 3988 1245 1140 426 v Black
Black 2454 1701 a Fn(Suggested)966 1950 y(solution/implemen)-6
b(tation)-5 2413 y Fl(kind)30 b(of)g(an)p 428 2392 121
4 v 31 w(ide)g(dev)m(elopmen)m(t)i(en)m(vironmen)m(t)-5
2526 y(ligh)m(t)c(table)g(ide\(js\))f(con)m(tin)m(uous)h(rev)m(erse)f
(engineering)g(idea)h(of)f([)2244 2526 y
SDict begin H.S end
 2244 2526 a
Black Fl(MJS)2425 2493 y Fc(+)2483 2526 y Fl(00)p Black
2574 2452 a
SDict begin H.R end
 2574 2452 a 2574 2526 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Muller:2000:RER:336512.336526) cvn H.B /ANN pdfmark
end
 2574 2526 a Fl(])g(to)h(pro)m(vide)
f(immediate)-5 2639 y(resonse)21 b(of)f(the)h(systems)f(output...)38
b(although)21 b(probably)f(not)g(applicable)i(or)e(v)m(ery)h(time)g
(consuming)-5 2752 y(in)30 b(setup\(or)h(not)f(more)h(than)f(in)m
(tegration)i(testing...\))43 b(for)30 b(most)h(industrial)f(scale)h
(soft)m(w)m(are)-5 2865 y(eclipse)h(ide\(ja)m(v)-5 b(a\))-5
3063 y
SDict begin H.S end
 -5 3063 a -5 3063 a
SDict begin 13.6 H.A end
 -5 3063 a -5 3063 a
SDict begin [/View [/XYZ H.V]/Dest (section.4.1) cvn /DEST pdfmark
end
 -5 3063
a -10 3198 a Fh(4.1)136 b(suggested)46 b(solution)p Black
132 3408 a Fg(\017)p Black 46 w Fl(emphasis)26 b(on)h(on)g
(comprehension)f(co)s(de)h(while)g(writing.)40 b(factoring)28
b(suggestion,)h(do)s(cumen-)223 3521 y(tation,)41 b(aliases\(same)f(co)
s(de)e(with)f(m)m(ultiple)h(aliases)i(to)e(read)g(more)f(natural)h(at)h
(di\033eren)m(t)223 3634 y(p)s(oin)m(ts)31 b(in)g(programs\),)i
(expressiv)m(e)f(naming,)g(hard)f(to)h(generalize)i(cause)e(of)g(the)g
(\035exibilit)m(y)223 3747 y(the)e(language)i(pro)m(vides)p
Black 132 3972 a Fg(\017)p Black 46 w Fl(adequate)c(searc)m(h)g(and)f
(corss)h(reference)g(facilities)i(to)e(supp)s(ort)e(systematical)k(in)m
(v)m(estigation)223 4085 y(to)h(b)s(ene\034t)e(from)h(e\033ectiv)m(e)j
(program)d(understanding)f(as)i(stated)g(b)m(y)f([)2697
4085 y
SDict begin H.S end
 2697 4085 a Black Fl(R)m(CM04)p Black 3002 4022
a
SDict begin H.R end
 3002 4022 a 3002 4085 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Robillard:2004:EDI:1042203.1042417) cvn H.B /ANN pdfmark
end
 3002 4085 a Fl(])p Black 132
4310 a Fg(\017)p Black 46 w Fl(displa)m(y)g(of)h(the)f('v)m(o)s
(cabulary')i([cite)g(mo)s(ore:)40 b(remem)m(b)s(er)30
b(all)h(the)g(w)m(ords])p Black 132 4535 a Fg(\017)p
Black 46 w Fl(other)f(data)h(structures)f(and)g(v)-5
b(ariables)31 b(should)e(b)s(e)h(displa)m(y)m(ed)p Black
325 4760 a Fk(\025)p Black 46 w Fl(memory)41 b(ma)m(yb)s(e)g(lik)m(e)i
([)1289 4760 y
SDict begin H.S end
 1289 4760 a Black Fl(Rei95)p Black 1513
4698 a
SDict begin H.R end
 1513 4698 a 1513 4760 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.ReissProgrammingEnvironments1995) cvn H.B /ANN pdfmark
end
 1513 4760 a Fl(])e(or)h([)1727
4760 y
SDict begin H.S end
 1727 4760 a Black Fl(AK)m(G)1934 4727 y Fc(+)1994
4760 y Fl(10)p Black 2084 4687 a
SDict begin H.R end
 2084 4687 a 2084 4760
a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Aftandilian:2010:HIH:1879211.1879222) cvn H.B /ANN
pdfmark end
 2084 4760 a Fl(])g(but)f(since)g(there)h(is)f(no)h(underlying)423
4873 y(ob)s(ject)34 b(orien)m(tation)h(and)e(no)h(standardized)f(o)s(o)
h(system)g(this)g(w)m(ould)f(b)s(e)g(hard)g(do)h(ac-)423
4986 y(complish)p Black 325 5153 a Fk(\025)p Black 46
w Fl(\034shey)m(e)c(or)g(w)m(ord)g(cloud)h(lik)m(e)g(displa)m(y\(tree)h
(or)f(sugiy)m(ama)g(as)g(of)f([)2708 5153 y
SDict begin H.S end
 2708 5153
a Black Fl(SWFM97)p Black 3086 5090 a
SDict begin H.R end
 3086 5090 a 3086
5153 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Storey:1997:IVT:857188.857642) cvn H.B /ANN pdfmark
end
 3086 5153 a Fl(]\))p Black 3377 5381 a(13)p Black
eop end
%%Page: 14 32
TeXDict begin 14 31 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44
a 285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.14) cvn /DEST pdfmark end
 285 -44 a Black Black
Black 429 333 a Fg(\017)p Black 46 w Fl(in)m(teractiv)m(e)31
b(program)d(manipulation:)40 b(state)29 b(of)f(the)h(system)f(b)s
(efore)g(a)g(w)m(ord,)h(after)f(a)h(w)m(ord)520 446 y(and)f(b)m(y)g
(clic)m(king)i(on)f(the)f(w)m(ord)g(jumping)f(to)i(its)g(de\034nition)f
(or)h(inserting)f(it)h(and)f(there)g(also)520 559 y(pro)m(viding)i
(those)h(features)p Black 429 747 a Fg(\017)p Black 46
w Fl(stepping)f(debugger)g(mo)s(de:)41 b(simply)30 b(stepping)g
(through)g(the)g(whole)h(co)s(de)f(w)m(ord)g(b)m(y)h(w)m(ord)p
Black 429 935 a Fg(\017)p Black 46 w Fl(goal-orien)m(ted)37
b(strategy:)49 b(the)34 b(de\034nition)f(of)h(an)g(execution)h
(scenario)f(suc)m(h)g(that)g(only)g(the)520 1048 y(parts)c(of)h(in)m
(terest)h(of)f(the)f(soft)m(w)m(are)i(system)f(are)g(analyzed)h(\(K)m
(o)s(enemann)e(and)g(Rob)s(ertson,)516 1161 y(1991;)i(Zaidman,)e
(2006\).)p Black 429 1349 a Fg(\017)p Black 46 w Fl(co)s(de)h(analysis)
g(and)e(visualization)k(facilities)f(see)f(c)m(hapter)g(2)g(TODO)293
1504 y
SDict begin H.S end
 293 1504 a 293 1504 a
SDict begin 13.6 H.A end
 293 1504 a 293 1504 a
SDict begin [/View [/XYZ H.V]/Dest (section.4.2) cvn /DEST pdfmark
end
 293
1504 a 288 1636 a Fh(4.2)136 b(implemen)l(tation)293
1839 y Fl(pro)s(of)32 b(of)g(concept)i(b)m(y)e(enhancemen)m(t)i(of)e
(stepping)h(debugger)f(on)g(forth)g(co)s(de)h(lev)m(el\(cause)i(it)f
(has)293 1952 y(turned)22 b(out)i(to)h(b)s(e)e(the)h(fastest)h(and)e
(simples)g(approac)m(h\))i(b)m(y)e(sho)m(wing)h(additional)h(data:)38
b(the)24 b(other)293 2065 y(stac)m(ks)p Black 293 5381
a(14)p Black eop end
%%Page: 15 33
TeXDict begin 15 32 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44
a -13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.15) cvn /DEST pdfmark end
 -13 -44 a Black Black
-5 242 a
SDict begin H.S end
 -5 242 a -5 242 a
SDict begin 13.6 H.A end
 -5 242 a -5 242 a
SDict begin [/View [/XYZ H.V]/Dest (chapter.5) cvn /DEST pdfmark end
 -5 242 a
Black Black 2799 1197 a Fj(CHAPTER)3573 1197 y
 currentpoint currentpoint translate 3.26875 3.26875 scale neg exch
neg exch translate
 3573 1197
a Fi(5)3573 1197 y
 currentpoint currentpoint translate 1 3.26875 div 1 3.26875 div scale
neg exch neg exch translate
 3573 1197 a 3988 1197 1140 426 v Black
Black 1688 1653 a Fn(Critical)76 b(re\035ection)-5 1985
y
SDict begin H.S end
 -5 1985 a -5 1985 a
SDict begin 13.6 H.A end
 -5 1985 a -5 1985 a
SDict begin [/View [/XYZ H.V]/Dest (section.5.1) cvn /DEST pdfmark
end
 -5 1985 a 150
x Fh(5.1)136 b(comparison)45 b(with)g(related)i(w)l(ork)p
0 0 1 0 TeXcolorcmyk -7 2367 48 98 v Black -5 2338 a
Fl(?)p 0 0 1 0 TeXcolorcmyk 38 2367 29 98 v Black 0 0 1 0
TeXcolorcmyk 64 2367 66 98 v Black 29 w(is)p 0 0 1 0
TeXcolorcmyk 128 2367 29 98 v Black 0 0 1 0 TeXcolorcmyk
155 2367 207 98 v Black 29 w(there)p 0 0 1 0 TeXcolorcmyk
358 2367 29 98 v Black 0 0 1 0 TeXcolorcmyk 385 2367
189 98 v Black 28 w(an)m(y?)p 0 0 1 0 TeXcolorcmyk 571
2367 29 98 v Black 0 0 1 0 TeXcolorcmyk 598 2367 265
98 v Black 29 w(ma)m(yb)s(e)p 0 0 1 0 TeXcolorcmyk 859
2367 29 98 v Black 0 0 1 0 TeXcolorcmyk 886 2367 131
98 v Black 28 w(the)p 0 0 1 0 TeXcolorcmyk 1014 2367
29 98 v Black 0 0 1 0 TeXcolorcmyk 1041 2367 179 98 v
Black 29 w(mo)s(d)p 0 0 1 0 TeXcolorcmyk 1214 2367 30
98 v Black(i)p 0 0 1 0 TeXcolorcmyk 1239 2367 55 98 v
Black(\034)p 0 0 1 0 TeXcolorcmyk 1290 2367 91 98 v Black(ca)p
0 0 1 0 TeXcolorcmyk 1377 2367 197 98 v Black(tions)p
0 0 1 0 TeXcolorcmyk 1570 2367 29 98 v Black 0 0 1 0
TeXcolorcmyk 1596 2367 85 98 v Black 28 w(to)p 0 0 1 0
TeXcolorcmyk 1679 2367 29 98 v Black 0 0 1 0 TeXcolorcmyk
1705 2367 98 98 v Black 29 w(o)s(o)p 0 0 1 0 TeXcolorcmyk
1801 2367 29 98 v Black 0 0 1 0 TeXcolorcmyk 1828 2367
207 98 v Black 29 w(meth)p 0 0 1 0 TeXcolorcmyk 2030
2367 182 98 v Black(o)s(ds?)p 0 0 1 0 TeXcolorcmyk 2208
2367 29 98 v Black 0 0 1 0 TeXcolorcmyk 2235 2367 86
98 v Black 27 w(or)p 0 0 1 0 TeXcolorcmyk 2318 2367 29
98 v Black 0 0 1 0 TeXcolorcmyk 2345 2367 126 98 v Black
29 w(list)p 0 0 1 0 TeXcolorcmyk 2466 2367 V Black(ing)p
0 0 1 0 TeXcolorcmyk 2589 2367 29 98 v Black 0 0 1 0
TeXcolorcmyk 2615 2367 78 98 v Black 29 w(of)p 0 0 1 0
TeXcolorcmyk 2690 2367 29 98 v Black 0 0 1 0 TeXcolorcmyk
2717 2367 131 98 v Black 28 w(the)p 0 0 1 0 TeXcolorcmyk
2845 2367 29 98 v Black 0 0 1 0 TeXcolorcmyk 2872 2367
207 98 v Black 29 w(meth)p 0 0 1 0 TeXcolorcmyk 3074
2367 139 98 v Black(o)s(ds)p 0 0 1 0 TeXcolorcmyk 3210
2367 29 98 v Black 0 0 1 0 TeXcolorcmyk 3237 2367 234
98 v Black 28 w(whic)m(h)p 0 0 1 0 TeXcolorcmyk Black
0 0 1 0 TeXcolorcmyk -7 2480 131 98 v Black -5 2451 a(did)p
0 0 1 0 TeXcolorcmyk 122 2480 31 98 v Black 0 0 1 0 TeXcolorcmyk
151 2480 197 98 v Black 31 w(w)m(ork)p 0 0 1 0 TeXcolorcmyk
344 2480 31 98 v Black 0 0 1 0 TeXcolorcmyk 373 2480
151 98 v Black 30 w(and)p 0 0 1 0 TeXcolorcmyk 521 2480
31 98 v Black 0 0 1 0 TeXcolorcmyk 550 2480 212 98 v
Black 30 w(those)p 0 0 1 0 TeXcolorcmyk 759 2480 31 98
v Black 0 0 1 0 TeXcolorcmyk 788 2480 234 98 v Black
31 w(whic)m(h)p 0 0 1 0 TeXcolorcmyk 1019 2480 31 98
v Black 0 0 1 0 TeXcolorcmyk 1048 2480 131 98 v Black
30 w(did)p 0 0 1 0 TeXcolorcmyk 1175 2480 31 98 v Black
0 0 1 0 TeXcolorcmyk 1204 2480 136 98 v Black 29 w(not)136
2564 y(kgforth)31 b(in)f(some)h(w)m(a)m(y)-5 2718 y
SDict begin H.S end
 -5
2718 a -5 2718 a
SDict begin 13.6 H.A end
 -5 2718 a -5 2718 a
SDict begin [/View [/XYZ H.V]/Dest (section.5.2) cvn /DEST pdfmark
end
 -5 2718 a 132 x
Fh(5.2)136 b(discussion)45 b(of)g(op)t(en)f(issues)p
Black 132 3053 a Fg(\017)p Black 46 w Fl(not)30 b(scaling)i(w)m(ell)f
(cause)g(of)f(limited)i(screen)e(real)h(estate)h(and)e(th)m(us)g(the)h
(need)f(to)h(scroll)p Black 132 3241 a Fg(\017)p Black
46 w Fl(not)39 b(scalign)h(w)m(ell)g(cause)g(of)f(unpredictable)g(stac)
m(k)i(heigh)m(t\(ma)m(yb)s(e)f(sho)m(w)f(only)g(depth)g(ac-)223
3354 y(cording)30 b(to)h(stac)m(k)h(e\033ect)g(commen)m(t\))p
Black 132 3542 a Fg(\017)p Black 46 w Fl(nature)e(of)g(gforth)p
Black 325 3730 a Fk(\025)p Black 46 w Fl(in)m(terpretation/compilation)
d(mix\(ho)m(w)e(to)g(in)m(tegrate)i(the)d(adho)s(ok)h(c)m(hanges)g(b)s
(et)m(w)m(een)423 3843 y(mo)s(des)k('[]'\))p Black 325
3994 a Fk(\025)p Black 46 w Fl(implemen)m(tation)j(within)d(the)i
(executing)g(system)p Black 325 4144 a Fk(\025)p Black
46 w Fl(lac)m(k)g(of)g(dynamic)f(information\(return)g(stac)m(k)i(add)e
(->)g(w)m(ordname)g(heuristic\))p Black 132 4333 a Fg(\017)p
Black 46 w Fl(not)g(suitable)h(for)f(p)s(erformance)g(meassuring)g
(cause)h(debugger...)p Black 132 4521 a Fg(\017)p Black
46 w Fl(quan)m(titativ)m(e)i(data)e(on)f(the)h(e\033ects)g(the)g
(enhancemen)m(t)g(needed)p Black 3377 5381 a(15)p Black
eop end
%%Page: 16 34
TeXDict begin 16 33 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44
a 285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.16) cvn /DEST pdfmark end
 285 -44 a Black Black
Black Black eop end
%%Page: 17 35
TeXDict begin 17 34 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44
a -13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.17) cvn /DEST pdfmark end
 -13 -44 a Black Black
-5 242 a
SDict begin H.S end
 -5 242 a -5 242 a
SDict begin 13.6 H.A end
 -5 242 a -5 242 a
SDict begin [/View [/XYZ H.V]/Dest (chapter.6) cvn /DEST pdfmark end
 -5 242 a
Black Black 2799 1197 a Fj(CHAPTER)3573 1197 y
 currentpoint currentpoint translate 3.26875 3.26875 scale neg exch
neg exch translate
 3573 1197
a Fi(6)3573 1197 y
 currentpoint currentpoint translate 1 3.26875 div 1 3.26875 div scale
neg exch neg exch translate
 3573 1197 a 3988 1197 1140 426 v Black
Black 779 1653 a Fn(Summary)76 b(and)i(future)g(w)-6
b(ork)-5 2098 y Fl(summary)29 b(of)i(what)f(has)g(b)s(een)g(done)g(and)
g(the)h(sub)s(jectiv)m(e)f(conclusion)p Black 132 2309
a Fg(\017)p Black 46 w Fl(ho)m(w)g(do)s(es)g(soft)m(w)m(are)i(main)m
(tenance)g(w)m(ork)e(in)g(those)p Black 132 2497 a Fg(\017)p
Black 46 w Fl(ide)p Black 132 2685 a Fg(\017)p Black
46 w Fl(using)f(a)i(standard)f(data)h(t)m(yp)s(e)f(to)h(store)g(traces)
p Black 132 2874 a Fg(\017)p Black 46 w Fl(displa)m(y)f(of)h(v)-5
b(ariable)31 b(con)m(ten)m(t)p Black 132 3062 a Fg(\017)p
Black 46 w Fl(displa)m(y)f(of)h(allo)s(cated)h(memory)e(areas)p
Black 132 3250 a Fg(\017)p Black 46 w Fl(displa)m(y)g(of)h(color)g
(di\033)f(with)g(to)s(oltip)i(of)e(previous)g(v)-5 b(alues)31
b(for)f(stac)m(ks)i(and)d(memory)i(areas)p Black 132
3438 a Fg(\017)p Black 46 w Fl(\(b)s(etter)f(visualization)j(of)d(lo)s
(ops)h(and)e(con)m(trol)j(structures\))e(is)h(this)f(ev)m(en)h(p)s
(ossible?)p Black 132 3626 a Fg(\017)p Black 46 w Fl(\(displa)m(y)f(of)
h(the)g(full)f(program)g(as)g(a)h(graph\))f(is)h(this)f(ev)m(en)h(p)s
(ossible?)p Black 132 3814 a Fg(\017)p Black 46 w Fl(\(customizable)h
(insp)s(ection)e(depth\))g(?)p Black 132 4003 a Fg(\017)p
Black 46 w Fl(static)i(co)s(de)e(analysis)p Black 325
4191 a Fk(\025)p Black 46 w Fl(stac)m(k)h(depth)f(p)s(er)f(w)m(ord)p
Black 325 4341 a Fk(\025)p Black 46 w Fl(t)m(yp)s(e)h(system)h(for)f
(forth)p Black 325 4492 a Fk(\025)p Black 46 w Fl(...)136
4703 y(conclusion)h(lik)m(e)h(what)e(i)h(con)m(tributed)f(to)i(the)e
(comm)m(unit)m(y!!)136 4929 y(w)m(ork)40 b(on)e(program)h
(comprehension)g(of)g(concatenativ)m(e)j(languages)f(go)s(o)s(d)e(o)m
(v)m(erview)h(of)f(the)-5 5041 y(\034eld)30 b([)217 5041
y
SDict begin H.S end
 217 5041 a Black Fl(CDPC11)p Black 571 4979 a
SDict begin H.R end
 571 4979
a 571 5041 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Canfora:2011:ACS:1924421.1924451) cvn H.B /ANN pdfmark
end
 571 5041 a Fl(])h(and)e([)828 5041 y
SDict begin H.S end
 828
5041 a Black Fl(Cor09)p Black 1066 4979 a
SDict begin H.R end
 1066 4979 a
1066 5041 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Cornelissen2009) cvn H.B /ANN pdfmark end
 1066 5041 a Fl(])p Black 3377 5381 a(17)p
Black eop end
%%Page: 18 36
TeXDict begin 18 35 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44
a 285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.18) cvn /DEST pdfmark end
 285 -44 a Black Black
Black Black eop end
%%Page: 19 37
TeXDict begin 19 36 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44
a -13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.19) cvn /DEST pdfmark end
 -13 -44 a Black Black
-5 242 a
SDict begin H.S end
 -5 242 a -5 242 a
SDict begin 13.6 H.A end
 -5 242 a -5 242 a
SDict begin [/View [/XYZ H.V]/Dest (chapter*.12) cvn /DEST pdfmark
end
 -5 242 a
Black Black 2174 1005 a Fn(Bibliograph)-6 b(y)-5 1377
y
SDict begin H.S end
 -5 1377 a -5 1377 a
SDict begin 13.6 H.A end
 -5 1377 a -5 1377 a
SDict begin [/View [/XYZ H.V]/Dest (section*.13) cvn /DEST pdfmark
end
 -5 1377 a Black
-5 1459 a
SDict begin H.S end
 -5 1459 a Fl([AK)m(G)227 1426 y Fc(+)287 1459
y Fl(10])419 1459 y
SDict begin 13.6 H.A end
 419 1459 a 419 1459 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Aftandilian:2010:HIH:1879211.1879222)
cvn /DEST pdfmark end
 419 1459 a
Black 61 w Fl(Edw)m(ard)53 b(E.)i(Aftandilian,)62 b(Sean)54
b(Kelley)-8 b(,)62 b(Connor)54 b(Gramazio,)63 b(Nathan)55
b(Ricci,)480 1572 y(Sara)34 b(L.)g(Su,)g(and)f(Sam)m(uel)i(Z.)e(Guy)m
(er.)52 b(Heap)m(viz:)e(In)m(teractiv)m(e)36 b(heap)e(visualization)480
1685 y(for)d(program)g(understanding)e(and)i(debugging.)43
b(In)30 b Fa(Pr)-5 b(o)g(c)g(e)g(e)g(dings)36 b(of)d(the)h(5th)g
(Inter-)474 1798 y(national)h(Symp)-5 b(osium)34 b(on)f(Softwar)-5
b(e)35 b(V)m(isualization)p Fl(,)d(SOFTVIS)d('10,)j(pages)f(53\02562,)
480 1911 y(New)f(Y)-8 b(ork,)32 b(NY,)e(USA,)h(2010.)h(A)m(CM.)p
Black -5 2095 a
SDict begin H.S end
 -5 2095 a Fl([Bal99])353 2095 y
SDict begin 13.6 H.A end
 353 2095
a 353 2095 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Ball:1999:CDA:318774.318944)
cvn /DEST pdfmark end
 353 2095 a Black 127 w Fl(Thoms)23 b(Ball.)32
b(The)23 b(concept)i(of)f(dynamic)g(analysis.)31 b Fa(SIGSOFT)c(Softw.)
h(Eng.)e(Notes)p Fl(,)478 2208 y(24\(6\):216\025234,)36
b(Octob)s(er)30 b(1999.)p Black -5 2393 a
SDict begin H.S end
 -5 2393 a Fl([Bas97])358
2393 y
SDict begin 13.6 H.A end
 358 2393 a 358 2393 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Basili:1997:EPR:257260.257262)
cvn /DEST pdfmark end
 358 2393 a Black 122 w Fl(Victor)44
b(R.)g(Basili.)81 b(Ev)m(olving)44 b(and)f(pac)m(kaging)i(reading)f
(tec)m(hnologies.)82 b Fa(J.)44 b(Syst.)475 2506 y(Softw.)p
Fl(,)32 b(38\(1\):3\02512,)i(July)c(1997.)p Black -5
2690 a
SDict begin H.S end
 -5 2690 a Fl([Bo)s(e76])362 2690 y
SDict begin 13.6 H.A end
 362 2690 a
362 2690 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Boehm:1976:SE:1311958.1312684)
cvn /DEST pdfmark end
 362 2690 a Black 118 w Fl(B.)36 b(W.)g(Bo)s(ehm.)56
b(Soft)m(w)m(are)37 b(engineering.)56 b Fa(IEEE)36 b(T)-7
b(r)i(ans.)39 b(Comput.)p Fl(,)f(25\(12\):1226\025)475
2803 y(1241,)33 b(Decem)m(b)s(er)e(1976.)p Black -5 2988
a
SDict begin H.S end
 -5 2988 a Fl([CDPC11])417 2988 y
SDict begin 13.6 H.A end
 417 2988 a 417 2988
a
SDict begin [/View [/XYZ H.V]/Dest (cite.Canfora:2011:ACS:1924421.1924451)
cvn /DEST pdfmark end
 417 2988 a Black 63 w Fl(Gerardo)i(Canfora,)g(Massimiliano)h(Di)g(P)m
(en)m(ta,)h(and)d(Luigi)h(Cerulo.)47 b(A)m(c)m(hiev)m(emen)m(ts)480
3101 y(and)31 b(c)m(hallenges)j(in)e(soft)m(w)m(are)h(rev)m(erse)g
(engineering.)46 b Fa(Commun.)35 b(A)-5 b(CM)p Fl(,)31
b(54\(4\):142\025)475 3214 y(151,)h(April)e(2011.)p Black
-5 3398 a
SDict begin H.S end
 -5 3398 a Fl([CHL)-10 b(W06])421 3398 y
SDict begin 13.6 H.A end
 421
3398 a 421 3398 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Cook:2006:ESS:1115566.1115567)
cvn /DEST pdfmark end
 421 3398 a Black 59 w Fl(Stephen)30
b(Co)s(ok,)i(Rac)m(hel)g(Harrison,)f(Meir)h(M.)g(Lehman,)f(and)f(P)m
(aul)i(W)-8 b(ernic)m(k.)44 b(Ev)m(o-)480 3511 y(lution)f(in)g(soft)m
(w)m(are)i(systems:)66 b(F)-8 b(oundations)44 b(of)f(the)h(sp)s(e)e
(classi\034cation)j(sc)m(heme:)480 3624 y(Researc)m(h)31
b(articles.)42 b Fa(J.)32 b(Softw.)i(Maint.)e(Evol.)p
Fl(,)f(18\(1\):1\02535,)k(Jan)m(uary)30 b(2006.)p Black
-5 3809 a
SDict begin H.S end
 -5 3809 a Fl([Cor09])359 3809 y
SDict begin 13.6 H.A end
 359 3809 a
359 3809 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Cornelissen2009) cvn /DEST
pdfmark end
 359 3809 a Black 121 w Fl(Bas)48 b(Cornelissen.)93
b Fa(Evaluating)49 b(Dynamic)g(A)-5 b(nalysis)50 b(T)-7
b(e)i(chniques)49 b(for)g(Pr)-5 b(o)g(gr)g(am)469 3922
y(Compr)g(ehension)p Fl(.)43 b(W)-8 b(ohrmann)30 b(Prin)m(t)h(Service,)
g(2009.)p Black -5 4106 a
SDict begin H.S end
 -5 4106 a Fl([CZvD)259 4073
y Fc(+)318 4106 y Fl(09])433 4106 y
SDict begin 13.6 H.A end
 433 4106 a 433 4106
a
SDict begin [/View [/XYZ H.V]/Dest (cite.Cornelissen:2009:SSP:1638616.1639301)
cvn /DEST pdfmark end
 433 4106 a Black 47 w Fl(Bas)47 b(Cornelissen,)k(Andy)46
b(Zaidman,)k(Arie)d(v)-5 b(an)47 b(Deursen,)j(Leon)d(Mo)s(onen,)k(and)
480 4219 y(Rainer)38 b(K)m(osc)m(hk)m(e.)64 b(A)38 b(systematic)h(surv)
m(ey)f(of)g(program)f(comprehension)g(through)480 4332
y(dynamic)23 b(analysis.)30 b Fa(IEEE)25 b(T)-7 b(r)i(ans.)28
b(Softw.)f(Eng.)p Fl(,)e(35\(5\):684\025702,)30 b(Septem)m(b)s(er)23
b(2009.)p Black -5 4517 a
SDict begin H.S end
 -5 4517 a Fl([ISO06])363 4517
y
SDict begin 13.6 H.A end
 363 4517 a 363 4517 a
SDict begin [/View [/XYZ H.V]/Dest (cite.ISOSWMaintainance) cvn /DEST
pdfmark end
 363 4517 a Black 117 w Fl(ISO.)76
b(Soft)m(w)m(are)44 b(engineering)g(\025)f(soft)m(w)m(are)h(life)g
(cycle)g(pro)s(cesses)e(\025)i(main)m(tenance.)480 4630
y(ISO)f(14764:2006,)53 b(In)m(ternational)46 b(Organization)g(for)e
(Standardization,)49 b(Genev)-5 b(a,)480 4742 y(Switzerland,)30
b(2006.)p Black -5 4927 a
SDict begin H.S end
 -5 4927 a Fl([LB85])346 4927
y
SDict begin 13.6 H.A end
 346 4927 a 346 4927 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Lehman:1985:PEP:7261) cvn
/DEST pdfmark end
 346 4927 a Black 134 w Fl(M.)g(M.)h(Lehman)e
(and)g(L.)h(A.)g(Belady)-8 b(,)32 b(editors.)40 b Fa(Pr)-5
b(o)g(gr)g(am)35 b(Evolution:)42 b(Pr)-5 b(o)g(c)g(esses)33
b(of)475 5040 y(Softwar)-5 b(e)37 b(Change)p Fl(.)48
b(A)m(cademic)35 b(Press)d(Professional,)i(Inc.,)g(San)e(Diego,)j(CA,)e
(USA,)475 5153 y(1985.)p Black 3377 5381 a(19)p Black
eop end
%%Page: 20 38
TeXDict begin 20 37 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 285 -44 a
SDict begin H.S end
 285 -44
a 285 -44 a
SDict begin H.R end
 285 -44 a 285 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.20) cvn /DEST pdfmark end
 285 -44 a Black Black
Black 293 333 a
SDict begin H.S end
 293 333 a Fl([LR03])645 333 y
SDict begin 13.6 H.A end
 645 333
a 645 333 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Lehman:2003:SEB:950401.950407)
cvn /DEST pdfmark end
 645 333 a Black 132 w Fl(Meir)46 b(M.)g(Lehman)f(and)f
(Juan)h(F.)g(Ramil.)86 b(Soft)m(w)m(are)46 b(ev)m(olution:)72
b(Bac)m(kground,)777 446 y(theory)-8 b(,)32 b(practice.)42
b Fa(Inf.)32 b(Pr)-5 b(o)g(c)g(ess.)34 b(L)-5 b(ett.)p
Fl(,)31 b(88\(1-2\):33\02544,)36 b(Octob)s(er)30 b(2003.)p
Black 293 638 a
SDict begin H.S end
 293 638 a Fl([LS80])637 638 y
SDict begin 13.6 H.A end
 637 638
a 637 638 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Lientz:1980:SMM:601062) cvn
/DEST pdfmark end
 637 638 a Black 140 w Fl(Bennett)i(P)-8 b(.)30
b(Lien)m(tz)i(and)e(E.)g(Burton)g(Sw)m(anson.)40 b Fa(Softwar)-5
b(e)34 b(Maintenanc)-5 b(e)33 b(Manage-)772 751 y(ment)p
Fl(.)64 b(A)m(ddison-W)-8 b(esley)40 b(Longman)e(Publishing)f(Co.,)j
(Inc.,)h(Boston,)g(MA,)e(USA,)773 864 y(1980.)p Black
293 1056 a
SDict begin H.S end
 293 1056 a Fl([MJS)499 1023 y Fc(+)558 1056
y Fl(00])703 1056 y
SDict begin 13.6 H.A end
 703 1056 a 703 1056 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Muller:2000:RER:336512.336526)
cvn /DEST pdfmark end
 703 1056 a
Black 74 w Fl(Hausi)33 b(A.)f(M\374ller,)h(Jens)f(H.)g(Jahnk)m(e,)h
(Dennis)f(B.)g(Smith,)g(Margaret-Anne)i(Storey)-8 b(,)777
1168 y(Scott)41 b(R.)g(Tilley)-8 b(,)43 b(and)d(Kenn)m(y)f(W)-8
b(ong.)71 b(Rev)m(erse)40 b(engineering:)61 b(A)40 b(roadmap.)69
b(In)772 1281 y Fa(Pr)-5 b(o)g(c)g(e)g(e)g(dings)31 b(of)e(the)g
(Confer)-5 b(enc)g(e)29 b(on)g(The)g(F)-7 b(utur)i(e)29
b(of)f(Softwar)-5 b(e)31 b(Engine)-5 b(ering)p Fl(,)26
b(ICSE)765 1394 y('00,)32 b(pages)f(47\02560,)h(New)f(Y)-8
b(ork,)31 b(NY,)g(USA,)f(2000.)j(A)m(CM.)p Black 293
1586 a
SDict begin H.S end
 293 1586 a Fl([Pig96])649 1586 y
SDict begin 13.6 H.A end
 649 1586 a 649
1586 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Pigoski:1996:PSM:524398) cvn
/DEST pdfmark end
 649 1586 a Black 128 w Fl(Thomas)41 b(M.)g(Pigoski.)73
b Fa(Pr)-5 b(actic)g(al)43 b(Softwar)-5 b(e)44 b(Maintenanc)-5
b(e:)62 b(Best)42 b(Pr)-5 b(actic)g(es)43 b(for)772 1699
y(Managing)36 b(Y)-7 b(our)35 b(Softwar)-5 b(e)38 b(Investment)p
Fl(.)50 b(John)33 b(Wiley)i(&)e(Sons,)h(Inc.,)g(New)g(Y)-8
b(ork,)777 1812 y(NY,)31 b(USA,)g(1996.)p Black 293 2004
a
SDict begin H.S end
 293 2004 a Fl([PL)-10 b(VW98])717 2004 y
SDict begin 13.6 H.A end
 717 2004 a
717 2004 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Pauw98executionpatterns) cvn
/DEST pdfmark end
 717 2004 a Black 60 w Fl(Wim)22 b(De)g(P)m(au)m(w,)i(Da)m
(vid)f(Lorenz,)g(John)e(Vlissides,)j(and)c(Mark)i(W)-8
b(egman.)28 b(Execution)777 2117 y(patterns)36 b(in)f(ob)s(ject-orien)m
(ted)i(visualization.)57 b(In)35 b Fa(In)i(Pr)-5 b(o)g(c)g(e)g(e)g
(dings)40 b(Confer)-5 b(enc)g(e)38 b(on)767 2230 y(Obje)-5
b(ct-Oriente)g(d)33 b(T)-7 b(e)i(chnolo)g(gies)34 b(and)g(Systems)g
(\(COOTS)f(\342\200\23198)p Fl(,)e(pages)h(219\025234,)773
2342 y(1998.)p Black 293 2534 a
SDict begin H.S end
 293 2534 a Fl([R)m(CM04])690
2534 y
SDict begin 13.6 H.A end
 690 2534 a 690 2534 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Robillard:2004:EDI:1042203.1042417)
cvn /DEST pdfmark end
 690 2534 a Black 87 w Fl(Martin)40
b(P)-8 b(.)40 b(Robillard,)i(W)-8 b(esley)41 b(Co)s(elho,)h(and)d(Gail)
i(C.)e(Murph)m(y)-8 b(.)67 b(Ho)m(w)40 b(e\033ectiv)m(e)777
2647 y(dev)m(elop)s(ers)46 b(in)m(v)m(estigate)j(source)c(co)s(de:)71
b(An)45 b(exploratory)i(study)-8 b(.)85 b Fa(IEEE)45
b(T)-7 b(r)i(ans.)773 2760 y(Softw.)33 b(Eng.)p Fl(,)d
(30\(12\):889\025903,)37 b(Decem)m(b)s(er)31 b(2004.)p
Black 293 2952 a
SDict begin H.S end
 293 2952 a Fl([Rei95])649 2952 y
SDict begin 13.6 H.A end
 649
2952 a 649 2952 a
SDict begin [/View [/XYZ H.V]/Dest (cite.ReissProgrammingEnvironments1995)
cvn /DEST pdfmark end
 649 2952 a Black 128 w Fl(S.)26 b(P)-8
b(.)26 b(Reiss.)34 b Fa(V)m(isualization)29 b(for)g(Softwar)-5
b(e)30 b(Engine)-5 b(ering)28 b(\025)h(Pr)-5 b(o)g(gr)g(amming)31
b(Envir)-5 b(on-)772 3065 y(ments)p Fl(.)41 b(1995.)p
Black 293 3257 a
SDict begin H.S end
 293 3257 a Fl([SB94])641 3257 y
SDict begin 13.6 H.A end
 641
3257 a 641 3257 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Sarkar:1994:GFV:198366.198384)
cvn /DEST pdfmark end
 641 3257 a Black 136 w Fl(Mano)s(jit)g(Sarkar)e(and)g
(Marc)i(H.)f(Bro)m(wn.)69 b(Graphical)41 b(\034shey)m(e)e(views.)69
b Fa(Commun.)771 3369 y(A)-5 b(CM)p Fl(,)30 b(37\(12\):73\02583,)35
b(Decem)m(b)s(er)d(1994.)p Black 293 3561 a
SDict begin H.S end
 293 3561
a Fl([SFM99])680 3561 y
SDict begin 13.6 H.A end
 680 3561 a 680 3561 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Storey:1999:CDE:308936.308940)
cvn /DEST pdfmark end
 680 3561
a Black 97 w Fl(M.-A.)23 b(D.)f(Storey)-8 b(,)24 b(F.)e(D.)g(F)-8
b(racc)m(hia,)26 b(and)21 b(H.)g(A.)h(M\374ller.)27 b(Cognitiv)m(e)c
(design)e(elemen)m(ts)777 3674 y(to)33 b(supp)s(ort)d(the)i
(construction)g(of)g(a)g(men)m(tal)h(mo)s(del)e(during)f(soft)m(w)m
(are)k(exploration.)771 3787 y Fa(J.)e(Syst.)h(Softw.)p
Fl(,)f(44\(3\):171\025185,)k(Jan)m(uary)30 b(1999.)p
Black 293 3979 a
SDict begin H.S end
 293 3979 a Fl([SLea97])680 3979 y
SDict begin 13.6 H.A end
 680
3979 a 680 3979 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Singer97anexamination) cvn
/DEST pdfmark end
 680 3979 a Black 97 w Fl(Janice)24
b(Singer,)g(Timoth)m(y)e(C.)h(Leth)m(bridge,)h(and)e(et)h(al.)28
b(An)22 b(examination)i(of)f(soft)m(w)m(are)777 4092
y(engineering)32 b(w)m(ork)e(practices,)i(1997.)p Black
293 4284 a
SDict begin H.S end
 293 4284 a Fl([SM96])650 4284 y
SDict begin 13.6 H.A end
 650 4284 a
650 4284 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Storey:1995:GLA:647547.728600)
cvn /DEST pdfmark end
 650 4284 a Black 127 w Fl(Margaret-Anne)38
b(D.)e(Storey)g(and)e(Hausi)i(A.)g(M\374ller.)57 b(Graph)34
b(la)m(y)m(out)k(adjustmen)m(t)777 4397 y(strategies.)73
b(In)40 b Fa(Pr)-5 b(o)g(c)g(e)g(e)g(dings)44 b(of)f(the)f(Symp)-5
b(osium)44 b(on)f(Gr)-5 b(aph)44 b(Dr)-5 b(awing)p Fl(,)44
b(GD)e('95,)777 4509 y(pages)31 b(487\025499,)j(London,)c(UK,)g(UK,)h
(1996.)h(Springer-V)-8 b(erlag.)p Black 293 4701 a
SDict begin H.S end
 293
4701 a Fl([SWFM97])725 4701 y
SDict begin 13.6 H.A end
 725 4701 a 725 4701 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Storey:1997:IVT:857188.857642)
cvn /DEST pdfmark end
 725
4701 a Black 52 w Fl(M.-A.)23 b(D.)g(Storey)-8 b(,)24
b(K.)d(W)-8 b(ong,)25 b(F.)d(D.)h(F)-8 b(racc)m(hia,)25
b(and)c(H.)h(A.)g(Mueller.)28 b(On)20 b(in)m(tegrating)775
4814 y(visualization)42 b(tec)m(hniques)f(for)g(e\033ectiv)m(e)i(soft)m
(w)m(are)f(exploration.)72 b(In)39 b Fa(Pr)-5 b(o)g(c)g(e)g(e)g(dings)
770 4927 y(of)41 b(the)g(1997)i(IEEE)c(Symp)-5 b(osium)43
b(on)e(Information)i(V)m(isualization)e(\(InfoV)m(is)g('97\))p
Fl(,)777 5040 y(INF)m(O)m(VIS)j('97,)k(pages)c(38\025,)k(W)-8
b(ashington,)48 b(DC,)c(USA,)f(1997.)i(IEEE)e(Computer)777
5153 y(So)s(ciet)m(y)-8 b(.)p Black 293 5381 a(20)p Black
eop end
%%Page: 21 39
TeXDict begin 21 38 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -13 -44 a
SDict begin H.S end
 -13 -44
a -13 -44 a
SDict begin H.R end
 -13 -44 a -13 -44 a
SDict begin [/View [/XYZ H.V]/Dest (page.21) cvn /DEST pdfmark end
 -13 -44 a Black Black
Black 3377 5381 a Fl(21)p Black eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
