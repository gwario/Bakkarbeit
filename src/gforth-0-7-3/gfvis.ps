%!PS
%%BoundingBox: 0 0 70 610
/cellwidth { 70 } def %C increase to modify stack width
/wordcellwidth { 50 } def %C increase to modify word width

%70 is stack width and 50 is word width
%the BoundingBox width must be increased by 120 each update

/boundingboxheight 610 def % increase to modify the height of the stacks

/wordname ( ) def
/datastack [ ] def
/floatstack [ ] def
/returnstack [ ] def

/stackline (--------------) def
/arrow (---->) def

/setwordcolor { 1 0 0 setrgbcolor } def

/setstackfont {
	/Courier 8 selectfont
} def
/paddingbottom 5 def

/movetoorigin {
	0 paddingbottom moveto
} def


/stackindent { % word -- word
	dup stringwidth pop cellwidth 2 -1 roll sub 0 rmoveto 
} def
/wordindent { % word -- % prints half of the word x-padding
	stringwidth pop wordcellwidth 2 -1 roll sub 2 div 0 rmoveto 
} def


/centerincell { %S word cellwidth -- word %C prints half of the word x-padding
	2 1 roll dup 3 1 roll %S word cellwidth word
	stringwidth pop %S word cellwidth wordwidth
	sub 2 div 0 rmoveto
} def

/realstackheight {
	boundingboxheight paddingbottom 2 mul sub 3 div
} def

/rmovetofirststackarea { % --
	0 realstackheight mul -2 rmoveto
} def
/rmovetonextstackarea { % --
	0 realstackheight rmoveto
} def
/rmovetonextcell { %S -- C we skip a word cell
	wordcellwidth 0 rmoveto
} def
/rmovetonextwordcell { %S -- C we skip a stack cell
	cellwidth 0 rmoveto
} def

/textheight { 
    gsave                                  % save graphic context
    {                            
        100 100 moveto                     % move to some point 
        (H√çpg) true charpath pathbbox      % gets text path bounding box (LLx LLy URx URy)
        exch pop 3 -1 roll pop             % keeps LLy and URy
        exch sub                           % URy - LLy
    }
    stopped                                % did the last block fail?
    {
        pop pop                            % get rid of "stopped" junk
        currentfont /FontMatrix get 3 get  % gets alternative text height
    }
    if
    grestore                               % restore graphic context
} bind def


/printstack { %S stackname stackvalues --
	gsave gsave gsave
	2 -1 roll cellwidth centerincell show %C prints stackname
	grestore %S stackvalues
	0 textheight rmoveto %C move up
	stackline cellwidth centerincell show 
	grestore %S stackvalues
	0 textheight 2 mul rmoveto %C move up
	{ gsave stackindent show grestore 0 textheight rmoveto } forall %C print stack items %C add if clause to prevent overriding the above stack
	grestore
} def

/printword { % wordname -- 
	currentrgbcolor %C backup color
	setwordcolor
	gsave gsave
	4 -1 roll dup dup %S r g b word word word
	wordindent
	show
	wordindent
	grestore
	0 textheight rmoveto %C move up
	arrow wordcellwidth centerincell show
	grestore
	setrgbcolor
} def

/printupdate { % --
	gsave
	wordname printword
	rmovetonextstackarea
	wordname printword
	rmovetonextstackarea
	wordname printword
	grestore
	rmovetonextcell
	gsave
	(data stack) datastack printstack
	rmovetonextstackarea
	(float stack) floatstack printstack
	rmovetonextstackarea
	(return stack) returnstack printstack
	rmovetofirststackarea
	gsave
	rmovetonextwordcell
} def


setstackfont
movetoorigin

% print empty stacks
gsave
(data stack) datastack printstack
rmovetonextstackarea
(float stack) floatstack printstack
rmovetonextstackarea
(return stack) returnstack printstack
rmovetofirststackarea
grestore
rmovetonextwordcell

% the following 4 definitions have to be overridden in order to print the current stacks
%/wordname (ldsdlsdd) def
%/datastack [ (1234) (2345) (3456) (4567) (5678) (6789) (7890) (8901) (9012) ] def
%/floatstack [ (12.34) (23.45) (34.56) (456.7) (567.8) (6.789) (78.90) (89.01) (90.12) ] def
%/returnstack [ (1234) (2345) (3456) (4567) (5678) (6789) (7890) (8901) (9012) (1234) (2345) (3456) (4567) (5678) (6789) (7890) (8901) (9012) (1234) (2345) (3456) (4567) (5678) (6789) (7890) (8901) (9012)  ] def

% the following word has to be appended to actually draw the update
%printupdate


%(X) show
