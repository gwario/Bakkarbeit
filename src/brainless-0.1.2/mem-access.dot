digraph TaxonomyView {#value = green, create = blue; word = circle, value/create = rectangle
	#word <-> value access arrows # writer -> value; value -> reader
	# DboardMhooks
	DboardMhooks -> addMboardMhook; addMboardMhook -> DboardMhooks;
	DboardMhooks -> updateMboard;

	# blackMkingMsquare
	blackMkingMsquare -> kingMsquare;
	blackMkingMsquare -> opponentMkingMsquare;
	positionMking -> blackMkingMsquare; #because of TO value
	initMkings -> blackMkingMsquare;

	# whiteMkingMsquare
	whiteMkingMsquare -> kingMsquare;
	whiteMkingMsquare -> opponentMkingMsquare;
	positionMking -> whiteMkingMsquare;
	initMkings -> whiteMkingMsquare;

	# farMmovedMpawn
	farMmovedMpawn -> singleMstrikeMepMmove;
	doMpawnMfarMmove -> farMmovedMpawn;
	farMmovedMpawn -> doMmoveMundoMinfo; doMmoveMundoMinfo -> farMmovedMpawn;
	undoMmove -> farMmovedMpawn;
	farMmovedMpawn -> selfMcheckingMmoveQ; selfMcheckingMmoveQ -> farMmovedMpawn;
	farMmovedMpawn -> checkingMmoveQ; checkingMmoveQ -> farMmovedMpawn;
	epdMwriteMep -> epdMwriteMep;
	epdMreadMep -> farMmovedMpawn;
	farMmovedMpawn -> strikeMepMmove;
	farMmovedMpawn -> hashMfarMmovedMpawn;

	# white?
	whiteQ -> otherMparty; otherMparty -> whiteQ;
	whiteQ -> setMparty;
	whiteQ -> flyMevalMcastleMnear;
	whiteQ -> flyMevalMcastleMfar;
	whiteQ -> ttentry;
	whiteQ -> associatedMcapture;
	whiteQ -> DTparty;
	whiteQ -> myMeval;
	whiteQ -> absMeval;
	whiteQ -> opponentMeval;
	whiteQ -> moveMtarget;
	whiteQ -> opponentMmoveMtarget;
	whiteQ -> toMmoveMtarget;
	whiteQ -> moveMorig;
	whiteQ -> opponentMmoveMorig;
	whiteQ -> toMmoveMorig;
	whiteQ -> moveMsquares;
	whiteQ -> opponentMmoveMsquares;
	whiteQ -> toMmoveMsquares;
	whiteQ -> sortMmoves;
	whiteQ -> doMcastleMnear;
	whiteQ -> doMcastleMfar;
	whiteQ -> doMcastleMnearMfast;
	whiteQ -> doMcastleMfarMfast;
	whiteQ -> epdMwriteMparty;
	whiteQ -> generateMpromotions;
	whiteQ -> useMnullMmovesQ;
	whiteQ -> toMnullMmovesQ;

	# my-pawn
	myMpieces -> myMpawn;
	myMpawn -> generateMpromotions; myMpawn -> generateMpromotions;
	myMpawn -> pawnMtargetMmove;
	pawnMsingleMtargetMmove -> myMpawn;

	# my-knight
	knightMsingleMtargetMmove -> myMknight;
	myMknight -> knightMtargetMmove;
	myMpieces -> myMknight;

	# my-bishop
	myMpieces -> myMbishop;
	bishopMtargetMmoves -> myMbishop;

	# my-rook
	rookMtargetMmoves -> myMrook;
	myMpieces -> myMrook;

	# my-queen
	myMpieces -> myMqueen;
	queenMtargetMmoves -> myMqueen;

	# my-king
	myMpieces -> myMking;

	# opponent-pawn
	opponentMpieces -> opponentMpawn;
	opponentMpawn -> opponentMpawnQ;

	# opponent-knight
	opponentMpieces -> opponentMknight;
	opponentMknight -> opponentMknightQ;

	# opponent-bishop
	opponentMbishop -> opponentMbishopQ;
	opponentMpieces -> opponentMbishop;

	# opponent-rook
	opponentMpieces -> opponentMrook;
	opponentMrook -> opponentMrookQ;

	# opponent-queen
	opponentMqueen -> opponentMbishopQ;
	opponentMqueen -> opponentMrookQ;
	opponentMpieces -> opponentMqueen;

	# opponent-king
	opponentMpieces -> opponentMking;
	opponentMking -> opponentMkingQ;

	# opponent
	opponent -> opponentMpieces;
	opponent -> opponentQ;
	opponent -> otherMparty; otherMparty -> opponent;
	opponent -> undoMstrikeMepMmove;
	opponent -> strikeQMmove;
	opponent -> straightMstrikeMmoves;
	opponent -> straightMmoves;
	opponent -> kingMmove;
	opponent -> bishopMthreatensMthroughQ;
	opponent -> rookMthreatensMthroughQ;
	opponent -> legalMmoveMtargetQ;

	# my-piece
	myMpiece -> otherMparty; otherMparty -> myMpiece;
	myMpiece -> myMpieceQ;
	myMpiece -> myMpieces;
	myMpiece -> flyMevalMtransMknight;
	myMpiece -> flyMevalMtransMqueen;
	myMpiece -> undoMtransMmove;
	myMpiece -> doMtransMknightMmove;
	myMpiece -> doMtransMqueenMmove;
	myMpiece -> doMtransMknightMmoveMfast;
	myMpiece -> doMtransMqueenMmoveMfast;
	myMpiece -> generateMpromotions;
	myMpiece -> pawnMsingleMtargetMmove;
	myMpiece -> knightMsingleMtargetMmove;
	myMpiece -> bishopMsingleMtargetMmove;
	myMpiece -> rookMsingleMtargetMmove;
	myMpiece -> queenMsingleMtargetMmove;

	# pawn-direction
	otherMparty -> pawnMdirection; pawnMdirection -> otherMparty;
	pawnMdirection -> Qdirection;

	# fly-eval
	flyMeval -> evalMput; evalMput -> flyMeval;
	flyMeval -> flyMevalMmove; flyMevalMmove -> flyMeval;
	flyMeval -> flyMevalMmoves; flyMevalMmoves -> flyMeval;

	# fly-eval-piece
	flyMevalMpiece -> flyMevalMstrikeMmove;
	flyMevalMpiece -> flyMevalMnormalMmove;
	flyMevalMpiece -> flyMevalMstrikeMepMmove;
	flyMevalMpiece -> flyMevalMcastleMnear;
	flyMevalMpiece -> flyMevalMcastleMfar;
	flyMevalMpiece -> flyMevalMmove; flyMevalMmove -> flyMevalMpiece;
	flyMevalMpiece -> flyMevalMmoves; flyMevalMmoves -> flyMevalMpiece;

	# fly-eval-square
	flyMevalMsquare -> flyMevalMmove; flyMevalMmove -> flyMevalMsquare;
	flyMevalMsquare -> flyMevalMmoves; flyMevalMmoves -> flyMevalMsquare;

	# cutoff?
	isMcutoffQ -> cutoffQ;
	bestMmoveMeval -> cutoffQ;
	nullMmoveMeval -> cutoffQ; cutoffQ -> nullMmoveMeval;
	cutoffQ -> singleMmoveMeval; singleMmoveMeval -> cutoffQ;
	killerMmoveMeval -> cutoffQ;
	captureMkillerMmoveMeval -> cutoffQ;
	minimumMquiescenceMmoveMeval -> cutoffQ;
	cutoffQ -> BevalMpositionMrecursiveB;
	cutoffQ -> BquiescenceMevalMnocheckB;
	cutoffQ -> BquiescenceMevalMcheckB;

	# #null
	nullMmoveMeval -> Hnull;

	# start-time
	startMtime -> BabortMsearchQB;
	startMtime -> calculateMmove;

	# root-alpha
	rootMalpha -> calculateMmove; calculateMmove -> rootMalpha;
	rootMalpha -> rootMsearch;

	# root-beta
	rootMbeta -> rootMsearch;
	rootMbeta -> calculateMmove; calculateMmove -> rootMbeta;

	# move-weights
	moveMweights -> createMmoveMweights; createMmoveMweights -> moveMweights;
	moveMweights -> forgetMmoveMweights; forgetMmoveMweights -> moveMweights;
	moveMweights -> moveMweight;

	# compilation-finished?
	# not in words used...

	# #killers
	Hkillers -> adjustMkillerMhistory; adjustMkillerMhistory -> Hkillers;
	Hkillers -> getMrelMkillMcount;
	clearMkillerMhistory -> Hkillers;

	# had-strength?
	strength -> hadMstrengthQ;
	hadMstrengthQ -> QdefaultMstrength;

	# eval-square
	evalMsquare -> rookMthreatsMdeltaMeval;
	evalMsquare -> bishopMthreatsMdeltaMeval;
	deltaMeval -> evalMsquare;
	evalMsquare -> evalMthreat;
	evalMsquare -> evalMstraightMthreats;
	initMknightMthreatMtable -> evalMsquare;
	evalMsquare -> evalMknightMthreats;
	evalMsquare -> pawnMrowMeval;
	evalMsquare -> QpawnMeval;
	evalMsquare -> QkingMeval;
	evalMsquare -> kingMguardQ;
	evalMsquare -> kingMatMbottomQ;
	totalMeval -> evalMsquare;

	# eval-piece
	evalMpiece -> pieceMdeltaMeval;
	deltaMeval -> evalMpiece;
	evalMpiece -> pieceMeval;
	totalMeval -> evalMpiece;
	kingMeval evalMpiece [shape=circle, label="king-eval"];
	evalMpiece -> setMkingMguardMpawn;
	evalMpiece -> queenMeval;
	evalMpiece -> setMthisMpawnAking;
	evalMpiece -> setMthisMpawn;
	evalMpiece -> evalMpawnMthreats;

	# #evals
	Hevals -> totalMeval; totalMeval -> Hevals;
	Hevals -> flyMevalMmove; flyMevalMmove -> Hevals;
	Hevals -> flyMevalMmoves; flyMevalMmoves -> Hevals;
	Hevals -> Bstat;
	Hevals -> statB;
	Hevals -> benchmarkMmovegen;

	# this-pawn
	thisMpawn -> QpawnMeval;

	# this-king
	thisMking -> QkingMeval;

	# this-pawn-dir
	setMthisMpawn -> thisMpawnMdir;
	setMthisMpawnAking -> thisMpawnMdir;
	thisMpawnMdir -> pawnMrowMeval;
	thisMpawnMdir -> pawnMeval;
	thisMpawnMdir -> pawnMdeltaMeval;

	# king-guard-pawn
	setMkingMguardMpawn -> kingMguardMpawn;
	kingMguardMpawn -> kingMguardQ;

	# king-guard-dir
	setMkingMguardMpawn -> kingMguardMdir;
	kingMguardMdir -> kingMatMbottomQ;
	kingMguardMdir -> kingMguardQ;

	# use-arith-notation?
	useMarithMnotationQ -> appendMmoveBstring;
	useMarithMnotationQ -> moveBstring;

	# bigforth?
	# not used in words

	# gforth?
	gforthQ -> BhistoryMfilenameB;

	# iforth?
	# not used in words

	# curr-def
	pC -> currMdef;
	pCnoname -> currMdef;
	currMdef -> Sp;

	# noname-def?
	pC -> nonameMdefQ;
	pCnoname -> nonameMdefQ;
	nonameMdefQ -> Sp;

	# think-limit
	thinkMlimit -> rememberMbestmove;
	thinkMlimit -> nullMmoveMeval;
	thinkMlimit -> onlyMaggressionMhopefulQ;
	thinkMlimit -> QcheckMextension;
	thinkMlimit -> setupMthinkMlimit; setupMthinkMlimit -> thinkMlimit;
	thinkMlimit -> calculateMmove;

	# curr-think-limit
	currMthinkMlimit -> QstaleMmate;
	currMthinkMlimit -> QcheckMextension; QcheckMextension -> currMthinkMlimit;
	currMthinkMlimit -> BevalMmoveMrecursiveB; BevalMmoveMrecursiveB -> currMthinkMlimit;
	setupMthinkMlimit -> currMthinkMlimit;
	currMthinkMlimit -> recurseQ;
	currMthinkMlimit -> horizonMdistance;

	# think-extend
	thinkmextend -> QcheckMextension;
	setupMthinkMlimit -> thinkmextend;

	# max-think-limit
	maxMthinkMlimit -> calculateMmove;
	strength -> maxMthinkMlimit;
	maxMthinkMlimit -> benchmark1;

	# abort-time
	abortMtime -> showMthoughts ; showMthoughts -> abortMtime;
	abortMtime -> BabortMsearchQB;
	strength -> abortMtime;
	benchmark1 -> abortMtime;

	# think-depth
	thinkMdepth -> checkMmateMeval;
	thinkMdepth -> rememberMbestmove;
	thinkMdepth -> nullMmoveMeval;
	thinkMdepth -> QstaleMmate;
	thinkMdepth -> onlyMaggressionMhopefulQ;
	thinkMdepth -> evalBtt;
	thinkMdepth -> ttBeval;
	thinkMdepth -> QabortMsearch;
	thinkMdepth -> QcheckMextension;
	showMthoughts -> thinkMdepth;
	rootMsearch -> thinkMdepth;
	thinkMdepth -> rootMprincipalMmove;
	thinkMdepth -> principalMmove;
	thinkMdepth -> appendMprincipalMvariation;
	thinkMdepth -> appendMpvBstring; appendMpvBstring -> thinkMdepth;
	thinkMdepth -> simpleMkiller;
	thinkMdepth -> recurseQ;
	Pdepth -> thinkMdepth;
	Mdepth -> thinkMdepth;
	thinkMdepth -> horizonMdistance;
	thinkMdepth -> nullMmoveQ;

	# aborting?
	abortingQ -> storeMevaluation;
	QabortMsearch -> abortingQ;
	abortingQ -> BevalMmoveMrecursiveB;
	showMthoughts -> abortingQ;
	abortingQ -> rootMsearch; rootMsearch -> abortingQ;
	abortingQ -> calculateMmove;

	# alpha
	alpha -> switchMalphaMbeta; switchMalphaMbeta -> alpha;
	alpha -> adjustMalpha; adjustMalpha -> alpha;
	alpha -> nullMmoveMeval; nullMmoveMeval -> alpha;
	alpha -> onlyMaggressionMhopefulQ;
	alpha -> storeMevaluation;
	alpha -> evalMpositionMwithMmemory; evalMpositionMwithMmemory -> alpha;
	alpha -> BquiescenceMevalMnocheckB; BquiescenceMevalMnocheckB -> alpha;
	alpha -> BquiescenceMevalMcheckB; BquiescenceMevalMcheckB -> alpha;
	alpha -> BevalMmoveMrecursiveB; BevalMmoveMrecursiveB -> alpha;
	showMthoughts -> alpha;
	alpha -> rootMsearch; rootMsearch -> alpha;
	alpha -> calculateMmove; calculateMmove -> alpha;
	alpha -> usefulMcaptureQ;

	# beta
	beta -> ttableMadjustMweight;
	beta -> switchMalphaMbeta; switchMalphaMbeta -> beta;
	beta -> isMcutoffQ;
	beta -> nullMmoveMeval;
	beta -> storeMevaluation;
	beta -> evalMpositionMwithMmemory; evalMpositionMwithMmemory -> beta;
	beta -> BevalMmoveMrecursiveB; BevalMmoveMrecursiveB -> beta;
	showMthoughts -> beta;
	beta -> rootMsearch; rootMsearch -> beta;

	# on-principal-variation?
	onMprincipalMvariationQ -> BevalMmoveMrecursiveB; BevalMmoveMrecursiveB -> onMprincipalMvariationQ;
	rootMsearch -> onMprincipalMvariationQ;
	calculateMmove -> onMprincipalMvariationQ;
	onMprincipalMvariationQ -> weightMmoves;
	onMprincipalMvariationQ -> QonMprincipalMvariation; QonMprincipalMvariation -> onMprincipalMvariationQ;
	onMprincipalMvariationQ -> generateMfastMkiller;
	onMprincipalMvariationQ -> generateMfastMstrikeMkiller;

	# #nodes
	Hnodes -> BevalMpositionMrecursiveB; BevalMpositionMrecursiveB -> Hnodes;
	Hnodes -> BquiescenceMevalMnocheckB; BquiescenceMevalMnocheckB -> Hnodes;
	Hnodes -> BquiescenceMevalMcheckB; BquiescenceMevalMcheckB -> Hnodes;
	Hnodes -> Bstat;
	Hnodes -> statB;

	# stale-mate
	staleMmate -> QstaleMmate;
	staleMmate -> QcheckSstaleMmate;
	staleMmate -> BevalMmoveMrecursiveB;

	# curr-abs-eval
	currMabsMeval -> flyMevalMmove;
	currMabsMeval -> flyMevalMmoves;
	PflyMeval -> currMabsMeval;
	calculateMmove -> currMabsMeval;
	setMcurrMabsMeval -> currMabsMeval;
	currMabsMeval -> currMeval;
	currMabsMeval -> getMnullMmove;
	currMabsMeval -> doMmoveMundoMinfo; doMmoveMundoMinfo -> currMabsMeval;
	undoMmove -> currMabsMeval;
	currMabsMeval -> checkMflyMeval;

	# curr-check?
	currMcheckQ -> QcheckSstaleMmate;
	currMcheckQ -> onlyMaggressionMhopefulQ;
	currMcheckQ -> BquiescenceMevalMpositionB;
	currMcheckQ -> QcheckMextension;
	calculateMmove -> currMcheckQ;
	setMmoveMvars -> currMcheckQ;
	updateMcurrMcheckQ -> currMcheckQ;
	currMcheckQ -> doMmoveMundoMinfo;
	undoMmove -> currMcheckQ;
	currMcheckQ -> BgenerateMmoveMtoB;
	currMcheckQ -> BmoveMtoMexistsQB;
	currMcheckQ -> generateMmoveMfrom;
	currMcheckQ -> checkMcheck;

	# black-move-target
	setMmoveMvars -> blackMmoveMtarget;
	blackMmoveMtarget -> moveMtarget;
	blackMmoveMtarget -> opponentMmoveMtarget;
	toMmoveMtarget -> blackMmoveMtarget;
	blackMmoveMtarget -> moveMsquares;
	blackMmoveMtarget -> opponentMmoveMsquares;
	toMmoveMsquares -> blackMmoveMtarget;

	# white-move-target
	setMmoveMvars -> whiteMmoveMtarget;
	whiteMmoveMtarget -> moveMtarget;
	whiteMmoveMtarget -> opponentMmoveMtarget;
	toMmoveMtarget -> whiteMmoveMtarget;
	whiteMmoveMtarget -> opponentMmoveMsquares;
	toMmoveMsquares -> whiteMmoveMtarget;

	# black-move-orig
	setMmoveMvars -> blackMmoveMorig;
	blackMmoveMorig -> moveMorig;
	blackMmoveMorig -> opponentMmoveMorig;
	toMmoveMorig -> blackMmoveMorig;
	blackMmoveMorig -> moveMsquares;
	blackMmoveMorig -> opponentMmoveMsquares;
	toMmoveMsquares -> blackMmoveMorig;

	# white-move-orig
	setMmoveMvars -> whiteMmoveMorig;
	whiteMmoveMorig -> moveMorig;
	whiteMmoveMorig -> opponentMmoveMorig;
	toMmoveMorig -> whiteMmoveMorig;
	whiteMmoveMorig -> moveMsquares;
	whiteMmoveMorig -> opponentMmoveMsquares;
	toMmoveMsquares -> whiteMmoveMorig;

	# move-list
	moveMlist -> getMmove;
	moveMlist -> setMmove;
	moveMlist -> getMeval;
	moveMlist -> getMorig;
	moveMlist -> setMeval;
	moveMlist -> getMtarget;
	moveMlist -> getMmoveMclass;
	moveMlist -> getMmoveMsquares;
	moveMlist -> getMmoveMnoeval;
	moveMlist -> swapMmoves;
	moveMlist -> firstMmove;
	moveMlist -> newMmoves; newMmoves -> moveMlist;
	moveMlist -> forgetMmoves; forgetMmoves -> moveMlist;

	# #moves
	Hmoves -> flyMevalMmoves;
	Hmoves -> killerMmoveMeval;
	Hmoves -> captureMkillerMmoveMeval;
	Hmoves -> minimumMquiescenceMmoveMeval;
	Hmoves -> showMthoughts;
	Hmoves -> rootMsearch;
	Hmoves -> createMmoveMweights;
	Hmoves -> weightMmoves;
	Hmoves -> nextMbestMmove;
	Hmoves -> sortMmovesMbyMweight;
	Hmoves -> generateMfastMkiller;
	Hmoves -> generateMfastMstrikeMkiller;
	Hmoves -> BevalMmovesB;
	Hmoves -> benchmarkMeval;
	Hmoves -> benchmarkMmovegen;
	Hmoves -> uniqueMtargetQ;
	Hmoves -> uniqueMrankQ;
	Hmoves -> uniqueMfileQ;
	Hmoves -> QsingleMmove;
	Hmoves -> deleteMmovesMto;
	Hmoves -> evalMcaptureMbalance;
	Hmoves -> checkMflyMeval;
	Hmoves -> checkMcheck;
	Hmoves -> checkMhash;
	Hmoves -> addMmove; addMmove -> Hmoves;
	Hmoves -> newMmoves; newMmoves -> Hmoves;
	forgetMmoves -> Hmoves;
	Hmoves -> findMmove;
	Hmoves -> findMmoveMx;
	Hmoves -> deleteMmove; deleteMmove -> Hmoves;
	Hmoves -> sortMmoves;
	Hmoves -> DTmoves;
	Hmoves -> DTSemoves;

	# moves-evaluated?
	movesMevaluatedQ -> newMmoves; newMmoves -> movesMevaluatedQ;
	forgetMmoves -> movesMevaluatedQ;
	movesMevaluatedQ -> QevalMmoves;
	movesMevaluatedQ -> QgetMeval;
	flyMevalMmoves -> movesMevaluatedQ;
	BevalMmovesB -> movesMevaluatedQ;

	# find-move-class
	findMmoveMclass -> findMmoveMx; findMmoveMclass -> findMmoveMx;

	# curr-string#
	currMstringH -> stringMvariable;
	currMstringH -> newMstring; newMstring -> currMstringH;
	currMstringH -> previousMstring; previousMstring -> currMstringH;

	# epd-file-id
	# Not used in any words

	# epd-fileid
	epdMfileid -> epdMcloseMfile;
	epdMopenMfile -> epdMfileid;
	epdMfileid -> epdMreadMfile;
	epdMfileid -> epdMreadMlast;
	epdMfileid -> epdMtruncate;
	epdMfileid -> epdMwriteMtoMfile;
	epdMfileid -> epdMappendMtoMfile; epdMappendMtoMfile -> epdMfileid;
	epdMcreateMfile -> epdMfileid;
	epdMfileid -> test; test -> epdMfileid;

	# move-gen-piece
	moveMgenMpiece -> BgenerateMquiescenceMmoveMtoB;
	moveMgenMpiece -> singleMnormalMmove;
	moveMgenMpiece -> singleMstrikeMmove;
	moveMgenMpiece -> singleMpawnMfarMmove;
	moveMgenMpiece -> pawnMfarMmove;
	moveMgenMpiece -> castleMnear;
	moveMgenMpiece -> castleMfar;
	selectMmovingMpiece -> moveMgenMpiece;
	generateMpromotions -> moveMgenMpiece;
	movesMexistQ -> moveMgenMpiece;

	# move-gen-from
	moveMgenMfrom -> BgenerateMquiescenceMmoveMtoB;
	moveMgenMfrom -> singleMpawnMnormalMmove;
	moveMgenMfrom -> singleMnonpawnMnormalMmove;
	moveMgenMfrom -> singleMpawnMstrikeMmove;
	moveMgenMfrom -> singleMnonpawnMstrikeMmove;
	moveMgenMfrom -> singleMpawnMfarMmove;
	moveMgenMfrom -> singleMtransMmove;
	moveMgenMfrom -> singleMstrikeMepMmove;
	moveMgenMfrom -> singleMkingMmove;
	moveMgenMfrom -> singleMkingMstrikeMmove;
	moveMgenMfrom -> normalMmove;
	moveMgenMfrom -> strikeMmove;
	moveMgenMfrom -> strikeQMmove;
	moveMgenMfrom -> pawnMfarMmove;
	moveMgenMfrom -> strikeMepMmove;
	moveMgenMfrom -> pawnMnormalMmove;
	moveMgenMfrom -> pawnMstrikeMmove;
	moveMgenMfrom -> straightMpeacefulMmoves;
	moveMgenMfrom -> straightMstrikeMmoves;
	moveMgenMfrom -> straightMmoves;
	moveMgenMfrom -> kingMmove;
	moveMgenMfrom -> kingMstrikeMmove;
	moveMgenMfrom -> kingMpeacefulMmove;
	moveMgenMfrom -> castleMnear;
	moveMgenMfrom -> castleMfar;
	selectMmovingMpiece -> moveMgenMfrom;
	moveMgenMfrom -> BgenerateMmoveMtoMnocheckB;
	moveMgenMfrom -> BgenerateMmoveMtoMcheckB;
	generateMpromotions -> moveMgenMfrom;
	moveMgenMfrom -> BmoveMtoMexistsQBT;
	moveMgenMfrom -> BmoveMtoMexistsQMnocheckB;
	moveMgenMfrom -> BmoveMtoMexistsQMcheckB;
	movesMexistQ -> moveMgenMfrom;

	# forbidden-move-target
	forbiddenMmoveMtarget -> BgenerateMmoveMnotMtoB;
	appendMmovesMnotMto -> forbiddenMmoveMtarget;
	appendMstrikeMmovesMnotMto -> forbiddenMmoveMtarget;

	# single-move-to
	singleMmoveMto -> BgenerateMsingleMmoveB;
	generateMsingleMmove -> singleMmoveMto;
	singleMmoveMto -> BgenerateMsingleMmoveMxB;
	generateMsingleMmoveMx -> singleMmoveMto;

	# single-move-class
	singleMmoveMclass -> BgenerateMsingleMmoveMxB;
	generateMsingleMmoveMx -> singleMmoveMclass;

	# move-exists?
	moveMexistsQ -> BmoveMtoMexistsQBT;
	BmoveMtovexistsQMnocheckB -> moveMexistsQ;
	BmoveMtoMexistsQMcheckB -> moveMexistsQ;
	moveMexistsQ -> BmoveMtoMexistsQB;
	moveMexistsQ -> movesMexistQ; moveMexistsQ -> movesMexistQ;

	# random-seed
	randomMseed -> random; random -> randomMseed;

	# #hashed-positions
	HhashedMpositions -> rememberMposition; rememberMposition -> HhashedMpositions;
	HhashedMpositions -> forgetMposition; forgetMposition -> HhashedMpositions;

	# most-recent-match
	forgetMposition -> mostMrecentMmatch;

	# check-limit
	checkMlimit -> continueMcheckQ;
	performMflyMevalMtest -> checkMlimit;
	performMcheckMtest -> checkMlimit;
	performMhashMtest -> checkMlimit;

	# check-depth
	checkMdepth -> Pcheck; Pcheck -> checkMdepth;
	checkMdepth -> Mcheck; Mcheck -> checkMdepth;
	performMtests -> checkMdepth;

	# threatening-square
	threateningMsquare -> whiteMpawnMthreatensQ;
	threateningMsquare -> blackMpawnMthreatensQ;
	threateningMsquare -> knightMthreatensQ;
	threateningMsquare -> threatenedMfromMdirectionQ;
	threateningMsquare -> bishopMthreatensQ;
	threateningMsquare -> rookMthreatensQ;
	threateningMsquare -> queenMthreatensQ;
	threateningMsquare -> kingMthreatensQ;
	pieceMwouldMthreatenQ -> threateningMsquare;
	threatensQ -> threateningMsquare;
	threateningMsquare -> pieceMthreateningMthrough;
	threateningMsquare -> queenlikeMthreatensMthroughQ;
	mightMcauseMopponentMcheckQ -> threateningMsquare;
	mightMcauseMcheckQ -> threateningMsquare;
	mightMblockMcheckQ -> threateningMsquare;

	# null-move-threshold
	nullMmoveMthreshold -> decideMnullMmovesQ;

	# white-null-moves?
	whiteMnullMmovesQ -> useMnullMmovesQ;
	toMnullMmovesQ -> whiteMnullMmovesQ;

	# black-null-moves?
	blackMnullMmovesQ -> useMnullMmovesQ;
	toMnullMmovesQ -> blackMnullMmovesQ;

	# white-field?
	whiteMfieldQ -> fieldMattr;
	whiteMfieldQ -> fieldMspaces;
	DTboardMline -> whiteMfieldQ;

	# white-piece?
	whiteMpieceQ -> pieceMattr;
	DTboardMline -> whiteMpieceQ;

	# field-width
	smallMboard -> fieldMwidth;
	normalMboard -> fieldMwidth;
	hugeMboard -> fieldMwidth;
	fieldMwidth -> DTfieldMslice;
	fieldMwidth -> DThborder;

	# field-height
	smallMboard -> fieldMheight;
	normalMboard -> fieldMheight;
	hugeMboard -> fieldMheight;
	fieldMheight -> DTfieldMslice;
	fieldMheight -> DTvborderMslice;
	fieldMheight -> DTboardMline;

	# move-gen-to
	moveMgenMto -> generateMmoveMfrom;
	moveMgenMto -> pawnMtargetMmove;
	moveMgenMto -> knightMtargetMmove;
	moveMgenMto -> straightMtargetMmove;
	moveMgenMto -> kingMtargetMmove;
	appendMmovesMto -> moveMgenMto;
	generateMcheapestMmoveMto -> moveMgenMto;
	generateMcheapestMweakMmoveMto -> moveMgenMto;
	generateMpawnMmoveMto -> moveMgenMto;

	# target-piece
	targetMpiece -> straightMtargetMmove;
	bishopMtargetMmoves -> targetMpiece;
	rookMtargetMmoves -> targetMpiece;
	queenMtargetMmoves -> targetMpiece;
	bishopMsingleMtargetMmove -> targetMpiece;
	rookMsingleMtargetMmove -> targetMpiece;
	queenMsingleMtargetMmove -> targetMpiece;








	# value node styling
	HboardMhooks [shape=rectangle, color=red, label="\#board-hooks"];
	blackMkingMsquare [shape=rectangle, color=red, label="black-king-square"];
	whiteMkingMsquare [shape=rectangle, color=red, label="white-king-square"];
	farMmovedMpawn [shape=rectangle, color=red, label="far-moved-pawn"];
	whiteQ [shape=rectangle, color=red, label="white?"];
	myMpawn [shape=rectangle, color=red, label="my-pawn"];
	myMknight [shape=rectangle, color=red, label="my-knight"];
	myMbishop [shape=rectangle, color=red, label="my-bishop"];
	myMrook [shape=rectangle, color=red, label="my-rook"];
	myMqueen [shape=rectangle, color=red, label="my-queen"];
	myMking [shape=rectangle, color=red, label="my-king"];
	opponentMpawn [shape=rectangle, color=red, label="opponent-pawn"];
	opponentMknight [shape=rectangle, color=red, label="opponent-knight"];
	opponentMbishop [shape=rectangle, color=red, label="opponent-bishop"];
	opponentMrook [shape=rectangle, color=red, label="opponent-rook"];
	opponentMqueen [shape=rectangle, color=red, label="opponent-queen"];
	opponentMking [shape=rectangle, color=red, label="opponent-king"];
	opponent [shape=rectangle, color=red, label="opponent"];
	myMpiece [shape=rectangle, color=red, label="my-piece"];
	pawnMdirection [shape=rectangle, color=red, label="pawn-direction"];
	flyMeval [shape=rectangle, color=red, label="fly-eval"];
	flyMevalMpiece [shape=rectangle, color=red, label="fly-eval-piece"];
	flyMevalMsquare [shape=rectangle, color=red, label="fly-eval-square"];
	cutoffQ [shape=rectangle, color=red, label="cutoff?"];
	Hnull [shape=rectangle, color=red, label="\#null"];
	startMtime [shape=rectangle, color=red, label="start-time"];
	rootMalpha [shape=rectangle, color=red, label="root-alpha"];
	rootMbeta [shape=rectangle, color=red, label="root-beta"];
	moveMweights [shape=rectangle, color=red, label="move-weights"];
	compilationMfinishedQ [shape=rectangle, color=red, label="compilation-finished?"];
	Hkillers [shape=rectangle, color=red, label="\#killers"];
	hadMstrengthQ [shape=rectangle, color=red, label="had-strength?"];
	evalMsquare [shape=rectangle, color=red, label="eval-square"];
	evalMpiece [shape=rectangle, color=red, label="eval-piece"];
	Hevals [shape=rectangle, color=red, label="\#evals"];
	thisMpawn [shape=rectangle, color=red, label="this-pawn"];
	thisMking [shape=rectangle, color=red, label="this-king"];
	thisMpawnMdir [shape=rectangle, color=red, label="this-pawn-dir"];
	kingMguardMpawn [shape=rectangle, color=red, label="king-guard-pawn"];
	kingMguardMdir [shape=rectangle, color=red, label="king-guard-dir"];
	useMarithMnotationQ [shape=rectangle, color=red, label="use-arith-notation?"];
	bigforthQ [shape=rectangle, color=red, label="bigforth?"];
	gforthQ [shape=rectangle, color=red, label="gforth?"];
	iforthQ [shape=rectangle, color=red, label="iforth?"];
	currMdef [shape=rectangle, color=red, label="curr-def"];
	nonameMdefQ [shape=rectangle, color=red, label="noname-def?"];
	thinkMlimit [shape=rectangle, color=red, label="think-limit"];
	currMthinkMlimit [shape=rectangle, color=red, label="curr-think-limit"];
	thinkMextend [shape=rectangle, color=red, label="think-extend"];
	maxMthinkMlimit [shape=rectangle, color=red, label="max-think-limit"];
	abortMtime [shape=rectangle, color=red, label="abort-time"];
	thinkMdepth [shape=rectangle, color=red, label="think-depth"];
	abortingQ [shape=rectangle, color=red, label="aborting?"];
	alpha [shape=rectangle, color=red, label="alpha"];
	beta [shape=rectangle, color=red, label="beta"];
	onMprincipalMvariationQ [shape=rectangle, color=red, label="on-principal-variation?"];
	Hnodes [shape=rectangle, color=red, label="\#nodes"];
	staleMmate [shape=rectangle, color=red, label="stale-mate"];
	currMabsMeval [shape=rectangle, color=red, label="curr-abs-eval"];
	currMcheckQ [shape=rectangle, color=red, label="curr-check?"];
	blackMmoveMtarget [shape=rectangle, color=red, label="black-move-target"];
	whiteMmoveMtarget [shape=rectangle, color=red, label="white-move-target"];
	blackMmoveMorig [shape=rectangle, color=red, label="black-move-orig"];
	whiteMmoveMorig [shape=rectangle, color=red, label="white-move-orig"];
	moveMlist [shape=rectangle, color=red, label="move-list"];
	Hmoves [shape=rectangle, color=red, label="\#moves"];
	movesMevaluatedQ [shape=rectangle, color=red, label="moves-evaluated?"];
	findMmoveMclass [shape=rectangle, color=red, label="find-move-class"];
	currMstringH [shape=rectangle, color=red, label="curr-string\#"];
	epdMfileMid [shape=rectangle, color=red, label="epd-file-id"];
	epdMfileid [shape=rectangle, color=red, label="epd-fileid"];
	moveMgenMpiece [shape=rectangle, color=red, label="move-gen-piece"];
	moveMgenMfrom [shape=rectangle, color=red, label="move-gen-from"];
	forbiddenMmoveMtarget [shape=rectangle, color=red, label="forbidden-move-target"];
	singleMmoveMto [shape=rectangle, color=red, label="single-move-to"];
	singleMmoveMclass [shape=rectangle, color=red, label="single-move-class"];
	moveMexistsQ [shape=rectangle, color=red, label="move-exists?"];
	randomMseed [shape=rectangle, color=red, label="random-seed"];
	HhashedMpositions [shape=rectangle, color=red, label="\#hashed-positions"];
	mostMrecentMmatch [shape=rectangle, color=red, label="most-recent-match"];
	checkMlimit [shape=rectangle, color=red, label="check-limit"];
	checkMdepth [shape=rectangle, color=red, label="check-depth"];
	threateningMsquare [shape=rectangle, color=red, label="threatening-square"];
	nullMmoveMthreshold [shape=rectangle, color=red, label="null-move-threshold"];
	whiteMnullMmovesQ [shape=rectangle, color=red, label="white-null-moves?"];
	blackMnullMmovesQ [shape=rectangle, color=red, label="black-null-moves?"];
	whiteMfieldQ [shape=rectangle, color=red, label="white-field?"];
	whiteMpieceQ [shape=rectangle, color=red, label="white-piece?"];
	fieldMwidth [shape=rectangle, color=red, label="field-width"];
	fieldMheight [shape=rectangle, color=red, label="field-height"];
	moveMgenMto [shape=rectangle, color=red, label="move-gen-to"];
	targetMpiece [shape=rectangle, color=red, label="target-piece"];
	
	# word node styling
	absMeval [shape=circle, label="abs-eval"];
	addMboardMhook [shape=circle, label="add-board-hook"];
	addMmove [shape=circle, label="add-move"];
	adjustMalpha [shape=circle, label="adjust-alpha"];
	adjustMkillerMhistory [shape=circle, label="adjust-killer-history"];
	appendMmoveBstring [shape=circle, label="append-move>string"];
	appendMmovesMnotMto [shape=circle, label="append-moves-not-to"];
	appendMmovesMto [shape=circle, label="append-moves-to"];
	appendMprincipalMvariation [shape=circle, label="append-principal-variation"];
	appendMpvBstring [shape=circle, label="append-pv>string"];
	appendMstrikeMmovesMnotMto [shape=circle, label="append-strike-moves-not-to"];
	associatedMcapture [shape=circle, label="associated-capture"];
	BabortMsearchQB [shape=circle, label="(abort-search?)"];
	benchmark1 [shape=circle, label="benchmark1"];
	benchmarkMeval [shape=circle, label="benchmark-eval"];
	benchmarkMmovegen [shape=circle, label="benchmark-movegen"];
	bestMmoveMeval [shape=circle, label="best-move-eval"];
	BevalMmoveMrecursiveB [shape=circle, label="(eval-move-recursive)"];
	BevalMmovesB [shape=circle, label="(eval-moves)"];
	BevalMpositionMrecursiveB [shape=circle, label="(eval-position-recursive)"];
	BgenerateMmoveMnotMtoB [shape=circle, label="(generate-move-not-to)"];
	BgenerateMmoveMtoB [shape=circle, label="(generate-move-to)"];
	BgenerateMmoveMtoMcheckB [shape=circle, label="(generate-move-to-check)"];
	BgenerateMmoveMtoMnocheckB [shape=circle, label="(generate-move-to-nocheck)"];
	BgenerateMquiescenceMmoveMtoB [shape=circle, label="(generate-quiescence-move-to)"];
	BgenerateMsingleMmoveB [shape=circle, label="(generate-single-move)"];
	BgenerateMsingleMmoveMxB [shape=circle, label="(generate-single-move-x)"];
	BhistoryMfilenameB [shape=circle, label="(history-filename)"];
	bishopMsingleMtargetMmove [shape=circle, label="bishop-single-target-move"];
	bishopMtargetMmoves [shape=circle, label="bishop-target-moves"];
	bishopMthreatensMthroughQ [shape=circle, label="bishop-threatens-through?"];
	bishopMthreatensQ [shape=circle, label="bishop-threatens?"];
	bishopMthreatsMdeltaMeval [shape=circle, label="bishop-threats-delta-eval"];
	blackMpawnMthreatensQ [shape=circle, label="black-pawn-threatens?"];
	BmoveMtoMexistsQB [shape=circle, label="(move-to-exists?)"];
	BmoveMtoMexistsQBT [shape=circle, label="(move-to-exists?)'"];
	BmoveMtoMexistsQMcheckB [shape=circle, label="(move-to-exists?-check)"];
	BmoveMtovexistsQMnocheckB [shape=circle, label="(move-to-exists?-nocheck)"];
	BquiescenceMevalMcheckB [shape=circle, label="(quiescence-eval-check)"];
	BquiescenceMevalMnocheckB [shape=circle, label="(quiescence-eval-nocheck)"];
	BquiescenceMevalMpositionB [shape=circle, label="(quiescence-eval-position)"];
	Bstat [shape=circle, label="<stat"];
	calculateMmove [shape=circle, label="calculate-move"];
	captureMkillerMmoveMeval [shape=circle, label="capture-killer-move-eval"];
	castleMfar [shape=circle, label="castle-far"];
	castleMnear [shape=circle, label="castle-near"];
	checkingMmoveQ [shape=circle, label="checking-move?"];
	checkMcheck [shape=circle, label="check-check"];
	checkMflyMeval [shape=circle, label="check-fly-eval"];
	checkMhash [shape=circle, label="check-hash"];
	checkMmateMeval [shape=circle, label="check-mate-eval"];
	clearMkillerMhistory [shape=circle, label="clear-killer-history"];
	continueMcheckQ [shape=circle, label="continue-check?"];
	createMmoveMweights [shape=circle, label="create-move-weights"];
	currMeval [shape=circle, label="curr-eval"];
	decideMnullMmovesQ [shape=circle, label="decide-null-moves?"];
	deleteMmove [shape=circle, label="delete-move"];
	deleteMmovesMto [shape=circle, label="delete-moves-to"];
	deltaMeval [shape=circle, label="delta-eval"];
	doMcastleMfarMfast [shape=circle, label="do-castle-far-fast"];
	doMcastleMfar [shape=circle, label="do-castle-far"];
	doMcastleMnearMfast [shape=circle, label="do-castle-near-fast"];
	doMcastleMnear [shape=circle, label="do-castle-near"];
	doMmoveMundoMinfo [shape=circle, label="do-move-undo-info"];
	doMpawnMfarMmove [shape=circle, label="do-pawn-far-move"];
	doMtransMknightMmoveMfast [shape=circle, label="do-trans-knight-move-fast"];
	doMtransMknightMmove [shape=circle, label="do-trans-knight-move"];
	doMtransMqueenMmoveMfast [shape=circle, label="do-trans-queen-move-fast"];
	doMtransMqueenMmove [shape=circle, label="do-trans-queen-move"];
	DTboardMline [shape=circle, label=".board-line"];
	DTfieldMslice [shape=circle, label=".field-slice"];
	DThborder [shape=circle, label=".hborder"];
	DTmoves [shape=circle, label=".moves"];
	DTparty [shape=circle, label=".party"];
	DTSemoves [shape=circle, label=".emoves"];
	DTvborderMslice [shape=circle, label=".vborder-slice"];
	epdMappendMtoMfile [shape=circle, label="epd-append-to-file"];
	epdMcloseMfile [shape=circle, label="epd-close-file"];
	epdMcreateMfile [shape=circle, label="epd-create-file"];
	epdMopenMfile [shape=circle, label="epd-open-file"];
	epdMreadMep [shape=circle, label="epd-read-ep"];
	epdMreadMfile [shape=circle, label="epd-read-file"];
	epdMreadMlast [shape=circle, label="epd-read-last"];
	epdMtruncate [shape=circle, label="epd-truncate"];
	epdMwriteMep [shape=circle, label="epd-write-ep"];
	epdMwriteMparty [shape=circle, label="epd-write-party"];
	epdMwriteMtoMfile [shape=circle, label="epd-write-to-file"];
	evalBtt [shape=circle, label="eval>tt"];
	evalMcaptureMbalance [shape=circle, label="eval-capture-balance"];
	evalMknightMthreats [shape=circle, label="eval-knight-threats"];
	evalMpawnMthreats [shape=circle, label="eval-pawn-threats"];
	evalMpositionMwithMmemory [shape=circle, label="eval-position-with-memory"];
	evalMput [shape=circle, label="eval-put"];
	evalMstraightMthreats [shape=circle, label="eval-straight-threats"];
	evalMthreat [shape=circle, label="eval-threat"];
	fieldMattr [shape=circle, label="field-attr"];
	fieldMspaces [shape=circle, label="field-spaces"];
	findMmoveMx [shape=circle, label="find-move-x"];
	findMmove [shape=circle, label="find-move"];
	firstMmove [shape=circle, label="first-move"];
	flyMevalMcastleMfar [shape=circle, label="fly-eval-castle-far"];
	flyMevalMcastleMnear [shape=circle, label="fly-eval-castle-near"];
	flyMevalMmove [shape=circle, label="fly-eval-move"];
	flyMevalMmoves [shape=circle, label="fly-eval-moves"];
	flyMevalMnormalMmove [shape=circle, label="fly-eval-normal-move"];
	flyMevalMstrikeMepMmove [shape=circle, label="fly-eval-strike-ep-move"];
	flyMevalMstrikeMmove [shape=circle, label="fly-eval-strike-move"];
	flyMevalMtransMknight [shape=circle, label="fly-eval-trans-knight"];
	flyMevalMtransMqueen [shape=circle, label="fly-eval-trans-queen"];
	forgetMmoveMweights [shape=circle, label="forget-move-weights"];
	forgetMmoves [shape=circle, label="forget-moves"];
	forgetMposition [shape=circle, label="forget-position"];
	generateMcheapestMmoveMto [shape=circle, label="generate-cheapest-move-to"];
	generateMcheapestMweakMmoveMto [shape=circle, label="generate-cheapest-weak-move-to"];
	generateMfastMkiller [shape=circle, label="generate-fast-killer"];
	generateMfastMstrikeMkiller [shape=circle, label="generate-fast-strike-killer"];
	generateMmoveMfrom [shape=circle, label="generate-move-from"];
	generateMpawnMmoveMto [shape=circle, label="generate-pawn-move-to"];
	generateMpromotions [shape=circle, label="generate-promotions"];
	generateMsingleMmoveMx [shape=circle, label="generate-single-move-x"];
	generateMsingleMmove [shape=circle, label="generate-single-move"];
	getMeval [shape=circle, label="get-eval"];
	getMmoveMclass [shape=circle, label="get-move-class"];
	getMmoveMnoeval [shape=circle, label="get-move-noeval"];
	getMmoveMsquares [shape=circle, label="get-move-squares"];
	getMmove [shape=circle, label="get-move"];
	getMnullMmove [shape=circle, label="get-null-move"];
	getMorig [shape=circle, label="get-orig"];
	getMrelMkillMcount [shape=circle, label="get-rel-kill-count"];
	getMtarget [shape=circle, label="get-target"];
	hashMfarMmovedMpawn [shape=circle, label="hash-far-moved-pawn"];
	horizonMdistance [shape=circle, label="horizon-distance"];
	hugeMboard [shape=circle, label="huge-board"];
	initMkings [shape=circle, label="init-kings"];
	initMknightMthreatMtable [shape=circle, label="init-knight-threat-table"];
	isMcutoffQ [shape=circle, label="is-cutoff?"];
	killerMmoveMeval [shape=circle, label="killer-move-eval"];
	kingMatMbottomQ [shape=circle, label="king-at-bottom?"];
	kingMeval [shape=circle, label="king-eval"];
	kingMguardQ [shape=circle, label="king-guard?"];
	kingMmove [shape=circle, label="king-move"];
	kingMpeacefulMmove [shape=circle, label="king-peaceful-move"];
	kingMsquare [shape=circle, label="king-square"];
	kingMstrikeMmove [shape=circle, label="king-strike-move"];
	kingMtargetMmove [shape=circle, label="king-target-move"];
	kingMthreatensQ [shape=circle, label="king-threatens?"];
	knightMsingleMtargetMmove [shape=circle, label="knight-single-target-move"];
	knightMtargetMmove [shape=circle, label="knight-target-move"];
	knightMthreatensQ [shape=circle, label="knight-threatens?"];
	legalMmoveMtargetQ [shape=circle, label="legal-move-target?"];
	Mcheck [shape=circle, label="-check"];
	Mdepth [shape=circle, label="-depth"];
	mightMblockMcheckQ [shape=circle, label="might-block-check?"];
	mightMcauseMcheckQ [shape=circle, label="might-cause-check?"];
	mightMcauseMopponentMcheckQ [shape=circle, label="might-cause-opponent-check?"];
	minimumMquiescenceMmoveMeval [shape=circle, label="minimum-quiescence-move-eval"];
	moveBstring [shape=circle, label="move>string"];
	moveMorig [shape=circle, label="move-orig"];
	moveMsquares [shape=circle, label="move-squares"];
	moveMtarget [shape=circle, label="move-target"];
	moveMweight [shape=circle, label="move-weight"];
	movesMexistQ [shape=circle, label="moves-exist?"];
	myMeval [shape=circle, label="my-eval"];
	myMpieces [shape=circle, label="my-pieces"];
	newMmoves [shape=circle, label="new-moves"];
	newMstring [shape=circle, label="new-string"];
	nextMbestMmove [shape=circle, label="next-best-move"];
	normalMboard [shape=circle, label="normal-board"];
	normalMmove [shape=circle, label="normal-move"];
	nullMmoveMeval [shape=circle, label="null-move-eval"];
	nullMmoveQ [shape=circle, label="null-move?"];
	onlyMaggressionMhopefulQ [shape=circle, label="only-aggression-hopeful?"];
	opponentMbishopQ [shape=circle, label="opponent-bishop?"];
	opponentMeval [shape=circle, label="opponent-eval"];
	opponentMkingMsquare [shape=circle, label="opponent-king-square"];
	opponentMkingQ [shape=circle, label="opponent-king?"];
	opponentMknightQ [shape=circle, label="opponent-knight?"];
	opponentMmoveMorig [shape=circle, label="opponent-move-orig"];
	opponentMmoveMsquares [shape=circle, label="opponent-move-squares"];
	opponentMmoveMtarget [shape=circle, label="opponent-move-target"];
	opponentMpawnQ [shape=circle, label="opponent-pawn?"];
	opponentMpieces [shape=circle, label="opponent-pieces"];
	opponentMrookQ [shape=circle, label="opponent-rook?"];
	opponentQ [shape=circle, label="opponent?"];
	otherMparty [shape=circle, label="other-party"];
	pawnMdeltaMeval [shape=circle, label="pawn-delta-eval"];
	pawnMeval [shape=circle, label="pawn-eval"];
	pawnMfarMmove [shape=circle, label="pawn-far-move"];
	pawnMnormalMmove [shape=circle, label="pawn-normal-move"];
	pawnMrowMeval [shape=circle, label="pawn-row-eval"];
	pawnMsingleMtargetMmove [shape=circle, label="pawn-single-target-move"];
	pawnMtargetMmove [shape=circle, label="pawn-target-move"];
	Pcheck [shape=circle, label="+check"];
	pCnoname [shape=circle, label="p:noname"];
	pC [shape=circle, label="p:"];
	Pdepth [shape=circle, label="+depth"];
	performMcheckMtest [shape=circle, label="perform-check-test"];
	performMflyMevalMtest [shape=circle, label="perform-fly-eval-test"];
	performMhashMtest [shape=circle, label="perform-hash-test"];
	performMtests [shape=circle, label="perform-tests"];
	PflyMeval [shape=circle, label="+fly-eval"];
	pieceMattr [shape=circle, label="piece-attr"];
	pieceMdeltaMeval [shape=circle, label="piece-delta-eval"];
	pieceMeval [shape=circle, label="piece-eval"];
	pieceMthreateningMthrough [shape=circle, label="piece-threatening-through"];
	pieceMwouldMthreatenQ [shape=circle, label="piece-would-threaten?"];
	positionMking [shape=circle, label="position-king"];
	previousMstring [shape=circle, label="previous-string"];
	principalMmove [shape=circle, label="principal-move"];
	QabortMsearch [shape=circle, label="?abort-search"];
	QcheckMextension [shape=circle, label="?check-extension"];
	QcheckSstaleMmate [shape=circle, label="?check/stale-mate"];
	QdefaultMstrength [shape=circle, label="?default-strength"];
	Qdirection [shape=circle, label="?direction"];
	QevalMmoves [shape=circle, label="?eval-moves"];
	QgetMeval [shape=circle, label="?get-eval"];
	QkingMeval [shape=circle, label="?king-eval"];
	QonMprincipalMvariation [shape=circle, label="?on-principal-variation"];
	QpawnMeval [shape=circle, label="?pawn-eval"];
	QsingleMmove [shape=circle, label="?single-move"];
	QstaleMmate [shape=circle, label="?stale-mate"];
	queenlikeMthreatensMthroughQ [shape=circle, label="queenlike-threatens-through?"];
	queenMeval [shape=circle, label="queen-eval"];
	queenMsingleMtargetMmove [shape=circle, label="queen-single-target-move"];
	queenMtargetMmoves [shape=circle, label="queen-target-moves"];
	queenMthreatensQ [shape=circle, label="queen-threatens?"];
	random [shape=circle, label="random"];
	recurseQ [shape=circle, label="recurse?"];
	rememberMbestmove [shape=circle, label="remember-bestmove"];
	rememberMposition [shape=circle, label="remember-position"];
	rookMsingleMtargetMmove [shape=circle, label="rook-single-target-move"];
	rookMtargetMmoves [shape=circle, label="rook-target-moves"];
	rookMthreatensMthroughQ [shape=circle, label="rook-threatens-through?"];
	rookMthreatensQ [shape=circle, label="rook-threatens?"];
	rookMthreatsMdeltaMeval [shape=circle, label="rook-threats-delta-eval"];
	rootMprincipalMmove [shape=circle, label="root-principal-move"];
	rootMsearch [shape=circle, label="root-search"];
	selectMmovingMpiece [shape=circle, label="select-moving-piece"];
	selfMcheckingMmoveQ [shape=circle, label="self-checking-move?"];
	setMcurrMabsMeval [shape=circle, label="set-curr-abs-eval"];
	setMeval [shape=circle, label="set-eval"];
	setMkingMguardMpawn [shape=circle, label="set-king-guard-pawn"];
	setMmoveMvars [shape=circle, label="set-move-vars"];
	setMmove [shape=circle, label="set-move"];
	setMnormalMmoveMhash [shape=circle, label="set-normal-move-hash"];
	setMparty [shape=circle, label="set-party"];
	setMstrikeMmoveMhash [shape=circle, label="set-strike-move-hash"];
	setMthisMpawnAking [shape=circle, label="set-this-pawn&king"];
	setMthisMpawn [shape=circle, label="set-this-pawn"];
	setupMthinkMlimit [shape=circle, label="setup-think-limit"];
	showMthoughts [shape=circle, label="show-thoughts"];
	simpleMkiller [shape=circle, label="simple-killer"];
	singleMkingMmove [shape=circle, label="single-king-move"];
	singleMkingMstrikeMmove [shape=circle, label="single-king-strike-move"];
	singleMmoveMeval [shape=circle, label="single-move-eval"];
	singleMnonpawnMnormalMmove [shape=circle, label="single-nonpawn-normal-move"];
	singleMnonpawnMstrikeMmove [shape=circle, label="single-nonpawn-strike-move"];
	singleMnormalMmove [shape=circle, label="single-normal-move"];
	singleMpawnMfarMmove [shape=circle, label="single-pawn-far-move"];
	singleMpawnMnormalMmove [shape=circle, label="single-pawn-normal-move"];
	singleMpawnMstrikeMmove [shape=circle, label="single-pawn-strike-move"];
	singleMstrikeMepMmove [shape=circle, label="single-strike-ep-move"];
	singleMstrikeMmove [shape=circle, label="single-strike-move"];
	singleMtransMmove [shape=circle, label="single-trans-move"];
	smallMboard [shape=circle, label="small-board"];
	sortMmovesMbyMweight [shape=circle, label="sort-moves-by-weight"];
	sortMmoves [shape=circle, label="sort-moves"];
	Sp [shape=circle, label=";p"];
	statB [shape=circle, label="stat>"];
	storeMevaluation [shape=circle, label="store-evaluation"];
	straightMmoves [shape=circle, label="straight-moves"];
	straightMpeacefulMmoves [shape=circle, label="straight-peaceful-moves"];
	straightMstrikeMmoves [shape=circle, label="straight-strike-moves"];
	straightMtargetMmove [shape=circle, label="straight-target-move"];
	strength [shape=circle, label="strength"];
	strikeMepMmove [shape=circle, label="strike-ep-move"];
	strikeMmove [shape=circle, label="strike-move"];
	strikeQMmove [shape=circle, label="strike?-move"];
	stringMvariable [shape=circle, label="string-variable"];
	swapMmoves [shape=circle, label="swap-moves"];
	switchMalphaMbeta [shape=circle, label="switch-alpha-beta"];
	test [shape=circle, label="test"];
	threatenedMfromMdirectionQ [shape=circle, label="threatened-from-direction?"];
	threatensQ [shape=circle, label="threatens?"];
	toMmoveMorig [shape=circle, label="to-move-orig"];
	toMmoveMsquares [shape=circle, label="to-move-squares"];
	toMmoveMtarget [shape=circle, label="to-move-target"];
	toMnullMmovesQ [shape=circle, label="to-null-moves?"];
	totalMeval [shape=circle, label="total-eval"];
	ttableMadjustMweight [shape=circle, label="ttable-adjust-weight"];
	ttBeval [shape=circle, label="tt>eval"];
	ttentry [shape=circle, label="ttentry"];
	undoMmove [shape=circle, label="undo-move"];
	undoMstrikeMepMmove [shape=circle, label="undo-strike-ep-move"];
	undoMtransMmove [shape=circle, label="undo-trans-move"];
	uniqueMfileQ [shape=circle, label="unique-file?"];
	uniqueMrankQ [shape=circle, label="unique-rank?"];
	uniqueMtargetQ [shape=circle, label="unique-target?"];
	updateMboard [shape=circle, label="update-board"];
	updateMcurrMcheckQ [shape=circle, label="update-curr-check?"];
	usefulMcaptureQ [shape=circle, label="useful-capture?"];
	useMnullMmovesQ [shape=circle, label="use-null-moves?"];
	weightMmoves [shape=circle, label="weight-moves"];
	whiteMpawnMthreatensQ [shape=circle, label="white-pawn-threatens?"];
}
