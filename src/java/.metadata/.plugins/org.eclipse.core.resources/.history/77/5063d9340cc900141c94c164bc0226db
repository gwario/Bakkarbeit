package callgrapher;

import java.io.File;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import callgrapher.ColonDefinitionParser.OnDefinitionParserEventListener;
import callgrapher.ColonDefinitionParser.OnFileParserEventListener;

public class CallGrapher {

	public static void main(String[] args) throws Exception {
		
		if(args.length < 1)
			bail("Dir missing: java callgrapher.Callgrapher <dir>");
		
		final File dir = new File(args[0]);
		
		if(!dir.isDirectory())
			bail("Not a directory: "+dir);
		else
			print("Working dir: "+dir);
		
		/*
		 * Adjacency matrix, the map's keys are the nodes(words), and the values is the list of words which are called by the key.
		 */
		final Map<String, Set<String>> adjacencyMatrix = new HashMap<String, Set<String>>();
		
		for(File file : dir.listFiles()) {
			
			if(!file.canRead()) {
				
				print("Skipped '"+file.getName()+"'...unable to read!");
				continue;
				
			} else if(!file.getName().endsWith(".fs")) {
				
				print("Skipped '"+file.getName()+"'...no forth file!");
				continue;
				
			} else {
				
				print("Processing '"+file.getName()+"'...");
			}
			
			final ColonDefinitionParser parser = new ColonDefinitionParser(file, true);
			
			parser.setDefinitionParserListener(new OnDefinitionParserEventListener() {
				
				@Override
				public void onWordExecution(String definition, String wordname) {
					
					if(Long.valueOf(wordname))
					
					if(!adjacencyMatrix.containsKey(definition))
						adjacencyMatrix.put(definition, new HashSet<String>());
					adjacencyMatrix.get(definition).add(wordname);
					
					//print("'"+definition+"' executes '"+wordname+"'");
				}
			});
			parser.setFileParserListener(new OnFileParserEventListener() {
				
				@Override
				public void onDefinitionStart(String wordname) {
					adjacencyMatrix.put(wordname, new HashSet<String>());
					//print("Start of '"+wordname+"'");
				}
				
				@Override
				public void onDefinitionEnd(String wordname) {
					//print("End of '"+wordname+"'");
				}
			});
			
			parser.parse();
		}
		
		print(adjacencyMatrix);
	}

	private static void print(Map<String, Set<String>> adjacencyMatrix) {
		
		final StringBuilder sb = new StringBuilder();
		
		for(String word : adjacencyMatrix.keySet()) {
			
			sb.append(word + ":\n");
			
			for(String execution : adjacencyMatrix.get(word)) {
				sb.append("\t\t"+execution+"\n");
			}

			sb.append("\n\n");
		}
		
		System.out.print(sb.toString());
	}
	
	public static final void print(String msg) {
		
		System.out.println(msg);
	}
	
	public static final void bail(String msg) {
		
		System.out.println(msg);
		System.exit(1);
	}
}
