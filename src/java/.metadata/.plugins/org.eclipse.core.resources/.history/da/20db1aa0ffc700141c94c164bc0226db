package callgrapher;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class ColonDefinitionParser {

	/**
	 * The list of system words.
	 */
	public static List<String> systemWords;
	static {
		systemWords = new ArrayList<String>();
		
		systemWords.add("dup");
		systemWords.add("2dup");
		systemWords.add("drop");
		systemWords.add("2drop");
		systemWords.add(">r");
		systemWords.add("r>");
		systemWords.add("rdrop");
		systemWords.add("over");
		systemWords.add("+");
		systemWords.add("-");
		systemWords.add("execute");
		systemWords.add("'");
		systemWords.add("[");
		systemWords.add("]");
		systemWords.add("rot");
		systemWords.add("-rot");
		
	}
	
	private File file;
	private boolean ignoreSystemWords;
	
	private OnWordExecutionListener definitionParserListener;
	private OnDefinitionFoundListener fileParserListener;
	
	public ColonDefinitionParser(File file, boolean ignoreSystemWords) throws Exception {
		
		if(!file.exists() || !file.isFile() || !file.canRead())
			throw new Exception("Failed to parse "+file);
	}
	
	public interface OnWordExecutionListener {
		
		/**
		 * Called when a word is executed within a colon definition.
		 * This method is called with any word 
		 * @param wordname
		 */
		void onWordExecution(String wordname);
		
	}
	
	public interface OnDefinitionFoundListener {
		
		/**
		 * Called when a colon definition starts.
		 * 
		 * @param wordname the word after " : "
		 */
		void onDefinitionStart(String wordname);
		
		/**
		 * Called when a colon definition ends.
		 * Called when " ; " was discovered.
		 * @param wordname the word after the " : "
		 */
		void onDefinitionEnd(String wordname);
	}
}
