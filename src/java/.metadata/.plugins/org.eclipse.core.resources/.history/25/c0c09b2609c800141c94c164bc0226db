package callgrapher;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ColonDefinitionParser {

	/**
	 * The list of system words.
	 */
	public static List<String> systemWords;
	static {
		systemWords = new ArrayList<String>();
		
		systemWords.add("dup");
		systemWords.add("2dup");
		systemWords.add("drop");
		systemWords.add("2drop");
		systemWords.add(">r");
		systemWords.add("r>");
		systemWords.add("rdrop");
		systemWords.add("over");
		systemWords.add("+");
		systemWords.add("-");
		systemWords.add("execute");
		systemWords.add("'");
		systemWords.add("[");
		systemWords.add("]");
		systemWords.add("rot");
		systemWords.add("-rot");
		
	}
	
	private static final String PATTERN_COLONDEFINITION_START = "\\s+:\\s+([^\\s.]+)\\s+";
	private static final String PATTERN_COLONDEFINITION_END = "\\s+;\\s+";
	
	private File file;
	private boolean ignoreSystemWords;
	private Pattern colonDefinitionStartPattern;
	private Pattern colonDefinitionEndPattern;
	
	private OnDefinitionParserEventListener definitionParserListener;
	private OnFileParserEventListener fileParserListener;
	
	private String currentDefinition;
	
	public ColonDefinitionParser(File file, boolean ignoreSystemWords) throws Exception {
		
		if(!file.exists() || !file.isFile() || !file.canRead())
			throw new Exception("Failed to parse "+file);
		
		this.file = file;
		this.ignoreSystemWords = ignoreSystemWords;
		colonDefinitionStartPattern = Pattern.compile(PATTERN_COLONDEFINITION_START);
		colonDefinitionEndPattern = Pattern.compile(PATTERN_COLONDEFINITION_END);
		
		
	}
	
	public void parse() throws FileNotFoundException, IOException {
	
		try(BufferedReader br = new BufferedReader(new FileReader(file))) {
		    for(String line; (line = br.readLine()) != null; ) {
		        
		    	if(line.
		    }
		    // line is not visible here.
		}
	}
	
	public void setDefinitionParserListener(
			OnDefinitionParserEventListener definitionParserListener) {
		this.definitionParserListener = definitionParserListener;
	}

	public void setFileParserListener(OnFileParserEventListener fileParserListener) {
		this.fileParserListener = fileParserListener;
	}
	
	
	
	public interface OnDefinitionParserEventListener {
		
		/**
		 * Called when a word is executed within a colon definition.
		 * This method is called with any word 
		 * @param wordname
		 */
		void onWordExecution(String definition, String wordname);
		
	}
	
	public interface OnFileParserEventListener {
		
		/**
		 * Called when a colon definition starts.
		 * 
		 * @param wordname the word after " : "
		 */
		void onDefinitionStart(String wordname);
		
		/**
		 * Called when a colon definition ends.
		 * Called when " ; " was discovered.
		 * @param wordname the word after the " : "
		 */
		void onDefinitionEnd(String wordname);
	}
}
