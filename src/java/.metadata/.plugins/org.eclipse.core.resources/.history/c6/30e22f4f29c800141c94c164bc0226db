package callgrapher;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;

public class ColonDefinitionParserTest {

	/**
	 * Adds the words to the matrix ignoring the "ignore words" if necessary.
	 * 
	 * @param definitionLine 	must not contain comments, <code>;</code> or anything after a <code>;</code>!
	 * @return 
	 * @return the words which were executed 
	 */
	//static final List<String> getExecutedWords(String definitionLine, boolean ignoreSystemWords, List<String> systemWords)
	
	@Test
	public void test_getExecutedWords_ignoreWordsTrueAndListEmpty_shouldReturnAllWords() {
		
		final String WORDNAME_1 = "testword";
		final String WORDNAME_2 = "sds";
		final String WORDNAME_3 = "sdsss";
		final String WORDNAME_4 = "sffffd";
		final String WORDNAME_5 = "asdasd";

		final String TEXT = " "+WORDNAME_1+" "+WORDNAME_2+"  "+WORDNAME_3+" "+WORDNAME_4+"    "+WORDNAME_5;
		
		final boolean IGNORE_WORDS = true;
		final List<String> IGNORE_WORDS_LIST = new ArrayList<String>();
		
		List<String> actualWords = ColonDefinitionParser.getExecutedWords(TEXT, IGNORE_WORDS, IGNORE_WORDS_LIST);
		
		assertEquals(5, actualWords.size());
		assertTrue(actualWords.contains(WORDNAME_1));
		assertTrue(actualWords.contains(WORDNAME_2));
		assertTrue(actualWords.contains(WORDNAME_3));
		assertTrue(actualWords.contains(WORDNAME_4));
		assertTrue(actualWords.contains(WORDNAME_5));
	}
	
	@Test
	public void test_getExecutedWords_ignoreWordsTrueAndListWithWords_shouldReturnAllWords() {
		
		final String WORDNAME_1 = "testword";
		final String WORDNAME_2 = "sds";
		final String WORDNAME_3 = "sdsss";
		final String WORDNAME_4 = "sffffd";
		final String WORDNAME_5 = "asdasd";

		final String TEXT = " "+WORDNAME_1+" "+WORDNAME_2+"  "+WORDNAME_3+" "+WORDNAME_4+"    "+WORDNAME_5;
		
		final boolean IGNORE_WORDS = true;
		final List<String> IGNORE_WORDS_LIST = new ArrayList<String>();
		
		List<String> actualWords = ColonDefinitionParser.getExecutedWords(TEXT, IGNORE_WORDS, IGNORE_WORDS_LIST);
		
		assertEquals(5, actualWords.size());
		assertTrue(actualWords.contains(WORDNAME_1));
		assertTrue(actualWords.contains(WORDNAME_2));
		assertTrue(actualWords.contains(WORDNAME_3));
		assertTrue(actualWords.contains(WORDNAME_4));
		assertTrue(actualWords.contains(WORDNAME_5));
	}
	
	/**
	 * Removes all the commends from the text.
	 * @param text
	 * @return a string with out comments
	 */
	//static final String stripComments(String text) {
	
	@Test
	public void test_stripComments_1() {
		
		final String WORDNAME = "testword";
		final String TEXT = " : "+WORDNAME+" ( sds sd sd -- sd sd ) sdsd sd s ; \\ asdasd";
		
		assertEquals(" : "+WORDNAME+"  sdsd sd s ; ", ColonDefinitionParser.stripComments(TEXT));
	}
	
	@Test
	public void test_stripComments_2() {
		
		final String WORDNAME = "testword";
		final String TEXT = " sasd "+WORDNAME+" ( sds sd ) sdsd sd s ; \\ asdasd";
		
		assertEquals(" sasd "+WORDNAME+"  sdsd sd s ; ", ColonDefinitionParser.stripComments(TEXT));
	}
	
	@Test
	public void test_stripComments_3() {
		
		final String WORDNAME = "testword";
		final String TEXT = " sasd "+WORDNAME+" \\ sdsd sd s ; ";
		
		assertEquals(" sasd "+WORDNAME+" ", ColonDefinitionParser.stripComments(TEXT));
	}
	
	@Test
	public void test_stripComments_4() {
		
		final String WORDNAME = "testword";
		final String TEXT = "   :   ( \\ ) "+WORDNAME+" sdsd : \\ ( ) ; sdsd ";
		
		assertEquals("   :   ", ColonDefinitionParser.stripComments(TEXT));
	}
	
	/**
	 * Strips the " :  <wordname>    " part of the text
	 * @param text
	 * @param wordname
	 * @return
	 */
	//static final String stripDefinitionPart(String text, String wordname) {
	
	@Test
	public void test_stripDefinitionPart_1() {
		
		final String WORDNAME = "testword";
		final String TEXT = "   :     "+WORDNAME+" sdsd ; sdsd ";
		
		assertEquals(" sdsd ; sdsd ", ColonDefinitionParser.stripDefinitionPart(TEXT, WORDNAME));
	}
	
	@Test
	public void test_stripDefinitionPart_2() {
		
		final String WORDNAME = "testword";
		final String TEXT = "   :     "+WORDNAME+" testword dsd ";
		
		assertEquals(" testword dsd ", ColonDefinitionParser.stripDefinitionPart(TEXT, WORDNAME));
	}
	
	@Test
	public void test_stripDefinitionPart_3() {
		
		final String WORDNAME = "testword";
		final String TEXT = ": "+WORDNAME+" testw!34rd ddd_DS%sd ";
		
		assertEquals(" testw!34rd ddd_DS%sd ", ColonDefinitionParser.stripDefinitionPart(TEXT, WORDNAME));
	}
	
	/**
	 * Removes everything after and including the semicolon.
	 * @param text
	 * @return the string without the 
	 */
	//static final String stripAfterAndIncludingSemicolon(String text) {

	@Test
	public void test_stripAfterAndIncludingSemicolon_1() {
		
		final String TEXT = " sd ssd s dsdsd ; sdsd ";
		
		assertEquals(" sd ssd s dsdsd ", ColonDefinitionParser.stripAfterAndIncludingSemicolon(TEXT));
	}
	
	@Test
	public void test_stripAfterAndIncludingSemicolon_2() {
		
		final String TEXT = " ; ";
		
		assertEquals(" ", ColonDefinitionParser.stripAfterAndIncludingSemicolon(TEXT));
	}
	
	@Test
	public void test_stripAfterAndIncludingSemicolon_3() {
		
		final String TEXT = " ; ssdsd ";
		
		assertEquals(" ", ColonDefinitionParser.stripAfterAndIncludingSemicolon(TEXT));
	}
	
	/**
	 * @param word
	 * @return true if word is to be ignored
	 */
	//static final boolean isIgnoreWord(String word, List<String> ignoreWords) {

	@Test
	public void test_isIgnoreWord_wordInList_shouldReturnTrue() {
		
		final String WORD = "sdsd";
		@SuppressWarnings("serial")
		final List<String> IGNORE_WORDS = new ArrayList<String>() {{ this.add(WORD); this.add("dfdsf"); }};
		
		assertTrue(ColonDefinitionParser.isIgnoreWord(WORD, IGNORE_WORDS));
	}
	
	@Test
	public void test_isIgnoreWord_listEmpty_shouldReturnFalse() {
		
		final String WORD = "sdsd";
		final List<String> IGNORE_WORDS = new ArrayList<String>();
		
		assertFalse(ColonDefinitionParser.isIgnoreWord(WORD, IGNORE_WORDS));
	}
	
	@Test
	public void test_isIgnoreWord_wordNotInList_shouldReturnFalse() {
		
		final String WORD = "sdsd";
		@SuppressWarnings("serial")
		final List<String> IGNORE_WORDS = new ArrayList<String>() {{ this.add("ssssssss"); this.add("dfdsf"); }};
		
		assertFalse(ColonDefinitionParser.isIgnoreWord(WORD, IGNORE_WORDS));
	}
	
}
