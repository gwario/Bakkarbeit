package callgrapher;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;


public class ColonDefinitionParser {

	private static boolean DEBUG = false;
	
	/**
	 * The list of system words.
	 */
	private static List<String> systemWords = new ArrayList<String>();
	
	private static void ignoreSystemWord(String systemWord) {
		
		systemWords.add(systemWord.trim().toLowerCase());
	}
	static {
		/*
		 * Default system words from ans forth
		 */
		ignoreSystemWord("dup");
		ignoreSystemWord("2dup");
		ignoreSystemWord("drop");
		ignoreSystemWord("swap");
		ignoreSystemWord("2drop");
		ignoreSystemWord(">r");
		ignoreSystemWord("r>");
		ignoreSystemWord("rdrop");
		ignoreSystemWord("over");
		ignoreSystemWord("+");
		ignoreSystemWord("-");
		ignoreSystemWord("execute");
		ignoreSystemWord("'");
		ignoreSystemWord("[");
		ignoreSystemWord("]");
		ignoreSystemWord("rot");
		ignoreSystemWord("-rot");
		ignoreSystemWord("if");
		ignoreSystemWord("endif");
		ignoreSystemWord("else");
		ignoreSystemWord("i");
		ignoreSystemWord("@");
		ignoreSystemWord("!");
		ignoreSystemWord("then");
		ignoreSystemWord("or");
		ignoreSystemWord("and");
		ignoreSystemWord("count");
		ignoreSystemWord("type");
		ignoreSystemWord(".\"");
		ignoreSystemWord("\"");
		ignoreSystemWord(".");
		ignoreSystemWord("?do");
		ignoreSystemWord("invert");
		ignoreSystemWord("key?");
		ignoreSystemWord("parse");
		ignoreSystemWord("set-order");
		ignoreSystemWord("postpone");
		ignoreSystemWord("=");
		ignoreSystemWord("0");
		ignoreSystemWord("1");
		ignoreSystemWord("100");
		ignoreSystemWord("?do");
		ignoreSystemWord("to");
		ignoreSystemWord("+do");
		ignoreSystemWord("-do");
		ignoreSystemWord("loop");
		ignoreSystemWord("begin");
		ignoreSystemWord("again");
		ignoreSystemWord("2");
		ignoreSystemWord("3");
		ignoreSystemWord("4");
		ignoreSystemWord("5");
		ignoreSystemWord("6");
		ignoreSystemWord("7");
		ignoreSystemWord("8");
		ignoreSystemWord("9");
		ignoreSystemWord("search-wordlist");
		ignoreSystemWord("1-");
		ignoreSystemWord("2/");
		ignoreSystemWord("0<>");
		ignoreSystemWord("tuck");
		ignoreSystemWord("21");
		ignoreSystemWord("12");
		ignoreSystemWord("19");
		ignoreSystemWord("abs");
		ignoreSystemWord("cells");
		ignoreSystemWord("allot");
		ignoreSystemWord("create");
		ignoreSystemWord("does>");
		ignoreSystemWord("<>");
		ignoreSystemWord("nip");
		ignoreSystemWord("-1");
		ignoreSystemWord("0=");
		ignoreSystemWord("1+");
		ignoreSystemWord("2*");
		ignoreSystemWord("r@");
		ignoreSystemWord("?dup");
		ignoreSystemWord("here");
		ignoreSystemWord("[']");
		ignoreSystemWord("literal");
		ignoreSystemWord("immediate");
		ignoreSystemWord("sliteral");
		ignoreSystemWord("cr");
		ignoreSystemWord("compare");
		ignoreSystemWord("repeat");
		ignoreSystemWord("");
		ignoreSystemWord("");
	}
	
	private List<String> ignoreWords = new ArrayList<String>();
	/**
	 * Only words ignored before {@link ColonDefinitionParser#parse()} was called are ignored.
	 * @param word	the word to be ignored.
	 */
	public void ignoreWord(String word) {
		
		ignoreWords.add(word.trim().toLowerCase());
	}
	
	static final String PATTERN_WORD_SEPARATOR = "\\s+";
	
	private File file;
	private boolean ignoreSystemWords;
	
	private OnDefinitionParserEventListener definitionParserListener;
	private OnFileParserEventListener fileParserListener;
	
	private boolean inColonDefinition = false;
	private String currentDefinition;
	private boolean nextWordIsDefinitionName = false;
	
	private boolean inBlockComment = false;
	
	private boolean inString = false;
	
	public ColonDefinitionParser(File file, boolean ignoreSystemWords) throws Exception {
		
		if(!file.exists() || !file.isFile() || !file.canRead())
			throw new Exception("Failed to parse "+file);
		
		this.file = file;
		this.ignoreSystemWords = ignoreSystemWords;
		this.ignoreWords.addAll(systemWords);
	}
	
	public void parse() throws Exception {
	
		try(BufferedReader br = new BufferedReader(new FileReader(file))) {
			
		    for(String line; (line = br.readLine()) != null; ) {
		        
		    	String[] words = getWords(line);
		    	
		    	for(String word : words) {
		    		
		    		if(word.isEmpty())
		    			continue;
		    		
		    		word = word.trim().toLowerCase();
		    		
			    	boolean isCommentStart = word.equalsIgnoreCase("(");
			    	boolean isCommentEnd = word.equalsIgnoreCase(")");
			    	boolean isLineComment = word.equalsIgnoreCase("\\");
			    	boolean isDefinitionStart = word.equalsIgnoreCase(":");
			    	boolean isDefinitionEnd = word.equalsIgnoreCase(";");
			    	boolean isStringStart = word.equalsIgnoreCase(".\"") || word.equalsIgnoreCase("C\"") || word.equalsIgnoreCase("S\"");
			    	boolean isStringEnd = word.endsWith("\"");
			    	
			    	if(inString) {
			    		
			    		if(isStringEnd) {
			    			
			    			if(DEBUG)
			    				System.out.println("End of string detected!");
			    			inString = false;
			    			continue;
			    			
			    		} else {
			    			
			    			if(DEBUG)
			    				System.out.println("Skipping "+word+" (in string)...");
			    			continue;
			    		}
			    		
			    	} else if(inBlockComment) {
			    		
			    		if(isCommentEnd) {
			    			
			    			if(DEBUG)
			    				System.out.println("End of block comment detected!");
				    		inBlockComment = false;
				    		continue;
				    		
			    		} else if(isLineComment) {
			    			
			    			if(DEBUG)
			    				System.out.println("Line comment detected! Skipping until end of line...");
			    			break;
			    			
			    		} else {
			    			
			    			if(DEBUG)
			    				System.out.println("Skipping "+word+" (in block comment)...");
			    			continue;
			    		}
			    		
			    	} else {
			    		
			    		if(inColonDefinition) {
			    		
			    			if(nextWordIsDefinitionName) {
			    				
			    				if(DEBUG)
			    					System.out.println("Definition name('"+word+"') detected!");
			    				nextWordIsDefinitionName = false;
			    				currentDefinition = word;
			    				fileParserListener.onDefinitionStart(word);
			    				continue;
			    				
			    			} else if(isDefinitionEnd) {
			    				
			    				if(DEBUG)
			    					System.out.println("End of colon definition detected!");
					    		inColonDefinition = false;
					    		fileParserListener.onDefinitionEnd(currentDefinition);
					    		currentDefinition = null;
					    		continue;
					    		
			    			} else if(isCommentStart) {
			    				
			    				if(DEBUG)
			    					System.out.println("Start of block comment detected!");
				    			inBlockComment = true;
				    			continue;
				    			
			    			} else if(isLineComment) {
			    				
			    				if(DEBUG)
			    					System.out.println("Line comment detected! Skipping until end of line...");
				    			break;
				    			
			    			} else if(isStringStart) {
				    			
				    			if(DEBUG)
				    				System.out.println("Start of string detected!");
				    			inString = true;
				    			continue;
				    			
				    		} else {
			    				
			    				if(ignoreSystemWords && isIgnoreWord(word, ignoreWords)) {
			    					
			    					if(DEBUG)
			    						System.out.println("Skipping "+word+" (ignore word)...");
			    					continue;
			    					
			    				} else {
			    					
			    					if(DEBUG)
			    						System.out.println("Word execution detected! word: '"+word+"'");
			    					definitionParserListener.onWordExecution(currentDefinition, word);
			    					continue;
			    				}
			    			}

				    	} else {
				    		
				    		if(isDefinitionStart) {
				    			
				    			if(DEBUG)
				    				System.out.println("Start of colon definition detected!");
				    			inColonDefinition = true;
				    			nextWordIsDefinitionName = true;
					    		continue;
					    		
				    		} else if(isCommentStart) {
				    			
				    			if(DEBUG)
				    				System.out.println("Start of block comment detected!");
				    			inBlockComment = true;
				    			continue;
				    		
				    		} else if(isLineComment) {
				    			
				    			if(DEBUG)
				    				System.out.println("Line comment detected! Skipping until end of line...");
				    			break;
				    			
				    		} else {
				    			
				    			if(DEBUG)
				    				System.out.println("Skipping normal word('"+word+"')...");
				    			continue;
				    		}
				    	}
			    	}
		    	} //word loop end
		    } //file end
		}
	}
	
	/**
	 * @param line
	 * @return an array of words
	 */
	static String[] getWords(String line) {
		
		final String[] words = line.split(PATTERN_WORD_SEPARATOR);
		
		if(words.length == 1 && words[0].isEmpty())
			return new String[0];
		else
			return words;
	}

	/**
	 * @param word
	 * @return true if word is to be ignored
	 */
	static final boolean isIgnoreWord(String word, List<String> ignoreWords) {
		
		return ignoreWords.contains(word);
	}
	

	public void setDefinitionParserListener(
			OnDefinitionParserEventListener definitionParserListener) {
		this.definitionParserListener = definitionParserListener;
	}

	public void setFileParserListener(OnFileParserEventListener fileParserListener) {
		this.fileParserListener = fileParserListener;
	}
	
	
	public interface OnDefinitionParserEventListener {
		
		/**
		 * Called when a word is executed within a colon definition.
		 * This method is called with any word 
		 * @param wordname
		 */
		void onWordExecution(String definition, String wordname);
		
	}
	
	public interface OnFileParserEventListener {
		
		/**
		 * Called when a colon definition starts.
		 * 
		 * @param wordname the word after " : "
		 */
		void onDefinitionStart(String wordname);
		
		/**
		 * Called when a colon definition ends.
		 * Called when " ; " was discovered.
		 * @param wordname the word after the " : "
		 */
		void onDefinitionEnd(String wordname);
	}
	
}
